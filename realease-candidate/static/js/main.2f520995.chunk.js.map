{"version":3,"sources":["dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/davitVersion03/DavitVersionMigrator03.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","dataAccess/access/to/ChainDecisionTO.ts","components/organisms/dndBox/DnDBox.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx","assets/exxcellent_logo_200.png"],"names":["DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","sequenceStates","chainStates","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","DavitVersionMigrator02","DavitVersionMigrator03","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","sequenceMockId","dataId","dataRelationExists","some","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceStateId","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllSequenceStates","saveSequenceState","deleteSequenceState","findSequenceState","findAllChainStates","saveChainState","deleteChainState","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","chainDecisions","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","getstate","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","ChainDecisionTO","DnDBoxType","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitBackButton","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","event","target","DavitAddButton","DavitEditButton","DavitShowMoreButton","show","showMore","setShowMore","tiny","faAngleRight","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","addEventListener","removeEventListener","useEnterHook","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","FormLine","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","ControlPanel","OptionField","divider","toUpperCase","ControlPanelEditChain","useControlPanelEditChainViewModel","changeName","createAnother","editOrAddChainDecision","saveChain","editOrAddChainLink","isCreateAnother","setIsCreateAnother","copyChainToEdit","newMode","validateInput","updateSequence","decisionToEdit","chainLinkToEdit","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanelEditSequence","useControlPanelEditSequenceViewModel","deleteSequence","saveSequence","editOrAddSequenceStep","editOrAddDecision","saveNote","selectedSequence","copySequenceToEdit","stepToEdit","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","center","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","useChainDecisionViewModel","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","InitDataTO","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","EditDataSetupModal","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","EditDecisionModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","isActive","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","zIndex","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.2f520995.chunk.js","sourcesContent":["import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic/dropdowns/InstanceDropDown\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\nimport { StoreTO02 } from \"./to/StoreTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO02 {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO02 } from \"../davitVersion02/to/StoreTO02\";\n\nexport const DavitVersionMigrator03 = {\n    migrate(dataStoreObject: StoreTO02): StoreTO {\n        console.info(\"start migration to version 0.3\");\n        const actorZoom: number = dataStoreObject.actorZoom;\n        const dataZoom: number = dataStoreObject.dataZoom;\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: dataStoreObject.decisions as DecisionTO[],\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n            sequenceStates: [],\n            chainStates: [],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\nimport { DavitVersionMigrator03 } from \"./davitVersion03/DavitVersionMigrator03\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(\n                        DavitVersionMigrator01.migrate(dataStoreObject),\n                    )\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(dataStoreObject));\n                break;\n            case 0.2:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceMockConstraintCheck(sequenceMockId: number, dataStore: DataStoreCTO) {\n        // TODO: check if mock is part of an decision.\n    },\n\n    deleteChainMockConstraintCheck(sequenceMockId: number, dataStore: DataStoreCTO) {\n        // TODO: check if mock is part of an decision.\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk !== chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainMockConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk !== sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceMockConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        return DataSetupRepository.save(dataSetup);\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ----------------------------------------------- Init Data --------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        return InitDataRepository.save(initData);\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"SequenceState\");\n        return SequenceStateRepository.delete(sequenceState);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.delete(chainState);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceState));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainState));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n};\n\n// ----------------------------------------------- SEARCH --------------------------------------------------\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {stepId: \"root\", actorDatas: result.actorDatas, type: \"INIT\", errors: result.errors};\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[]): GoToChain => {\n    // const filteredCompData: ActorData[] = actorDatas.filter((actorData) => actorData.actorFk === chainDecision.actorFk);\n    let goTo: GoToChain | undefined;\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditInitData } from \"./thunks/InitDataThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set initData to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getstate) => {\n    if (mode !== getstate().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    console.info(\"parsing data: \", data);\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps extends DavitButtonProps {\n    show?: boolean\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show} = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if (show !== undefined) {\n            setShowMore(show);\n        }\n    }, [show]);\n\n    const onToggle = () => {\n        setShowMore(!showMore);\n        onClick();\n    };\n\n    return <DavitIconButton onClick={onToggle}\n                            size={ElementSize.tiny}\n                            iconName={showMore ? faAngleDown : faAngleRight}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium\"} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport interface FormLineProps {\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-horizontal-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { EditChain } from \"../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton } from \"../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ChainDecisionDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDecisionDropDown\";\nimport { ChainLinkDropDownButton } from \"../../../../../../atomic/dropdowns/ChainLinkDropDown\";\nimport { DavitTextInput } from \"../../../../../../atomic/textinput/DavitTextInput\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n    } = useControlPanelEditChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../../../../../../../dataAccess/access/to/GroupTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport { ActorDropDownLabel } from \"../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { ChainDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDropDown\";\nimport { DataLabelDropDown } from \"../../../../../../atomic/dropdowns/DataDropDown\";\nimport { DataSetupLabelDropDown } from \"../../../../../../atomic/dropdowns/DataSetupDropDown\";\nimport { RelationLabelDropDown } from \"../../../../../../atomic/dropdowns/RelationDropDown\";\nimport { SequenceLabelDropDown } from \"../../../../../../atomic/dropdowns/SequenceDropDown\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Data - Setup\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupLabelDropDown onSelect={editOrAddDataSetup}\n                                                             label=\"Data-Setup\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequence } from \"../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n    } = useControlPanelEditSequenceViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    )\n        ;\n};\n\nconst useControlPanelEditSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit) && text !== \"\") {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormLine>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormLine>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        // saveDecision,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*// TODO: Condition list*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataSetupViewModel } from \"../viewmodels/DataSetupViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Data Setup Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataSetupCTO } from \"../../../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditDataSetup } from \"../../../../../../../../slices/thunks/DataSetupThunks\";\nimport { EditInitData } from \"../../../../../../../../slices/thunks/InitDataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit dataSetup without dataSetupToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== \"\") {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + \"-copy\";\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== \"\") {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataSetupToEdit?.dataSetup.name || \"\"),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : \"\",\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataSetupForm } from \"../forms/DataSetupForm\";\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n            <FormDivider />\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitEditButton } from \"../../../../../../../atomic/buttons/DavitEditButton\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic/buttons/DavitShowMoreButton\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{textAlign: \"end\"}}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={\"border\"}\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr>\n                    <td style={{textAlign: \"center\"}}>Action</td>\n                    <td style={{textAlign: \"end\"}}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel><h3>Actions</h3></FormLabel>\n                    <DavitShowMoreButton show={showActions}\n                                         onClick={() => setShowActions(!showActions)}\n                    />\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>Select type of the next element</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <GoToOptionDropDown onSelect={handleType}\n                                        value={goTo ? goTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={setGoToTypeStep}\n                                value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                exclude={stepId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={createGoToStep} />\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={setGoToTypeDecision}\n                                value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDataSetupModal } from \"./fragments/modals/EditDataSetupModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { ChainDropDown, DataSetupDropDown, SequenceDropDown } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Data - Setup\">\n                <DataSetupDropDown\n                    onSelect={selectDataSetup}\n                    placeholder=\"Select Data Setup ...\"\n                    value={currentDataSetup}\n                />\n            </OptionField>\n\n            <OptionField label=\"SEQUENCE\">\n                <SequenceDropDown onSelect={selectSequence}\n                                  value={currentSequence}\n                />\n            </OptionField>\n\n            <OptionField label=\"CHAIN\"\n                         divider={true}\n            >\n                <ChainDropDown onSelect={selectChain}\n                               value={currentChain}\n                />\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={true}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return \" * \" + sequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                \" * \" +\n                sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepIndex)?.sequenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{display: \"flex\"}}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\nimport { FlowChartlabel } from \"./fragments/FlowChartlabel\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() && <>\n                    {/*TODO: try to move this in to a css class.*/}\n                    <div style={{display: \"flex\", position: \"absolute\", zIndex: 99, width: \"47vw\"}}>\n                        {chain && (\n                            <TabGroupFragment label=\"Mode\"\n                                              style={{backgroundColor: \"var(--background-color-header)\"}}\n                            >\n                                <TabFragment label=\"Chain\"\n                                             isActive={showChain}\n                                             onClick={() => setShowChain(true)}\n                                />\n                                <TabFragment label=\"Sequence\"\n                                             isActive={!showChain}\n                                             onClick={() => setShowChain(false)}\n                                />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{marginLeft: \"auto\"}}>\n                            <FlowChartlabel label=\"CHAIN:\"\n                                            text={chainName}\n                            />\n                            <FlowChartlabel label=\"SEQU.:\"\n                                            text={sequenceName}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Errors\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ACTION-ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";"],"sourceRoot":""}