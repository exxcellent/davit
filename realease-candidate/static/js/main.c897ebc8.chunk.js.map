{"version":3,"sources":["icons/logo200.png","dataAccess/access/cto/DataStoreCTO.ts","app/DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainTO.ts","dataAccess/access/cto/ChainCTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/common/fragments/DavitNotification.tsx","components/common/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/common/fragments/ErrorNotification.tsx","components/common/fragments/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","dataAccess/access/to/ActorTO.ts","slices/EditSlice.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","components/common/fragments/DnDBox.tsx","dataAccess/access/to/ChainDecisionTO.ts","components/common/fragments/buttons/DavitButton.tsx","components/common/fragments/buttons/DavitBackButton.tsx","components/common/fragments/buttons/DavitDeleteButton.tsx","components/common/fragments/DavitLabelTextfield.tsx","components/common/fragments/dropdowns/DavitDropDown.tsx","components/common/fragments/dropdowns/ChainDecisionDropDown.tsx","components/common/fragments/dropdowns/ChainLinkDropDown.tsx","components/controllPanel/presentation/fragments/edit/common/OptionField.tsx","components/common/fragments/buttons/DavitAddButton.tsx","components/common/fragments/AddOrEdit.tsx","components/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/common/fragments/dropdowns/ColorDropDown.tsx","components/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditGroup.tsx","components/common/fragments/dropdowns/ActorDropDown.tsx","components/common/fragments/dropdowns/DataDropDown.tsx","components/common/fragments/dropdowns/DataSetupDropDown.tsx","components/common/fragments/dropdowns/RelationDropDown.tsx","components/common/fragments/dropdowns/SequenceDropDown.tsx","components/common/fragments/dropdowns/ChainDropDown.tsx","components/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","components/common/fragments/dropdowns/DecisionDropDown.tsx","components/common/fragments/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/common/fragments/forms/FormHeader.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/common/fragments/forms/FormBody.tsx","components/common/fragments/forms/FormFooter.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/common/fragments/forms/DavitNoteForm.tsx","components/common/fragments/modals/DavitModal.tsx","components/common/fragments/modals/DavitNoteModal.tsx","components/common/fragments/buttons/DavitCommentButton.tsx","components/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","components/common/fragments/forms/Form.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/common/fragments/DnDWrapper.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/common/fragments/modals/DavitDraggableModal.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/common/fragments/dropdowns/InstanceDropDown.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/common/fragments/dropdowns/ActionTypeDropDown.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/common/fragments/dropdowns/GoToOptionDropDown.tsx","components/common/fragments/buttons/DavitRootButton.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/common/fragments/dropdowns/ActionButtonDropDown.tsx","components/common/fragments/buttons/DavitShowMoreButton.tsx","components/common/fragments/buttons/DavitEditButton.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/common/fragments/dropdowns/GoToChainOptionDropDown.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/common/fragments/forms/DavitDownloadForm.tsx","components/common/fragments/modals/DavitDownlaodModal.tsx","components/common/fragments/buttons/DavitDownloadButton.tsx","components/common/fragments/buttons/DavitUploadButton.tsx","components/controllPanel/presentation/fragments/file/fragments/ControlPanelFileOptions.tsx","components/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/common/fragments/CenteredFlex.tsx","components/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/controllPanel/presentation/fragments/view/ControllPanelViewOptions.tsx","components/controllPanel/presentation/ControlPanelController.tsx","viewDataTypes/ViewFragment.tsx","components/common/fragments/buttons/DavitCardButton.tsx","components/common/fragments/DavitCard.tsx","components/common/fragments/ViewPlaceholder.tsx","components/metaActorModel/ActorModelController.tsx","components/metaDataModel/DataModelController.tsx","components/tableModel/fragments/TabFragment.tsx","components/tableModel/fragments/TabGroupFragment.tsx","components/flowChartModel/FlowChartlabel.tsx","components/flowChartModel/FlowChartController.tsx","components/common/fragments/buttons/DavitTableButton.tsx","components/common/fragments/DavitTable.tsx","components/tableModel/fragments/TabPanel.tsx","components/tableModel/tables/calculated/CalcErrorActions.tsx","components/tableModel/tables/calculated/CalcLink.ts","components/tableModel/tables/calculated/CalcSequence.tsx","components/tableModel/tables/model/ModelChain.ts","components/tableModel/util/TableUtil.ts","components/tableModel/tables/model/ModelChainDecision.ts","components/tableModel/tables/model/ModelChainLink.ts","components/tableModel/tables/model/ModelDataSetup.ts","components/tableModel/tables/model/ModelSequence.ts","components/tableModel/tables/model/ModelSequenceCondition.ts","components/tableModel/tables/model/ModelSequenceDecision.ts","components/tableModel/tables/model/ModelSequenceStep.ts","components/tableModel/tables/model/ModelSequenceStepAction.ts","components/tableModel/presentation/TableModelController.tsx","components/common/fragments/buttons/DavitSidePanelButton.tsx","components/sidePanel/SidePanelController.tsx","app/Davit.tsx","app/store.ts","utils/StorageListener.ts","app/middlewares/StateSync.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","DavitVersionMigrator02","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","dataId","dataRelationExists","some","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","abstractTOs","Math","max","abstract","Infinity","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainTO","ChainCTO","chain","links","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chainTO","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","findSequenceTO","saveSequenceCTO","squenceStepTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","chainId","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainlink","findAllChainLinks","deleteChainTO","chainlink","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainCTO","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","chainDecisions","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","state","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","getIconColor","className","style","borderColor","paddingLeft","paddingRight","margin","onClick","icon","getNotificationIcon","size","color","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","addDataFilters","removeDataFilters","ActorTO","DesignTO","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","DnDBoxType","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","getstate","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","ChainDecisionTO","DavitButton","disable","iconName","iconLeft","disabled","DavitBackButton","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitLabelTextfield","placeholder","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","display","ref","onChange","event","target","DavitDropDown","dropdownItems","onSelect","clearable","others","Dropdown","selection","selectOnBlur","scrolling","search","options","toLowerCase","localeCompare","parsDataToDavitDropDownItemProps","DavitIconDropDown","trigger","Fragment","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","OptionField","children","divider","toUpperCase","DavitAddButton","AddOrEdit","addCallBack","dropDown","borderTopRightRadius","borderBottomRightRadius","ControlPanel","ControlPanelEditChain","useControlPanelEditChainViewModel","changeName","createAnother","editOrAddChainDecision","saveChain","editOrAddChainLink","isCreateAnother","setIsCreateAnother","copyChainToEdit","newMode","validateInput","updateSequence","decisionToEdit","chainLinkToEdit","ColorDropDown","colors","colorToOption","ControlPanelEditGroup","useControlPanelEditGroupViewModel","getGroupColor","setGroupColor","updateGroup","groupToEdit","copyGroupToEdit","copyGroup","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownButton","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataDropDownButton","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupDropDownButton","RelationDropDownButton","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceDropDownButton","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","DecisionDropDownButton","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","StepDropDownButton","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","addEventListener","removeEventListener","useEnterHook","FormHeader","FormLine","FormBody","FormFooter","FormDivider","DavitNoteForm","subHeader","onCancel","onSubmit","textAreRef","noteText","setNoteText","e","DavitModal","DavitNoteModal","closeCallback","saveTextCallback","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","ControlPanelEditSequence","useControlPanelEditSequenceViewModel","deleteSequence","saveSequence","editOrAddSequenceStep","editOrAddDecision","saveNote","selectedSequence","copySequenceToEdit","stepToEdit","Form","ActorForm","setKey","actorToEdit","deleteActor","saveActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","EditActorModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","textAlign","justifyContent","newName","EditDataModal","FormLabel","align","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","setData","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","center","EditDataRelationModal","InitDataTO","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","minHeight","maxHeight","dataAndInstance","EditDataSetupModal","ActionTypeDropDown","getActionTypeLabel","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","setActor","sending","copyActionToEdit","setAction","newActionType","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","setTriggerLabel","triggerLabel","ActionForm","EditActionModal","GoToOptionDropDown","goToToOption","gotoType","DavitRootButton","isRoot","DecisionForm","updateDecision","newDecision","saveGoToType","copyDecisionToEdit","checkGoTos","copyGoto","copyConditionToEdit","validStep","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToStep","createGoToDecision","goToDecision","copyStepToEdit","createCondition","decId","deleteCondition","conditionId","saveCondition","conditionToSave","filteredConditions","saveAndGoBack","useDecisionViewModel","copyCondition","gt","EditDecisionModal","getActorName","useActionDropDownViewModel","getOptionText","actionToOption","selectAction","DavitShowMoreButton","show","showMore","setShowMore","faAngleRight","DavitEditButton","StepForm","currentGoTo","setCurrentGoTo","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","EditStepModal","GoToChainOptionDropDown","compact","ChainLinkForm","copyChainlink","copyChainLink","saveChainLink","deleteChainLink","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","goToLink","chainConditions","goBack","useChainDecisionViewModel","EditChainDecisionModal","ControlPanelEditController","currentMode","getViewByMode","DavitDownloadForm","setProjectName","paddingTop","DavitDownloadModal","DavitDownloadButton","faDownload","DavitUploadButton","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","ControlPanelFileOptions","deleteLocalStorage","useFileOptionModelView","ControlPanelFileController","ControlPanelTabController","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","CenteredFlex","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","borderRadius","padding","faArrowRight","faFastForward","borderTopLeftRadius","borderBottomLeftRadius","ControlPanelViewOptions","useControllPanelSequenceOptionsViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCardButton","isActive","DavitCard","initName","initWidth","initHeigth","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","fontSize","alignItems","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ViewPlaceholder","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","mapInitDataToActorData","actorDatasFromDataSetupView","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDatasFromCompDatas","actDat","mapActorDataToActorData","actorDataFromAction","actorDataFromCompData","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","zIndex","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTableButton","DavitTable","bodyData","addFunction","mapValue","createButton","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","DavitSidePanelButton","active","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","bottom","src","logo","alt","setModeToTab","home","Davit","exact","path","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c897ebc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo200.d20fbb57.png\";","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../app/DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n    ) {}\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.2;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DEFAULT_PROJECT_NAME } from \"../../../app/DavitConstants\";\nimport { DataAndInstanceId } from \"../../../components/common/fragments/dropdowns/InstanceDropDown\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\nimport { ConditionTO } from '../../access/to/ConditionTO';\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return { id: instance.id, name: instance.name };\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {id: -1, actorFk: actorFk, decisionFk: decisionFk, dataFk: dataInstanceId.dataFk, instanceFk: dataInstanceId.instanceId};\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../app/DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../app/DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator02.migrate(\n                    DavitVersionMigrator01.migrate(dataStoreObject),\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator02.migrate(dataStoreObject);\n        }\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../app/DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from './access/cto/DataStoreCTO';\nimport { ActionTO } from './access/to/ActionTO';\nimport { DecisionTO } from './access/to/DecisionTO';\nimport { SequenceStepTO } from './access/to/SequenceStepTO';\nimport { GoToTypes } from './access/types/GoToType';\n\nexport const ConstraintsHelper = {\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = '';\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : '');\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : '');\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : '');\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = { ...actor };\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = { ...group };\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = { ...design };\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = { ...geometricalData };\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = { ...position };\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return { geometricalData: geometricalData!, position: position! };\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = { ...dataRelation };\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = { ...data };\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {}\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { ChainlinkCTO } from \"./ChainlinkCTO\";\n\nexport class ChainCTO {\n    constructor(\n        public chain: ChainTO = new ChainTO(),\n        public links: ChainlinkCTO[] = [],\n        public decisions: ChainDecisionTO[] = [],\n    ) {}\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = { type: GoToTypesChain.ERROR },\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {}\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n    ) {}\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {}\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = { ...action };\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from '../access/to/ChainDecisionTO';\nimport dataStore from '../DataStore';\nimport { CheckHelper } from '../util/CheckHelper';\nimport { DataAccessUtil } from '../util/DataAccessUtil';\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = { ...decision };\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = { ...chainLink };\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = { ...chain };\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = { ...dataSetup };\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = { ...copyDecisionToSave };\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = { ...initData };\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = { ...sequence };\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = { ...sequenceStep };\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------------------- Sequence ----------------------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findSequenceTO(sequenceId: number): SequenceTO | undefined {\n        return SequenceRepository.find(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.sequenceFk === -1) {\n                step.squenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const savedSequenceTO: SequenceTO = SequenceRepository.save(sequenceTO);\n        return savedSequenceTO;\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.squenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.goto.type === GoToTypes.STEP || step.squenceStepTO.goto.type === GoToTypes.DEC) {\n                step.squenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ---------------------------------------------------------- ROOT ----------------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ---------------------------------------------------------- Sequence step ----------------------------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.squenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.squenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.squenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.squenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.squenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ---------------------------------------------------------- Decision ----------------------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ---------------------------------------------------------- Action ----------------------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        const savedActionTO: ActionTO = ActionRepository.save(copyAction);\n        return savedActionTO;\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // ---------------------------------------------------------- Data Setup ----------------------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        const dataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetup);\n        return dataSetupTO;\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return { dataSetup: savedDataSetupTO, initDatas: savedInitDatas };\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ---------------------------------------------------------- Init Data ----------------------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        const savedInitData: InitDataTO = InitDataRepository.save(initData);\n        return savedInitData;\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // ---------------------------------------------------------- Chain ----------------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainlink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainlink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainlink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"could not find chain link with id: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"could not find chain decision with id: \" + id);\n        }\n    },\n};\n// ======================================================== PRIVATE ========================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(\n        createSequenceStepCTO,\n    );\n    sequenceStepCTOs.sort((step1, step2) => step1.squenceStepTO.index - step2.squenceStepTO.index);\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n    return { sequenceTO: sequence!, sequenceStepCTOs: sequenceStepCTOs, decisions: decisions };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        squenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n    const chainCTO: ChainCTO = new ChainCTO();\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n    chainCTO.chain = copyChain;\n    chainCTO.links = chainLinkCTOs;\n    chainCTO.decisions = chainDecisions;\n    return chainCTO;\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return { ...response, code: 200 };\n        } catch (error) {\n            return { ...response, message: error.message };\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return { ...response, code: 200 };\n        } catch (error) {\n            return { ...response, message: error.message };\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return { ...response, code: 200 };\n        } catch (error) {\n            return { ...response, message: error.message };\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainlink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunk, RootState} from \"../app/store\";\nimport {DataAccess} from \"../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../dataAccess/DataAccessResponse\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import React, { FunctionComponent } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { DavitIcons } from '../IconSet';\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    const getIconColor = (): string => {\n        switch (level) {\n            case \"info\":\n                return \"white\";\n            case \"warning\":\n                return \"orange\";\n            case \"error\":\n                return \"var(--carv2-data-delete-color)\";\n            default:\n                return \"white\";\n        }\n    };\n\n    return (\n        <div className={\"notificationCard\"} style={{borderColor: getIconColor()}}>\n            <button style={{borderColor: getIconColor(), paddingLeft: \"0.5em\", paddingRight: \"0.5em\", margin: \"1em\"}}\n                    onClick={() => onCloseCallback()}>\n                <FontAwesomeIcon icon={getNotificationIcon()} size={\"2x\"} style={{color: getIconColor()}}/>\n            </button>\n            <div>\n                <h3 style={{color: getIconColor()}}>{header}</h3>\n                <label style={{color: \"var(--carv2-text-color)\"}}>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faWrench } from '@fortawesome/free-solid-svg-icons/faWrench';\nimport { faHandPointer } from '@fortawesome/free-solid-svg-icons/faHandPointer';\nimport { faPencilAlt, faPlus, faReply } from '@fortawesome/free-solid-svg-icons';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons/faTrashAlt';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons/faAngleDown';\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons/faAngleUp';\nimport { faFilter } from '@fortawesome/free-solid-svg-icons/faFilter';\nimport { faFile } from '@fortawesome/free-solid-svg-icons/faFile';\nimport { faEye } from '@fortawesome/free-solid-svg-icons/faEye';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons/faExclamationTriangle';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons/faMinusCircle';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons/faInfoCircle';\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {globalSelectors, globalSlice} from \"../../../slices/GlobalSlice\";\nimport {DavitNotification, NotificationLevel} from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index} header={\"Error\"} text={message} level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}/>;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../../dataAccess/access/to/DataRelationTO\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = { x: 0, y: targetHeight / 2 };\n    const INTERFACE_OUTPUT: Point = { x: 0, y: sourceHeight / 2 };\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = { x: xStart, y: y1 };\n        let endPoint: Point = { x: xEnd, y: y2 };\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{ stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\" }}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\">\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\">\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            { x: xSource, y: ySource },\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            { x: xTarget, y: yTarget },\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return { x: 0, y: -offset };\n            case Direction.LEFT:\n                return { x: -offset, y: 0 };\n            case Direction.RIGHT:\n                return { x: offset, y: 0 };\n            case Direction.BOTTOM:\n                return { x: 0, y: offset };\n            case undefined:\n                return { x: 0, y: 0 };\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        const middleValue = (val2 - val1) / 2 + val1;\n        return middleValue;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? { x: point.x - offset, y: point.y } : { x: point.x + offset, y: point.y };\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return { x: point.x - offset, y: point.y };\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return { x: point1.x + point2.x, y: point1.y + point2.y };\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\">\n                        <path d=\"M0,0 L0,6 L9,3 z\" className=\"carvArrowMarker\" />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../app/store';\nimport { ActorCTO } from '../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../dataAccess/access/cto/DataCTO';\nimport { SequenceStepCTO } from '../dataAccess/access/cto/SequenceStepCTO';\nimport { ChainDecisionTO } from '../dataAccess/access/to/ChainDecisionTO';\nimport { ChainlinkTO } from '../dataAccess/access/to/ChainlinkTO';\nimport { ChainTO } from '../dataAccess/access/to/ChainTO';\nimport { DataRelationTO } from '../dataAccess/access/to/DataRelationTO';\nimport { DataSetupTO } from '../dataAccess/access/to/DataSetupTO';\nimport { GroupTO } from '../dataAccess/access/to/GroupTO';\nimport { SequenceTO } from '../dataAccess/access/to/SequenceTO';\nimport { DataAccess } from '../dataAccess/DataAccess';\nimport { DataAccessResponse } from '../dataAccess/DataAccessResponse';\nimport { DavitUtil } from '../utils/DavitUtil';\nimport { GlobalActions } from './GlobalSlice';\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: 'masterData',\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n};\n\n// ----------------------------------------------- SEARCH --------------------------------------------------\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return { ...actorData, state: ActorDataState.PERSISTENT };\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = { ...actorData, state: ActorDataState.UPDATED_TO };\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = { ...actorData, state: ActorDataState.UPDATED_TO };\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return { actorDatas: newActorDatas, errors };\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return { ...actorData, state: ActorDataState.PERSISTENT };\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        return { actorDatas: updatedActorDatas, goto: goTo };\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: { type: GoToTypes.ERROR },\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.squenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.squenceStepTO.id,\n                            type: \"STEP\",\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).squenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return { stepId: \"root\", actorDatas: result.actorDatas, type: \"INIT\", errors: result.errors };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || { type: GoToTypes.ERROR };\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || { type: GoToTypes.ERROR };\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = { type: GoToTypes.FIN };\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = { type: GoToTypes.IDLE };\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = { type: GoToTypes.ERROR };\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).squenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.squenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = { calcLinks: [], linkIds: [], terminal: { type: GoToTypesChain.ERROR } };\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return { ...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined };\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[]): GoToChain => {\n    // const filteredCompData: ActorData[] = actorDatas.filter((actorData) => actorData.actorFk === chainDecision.actorFk);\n    let goTo: GoToChain | undefined;\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = { type: GoToTypesChain.ERROR };\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || { type: GoToTypesChain.ERROR };\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || { type: GoToTypesChain.ERROR };\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = { type: GoToTypesChain.FIN };\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunk, RootState} from \"../app/store\";\nimport {Arrow, ArrowType} from \"../components/common/fragments/svg/DavitPath\";\nimport {ChainCTO} from \"../dataAccess/access/cto/ChainCTO\";\nimport {ChainlinkCTO} from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport {DataSetupCTO} from \"../dataAccess/access/cto/DataSetupCTO\";\nimport {GeometricalDataCTO} from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport {SequenceCTO} from \"../dataAccess/access/cto/SequenceCTO\";\nimport {SequenceStepCTO} from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport {ActionTO} from \"../dataAccess/access/to/ActionTO\";\nimport {ChainDecisionTO} from \"../dataAccess/access/to/ChainDecisionTO\";\nimport {ChainTO} from \"../dataAccess/access/to/ChainTO\";\nimport {ActionType} from \"../dataAccess/access/types/ActionType\";\nimport {Terminal} from \"../dataAccess/access/types/GoToType\";\nimport {DataAccess} from \"../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../dataAccess/DataAccessResponse\";\nimport {CalcChain, getRoot, SequenceChainService} from \"../services/SequenceChainService\";\nimport {CalcSequence, CalculatedStep, SequenceService} from \"../services/SequenceService\";\nimport {ActorData} from \"../viewDataTypes/ActorData\";\nimport {Mode} from \"./EditSlice\";\nimport {GlobalActions} from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.squenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.squenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || [];\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.squenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState) {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../app/store';\nimport { Arrow, ArrowType } from '../components/common/fragments/svg/DavitPath';\nimport { ActorCTO } from '../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../dataAccess/access/cto/DataCTO';\nimport { DataSetupCTO } from '../dataAccess/access/cto/DataSetupCTO';\nimport { GeometricalDataCTO } from '../dataAccess/access/cto/GeometraicalDataCTO';\nimport { SequenceCTO } from '../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../dataAccess/access/to/ActionTO';\nimport { ChainDecisionTO } from '../dataAccess/access/to/ChainDecisionTO';\nimport { ChainlinkTO } from '../dataAccess/access/to/ChainlinkTO';\nimport { ChainTO } from '../dataAccess/access/to/ChainTO';\nimport { ConditionTO } from '../dataAccess/access/to/ConditionTO';\nimport { DataInstanceTO } from '../dataAccess/access/to/DataInstanceTO';\nimport { DataRelationTO } from '../dataAccess/access/to/DataRelationTO';\nimport { DecisionTO } from '../dataAccess/access/to/DecisionTO';\nimport { GroupTO } from '../dataAccess/access/to/GroupTO';\nimport { InitDataTO } from '../dataAccess/access/to/InitDataTO';\nimport { SequenceTO } from '../dataAccess/access/to/SequenceTO';\nimport { ActionType } from '../dataAccess/access/types/ActionType';\nimport { DataAccess } from '../dataAccess/DataAccess';\nimport { DataAccessResponse } from '../dataAccess/DataAccessResponse';\nimport { DavitUtil } from '../utils/DavitUtil';\nimport { masterDataSelectors } from './MasterDataSlice';\nimport { SequenceModelActions } from './SequenceModelSlice';\nimport { EditActor } from './thunks/ActorThunks';\nimport { EditChainDecision } from './thunks/ChainDecisionThunks';\nimport { EditChainLink } from './thunks/ChainLinkThunks';\nimport { EditChain } from './thunks/ChainThunks';\nimport { EditDataSetup } from './thunks/DataSetupThunks';\nimport { EditData } from './thunks/DataThunks';\nimport { EditDecision } from './thunks/DecisionThunks';\nimport { EditGroup } from './thunks/GroupThunks';\nimport { EditInitData } from './thunks/InitDataThunks';\nimport { EditRelation } from './thunks/RelationThunks';\nimport { EditSequence } from './thunks/SequenceThunks';\nimport { EditStep } from './thunks/StepThunks';\nimport { GlobalActions } from './GlobalSlice';\n\nexport enum Mode {\n    TAB = 'TAB',\n    FILE = 'FILE',\n    VIEW = 'VIEW',\n    EDIT = 'EDIT',\n    EDIT_ACTOR = 'EDIT_ACTOR',\n    EDIT_GROUP = 'EDIT_GROUP',\n    EDIT_DATA = 'EDIT_DATA',\n    EDIT_DATA_INSTANCE = 'EDIT_DATA_INSTANCE',\n    EDIT_RELATION = 'EDIT_RELATION',\n    EDIT_DATASETUP = 'EDIT_DATASETUP',\n    EDIT_DATASETUP_INITDATA = 'EDIT_DATASETUP_INIT DATA',\n    EDIT_CHAIN = 'EDIT_CHAIN',\n    EDIT_CHAIN_DECISION = 'EDIT_CHAIN_DECISION',\n    EDIT_CHAIN_DECISION_CONDITION = 'EDIT_CHAIN_DECISION_CONDITION',\n    EDIT_CHAIN_LINK = 'EDIT_CHAIN_LINK',\n    EDIT_SEQUENCE = 'EDIT_SEQUENCE',\n    EDIT_SEQUENCE_DECISION = 'EDIT_SEQUENCE_DECISION',\n    EDIT_SEQUENCE_DECISION_CONDITION = 'EDIT_SEQUENCE_DECISION_CONDITION',\n    EDIT_SEQUENCE_STEP = 'EDIT_SEQUENCE_STEP',\n    EDIT_SEQUENCE_STEP_ACTION = 'EDIT_SEQUENCE_STEP_ACTION',\n}\n\nconst MODE_LOCAL_STORAGE = 'MODE';\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: 'edit',\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set chain step to edit in mode: ' + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set chain step to edit in mode: ' + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set actor to edit in mode: ' + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set data to edit in mode: ' + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set data to edit in mode: ' + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set relation to edit in mode: ' + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set sequence to edit in mode: ' + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set step to edit in mode: ' + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set action to edit in mode: ' + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set dataSetup to edit in mode: ' + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set initData to edit in mode: ' + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set group to edit in mode: ' + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set decision to edit in mode: ' + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn('Try to set decision to edit in mode: ' + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getstate) => {\n    if (mode !== getstate().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.squenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError('Edit Condition: \\'Decision is null or undefined\\'.'));\n    }\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError('Edit Condition: \\'Decision is null or undefined\\'.'));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes('SEND') ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    'Could not find data';\n\n            const type: ArrowType = actionToEdit.actionType.includes('SEND') ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).squenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).squenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {}\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {}\n}\n","import {AppThunk} from \"../../app/store\";\nimport {ActorCTO} from \"../../dataAccess/access/cto/ActorCTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {ChainDecisionTO} from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport {ChainlinkTO} from \"../../dataAccess/access/to/ChainlinkTO\";\nimport {GoToTypesChain} from \"../../dataAccess/access/types/GoToTypeChain\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {EditChainDecision} from \"./ChainDecisionThunks\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {ChainDecisionTO} from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport {ChainlinkTO} from \"../../dataAccess/access/to/ChainlinkTO\";\nimport {GoToTypesChain} from \"../../dataAccess/access/types/GoToTypeChain\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {EditChainLink} from \"./ChainLinkThunks\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport {AppThunk} from \"../../app/store\";\nimport {ChainCTO} from \"../../dataAccess/access/cto/ChainCTO\";\nimport {ChainDecisionTO} from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport {ChainlinkTO} from \"../../dataAccess/access/to/ChainlinkTO\";\nimport {ChainTO} from \"../../dataAccess/access/to/ChainTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {SequenceModelActions} from \"../SequenceModelSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {DataSetupCTO} from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{ id: -1, name: \"default\" }],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {}\n}\n","import {AppThunk} from \"../../app/store\";\nimport {DataCTO} from \"../../dataAccess/access/cto/DataCTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {SequenceCTO} from \"../../dataAccess/access/cto/SequenceCTO\";\nimport {SequenceStepCTO} from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport {DecisionTO} from \"../../dataAccess/access/to/DecisionTO\";\nimport {GoToTypes} from \"../../dataAccess/access/types/GoToType\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {DavitUtil} from \"../../utils/DavitUtil\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {EditDecision} from \"./DecisionThunks\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).squenceStepTO !== undefined) {\n                (from as SequenceStepCTO).squenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.squenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.squenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.squenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.squenceStepTO.goto.type === GoToTypes.STEP &&\n                item.squenceStepTO.goto.id === step.squenceStepTO.id\n            ) {\n                item.squenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.squenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.squenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import {AppThunk} from '../../app/store';\nimport {SequenceCTO} from '../../dataAccess/access/cto/SequenceCTO';\nimport {SequenceStepCTO} from '../../dataAccess/access/cto/SequenceStepCTO';\nimport {DecisionTO} from '../../dataAccess/access/to/DecisionTO';\nimport {GoToTypes} from '../../dataAccess/access/types/GoToType';\nimport {DataAccess} from '../../dataAccess/DataAccess';\nimport {DataAccessResponse} from '../../dataAccess/DataAccessResponse';\nimport {DavitUtil} from '../../utils/DavitUtil';\nimport {editActions, Mode} from '../EditSlice';\nimport {MasterDataActions} from '../MasterDataSlice';\nimport {EditStep} from './StepThunks';\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).squenceStepTO !== undefined) {\n                (from as SequenceStepCTO).squenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.goto.type === GoToTypes.DEC && step.squenceStepTO.goto.id === decision.id) {\n                step.squenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import {AppThunk} from \"../../app/store\";\nimport {GroupTO} from \"../../dataAccess/access/to/GroupTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {InitDataTO} from \"../../dataAccess/access/to/InitDataTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, EditActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {DataRelationTO} from \"../../dataAccess/access/to/DataRelationTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import {AppThunk} from \"../../app/store\";\nimport {SequenceCTO} from \"../../dataAccess/access/cto/SequenceCTO\";\nimport {DecisionTO} from \"../../dataAccess/access/to/DecisionTO\";\nimport {SequenceStepTO} from \"../../dataAccess/access/to/SequenceStepTO\";\nimport {SequenceTO} from \"../../dataAccess/access/to/SequenceTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {SequenceModelActions} from \"../SequenceModelSlice\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import {motion} from \"framer-motion\";\nimport React, {FunctionComponent, useEffect, useRef, useState} from \"react\";\nimport {ASPECT_RATIO, WINDOW_FACTOR} from \"../../../app/DavitConstants\";\nimport {GeometricalDataTO} from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport {PositionTO} from \"../../../dataAccess/access/to/PositionTO\";\nimport {useCurrentHeight, useCurrentWitdh, useCustomZoomEvent} from \"../../../utils/WindowUtil\";\nimport {createDnDItem} from \"./DnDWrapper\";\nimport {DavitPath, DavitPathProps} from \"./svg/DavitPath\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index}/>;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={fullScreen ? type.toString() + \"Fullscreen\" : type.toString()}\n            key={key}>\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\" key={zoom ? zoom : \"\"}>\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"sVGArea\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import { GoToChain, GoToTypesChain } from '../types/GoToTypeChain';\nimport { AbstractTO } from './AbstractTO';\nimport { ConditionTO } from './ConditionTO';\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoToChain = { type: GoToTypesChain.FIN },\n        public elseGoTo: GoToChain = { type: GoToTypesChain.ERROR },\n    ) {\n        super();\n    }\n}\n","import { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { CSSProperties, FunctionComponent } from 'react';\n\ninterface DavitButtonProps {\n    onClick: () => void;\n    label?: string;\n    disable?: boolean;\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n    className?: string;\n    style?: CSSProperties;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const { onClick, label, disable, iconName, iconLeft, className, style } = props;\n\n    return (\n        <button className={className} onClick={onClick} disabled={disable} style={style}>\n            {iconName && iconLeft && <FontAwesomeIcon icon={iconName} />}\n            {label && <label className={\"padding\"}>{label}</label>}\n            {iconName && !iconLeft && <FontAwesomeIcon icon={iconName} />}\n        </button>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { DavitIcons } from '../../IconSet';\n\ninterface DavitBackButtonProps {\n    onClick: () => void;\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const { onClick } = props;\n\n    return <DavitButton onClick={onClick} iconName={DavitIcons.back} />;\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { DavitIcons } from '../../IconSet';\n\ninterface DavitDeleteButtonProps {\n    onClick: () => void;\n    disable?: boolean;\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disable, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid\" : \"deleteButton\"}\n            disable={disable}\n            label={fluid ? \"SURE\" : undefined}\n        />\n    );\n};\n","/* eslint-disable react/display-name */\nimport React, {FunctionComponent, Ref, useEffect, useRef, useState} from \"react\";\n\nexport interface DavitLabelTextfieldProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitLabelTextfield: FunctionComponent<DavitLabelTextfieldProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div style={{display: \"flex\"}}>\n            {label && <label className={\"inputLabel\"}>{label}</label>}\n            <input\n                className={label ? \"input label\" : undefined}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport \"../../../../app/css/Davit.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps extends DropdownItemProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n}\n\nexport interface DavitIconDropDownProps extends DropdownItemProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    icon?: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const { dropdownItems, onSelect, placeholder, value, clearable, others } = props;\n\n    return (\n        <Dropdown\n            selection\n            selectOnBlur={false}\n            placeholder={placeholder || \"\"}\n            scrolling\n            value={value}\n            disabled={dropdownItems.length < 1}\n            search\n            clearable={clearable ? clearable : false}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase()))}\n            onChange={(event, data) => onSelect(parsDataToDavitDropDownItemProps(data))}\n            {...others}\n        />\n    );\n};\n\nexport const DavitIconDropDown: FunctionComponent<DavitIconDropDownProps> = (props) => {\n    const { dropdownItems, onSelect, icon } = props;\n\n    return (\n        <Dropdown\n            // icon={dropdownItems.length > 0 ? icon : \"\"}\n            icon={icon}\n            selectOnBlur={false}\n            className=\"button icon\"\n            trigger={<React.Fragment />}\n            scrolling\n            // disabled={dropdownItems.length < 1}\n            options={dropdownItems.sort((a, b) => {\n                return a.text! < b.text! ? -1 : a.text! > b.text! ? 1 : 0;\n            })}\n            onChange={(event, data) => onSelect(parsDataToDavitDropDownItemProps(data))}\n        />\n    );\n};\n\nconst parsDataToDavitDropDownItemProps = (data: any): DavitDropDownItemProps => {\n    return {\n        key: data.key ? data.key : -1,\n        text: data.text ? data.text : \"\",\n        value: data.value ? data.value.toString() : \"\",\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownButtonProps extends DropdownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    icon?: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps extends DropdownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownButtonProps> = (props) => {\n    const { onSelect, icon, chainId, exclude } = props;\n    const { createDecisionOptions, selectChainDecision } = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={createDecisionOptions()}\n            icon={icon}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const { onSelect, placeholder, value, chainId, exclude } = props;\n    const { createDecisionOptions, selectChainDecision } = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return { createDecisionOptions, selectChainDecision };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { ChainlinkTO } from \"../../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownButtonProps extends DropdownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    icon?: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps extends DropdownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const { onSelect, placeholder, value, chainId, exclude } = props;\n    const { linkOptions, selectChainLink } = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownButtonProps> = (props) => {\n    const { onSelect, icon, chainId, exclude } = props;\n    const { selectChainLink, linkOptions } = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            icon={icon}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return { linkOptions, selectChainLink };\n};\n","import React, {FunctionComponent} from \"react\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import React, { CSSProperties, FunctionComponent } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { DavitIcons } from '../../IconSet';\n\ninterface DavitAddButtonProps {\n    onClick: () => void;\n    style?: CSSProperties;\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const { onClick, style } = props;\n\n    return <DavitButton onClick={onClick} iconName={DavitIcons.plus} style={style}/>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitAddButton } from './buttons/DavitAddButton';\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    label: string;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const { addCallBack, label, dropDown } = props;\n\n    return (\n        <div style={{display: \"flex\"}}>\n            <DavitAddButton onClick={() => addCallBack()} style={{borderTopRightRadius: 0, borderBottomRightRadius: 0}}/>\n            <div className={\"labelField border\"} >\n                <label>{label}</label>\n            </div>\n            {dropDown}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const { children } = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChainDecisionTO } from '../../../../../../dataAccess/access/to/ChainDecisionTO';\nimport { ChainlinkTO } from '../../../../../../dataAccess/access/to/ChainlinkTO';\nimport { ChainTO } from '../../../../../../dataAccess/access/to/ChainTO';\nimport { SequenceTO } from '../../../../../../dataAccess/access/to/SequenceTO';\nimport { EditActions } from '../../../../../../slices/EditSlice';\nimport { masterDataSelectors } from '../../../../../../slices/MasterDataSlice';\nimport { sequenceModelSelectors } from '../../../../../../slices/SequenceModelSlice';\nimport { EditChain } from '../../../../../../slices/thunks/ChainThunks';\nimport { EditSequence } from '../../../../../../slices/thunks/SequenceThunks';\nimport { DavitUtil } from '../../../../../../utils/DavitUtil';\nimport { DavitBackButton } from '../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitButton } from '../../../../../common/fragments/buttons/DavitButton';\nimport { DavitDeleteButton } from '../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { DavitLabelTextfield } from '../../../../../common/fragments/DavitLabelTextfield';\nimport { ChainDecisionDropDownButton } from '../../../../../common/fragments/dropdowns/ChainDecisionDropDown';\nimport { ChainLinkDropDownButton } from '../../../../../common/fragments/dropdowns/ChainLinkDropDown';\nimport { OptionField } from '../common/OptionField';\nimport { AddOrEdit } from '../../../../../common/fragments/AddOrEdit';\nimport { ControlPanel } from '../common/ControlPanel';\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n    } = useControlPanelEditChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label='Chain - name'>\n                <DavitLabelTextfield\n                    label='Name:'\n                    placeholder='Chain Name...'\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label='Create / Edit | Chain - Link' divider={true}>\n                <AddOrEdit addCallBack={editOrAddChainLink} label={'Link'} dropDown={<ChainLinkDropDownButton\n                    onSelect={(link) => editOrAddChainLink(link)}\n                    icon='wrench'\n                    chainId={id}\n                />} />\n            </OptionField>\n\n            <OptionField label='Create / Edit | Chain - Decision' divider={true}>\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           label={'Decision'}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               icon='wrench'\n                               chainId={id} />} />\n            </OptionField>\n\n            <OptionField label='Options' divider={true}>\n                <DavitButton onClick={createAnother} label='Create another' />\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn('Tried to go to edit sequence without chain specified' + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== '') {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    return {\n        label: 'EDIT * ' + (selectedChain?.name || ''),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ColorDropDownProps extends DropdownProps {\n    onSelect: (color: string | undefined) => void;\n    placeholder?: string;\n    colors: string[];\n    value?: string;\n}\n\nexport const ColorDropDown: FunctionComponent<ColorDropDownProps> = (props) => {\n    const { onSelect, placeholder, colors, value } = props;\n\n    const colorToOption = (color: string, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: color,\n            text: color,\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={colors.map((color, index) => colorToOption(color, index))}\n            onSelect={(color) => onSelect(color.value)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GroupTO } from '../../../../../../dataAccess/access/to/GroupTO';\nimport { EditActions, editSelectors } from '../../../../../../slices/EditSlice';\nimport { EditGroup } from '../../../../../../slices/thunks/GroupThunks';\nimport { DavitUtil } from '../../../../../../utils/DavitUtil';\nimport { DavitButton } from '../../../../../common/fragments/buttons/DavitButton';\nimport { DavitDeleteButton } from '../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { DavitLabelTextfield } from '../../../../../common/fragments/DavitLabelTextfield';\nimport { ColorDropDown } from '../../../../../common/fragments/dropdowns/ColorDropDown';\nimport { GlobalActions } from '../../../../../../slices/GlobalSlice';\nimport { ControlPanel } from '../common/ControlPanel';\nimport { OptionField } from '../common/OptionField';\n\nexport interface ControlPanelEditGroupProps {\n}\n\nexport const ControlPanelEditGroup: FunctionComponent<ControlPanelEditGroupProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveGroup,\n        deleteGroup,\n        getGroupColor,\n        setGroupColor,\n        createAnother,\n        updateGroup,\n    } = useControlPanelEditGroupViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField>\n                <ColorDropDown\n                    onSelect={setGroupColor}\n                    placeholder={getGroupColor()}\n                    colors={['red', 'blue', 'green']}\n                />\n            </OptionField>\n\n            <OptionField divider={true}>\n                <DavitLabelTextfield\n                    label='Name:'\n                    placeholder='Group Name ...'\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={() => updateGroup()}\n                />\n            </OptionField>\n\n            <OptionField divider={true}>\n                <DavitButton onClick={createAnother} label='Create another' />\n                <DavitButton onClick={saveGroup} label='OK' />\n            </OptionField>\n\n            <OptionField divider={true}>\n                <DavitDeleteButton onClick={deleteGroup} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditGroupViewModel = () => {\n    const groupToEdit: GroupTO | null = useSelector(editSelectors.selectGroupToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(groupToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit group without groupToEdit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n\n    }, [groupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(groupToEdit)) {\n            const copyGroupToEdit: GroupTO = DavitUtil.deepCopy(groupToEdit);\n            copyGroupToEdit.name = name;\n            dispatch(EditActions.setMode.editGroup(copyGroupToEdit));\n        }\n    };\n\n    const updateGroup = () => {\n        const copyGroup: GroupTO = DavitUtil.deepCopy(groupToEdit);\n        dispatch(EditGroup.save(copyGroup));\n    };\n\n    const saveGroup = () => {\n        dispatch(EditGroup.save(groupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteGroup = () => {\n        dispatch(EditGroup.delete(groupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editGroup());\n    };\n\n    const getGroupColor = (): string => {\n        if (!DavitUtil.isNullOrUndefined(groupToEdit)) {\n            return groupToEdit!.color;\n        } else {\n            return '';\n        }\n    };\n\n    const setGroupColor = (color: string | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(groupToEdit)) {\n            const copyGroupToEdit: GroupTO = DavitUtil.deepCopy(groupToEdit);\n            if (color !== undefined) {\n                copyGroupToEdit.color = color;\n            }\n            dispatch(EditActions.setMode.editGroup(copyGroupToEdit));\n        }\n    };\n\n    return {\n        label: 'EDIT GROUP',\n        name: groupToEdit?.name,\n        changeName,\n        saveGroup,\n        deleteGroup,\n        getGroupColor,\n        setGroupColor,\n        createAnother,\n        updateGroup,\n        id: groupToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { ActorCTO } from \"../../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps extends DropdownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownButtonProps extends DropdownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    icon?: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { actors, actorToOption, selectActor } = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownButton: FunctionComponent<ActorDropDownButtonProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { actorToOption, actors, selectActor } = useActorDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            icon={icon}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return { actors, actorToOption, selectActor };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { DataCTO } from \"../../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps extends DropdownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownButtonProps extends DropdownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    icon?: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { datas, selectData, dataToOption } = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataDropDownButton: FunctionComponent<DataDropDownButtonProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { datas, selectData, dataToOption } = useDataDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            icon={icon}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return { datas, selectData, dataToOption };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps extends DropdownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupDropDownPropsButton extends DropdownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    icon?: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { dataSetups, selectDataSetup, dataSetupToOption } = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupDropDownButton: FunctionComponent<DataSetupDropDownPropsButton> = (props) => {\n    const { onSelect, icon } = props;\n    const { dataSetups, selectDataSetup, dataSetupToOption } = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            icon={icon}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return { dataSetups, dataSetupToOption, selectDataSetup };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { DataCTO } from \"../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps extends DropdownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationDropDownPropsButton extends DropdownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    icon?: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const { onSelect, placeholder } = props;\n    const { relations, selectDataRelation, relationToOption } = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationDropDownButton: FunctionComponent<RelationDropDownPropsButton> = (props) => {\n    const { onSelect, icon } = props;\n    const { relations, selectDataRelation, relationToOption } = useRelationDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={relations.map(relationToOption)}\n            icon={icon}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return { relations, selectDataRelation, relationToOption };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps extends DropdownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceDropDownPropsButton extends DropdownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    icon?: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { sequences, selectSequence, sequenceToOption } = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceDropDownButton: FunctionComponent<SequenceDropDownPropsButton> = (props) => {\n    const { onSelect, icon } = props;\n    const { sequences, selectSequence, sequenceToOption } = useSequenceDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            icon={icon}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return { sequences, selectSequence, sequenceToOption };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps extends DropdownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownPropsButton extends DropdownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    icon?: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { chainToOption, chains, selectChain } = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownPropsButton> = (props) => {\n    const { onSelect, icon } = props;\n    const { selectChain, chainToOption, chains } = useChainDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            icon={icon}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return { chainToOption, selectChain, chains };\n};\n","import React, {FunctionComponent} from 'react';\nimport {ActorCTO} from '../../../../../../dataAccess/access/cto/ActorCTO';\nimport {DataCTO} from '../../../../../../dataAccess/access/cto/DataCTO';\nimport {ChainTO} from '../../../../../../dataAccess/access/to/ChainTO';\nimport {DataRelationTO} from '../../../../../../dataAccess/access/to/DataRelationTO';\nimport {DataSetupTO} from '../../../../../../dataAccess/access/to/DataSetupTO';\nimport {GroupTO} from '../../../../../../dataAccess/access/to/GroupTO';\nimport {ActorDropDownButton} from '../../../../../common/fragments/dropdowns/ActorDropDown';\nimport {DataDropDownButton} from '../../../../../common/fragments/dropdowns/DataDropDown';\nimport {DataSetupDropDownButton} from '../../../../../common/fragments/dropdowns/DataSetupDropDown';\nimport {RelationDropDownButton} from '../../../../../common/fragments/dropdowns/RelationDropDown';\nimport {SequenceDropDownButton} from '../../../../../common/fragments/dropdowns/SequenceDropDown';\nimport {OptionField} from '../common/OptionField';\nimport {AddOrEdit} from '../../../../../common/fragments/AddOrEdit';\nimport {ChainDropDownButton} from '../../../../../common/fragments/dropdowns/ChainDropDown';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EditActions, editSelectors, Mode} from \"../../../../../../slices/EditSlice\";\nimport { ControlPanel } from '../common/ControlPanel';\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label='actor'>\n                <AddOrEdit label={'Actor'} addCallBack={() => editOrAddActor()}\n                           dropDown={<ActorDropDownButton onSelect={editOrAddActor} icon='wrench'/>}/>\n            </OptionField>\n            <OptionField label='Data' divider={true}>\n                <AddOrEdit label={'Data'} addCallBack={() => editOrAddData()}\n                           dropDown={<DataDropDownButton onSelect={editOrAddData} icon='wrench'/>}/>\n                <AddOrEdit label={'Relation'} addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationDropDownButton onSelect={editOrAddRelation} icon='wrench'/>}/>\n            </OptionField>\n            <OptionField label='Data - Setup' divider={true}>\n                <AddOrEdit label={'Data Setup'} addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupDropDownButton onSelect={editOrAddDataSetup} icon='wrench'/>}/>\n            </OptionField>\n            <OptionField label='sequence' divider={true}>\n                <AddOrEdit label={'Sequence'} addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceDropDownButton\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)} icon='wrench'/>}/>\n                <AddOrEdit label={'Chain'} addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton onSelect={(chain) => editOrAddChain(chain)}\n                                                          icon='wrench'/>}/>\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = { type: GoToTypes.ERROR },\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public squenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {}\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoTo = { type: GoToTypes.FIN },\n        public elseGoTo: GoTo = { type: GoToTypes.ERROR },\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface DecisionDropDownButtonProps extends DropdownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    icon?: string;\n}\n\ninterface DecisionDropDownProps extends DropdownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionDropDownButton: FunctionComponent<DecisionDropDownButtonProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { sequenceToEdit, decisionOptions, selectDecision } = useDecisionDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            icon={icon}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const { onSelect, placeholder, value, exclude } = props;\n    const { sequenceToEdit, decisionOptions, selectDecision } = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return { sequenceToEdit, decisionOptions, selectDecision };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from \"./DavitDropDown\";\n\ninterface StepDropDownButtonProps extends DropdownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    icon?: string;\n}\n\ninterface StepDropDownProps extends DropdownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepDropDownButton: FunctionComponent<StepDropDownButtonProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { sequence, stepOptions, selectSequenceStep } = useStepDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={stepOptions()}\n            icon={icon}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const { onSelect, placeholder, value, exclude } = props;\n    const { sequence, stepOptions, selectSequenceStep } = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.squenceStepTO.id,\n            value: step.squenceStepTO.id.toString(),\n            text: step.squenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.squenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return { sequence: sequenceToEdit, stepOptions, selectSequenceStep };\n};\n","import {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {SequenceCTO} from \"../dataAccess/access/cto/SequenceCTO\";\nimport {ChainTO} from \"../dataAccess/access/to/ChainTO\";\nimport {editSelectors, Mode} from \"../slices/EditSlice\";\nimport {SequenceModelActions, sequenceModelSelectors} from \"../slices/SequenceModelSlice\";\nimport {DavitUtil} from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const { children } = props;\n\n    return (\n        <div className={\"formHeader\"}>\n            {children}\n        </div>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\n\nexport interface FormLineProps {\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"formLine\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { CSSProperties, FunctionComponent } from 'react';\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const { children, style } = props;\n\n    return (\n        <div className={\"formBody\"} style={style}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const { children } = props;\n\n    return (\n        <div className={\"formFooter\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"formDivider\"}/>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\nimport { useEnterHook, useEscHook } from '../../../../utils/WindowUtil';\nimport { FormHeader } from './FormHeader';\nimport { FormLine } from '../../../controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine';\nimport { FormBody } from './FormBody';\nimport { FormFooter } from './FormFooter';\nimport { FormDivider } from '../../../controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider';\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const { subHeader, onCancel, onSubmit, text } = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>('');\n\n    useEffect(() => {\n        setNoteText(text ? text : '');\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className='noteForm'>\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={'noteTextarea border'}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <button onClick={() => onCancel()}>cancel</button>\n                <button onClick={() => onSubmit(noteText)}>save</button>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const { children } = props;\n\n    return <div className='davitModal'>{children}</div>;\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitNoteForm } from '../forms/DavitNoteForm';\nimport { DavitModal } from './DavitModal';\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const { text, closeCallback, saveTextCallback } = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport {DavitButton} from \"./DavitButton\";\nimport {faComment, faCommentDots} from \"@fortawesome/free-solid-svg-icons\";\nimport {DavitNoteModal} from \"../modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitButton onClick={() => setShowForm(true)} iconName={comment === \"\" ? faComment : faCommentDots}/>\n            {showForm &&\n            <DavitNoteModal text={comment} closeCallback={() => setShowForm(false)} saveTextCallback={onSaveCallback}/>\n            }\n        </>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SequenceCTO } from '../../../../../../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../../../../../../dataAccess/access/cto/SequenceStepCTO';\nimport { DecisionTO } from '../../../../../../dataAccess/access/to/DecisionTO';\nimport { SequenceTO } from '../../../../../../dataAccess/access/to/SequenceTO';\nimport { EditActions, editSelectors } from '../../../../../../slices/EditSlice';\nimport { sequenceModelSelectors } from '../../../../../../slices/SequenceModelSlice';\nimport { EditSequence } from '../../../../../../slices/thunks/SequenceThunks';\nimport { DavitUtil } from '../../../../../../utils/DavitUtil';\nimport { DavitBackButton } from '../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitButton } from '../../../../../common/fragments/buttons/DavitButton';\nimport { DavitDeleteButton } from '../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { DavitLabelTextfield } from '../../../../../common/fragments/DavitLabelTextfield';\nimport { DecisionDropDownButton } from '../../../../../common/fragments/dropdowns/DecisionDropDown';\nimport { StepDropDownButton } from '../../../../../common/fragments/dropdowns/StepDropDown';\nimport { OptionField } from '../common/OptionField';\nimport { DavitCommentButton } from '../../../../../common/fragments/buttons/DavitCommentButton';\nimport { AddOrEdit } from '../../../../../common/fragments/AddOrEdit';\nimport { GlobalActions } from '../../../../../../slices/GlobalSlice';\nimport { ControlPanel } from '../common/ControlPanel';\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n    } = useControlPanelEditSequenceViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label='Sequence - name'>\n                <DavitLabelTextfield\n                    label='Name:'\n                    placeholder='Sequence Name...'\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label='Create / Edit | Sequence - Step' divider={true}>\n                <AddOrEdit addCallBack={editOrAddSequenceStep} label={'Step'}\n                           dropDown={<StepDropDownButton onSelect={editOrAddSequenceStep} icon='wrench' />} />\n            </OptionField>\n            <OptionField label='Create / Edit | Sequence - Decision' divider={true}>\n                <AddOrEdit addCallBack={editOrAddDecision} label={'Decision'}\n                           dropDown={<DecisionDropDownButton onSelect={editOrAddDecision} icon='wrench' />} />\n            </OptionField>\n            <OptionField label={'options'} divider={true}>\n                <DavitButton onClick={createAnother} label='Create another' />\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    )\n        ;\n};\n\nconst useControlPanelEditSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit sequence without sequenceToedit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== '') {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.squenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.squenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + '-copy';\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit) && text !== '') {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (sequenceToEdit?.name || ''),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : '',\n        saveNote,\n    };\n};\n","import React, {FunctionComponent} from \"react\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { DavitCommentButton } from '../../../../../../common/fragments/buttons/DavitCommentButton';\nimport { DavitButton } from '../../../../../../common/fragments/buttons/DavitButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { useActorViewModel } from '../viewmodels/ActorViewModel';\nimport { FormLine } from './fragments/FormLine';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Actor Name'\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormLine>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }} label='Create another' />\n                <DavitBackButton onClick={saveActor} />\n            </FormLine>\n\n\n        </Form>\n    );\n};\n","import { ActorCTO } from '../../../../../../../dataAccess/access/cto/ActorCTO';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { useEffect } from 'react';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\nimport { EditActor } from '../../../../../../../slices/thunks/ActorThunks';\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit component without component To edit specified'));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== '') {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || '',\n        note: actorToEdit?.actor?.note || '',\n    };\n\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { WINDOW_FACTOR } from \"../../../app/DavitConstants\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const { dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId } = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const { scaleX, scaleY } = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}>\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}>\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign{\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const { children, className, align } = props;\n\n    return (\n        <label className={className ? className : \"formLabel\"} style={{justifyContent: align ? align : undefined}}>{children}</label>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DnDBox, DnDBoxType } from '../DnDBox';\nimport { PositionTO } from '../../../../dataAccess/access/to/PositionTO';\nimport { DavitModal } from './DavitModal';\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const { form } = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {}}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(),\n                        // TODO: center modal if possible\n                        // position: new PositionTO(30, 30),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {}}\n                zoomOut={() => {}}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { ActorForm } from '../forms/ActorForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, {FunctionComponent, useState} from 'react';\nimport {DavitLabelTextfield} from '../../../../../../common/fragments/DavitLabelTextfield';\nimport {DavitDeleteButton} from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport {useDataViewModel} from '../viewmodels/DataViewModel';\nimport {DataInstanceTO} from '../../../../../../../dataAccess/access/to/DataInstanceTO';\nimport {DavitCommentButton} from \"../../../../../../common/fragments/buttons/DavitCommentButton\";\nimport {DavitButton} from \"../../../../../../common/fragments/buttons/DavitButton\";\nimport {DavitBackButton} from \"../../../../../../common/fragments/buttons/DavitBackButton\";\nimport {DavitAddButton} from \"../../../../../../common/fragments/buttons/DavitAddButton\";\nimport {Form} from \"../../../../../../common/fragments/forms/Form\";\nimport {FormLine} from \"./fragments/FormLine\";\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                            <DavitLabelTextfield\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 && <DavitDeleteButton onClick={() => deleteInstance(index)} noConfirm/>}\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider/>\n\n                <FormBody>\n\n\n                <FormLine>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Data Name'\n                        onChangeCallback={changeName}\n                        value={name}\n                        focus\n                        onBlur={updateData}\n                    />\n                </FormLine>\n\n\n                <FormDivider/>\n\n                <FormLine>\n                    <table className={\"border\"} style={{width: \"40em\"}}>\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Instances</td>\n                            <td style={{textAlign: \"end\"}}><DavitAddButton onClick={createInstance}/></td>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {instances.map(createInstanceRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                </FormBody>\n\n                <FormDivider/>\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData}/>\n                    <DavitCommentButton onSaveCallback={saveNote} comment={note}/>\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }} label='Create another'/>\n                    <DavitBackButton onClick={saveData}/>\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {DataCTO} from '../../../../../../../dataAccess/access/cto/DataCTO';\nimport {EditActions, editSelectors} from '../../../../../../../slices/EditSlice';\nimport {EditData} from '../../../../../../../slices/thunks/DataThunks';\nimport {DavitUtil} from '../../../../../../../utils/DavitUtil';\nimport {GlobalActions} from '../../../../../../../slices/GlobalSlice';\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError('Tried to go to edit data without dataToedit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== '') {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== '') {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (dataToEdit?.data.name || ''),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : '',\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DataForm } from '../forms/DataForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />}/>\n    );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormLine } from './fragments/FormLine';\nimport { Dropdown } from 'semantic-ui-react';\nimport { Direction } from '../../../../../../../dataAccess/access/to/DataRelationTO';\nimport { DavitCommentButton } from '../../../../../../common/fragments/buttons/DavitCommentButton';\nimport { DavitButton } from '../../../../../../common/fragments/buttons/DavitButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { useDataRelationViewModel } from '../viewmodels/DataRelationViewModel';\nimport { FormLabel, FormlabelAlign } from './fragments/FormLabel';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <Dropdown\n                        placeholder='Select Data...'\n                        selection\n                        selectOnBlur={false}\n                        options={dataOptions}\n                        onChange={(event, data) => {\n                            setData(Number(data.value));\n                        }}\n                        value={data1}\n                        onBlur={() => updateRelation()}\n                    />\n                    <Dropdown\n                        placeholder='Select Direction1'\n                        selection\n                        options={directionOptions}\n                        onChange={(event, data) => setDirection(Direction[data.value as Direction])}\n                        value={direction1}\n                        onBlur={() => updateRelation()}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <Dropdown\n                        placeholder='Select Data...'\n                        selection\n                        selectOnBlur={false}\n                        options={dataOptions}\n                        onChange={(event, data) => {\n                            setData(Number(data.value), true);\n                        }}\n                        value={data2}\n                        onBlur={() => updateRelation()}\n                    />\n                    <Dropdown\n                        placeholder='Select Direction2'\n                        selection\n                        options={directionOptions}\n                        onChange={(event, data) => setDirection(Direction[data.value as Direction], true)}\n                        value={direction2}\n                        onBlur={() => updateRelation()}\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }} label='Create another' />\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownItemProps } from 'semantic-ui-react';\nimport { DataCTO } from '../../../../../../../dataAccess/access/cto/DataCTO';\nimport { DataRelationTO, Direction, RelationType } from '../../../../../../../dataAccess/access/to/DataRelationTO';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { masterDataSelectors } from '../../../../../../../slices/MasterDataSlice';\nimport { EditRelation } from '../../../../../../../slices/thunks/RelationThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError('Tried to go to edit relation without relationToedit specified'));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DropdownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id,\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value]) => ({\n        key: key,\n        text: key,\n        value: value,\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value]) => ({\n        key: key,\n        text: key,\n        value: value,\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== '') {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: 'EDIT * RELATION',\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk,\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk,\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : '',\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DataRelationForm } from '../forms/DataRelationForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />}/>\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Dropdown, DropdownProps } from 'semantic-ui-react';\nimport { DataCTO } from '../../../../dataAccess/access/cto/DataCTO';\nimport { DataInstanceTO } from '../../../../dataAccess/access/to/DataInstanceTO';\nimport { masterDataSelectors } from '../../../../slices/MasterDataSlice';\nimport { DavitDropDown, DavitDropDownItemProps, DavitIconDropDown } from './DavitDropDown';\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps extends DropdownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\ninterface InstanceDropDownButtonProps extends DropdownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    icon?: string;\n}\n\ninterface InstanceDropDownMultiselectProps extends DropdownProps {\n    onSelect: (dataAndInstaces: DataAndInstanceId[] | undefined) => void;\n    selected: DataAndInstanceId[];\n    placeholder?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const { selectInstance, createOptions } = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\nexport const InstanceDropDownButton: FunctionComponent<InstanceDropDownButtonProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { selectInstance, createOptions } = useInstanceDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={createOptions()}\n            icon={icon}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n        />\n    );\n};\n\nexport const InstanceDropDownMultiselect: FunctionComponent<InstanceDropDownMultiselectProps> = (props) => {\n    const { onSelect, selected, placeholder } = props;\n    const { selectInstances, createOptions } = useInstanceDropDownViewModel();\n\n    return (\n        <Dropdown\n            placeholder={placeholder || \"Select Datas ...\"}\n            fluid\n            multiple\n            selection\n            options={createOptions()}\n            onChange={(event, instances) => {\n                onSelect(selectInstances((instances.value as string[]) || undefined));\n            }}\n            value={selected.map((select) => JSON.stringify(select))}\n            scrolling\n            disabled={createOptions().length <= 0}\n        />\n    );\n};\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = { dataFk: data.data.id, instanceId: instance.id };\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return { selectInstance, selectInstances, createOptions };\n};\n","import React, { FunctionComponent } from 'react';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormLine } from './fragments/FormLine';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { DavitCommentButton } from '../../../../../../common/fragments/buttons/DavitCommentButton';\nimport { DavitButton } from '../../../../../../common/fragments/buttons/DavitButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { useDataSetupViewModel } from '../viewmodels/DataSetupViewModel';\nimport { DavitAddButton } from '../../../../../../common/fragments/buttons/DavitAddButton';\nimport { ActorDropDown } from '../../../../../../common/fragments/dropdowns/ActorDropDown';\nimport { InstanceDropDown } from '../../../../../../common/fragments/dropdowns/InstanceDropDown';\nimport { InitDataTO } from '../../../../../../../dataAccess/access/to/InitDataTO';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={'Select Actor...'}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={'Select Data Instance...'}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            } />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }} noConfirm />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Data Setup Name ...'\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={'border'} style={{ width: '40em', minHeight: '30vh' }}>\n                        <thead>\n                        <tr>\n                            <td style={{ textAlign: 'center' }}>Actor</td>\n                            <td style={{ textAlign: 'center' }}>Data Instance</td>\n                            <td style={{ textAlign: 'end' }}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{ maxHeight: '40vh' }}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitButton onClick={createAnother} label='Create another' />\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActorCTO } from '../../../../../../../dataAccess/access/cto/ActorCTO';\nimport { DataSetupCTO } from '../../../../../../../dataAccess/access/cto/DataSetupCTO';\nimport { InitDataTO } from '../../../../../../../dataAccess/access/to/InitDataTO';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { EditDataSetup } from '../../../../../../../slices/thunks/DataSetupThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\nimport { EditInitData } from '../../../../../../../slices/thunks/InitDataThunks';\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit dataSetup without dataSetupToedit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== '') {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + '-copy';\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== '') {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (dataSetupToEdit?.dataSetup.name || ''),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : '',\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DataSetupForm } from '../forms/DataSetupForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />}/>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { ActionType } from \"../../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps extends DropdownProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const { onSelect, placeholder, value } = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import {AppThunk} from \"../../app/store\";\nimport {SequenceStepCTO} from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport {ActionTO} from \"../../dataAccess/access/to/ActionTO\";\nimport {DataAccess} from \"../../dataAccess/DataAccess\";\nimport {DataAccessResponse} from \"../../dataAccess/DataAccessResponse\";\nimport {editActions, EditActions, Mode} from \"../EditSlice\";\nimport {MasterDataActions} from \"../MasterDataSlice\";\nimport {EditStep} from \"./StepThunks\";\nimport {GlobalActions} from \"../GlobalSlice\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ActorCTO } from '../../../../../../../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../../../../../../../dataAccess/access/cto/DataCTO';\nimport { SequenceCTO } from '../../../../../../../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../../../../../../../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../../../../../../../dataAccess/access/to/ActionTO';\nimport { ActionType } from '../../../../../../../dataAccess/access/types/ActionType';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { MasterDataActions } from '../../../../../../../slices/MasterDataSlice';\nimport { sequenceModelSelectors } from '../../../../../../../slices/SequenceModelSlice';\nimport { EditAction } from '../../../../../../../slices/thunks/ActionThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { DataAndInstanceId } from '../../../../../../common/fragments/dropdowns/InstanceDropDown';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\nimport { useState } from 'react';\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError('Step not found!'));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes('SEND') ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes('SEND') ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === 'EDIT') {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === 'SEQUENCE') {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    return {\n        label: 'EDIT * SEQUENCE * STEP * ACTION',\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : '',\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { ActionTypeDropDown } from '../../../../../../common/fragments/dropdowns/ActionTypeDropDown';\nimport { ActionType } from '../../../../../../../dataAccess/access/types/ActionType';\nimport { InstanceDropDown } from '../../../../../../common/fragments/dropdowns/InstanceDropDown';\nimport { DataDropDown } from '../../../../../../common/fragments/dropdowns/DataDropDown';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { ActorDropDown } from '../../../../../../common/fragments/dropdowns/ActorDropDown';\nimport { DavitButton } from '../../../../../../common/fragments/buttons/DavitButton';\nimport { faReply } from '@fortawesome/free-solid-svg-icons';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { FormLine } from './fragments/FormLine';\nimport { useActionViewModel } from '../viewmodels/ActionViewModel';\nimport { FormLabel, FormlabelAlign } from './fragments/FormLabel';\nimport { FormDivider } from './fragments/FormDivider';\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction} value={actionType} />\n        </FormLine>\n\n        <FormDivider/>\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance} value={dataAndInstance} />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData} value={dataId} />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitLabelTextfield\n                placeholder='Trigger text ...'\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? 'TO' : 'FROM'}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes('SEND') || actionType === ActionType.TRIGGER\n                        ? 'Select sending Actor'\n                        : 'Actor'\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes('SEND') || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes('SEND') || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes('SEND') || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider/>\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother} label='Create another' />\n            <DavitButton onClick={setMode} iconName={faReply} />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from 'react';\nimport { ActionForm } from '../forms/ActionForm';\nimport { DavitModal } from '../../../../../../common/fragments/modals/DavitModal';\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { GoToTypes } from \"../../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps extends DropdownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const { onSelect, value } = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"./DavitButton\";\n\ninterface DavitRootButtonProps {\n    onClick: () => void;\n    isRoot: boolean;\n}\n\nexport const DavitRootButton: FunctionComponent<DavitRootButtonProps> = (props) => {\n    const { onClick, isRoot } = props;\n\n    return <DavitButton onClick={onClick} label={isRoot ? \"Start\" : \"Set as Start\"} disable={isRoot} />;\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDecisionViewModel } from '../viewmodels/DecisionViewModel';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { GoToOptionDropDown } from '../../../../../../common/fragments/dropdowns/GoToOptionDropDown';\nimport { GoToTypes } from '../../../../../../../dataAccess/access/types/GoToType';\nimport { DavitAddButton } from '../../../../../../common/fragments/buttons/DavitAddButton';\nimport { StepDropDown } from '../../../../../../common/fragments/dropdowns/StepDropDown';\nimport { DecisionDropDown } from '../../../../../../common/fragments/dropdowns/DecisionDropDown';\nimport { DavitCommentButton } from '../../../../../../common/fragments/buttons/DavitCommentButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitRootButton } from '../../../../../../common/fragments/buttons/DavitRootButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { FormLine } from './fragments/FormLine';\nimport { FormLabel, FormlabelAlign } from './fragments/FormLabel';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { ActorDropDown } from '../../../../../../common/fragments/dropdowns/ActorDropDown';\nimport { InstanceDropDown } from '../../../../../../common/fragments/dropdowns/InstanceDropDown';\nimport { ConditionTO } from '../../../../../../../dataAccess/access/to/ConditionTO';\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = 'Select next decision';\n    const labelCreateDecision: string = 'Create new / next decision';\n    const labelStep: string = 'Select next step';\n    const labelCreateStep: string = 'Create new /next step';\n    const labelTypeIf: string = 'Type condition true';\n    const labelTypeElse: string = 'Type condition false';\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={'Select actor...'}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={'Select data instance ...'}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            } />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }} noConfirm />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Decision name ...'\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={'border'} style={{ width: '40em', minHeight: '30vh' }}>\n                        <thead>\n                        <tr>\n                            <td style={{ textAlign: 'center' }}>Actor</td>\n                            <td style={{ textAlign: 'center' }}>Data Instance</td>\n                            <td style={{ textAlign: 'end' }}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{ maxHeight: '40vh' }}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n            <FormDivider />\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitRootButton onClick={setRoot} isRoot={isRoot} />\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SequenceCTO } from '../../../../../../../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../../../../../../../dataAccess/access/cto/SequenceStepCTO';\nimport { ConditionTO } from '../../../../../../../dataAccess/access/to/ConditionTO';\nimport { DecisionTO } from '../../../../../../../dataAccess/access/to/DecisionTO';\nimport { GoTo, GoToTypes } from '../../../../../../../dataAccess/access/types/GoToType';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { SequenceModelActions, sequenceModelSelectors } from '../../../../../../../slices/SequenceModelSlice';\nimport { EditDecision } from '../../../../../../../slices/thunks/DecisionThunks';\nimport { EditSequence } from '../../../../../../../slices/thunks/SequenceThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit condition step without conditionToEdit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== '') {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== '') {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = { type: (GoToTypes as any)[newGoToType] };\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = { type: GoToTypes.STEP, id: step.squenceStepTO.id };\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = { type: GoToTypes.DEC, id: decision.id };\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.squenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== '') {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (selectedSequence?.sequenceTO.name || '') + ' * ' + (decisionToEdit?.name || ''),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : '',\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DecisionForm } from '../forms/DecisionForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { DropdownProps } from 'semantic-ui-react';\nimport { ActorCTO } from '../../../../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../../../../dataAccess/access/cto/DataCTO';\nimport { ActionTO } from '../../../../dataAccess/access/to/ActionTO';\nimport { ActionType } from '../../../../dataAccess/access/types/ActionType';\nimport { editSelectors } from '../../../../slices/EditSlice';\nimport { masterDataSelectors } from '../../../../slices/MasterDataSlice';\nimport { DavitUtil } from '../../../../utils/DavitUtil';\nimport { DavitDropDownItemProps, DavitIconDropDown } from './DavitDropDown';\n\ninterface ActionDropDownProps extends DropdownProps {\n    onSelect: (action: ActionTO | undefined) => void;\n    icon?: string;\n}\n\nexport const ActionButtonDropDown: FunctionComponent<ActionDropDownProps> = (props) => {\n    const { onSelect, icon } = props;\n    const { actions, actionToOption, selectAction } = useActionDropDownViewModel();\n\n    return (\n        <DavitIconDropDown\n            dropdownItems={actions.map(actionToOption)}\n            onSelect={(item) => onSelect(selectAction(Number(item.value), actions))}\n            icon={icon}\n        />\n    );\n};\n\n// TODO: in den master data slice verschieben!\nconst getActorName = (actorId: number, actors: ActorCTO[]): string => {\n    return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n};\n\nconst getDataName = (dataId: number, datas: DataCTO[]): string => {\n    const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n    return data ? data?.data.name : \"data is null\";\n};\n\nconst getActionTypeLabel = (type: ActionType): string => {\n    let label: string = \"\";\n    switch (type) {\n        case ActionType.ADD:\n            label = \"Add or Update\";\n            break;\n        case ActionType.DELETE:\n            label = \"Delete\";\n            break;\n        case ActionType.SEND:\n            label = \"Send\";\n            break;\n        case ActionType.SEND_AND_DELETE:\n            label = \"Send and delete\";\n            break;\n        case ActionType.TRIGGER:\n            label = \"Trigger\";\n            break;\n    }\n    return label;\n};\n\nexport const useActionDropDownViewModel = () => {\n    const actions: ActionTO[] = useSelector(editSelectors.selectStepToEdit)?.actions || [];\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const actionToOption = (action: ActionTO): DavitDropDownItemProps => {\n        return {\n            key: action.id,\n            value: action.id.toString(),\n            text: getOptionText(action),\n        };\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    const selectAction = (actionId: number, actions: ActionTO[]): ActionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actionId) && !DavitUtil.isNullOrUndefined(actions)) {\n            return actions.find((action) => action.id === actionId);\n        }\n        return undefined;\n    };\n\n    return { actions, actionToOption, selectAction, getOptionText };\n};\n","import React, { CSSProperties, FunctionComponent, useEffect, useState } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons/faAngleDown';\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons/faAngleRight';\n\ninterface DavitMoreButtonProps {\n    onClick: () => void;\n    style?: CSSProperties;\n    show?: boolean\n    className?: string\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const { onClick, style, show, className } = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if(show !== undefined){\n            setShowMore(show);\n        }\n    }, [show]);\n\n    return <DavitButton onClick={() => {\n        onClick();\n        setShowMore(!showMore);\n    }} className={className ? className : undefined} iconName={showMore ? faAngleDown : faAngleRight} style={style}/>;\n};\n","import React, { CSSProperties, FunctionComponent } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { faWrench } from '@fortawesome/free-solid-svg-icons/faWrench';\n\ninterface DavitEditButtonProps {\n    onClick: () => void;\n    style?: CSSProperties;\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const { onClick, style } = props;\n\n    return <DavitButton onClick={onClick} iconName={faWrench} style={style}/>;\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { DavitCommentButton } from '../../../../../../common/fragments/buttons/DavitCommentButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { FormLine } from './fragments/FormLine';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormDivider } from './fragments/FormDivider';\nimport { useActionDropDownViewModel } from '../../../../../../common/fragments/dropdowns/ActionButtonDropDown';\nimport { GoToOptionDropDown } from '../../../../../../common/fragments/dropdowns/GoToOptionDropDown';\nimport { GoToTypes } from '../../../../../../../dataAccess/access/types/GoToType';\nimport { DavitAddButton } from '../../../../../../common/fragments/buttons/DavitAddButton';\nimport { StepDropDown } from '../../../../../../common/fragments/dropdowns/StepDropDown';\nimport { DecisionDropDown } from '../../../../../../common/fragments/dropdowns/DecisionDropDown';\nimport { DavitRootButton } from '../../../../../../common/fragments/buttons/DavitRootButton';\nimport { useStepViewModel } from '../viewmodels/StepViewModel';\nimport { FormLabel } from './fragments/FormLabel';\nimport { DavitShowMoreButton } from '../../../../../../common/fragments/buttons/DavitShowMoreButton';\nimport { ActionTO } from '../../../../../../../dataAccess/access/to/ActionTO';\nimport { DavitButton } from '../../../../../../common/fragments/buttons/DavitButton';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons/faAngleDown';\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons/faAngleUp';\nimport { DavitEditButton } from '../../../../../../common/fragments/buttons/DavitEditButton';\nimport { useActionViewModel } from '../viewmodels/ActionViewModel';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction} = useActionViewModel();\n\n    const { getOptionText } = useActionDropDownViewModel();\n\n    const labelSelectDecision: string = 'Select next decision';\n    const labelCreateDecision: string = 'Create next decision';\n    const labelSelectStep: string = 'Select next step';\n    const labelCreateStep: string = 'Create next step';\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{ textAlign: 'end' }}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }} />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitButton iconName={faAngleDown} onClick={() => switchIndexesAndSave(index, true)} />\n                    <DavitButton iconName={faAngleUp} onClick={() => switchIndexesAndSave(index, false)} />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={'border'} style={{ width: '40em', overflow: 'hidden' }}>\n                <thead>\n                <tr>\n                    <td style={{ textAlign: 'center' }}>Action</td>\n                    <td style={{ textAlign: 'end' }}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }} />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{ maxHeight: '30vh' }}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n            <FormLine>\n                <DavitLabelTextfield\n                    label='Name:'\n                    placeholder='Step Name ...'\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateStep}\n                />\n            </FormLine>\n\n            <FormDivider />\n\n            <FormLine>\n                <FormLabel><h3>Actions</h3></FormLabel>\n                <DavitShowMoreButton show={showActions} onClick={() => setShowActions(!showActions)} />\n            </FormLine>\n\n            {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n            <FormDivider />\n\n            <FormLine>\n                <FormLabel>Select type of the next element</FormLabel>\n            </FormLine>\n\n            <FormLine>\n                <GoToOptionDropDown onSelect={handleType} value={goTo ? goTo.type : GoToTypes.ERROR} />\n            </FormLine>\n\n            {goTo!.type === GoToTypes.STEP && (\n                <>\n                    <FormDivider />\n\n                    <FormLine>\n                        <FormLabel>{labelSelectStep}</FormLabel>\n                        <StepDropDown\n                            onSelect={setGoToTypeStep}\n                            value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                            exclude={stepId}\n                        />\n                    </FormLine>\n                    <FormLine>\n                        <FormLabel>{labelCreateStep}</FormLabel>\n                        <DavitAddButton onClick={createGoToStep} />\n                    </FormLine>\n                </>\n            )}\n\n            {goTo!.type === GoToTypes.DEC && (\n                <>\n                    <FormDivider />\n\n                    <FormLine>\n                        <FormLabel>{labelSelectDecision}</FormLabel>\n                        <DecisionDropDown\n                            onSelect={setGoToTypeDecision}\n                            value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                        />\n                    </FormLine>\n                    <FormLine>\n                        <FormLabel>{labelCreateDecision}</FormLabel>\n                        <DavitAddButton onClick={createGoToDecision} />\n                    </FormLine>\n                </>\n            )}\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote} comment={note} />\n                <DavitRootButton onClick={setRoot} isRoot={isRoot} />\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SequenceCTO } from '../../../../../../../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../../../../../../../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../../../../../../../dataAccess/access/to/ActionTO';\nimport { DecisionTO } from '../../../../../../../dataAccess/access/to/DecisionTO';\nimport { GoTo, GoToTypes } from '../../../../../../../dataAccess/access/types/GoToType';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { MasterDataActions } from '../../../../../../../slices/MasterDataSlice';\nimport { SequenceModelActions, sequenceModelSelectors } from '../../../../../../../slices/SequenceModelSlice';\nimport { EditAction } from '../../../../../../../slices/thunks/ActionThunks';\nimport { EditSequence } from '../../../../../../../slices/thunks/SequenceThunks';\nimport { EditStep } from '../../../../../../../slices/thunks/StepThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError('Tried to go to edit sequence step without sequenceStepToEdit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.squenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.squenceStepTO.name !== '') {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === 'EDIT') {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.squenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.squenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.squenceStepTO.name !== '') {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = { type: (GoToTypes as any)[newGoToType] };\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = { type: GoToTypes.STEP, id: step.squenceStepTO.id };\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = { type: GoToTypes.DEC, id: decision.id };\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.squenceStepTO.sequenceFk = stepToEdit!.squenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.squenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.squenceStepTO.sequenceFk, stepToEdit!.squenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.squenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== '') {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.squenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (selectedSequence?.sequenceTO.name || '') + ' * ' + (stepToEdit?.squenceStepTO.name || ''),\n        name: stepToEdit ? stepToEdit!.squenceStepTO.name : '',\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.squenceStepTO.root ? stepToEdit?.squenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.squenceStepTO.id,\n        note: stepToEdit ? stepToEdit.squenceStepTO.note : '',\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { StepForm } from '../forms/StepForm';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />}/>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DropdownProps } from \"semantic-ui-react\";\nimport { GoToTypes } from \"../../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps extends DropdownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const { onSelect, value } = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n            compact\n        />\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormLine } from './fragments/FormLine';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { useChainLinkViewModel } from '../viewmodels/ChainLinkViewModel';\nimport { DataSetupDropDown } from '../../../../../../common/fragments/dropdowns/DataSetupDropDown';\nimport { FormLabel } from './fragments/FormLabel';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\nimport { DavitRootButton } from '../../../../../../common/fragments/buttons/DavitRootButton';\nimport { SequenceDropDown } from '../../../../../../common/fragments/dropdowns/SequenceDropDown';\nimport { GoToTypesChain } from '../../../../../../../dataAccess/access/types/GoToTypeChain';\nimport { GoToChainOptionDropDown } from '../../../../../../common/fragments/dropdowns/GoToChainOptionDropDown';\nimport { DavitAddButton } from '../../../../../../common/fragments/buttons/DavitAddButton';\nimport { ChainLinkDropDown } from '../../../../../../common/fragments/dropdowns/ChainLinkDropDown';\nimport { ChainDecisionDropDown } from '../../../../../../common/fragments/dropdowns/ChainDecisionDropDown';\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = 'Select data-detup';\n    const labelSequence: string = 'Select sequence';\n    const labelGoToType: string = 'Select type of the next';\n    const labelSelectLink: string = 'Select next link';\n    const labelCreateLink: string = 'Create next link';\n    const labelSelectDecision: string = 'Select next decision';\n    const labelCreateDecision: string = 'Create next decision';\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Chainlink Name ...'\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder='Select Data Setup ...'\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink} disable={isRoot} />\n                <DavitRootButton onClick={setRoot} isRoot={isRoot} />\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChainDecisionTO } from '../../../../../../../dataAccess/access/to/ChainDecisionTO';\nimport { ChainlinkTO } from '../../../../../../../dataAccess/access/to/ChainlinkTO';\nimport { ChainTO } from '../../../../../../../dataAccess/access/to/ChainTO';\nimport { DataSetupTO } from '../../../../../../../dataAccess/access/to/DataSetupTO';\nimport { SequenceTO } from '../../../../../../../dataAccess/access/to/SequenceTO';\nimport { GoToChain, GoToTypesChain } from '../../../../../../../dataAccess/access/types/GoToTypeChain';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { sequenceModelSelectors } from '../../../../../../../slices/SequenceModelSlice';\nimport { EditChainLink } from '../../../../../../../slices/thunks/ChainLinkThunks';\nimport { EditChain } from '../../../../../../../slices/thunks/ChainThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({ type: GoToTypesChain.LINK, id: -1 });\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit sequence step without sequenceStepToEdit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== '') {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === 'EDIT') {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = { type: (GoToTypesChain as any)[newGoToType] };\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = { type: GoToTypesChain.LINK, id: link.id };\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = { type: GoToTypesChain.DEC, id: decision.id };\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: 'EDIT * ' + (selectedChain?.name || '') + ' * ' + (chainLinkToEdit?.name || ''),\n        name: chainLinkToEdit ? chainLinkToEdit.name : '',\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\nimport { ChainLinkForm } from '../forms/ChainLinkForm';\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Form } from '../../../../../../common/fragments/forms/Form';\nimport { FormHeader } from '../../../../../../common/fragments/forms/FormHeader';\nimport { FormDivider } from './fragments/FormDivider';\nimport { FormBody } from '../../../../../../common/fragments/forms/FormBody';\nimport { FormFooter } from '../../../../../../common/fragments/forms/FormFooter';\nimport { FormLine } from './fragments/FormLine';\nimport { DavitBackButton } from '../../../../../../common/fragments/buttons/DavitBackButton';\nimport { DavitDeleteButton } from '../../../../../../common/fragments/buttons/DavitDeleteButton';\nimport { useChainDecisionViewModel } from '../viewmodels/ChainDecisionViewModel';\nimport { FormLabel } from './fragments/FormLabel';\nimport { DavitLabelTextfield } from '../../../../../../common/fragments/DavitLabelTextfield';\nimport { DavitAddButton } from '../../../../../../common/fragments/buttons/DavitAddButton';\nimport { GoToTypesChain } from '../../../../../../../dataAccess/access/types/GoToTypeChain';\nimport { GoToChainOptionDropDown } from '../../../../../../common/fragments/dropdowns/GoToChainOptionDropDown';\nimport { ChainLinkDropDown } from '../../../../../../common/fragments/dropdowns/ChainLinkDropDown';\nimport { ChainDecisionDropDown } from '../../../../../../common/fragments/dropdowns/ChainDecisionDropDown';\nimport { ConditionTO } from '../../../../../../../dataAccess/access/to/ConditionTO';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { ActorDropDown } from '../../../../../../common/fragments/dropdowns/ActorDropDown';\nimport { InstanceDropDown } from '../../../../../../common/fragments/dropdowns/InstanceDropDown';\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        // saveDecision,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = 'Chain decision - name';\n    const labelConditions: string = 'Conditions';\n    const labelIfGotoType: string = 'Type condition true';\n    const labelElseGotoType: string = 'Type condition false';\n    const labelCreateLink: string = 'Create next link';\n    const labelSelectLink: string = 'Select next link';\n    const labelCreateDecision: string = 'Create next decision';\n    const labelSelectDecision: string = 'Select next decision';\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={'Select actor...'}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={'Select data instance ...'}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            } />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }} noConfirm />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitLabelTextfield\n                        label='Name:'\n                        placeholder='Chain decision name ...'\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*// TODO: Condition list*/}\n                <FormLine>\n                    <table className={'border'} style={{ width: '40em', minHeight: '30vh' }}>\n                        <thead>\n                        <tr>\n                            <td style={{ textAlign: 'center' }}>Actor</td>\n                            <td style={{ textAlign: 'center' }}>Data Instance</td>\n                            <td style={{ textAlign: 'end' }}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{ maxHeight: '40vh' }}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChainDecisionTO } from '../../../../../../../dataAccess/access/to/ChainDecisionTO';\nimport { ChainlinkTO } from '../../../../../../../dataAccess/access/to/ChainlinkTO';\nimport { ChainTO } from '../../../../../../../dataAccess/access/to/ChainTO';\nimport { GoToChain, GoToTypesChain } from '../../../../../../../dataAccess/access/types/GoToTypeChain';\nimport { EditActions, editSelectors } from '../../../../../../../slices/EditSlice';\nimport { sequenceModelSelectors } from '../../../../../../../slices/SequenceModelSlice';\nimport { EditChainDecision } from '../../../../../../../slices/thunks/ChainDecisionThunks';\nimport { DavitUtil } from '../../../../../../../utils/DavitUtil';\nimport { GlobalActions } from '../../../../../../../slices/GlobalSlice';\nimport { ConditionTO } from '../../../../../../../dataAccess/access/to/ConditionTO';\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({ type: GoToTypesChain.FIN });\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({ type: GoToTypesChain.ERROR });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError('Tried to go to edit condition step without conditionToEdit specified'));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = { type: (GoToTypesChain as any)[newGoToType] };\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = { type: GoToTypesChain.LINK, id: link.id };\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = { type: GoToTypesChain.DEC, id: decision.id };\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitDraggableModal } from '../../../../../../common/fragments/modals/DavitDraggableModal';\nimport { ChainDecisionForm } from '../forms/ChainDecisionForm';\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainDecisionForm/>}/>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { editSelectors, Mode } from '../../../../../slices/EditSlice';\nimport { ControlPanelEditChain } from './fragments/ControlPanelEditChain';\nimport { ControlPanelEditGroup } from './fragments/ControlPanelEditGroup';\nimport { ControlPanelEditMenu } from './fragments/ControlPanelEditMenu';\nimport { ControlPanelEditSequence } from './fragments/ControlPanelEditSequence';\nimport { EditActorModal } from './fragments/modals/EditActorModal';\nimport { EditDataModal } from './fragments/modals/EditDataModal';\nimport { EditDataRelationModal } from './fragments/modals/EditDataRelationModal';\nimport { EditDataSetupModal } from './fragments/modals/EditDataSetupModal';\nimport { EditActionModal } from './fragments/modals/EditActionModal';\nimport { EditDecisionModal } from './fragments/modals/EditDecisionModal';\nimport { EditStepModal } from './fragments/modals/EditStepModal';\nimport { EditChainLinkModal } from './fragments/modals/EditChainLinkModal';\nimport { EditChainDecisionModal } from './fragments/modals/EditChainDecisionModal';\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_GROUP:\n                return <ControlPanelEditGroup />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import React, {FunctionComponent, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {GlobalActions} from \"../../../../slices/GlobalSlice\";\nimport {DavitLabelTextfield} from \"../DavitLabelTextfield\";\nimport {useEnterHook, useEscHook} from \"../../../../utils/WindowUtil\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm\">\n            <DavitLabelTextfield\n                label=\"File name:\"\n                placeholder=\"project name...\"\n                onChangeCallback={(name: string) => setProjectName(name)}\n                value={projectName}\n            />\n            <div style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                paddingTop: \"var(--davit-padding-top-bottom)\"\n            }}>\n                <button onClick={() => onCloseCallback()}>cancel</button>\n                <button onClick={() => onSubmit()}>download</button>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitModal } from './DavitModal';\nimport { DavitDownloadForm } from '../forms/DavitDownloadForm';\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const { closeCallback } = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import {faDownload} from \"@fortawesome/free-solid-svg-icons\";\nimport React, {FunctionComponent, useState} from \"react\";\nimport {DavitButton} from \"./DavitButton\";\nimport {DavitDownloadModal} from \"../modals/DavitDownlaodModal\";\n\nexport interface DavitDownloadButtonProps {\n}\n\nexport const DavitDownloadButton: FunctionComponent<DavitDownloadButtonProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitButton onClick={() => setShowForm(true)} iconName={faDownload}/>\n            {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)}/>}\n        </>\n    );\n};\n","import { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../../slices/GlobalSlice\";\nimport { DavitButton } from \"./DavitButton\";\n\nexport interface DavitFileInputProps {}\n\nexport const DavitUploadButton: FunctionComponent<DavitFileInputProps> = () => {\n    const dispatch = useDispatch();\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    return (\n        <div>\n            <DavitButton iconName={faCloudUploadAlt} onClick={openFileBrowser} />\n            <input\n                hidden={true}\n                ref={inputFileRef}\n                type=\"file\"\n                onChange={(event) => {\n                    if (event.target.files !== null) {\n                        readFileToString(event.target.files[0]);\n                    }\n                }}\n            />\n        </div>\n    );\n};\n","import React, {FunctionComponent} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {EditActions} from \"../../../../../../slices/EditSlice\";\nimport {GlobalActions} from \"../../../../../../slices/GlobalSlice\";\nimport {DavitDeleteButton} from \"../../../../../common/fragments/buttons/DavitDeleteButton\";\nimport {DavitDownloadButton} from \"../../../../../common/fragments/buttons/DavitDownloadButton\";\nimport {DavitUploadButton} from \"../../../../../common/fragments/buttons/DavitUploadButton\";\nimport {OptionField} from \"../../edit/common/OptionField\";\n\nexport interface ControlPanelFileOptionsProps {\n}\n\nexport const ControlPanelFileOptions: FunctionComponent<ControlPanelFileOptionsProps> = () => {\n    const {deleteLocalStorage} = useFileOptionModelView();\n\n    return (\n            <OptionField label=\"file\">\n                <DavitUploadButton/>\n                <DavitDownloadButton/>\n                <DavitDeleteButton onClick={deleteLocalStorage}/>\n            </OptionField>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return {\n        deleteLocalStorage,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { ControlPanelFileOptions } from './fragments/ControlPanelFileOptions';\nimport { ControlPanel } from '../edit/common/ControlPanel';\nimport { OptionField } from '../edit/common/OptionField';\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <ControlPanelFileOptions/>\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { ControlPanel } from '../edit/common/ControlPanel';\nimport { OptionField } from '../edit/common/OptionField';\nimport { DavitButton } from '../../../../common/fragments/buttons/DavitButton';\nimport { faShare } from '@fortawesome/free-solid-svg-icons';\nimport { ModuleRoutes } from '../../../../../app/Davit';\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitButton iconName={faShare} onClick={showActorPage} />\n                <DavitButton iconName={faShare} onClick={showDataPage} />\n                <DavitButton iconName={faShare} onClick={showTablePage} />\n                <DavitButton iconName={faShare} onClick={showFlowChartPage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return { showActorPage, showDataPage, showTablePage, showFlowChartPage };\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface CenteredFlexProps {\n    className?: string\n}\n\nexport const CenteredFlex: FunctionComponent<CenteredFlexProps> = (props) => {\n    const { children, className } = props;\n\n    return (\n        <div className={className ? `centeredFlex ${className}` : \"centeredFlex\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitButton } from '../../../../../common/fragments/buttons/DavitButton';\nimport { faFastBackward } from '@fortawesome/free-solid-svg-icons/faFastBackward';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons/faArrowLeft';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons/faArrowRight';\nimport { faFastForward } from '@fortawesome/free-solid-svg-icons/faFastForward';\nimport { CenteredFlex } from '../../../../../common/fragments/CenteredFlex';\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const { fastBackward, fastForward, backward, forward, index } = props;\n\n    return (\n        <CenteredFlex>\n            <DavitButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n                style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0 }}\n                className={\"padding\"}\n            />\n            <DavitButton\n                iconName={faArrowLeft}\n                label='BACK'\n                onClick={backward}\n                iconLeft={true}\n                style={{ borderRadius: 0 }}\n            />\n            <div className={'border'} style={{textAlign: \"center\", padding: \"0.55em\", borderRadius: 0}}>\n                <label>{index}</label>\n            </div>\n            <DavitButton\n                iconName={faArrowRight}\n                label='NEXT'\n                onClick={forward}\n                style={{ borderRadius: 0 }}\n            />\n            <DavitButton\n                iconName={faFastForward}\n                onClick={fastForward}\n                style={{ borderTopLeftRadius: 0, borderBottomLeftRadius: 0 }}\n            />\n        </CenteredFlex>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataSetupCTO } from '../../../../../dataAccess/access/cto/DataSetupCTO';\nimport { SequenceCTO } from '../../../../../dataAccess/access/cto/SequenceCTO';\nimport { ChainTO } from '../../../../../dataAccess/access/to/ChainTO';\nimport { DataSetupTO } from '../../../../../dataAccess/access/to/DataSetupTO';\nimport { SequenceTO } from '../../../../../dataAccess/access/to/SequenceTO';\nimport { SequenceModelActions, sequenceModelSelectors } from '../../../../../slices/SequenceModelSlice';\nimport { DavitUtil } from '../../../../../utils/DavitUtil';\nimport { useStepAndLinkNavigation } from '../../../../../utils/WindowUtil';\nimport { ChainDropDown } from '../../../../common/fragments/dropdowns/ChainDropDown';\nimport { DataSetupDropDown } from '../../../../common/fragments/dropdowns/DataSetupDropDown';\nimport { SequenceDropDown } from '../../../../common/fragments/dropdowns/SequenceDropDown';\nimport { OptionField } from '../edit/common/OptionField';\nimport { ViewNavigator } from './fragments/ViewNavigator';\n\nexport interface ControlPanelViewOptionsProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewOptions: FunctionComponent<ControlPanelViewOptionsProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControllPanelSequenceOptionsViewModel();\n\n    const { stepBack, stepNext, linkBack, linkNext } = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || '0';\n        const step: string = stepIndex.toString() || '0';\n        return link + ' / ' + step;\n    };\n\n    return (\n        <div className={'headerGrid'}>\n\n            <OptionField>\n                <OptionField label='Data - Setup'>\n                    <DataSetupDropDown\n                        onSelect={selectDataSetup}\n                        placeholder='Select Data Setup ...'\n                        value={currentDataSetup}\n                    />\n                </OptionField>\n\n                <OptionField label='SEQUENCE'>\n                    <SequenceDropDown onSelect={selectSequence} value={currentSequence} />\n                </OptionField>\n            </OptionField>\n\n            <OptionField label='CHAIN' divider={true}>\n                <ChainDropDown onSelect={selectChain} value={currentChain} />\n            </OptionField>\n\n            <OptionField label='STEP' divider={true}>\n                <ViewNavigator fastBackward={linkBack} fastForward={linkNext} backward={stepBack} forward={stepNext} index={getIndex()} />\n            </OptionField>\n\n        </div>\n    );\n};\n\nconst useControllPanelSequenceOptionsViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return ' * ' + selectDataSetup.name;\n        } else {\n            return '';\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return ' * ' + sequence.sequenceTO.name;\n        } else {\n            return '';\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                ' * ' +\n                sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepIndex)?.squenceStepTO.name\n            );\n        } else {\n            return '';\n        }\n    };\n\n    return {\n        label: 'VIEW' + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, {FunctionComponent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EditActions, editSelectors, Mode} from \"../../../slices/EditSlice\";\nimport {DavitUtil} from \"../../../utils/DavitUtil\";\nimport {ControlPanelEditController} from \"./fragments/edit/ControlPanelEditController\";\nimport {ControlPanelFileController} from \"./fragments/file/ControlPanelFileController\";\nimport {ControlPanelTabController} from \"./fragments/tabs/ControlPanelTabController\";\nimport {ControlPanelViewOptions} from \"./fragments/view/ControllPanelViewOptions\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController/>;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewOptions hidden={!mode.includes(\"VIEW\")}/>;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")}/>;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return \"carv2ActorData\" + state;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    style={{ color: \"green\", backgroundColor: \"var(--carv2-data-persistent-color)\" }}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    style={{ color: \"red\", backgroundColor: \"var(--carv2-data-persistent-color)\" }}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment\" key={key}>\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)} key={key}>\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ninterface DavitCardButtonProps {\n    onClick: () => void;\n    disable?: boolean;\n    icon: IconDefinition;\n    isActive?: boolean;\n}\n\nexport const DavitCardButton: FunctionComponent<DavitCardButtonProps> = (props) => {\n    const { onClick, disable, icon, isActive } = props;\n\n    return (\n        <button\n            onClick={onClick}\n            className={\"Carv2CardButton\" + (isActive ? \" activeButton\" : \"\") + (disable ? \" disabled\" : \"\")}\n            disabled={disable}>\n            <FontAwesomeIcon icon={icon} />\n        </button>\n    );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataInstanceTO } from '../../../dataAccess/access/to/DataInstanceTO';\nimport { EditActions } from '../../../slices/EditSlice';\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from '../../../slices/SequenceModelSlice';\nimport { createViewFragment, ViewFragmentProps } from '../../../viewDataTypes/ViewFragment';\nimport { DavitCardButton } from './buttons/DavitCardButton';\nimport { DavitIcons } from '../IconSet';\nimport { DavitShowMoreButton } from './buttons/DavitShowMoreButton';\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeigth: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeigth, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeigth={initHeigth}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeigth * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    width: \"100%\",\n                }}>\n                <div className={showMenu ? \"cardHeaderButtons\" : \"cardHeader\"}>\n                    <div className={showMenu ? \"carhHeaderTextInvisible\" : \"cardHeaderText\"}>{initName}</div>\n                    {showMenu && (\n                        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                            <DavitCardButton icon={DavitIcons.wrench} onClick={() => onClickEdit(id, type)}/>\n                            <DavitCardButton\n                                icon={DavitIcons.filter}\n                                onClick={() => onClickFilter(id, type)}\n                                isActive={isActiveFilter}\n                            />\n                        </div>\n                    )}\n                </div>\n                <DavitShowMoreButton className={\"Carv2CardMainButton\"} onClick={() => {\n                        setShowMenu(!showMenu);\n                }}/>\n            </div>\n            {instances && (\n                <div style={{display: \"flex\", alignItems: \"start\"}}>\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from 'react';\n\ninterface ViewPlaceholderProps {\n    text: string\n    className?: string\n}\n\nexport const ViewPlaceholder: FunctionComponent<ViewPlaceholderProps> = (props) => {\n    const { text, className } = props;\n\n    return (\n        <div className={className}>\n            <div className={'viewPlaceholder'}>\n                <h2>{text}</h2>\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActorCTO } from '../../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../../dataAccess/access/cto/DataCTO';\nimport { DataSetupCTO } from '../../dataAccess/access/cto/DataSetupCTO';\nimport { SequenceStepCTO } from '../../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../../dataAccess/access/to/ActionTO';\nimport { ConditionTO } from '../../dataAccess/access/to/ConditionTO';\nimport { DecisionTO } from '../../dataAccess/access/to/DecisionTO';\nimport { InitDataTO } from '../../dataAccess/access/to/InitDataTO';\nimport { ActionType } from '../../dataAccess/access/types/ActionType';\nimport { editSelectors } from '../../slices/EditSlice';\nimport { GlobalActions, globalSelectors } from '../../slices/GlobalSlice';\nimport { MasterDataActions, masterDataSelectors } from '../../slices/MasterDataSlice';\nimport { sequenceModelSelectors } from '../../slices/SequenceModelSlice';\nimport { EditActor } from '../../slices/thunks/ActorThunks';\nimport { DavitUtil } from '../../utils/DavitUtil';\nimport { ActorData } from '../../viewDataTypes/ActorData';\nimport { ActorDataState } from '../../viewDataTypes/ActorDataState';\nimport { ViewFragmentProps } from '../../viewDataTypes/ViewFragment';\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from '../common/fragments/svg/DavitPath';\nimport { DavitCard, DavitCardProps } from '../common/fragments/DavitCard';\nimport { DnDBox, DnDBoxElement, DnDBoxType } from '../common/fragments/DnDBox';\nimport { ViewPlaceholder } from '../common/fragments/ViewPlaceholder';\n\ninterface ActorModelControllerProps {\n    fullScreen?: boolean;\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = (props) => {\n        const { fullScreen } = props;\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 && <ViewPlaceholder text={'Create a new actor'} className={DnDBoxType.actor.toString()} />}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    fullScreen={fullScreen}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n        const dataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(...actorDatasFromErros);\n\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromDataSetupView: ViewFragmentProps[] = dataSetup\n                ? dataSetup.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            if (currentActorDatas.length <= 0) {\n                actorDatas.push(...actorDatasFromDataSetupView);\n            }\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = 'Could not find Data';\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        ' - ' +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            'Could not find instance Name');\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeigth: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: 'ACTOR',\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? 'var(--carv2-color-exxcellent-blue)' : 'black',\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActorCTO } from '../../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../../dataAccess/access/cto/DataCTO';\nimport { DataSetupCTO } from '../../dataAccess/access/cto/DataSetupCTO';\nimport { GeometricalDataCTO } from '../../dataAccess/access/cto/GeometraicalDataCTO';\nimport { SequenceStepCTO } from '../../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../../dataAccess/access/to/ActionTO';\nimport { ConditionTO } from '../../dataAccess/access/to/ConditionTO';\nimport { DataRelationTO } from '../../dataAccess/access/to/DataRelationTO';\nimport { DecisionTO } from '../../dataAccess/access/to/DecisionTO';\nimport { InitDataTO } from '../../dataAccess/access/to/InitDataTO';\nimport { ActionType } from '../../dataAccess/access/types/ActionType';\nimport { editSelectors } from '../../slices/EditSlice';\nimport { GlobalActions, globalSelectors } from '../../slices/GlobalSlice';\nimport { MasterDataActions, masterDataSelectors } from '../../slices/MasterDataSlice';\nimport { sequenceModelSelectors } from '../../slices/SequenceModelSlice';\nimport { EditData } from '../../slices/thunks/DataThunks';\nimport { DavitUtil } from '../../utils/DavitUtil';\nimport { ActorData } from '../../viewDataTypes/ActorData';\nimport { ActorDataState } from '../../viewDataTypes/ActorDataState';\nimport { ViewFragmentProps } from '../../viewDataTypes/ViewFragment';\nimport { DavitPathProps, DavitPathTypes } from '../common/fragments/svg/DavitPath';\nimport { DavitCard, DavitCardProps } from '../common/fragments/DavitCard';\nimport { DnDBox, DnDBoxElement, DnDBoxType } from '../common/fragments/DnDBox';\nimport { ViewPlaceholder } from '../common/fragments/ViewPlaceholder';\n\ninterface DataModelControllerProps {\n    fullScreen?: boolean;\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = (props) => {\n    const { fullScreen } = props;\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <ViewPlaceholder text={'Create a new data object'} className={DnDBoxType.data.toString()} />}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getRelations()}\n                    fullScreen={fullScreen}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={dataZoomFactor}\n                    type={DnDBoxType.data}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nreturn createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () =>\n    {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || 'Could not find Actor';\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapActionToActorDatas);\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n\n            const actorDatasFromCompDatas: ViewFragmentProps[] = currentActorDatas\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToActorData);\n            actorDatas.push(...actorDatasFromErros);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            actorDatas.push(\n                ...actorDatasFromCompDatas.filter(\n                    (actorDataFromCompData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCompData)),\n                ),\n            );\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            // const parentId = getDataAndInstanceIds(actionItem.dataFk);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToActorData = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: { dataId: actorData.dataFk, instanceId: actorData.instanceFk },\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: { dataId: condition.dataFk, instanceId: condition.instanceFk },\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > 1\n                        ? { dataId: initData.dataFk, instanceId: initData.instanceFk }\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeigth: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: 'DATA',\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const { label, isActive, onClick } = props;\n    return (\n        <div className={isActive ? \"tab active\" : \"tab\"} onClick={onClick}>\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const { label, children, style } = props;\n    return (\n        <div className=\"tab-group\" style={style}>\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{ display: \"flex\" }}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const { text, label } = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\nimport { ArcherContainer, ArcherElement, Relation } from 'react-archer';\nimport { useSelector } from 'react-redux';\nimport { ChainCTO } from '../../dataAccess/access/cto/ChainCTO';\nimport { ChainlinkCTO } from '../../dataAccess/access/cto/ChainlinkCTO';\nimport { SequenceCTO } from '../../dataAccess/access/cto/SequenceCTO';\nimport { SequenceStepCTO } from '../../dataAccess/access/cto/SequenceStepCTO';\nimport { ChainDecisionTO } from '../../dataAccess/access/to/ChainDecisionTO';\nimport { DecisionTO } from '../../dataAccess/access/to/DecisionTO';\nimport { GoTo, GoToTypes, Terminal } from '../../dataAccess/access/types/GoToType';\nimport { GoToChain, GoToTypesChain, TerminalChain } from '../../dataAccess/access/types/GoToTypeChain';\nimport { CalcChain } from '../../services/SequenceChainService';\nimport { sequenceModelSelectors } from '../../slices/SequenceModelSlice';\nimport { DavitUtil } from '../../utils/DavitUtil';\nimport { TabFragment } from '../tableModel/fragments/TabFragment';\nimport { TabGroupFragment } from '../tableModel/fragments/TabGroupFragment';\nimport { FlowChartlabel } from './FlowChartlabel';\nimport { ViewPlaceholder } from '../common/fragments/ViewPlaceholder';\nimport { CenteredFlex } from '../common/fragments/CenteredFlex';\n\ninterface FlowChartControllerProps {\n    fullScreen?: boolean;\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = (props) => {\n        const { fullScreen } = props;\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener('resize', resizeListener);\n\n            return () => {\n                window.removeEventListener('resize', resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: 'bottom',\n                    sourceAnchor: 'top',\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : 'var(--carv2-background-color-header)',\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className='flowChartFlex' style={{ margin: node.id === 'root' ? '' : '50px 0' }} key={node.id}>\n                    <ArcherElement id={node.id} relations={rel}>\n                        <div\n                            className={node.id === 'root' ? 'ROOT' : node.leafType}\n                            id={currentStepId === node.id ? 'flowChartCurrentStep' : ''}>\n                            {node.id === 'root' || node.leafType === GoToTypes.DEC ? '' : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className='condLabel'>{node.label}</div>}\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-around',\n                            alignItems: 'start',\n                            width: '100%',\n                        }}>\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: 'bottom',\n                    sourceAnchor: 'top',\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : 'var(--carv2-background-color-header)',\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className='flowChartFlex' style={{ margin: node.id === 'root' ? '' : '50px 0' }} key={node.id}>\n                    <ArcherElement id={node.id} relations={rel}>\n                        <div className={node.leafType} id={currentLinkId === node.id ? 'flowChartCurrentStep' : ''}>\n                            {node.leafType === GoToTypesChain.DEC ? '' : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className='condLabel'>{node.label}</div>}\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-around',\n                            alignItems: 'start',\n                            width: '100%',\n                        }}>\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true} arrowLength={0}>\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true} arrowLength={0}>\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className={fullScreen ? 'fullscreen' : 'flowChartModel'} ref={parentRef}>\n                {!renderFlowChart() &&\n                <CenteredFlex>\n                    <ViewPlaceholder\n                        text={'Select a sequence or chain to see the flow chart'} />\n                </CenteredFlex>}\n                {renderFlowChart() && <>\n                    <div style={{ display: 'flex', position: 'absolute', zIndex: 1, width: '47vw' }}>\n                        {chain && (\n                            <TabGroupFragment label='Mode'\n                                              style={{ backgroundColor: 'var(--carv2-background-color-header)' }}>\n                                <TabFragment label='Chain' isActive={showChain} onClick={() => setShowChain(true)} />\n                                <TabFragment label='Sequence' isActive={!showChain} onClick={() => setShowChain(false)} />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{ marginLeft: 'auto' }}>\n                            <FlowChartlabel label='CHAIN:' text={chainName} />\n                            <FlowChartlabel label='SEQU.:' text={sequenceName} />\n                        </div>\n                    </div>\n                    <div className='flowChart' style={{ height: tableHeight }}>\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: { type: GoToTypes.ERROR },\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.squenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: { type: GoToTypesChain.ERROR },\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: '',\n                label: '',\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.squenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = '_STEP_' + step.squenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.squenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.squenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = '_DEC_' + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + '_ERROR';\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + '_FIN';\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + '_IDLE';\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: '',\n                label: '',\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = '_LINK_' + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = '_DEC_' + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + '_ERROR';\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + '_FIN';\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = { isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO() };\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).squenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).squenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).squenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = { id: 'root', label: '', leafType: node.type, childs: [] };\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).squenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).squenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = { id: '', label: '', leafType: node.type, childs: [] };\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return 'var(--carv2-data-delete-color)';\n                    case GoToTypes.FIN:\n                        return 'var(--carv2-data-add-color)';\n                    case GoToTypes.IDLE:\n                        return 'var(--carv2-color-exxcellent-blue)';\n                }\n            } else {\n                return '#FF00FF';\n            }\n        };\n\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return 'var(--carv2-data-delete-color)';\n                    case GoToTypesChain.FIN:\n                        return 'var(--carv2-data-add-color)';\n                }\n            } else {\n                return '#FF00FF';\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || '',\n            sequenceName: sequence?.sequenceTO.name || '',\n        };\n    }\n;\n","import React, { FunctionComponent } from 'react';\nimport { DavitButton } from './DavitButton';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\n\ninterface DavitTableButtonProps {\n    onClick: () => void;\n    disable?: boolean;\n    icon?: IconDefinition;\n}\n\nexport const DavitTableButton: FunctionComponent<DavitTableButtonProps> = (props) => {\n    const { onClick, icon, disable } = props;\n\n    return (\n        <DavitButton iconName={icon} onClick={onClick} disable={disable} />\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DavitTableButton } from './buttons/DavitTableButton';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { DavitIcons } from '../IconSet';\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const { header, bodyData, addFunction, tableHeight } = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()} key={index}>\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitTableButton icon={action.icon} onClick={action.callback} key={key} disable={action.disable} />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index} className={data.trClass} onClick={data.onClick}>\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 && <td>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key} className={className}>\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n                <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{ height: tableHeight }}>\n                {bodyData.map(createRow)}\n                {addFunction && (\n                    <tr>\n                        <td>{createButton({ icon: DavitIcons.plus, callback: addFunction }, 0)}</td>\n                    </tr>\n                )}\n                {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({ label: \"Actions\", identifier: ActiveTab.action });\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({ label: \"Condition\", identifier: ActiveTab.condition });\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Errors\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label} key={index}>\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\" key={getTabsKey()}>\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { DavitTableRowData } from \"../../../common/fragments/DavitTable\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { CalcChain, CalcChainLink } from \"../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitTableRowData } from \"../../../common/fragments/DavitTable\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SequenceCTO } from '../../../../dataAccess/access/cto/SequenceCTO';\nimport { Terminal } from '../../../../dataAccess/access/types/GoToType';\nimport { CalculatedStep } from '../../../../services/SequenceService';\nimport { SequenceModelActions, sequenceModelSelectors } from '../../../../slices/SequenceModelSlice';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ACTION-ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.squenceStepTO.id === step.modelElementFk)\n                    ?.squenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from 'react-redux';\nimport { ChainTO } from '../../../../dataAccess/access/to/ChainTO';\nimport { EditActions } from '../../../../slices/EditSlice';\nimport { SequenceModelActions } from '../../../../slices/SequenceModelSlice';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n    const selectAction = { icon: DavitIcons.handPointer, callback: selectCallback };\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from 'react-redux';\nimport { ChainlinkCTO } from '../../../../dataAccess/access/cto/ChainlinkCTO';\nimport { ChainDecisionTO } from '../../../../dataAccess/access/to/ChainDecisionTO';\nimport { CalcChain } from '../../../../services/SequenceChainService';\nimport { EditActions } from '../../../../slices/EditSlice';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { getChainGotoName } from '../../util/TableUtil';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from 'react-redux';\nimport { ChainlinkCTO } from '../../../../dataAccess/access/cto/ChainlinkCTO';\nimport { ChainDecisionTO } from '../../../../dataAccess/access/to/ChainDecisionTO';\nimport { EditActions } from '../../../../slices/EditSlice';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { getChainGotoName } from '../../util/TableUtil';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = ['NAME', 'SEQUENCE', 'DATASETUP', 'GOTO', 'ACTIONS', 'START'];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? 'start' : '';\n    const trClass = 'carv2Tr';\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from 'react-redux';\nimport { DataSetupTO } from '../../../../dataAccess/access/to/DataSetupTO';\nimport { EditActions } from '../../../../slices/EditSlice';\nimport { SequenceModelActions } from '../../../../slices/SequenceModelSlice';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = ['NAME', 'ACTIONS'];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = 'carv2Tr';\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n    const selectAction = { icon: DavitIcons.handPointer, callback: selectCallback };\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../common/fragments/DavitTable\";\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = { icon: DavitIcons.wrench, callback: editCallback };\n    const selectAction: DavitTableAction = { icon: DavitIcons.handPointer, callback: selectCallback };\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../slices/thunks/DecisionThunks\";\nimport { DavitTableRowData } from \"../../../common/fragments/DavitTable\";\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../slices/EditSlice\";\nimport { DavitTableRowData } from \"../../../common/fragments/DavitTable\";\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = { icon: DavitIcons.wrench, callback: editCallback };\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.squenceStepTO.id === (goto as Intermediate).id)?.squenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../slices/EditSlice\";\nimport { DavitTableRowData } from \"../../../common/fragments/DavitTable\";\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.squenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.squenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.squenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{ icon: DavitIcons.wrench, callback: editCallback }],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.squenceStepTO.id === (goto as Intermediate).id)?.squenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ActorCTO } from '../../../../dataAccess/access/cto/ActorCTO';\nimport { DataCTO } from '../../../../dataAccess/access/cto/DataCTO';\nimport { SequenceStepCTO } from '../../../../dataAccess/access/cto/SequenceStepCTO';\nimport { ActionTO } from '../../../../dataAccess/access/to/ActionTO';\nimport { ActionType } from '../../../../dataAccess/access/types/ActionType';\nimport { EditActions, editSelectors, Mode } from '../../../../slices/EditSlice';\nimport { masterDataSelectors } from '../../../../slices/MasterDataSlice';\nimport { SequenceModelActions } from '../../../../slices/SequenceModelSlice';\nimport { EditStep } from '../../../../slices/thunks/StepThunks';\nimport { DavitUtil } from '../../../../utils/DavitUtil';\nimport { DavitTableRowData } from '../../../common/fragments/DavitTable';\nimport { DavitIcons } from '../../../common/IconSet';\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.squenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                            \": \" +\n                            data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            { icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0 },\n            { icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1 },\n            { icon: DavitIcons.wrench, callback: editCallback },\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitTable } from \"../../common/fragments/DavitTable\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n    fullScreen?: boolean;\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = (props) => {\n    const { fullScreen } = props;\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={fullScreen ? \"\" : \"sequenceTable\"} ref={parentRef}>\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.squenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return { header: [], bodyData: [] };\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\n\ninterface DavitButtonIconProps {\n    onClick: () => void;\n    icon: IconDefinition;\n    active?: boolean;\n}\n\nexport const DavitSidePanelButton: FunctionComponent<DavitButtonIconProps> = (props) => {\n    const { onClick, icon, active } = props;\n\n    return (\n        <button className={\"sidePanelButton\" + (active ? \" active\" : \"\")} onClick={onClick}>\n            <FontAwesomeIcon icon={icon} />\n        </button>\n    );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DAVIT_VERISON } from '../../app/DavitConstants';\nimport logo from '../../icons/logo200.png';\nimport { EditActions, editSelectors, Mode } from '../../slices/EditSlice';\nimport { DavitSidePanelButton } from '../common/fragments/buttons/DavitSidePanelButton';\nimport { DavitIcons } from '../common/IconSet';\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitSidePanelButton icon={DavitIcons.pencil} onClick={setModeToEdit} active={mode.includes(Mode.EDIT.toString())}/>\n            <DavitSidePanelButton icon={DavitIcons.eye} onClick={setModeToView} active={mode === Mode.VIEW}/>\n            <DavitSidePanelButton icon={DavitIcons.file} onClick={setModeToFile} active={mode === Mode.FILE}/>\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo} alt=\"fireSpot\"/>\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {ErrorNotification} from \"../components/common/fragments/ErrorNotification\";\nimport {ControlPanelController} from \"../components/controllPanel/presentation/ControlPanelController\";\nimport {ActorModelController} from \"../components/metaActorModel/ActorModelController\";\nimport {DataModelController} from \"../components/metaDataModel/DataModelController\";\nimport {FlowChartController} from \"../components/flowChartModel/FlowChartController\";\nimport {TableModelController} from \"../components/tableModel/presentation/TableModelController\";\nimport {SidePanelController} from \"../components/sidePanel/SidePanelController\";\nimport {GlobalActions} from \"../slices/GlobalSlice\";\nimport {MasterDataActions} from \"../slices/MasterDataSlice\";\nimport \"./css/Davit.css\";\n\n// import {BrowserRouter, Route, Switch} from \"react-router-dom\";\n// electron needs HashRouter\nimport { HashRouter as BrowserRouter, Switch, Route } from 'react-router-dom';\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path={ModuleRoutes.home}>\n                    <div className=\"carvGridContainer\">\n                        <ControlPanelController/>\n                        <ActorModelController/>\n                        <DataModelController/>\n                        <SidePanelController/>\n                        <FlowChartController/>\n                        <TableModelController/>\n                        <ErrorNotification/>\n                    </div>\n                </Route>\n                <Route exact path={ModuleRoutes.actor}>\n                    <div className=\"Carv2\">\n                        <div className=\"componentPage\">\n                            <ActorModelController fullScreen/>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path={ModuleRoutes.data}>\n                    <div className=\"Carv2\">\n                        <div className=\"componentPage\">\n                            <DataModelController fullScreen/>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path={ModuleRoutes.table}>\n                    <div className=\"Carv2\">\n                        <div className=\"componentPage\">\n                            <TableModelController fullScreen/>\n                        </div>\n                    </div>\n                </Route>\n                <Route exact path={ModuleRoutes.flowChart}>\n                    <div className=\"Carv2\">\n                        <div className=\"componentPage\">\n                            <FlowChartController fullScreen/>\n                        </div>\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { EditReducer } from \"../slices/EditSlice\";\nimport { globalReducer } from \"../slices/GlobalSlice\";\nimport { MasterDataReducer } from \"../slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"../slices/SequenceModelSlice\";\nimport { createStorageListener } from \"../utils/StorageListener\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../app/middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({ source: \"another tab\" }, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport {Davit} from \"./app/Davit\";\nimport {store} from \"./app/store\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Davit/>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}