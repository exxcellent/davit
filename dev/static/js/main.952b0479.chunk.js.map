{"version":3,"sources":["dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainTO.ts","dataAccess/access/cto/ChainCTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","dataAccess/access/to/ChainDecisionTO.ts","components/organisms/dndBox/DnDBox.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx","assets/exxcellent_logo_200.png"],"names":["DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","DavitVersionMigrator02","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","dataId","dataRelationExists","some","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","abstractTOs","Math","max","abstract","Infinity","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainTO","ChainCTO","chain","links","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chainTO","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","findSequenceTO","saveSequenceCTO","squenceStepTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","chainId","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainlink","findAllChainLinks","deleteChainTO","chainlink","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainCTO","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","chainDecisions","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","state","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","getstate","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","ChainDecisionTO","DnDBoxType","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitBackButton","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","event","target","DavitAddButton","DavitEditButton","DavitShowMoreButton","show","showMore","setShowMore","tiny","faAngleRight","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","addEventListener","removeEventListener","useEnterHook","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","FormLine","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","ControlPanel","OptionField","divider","toUpperCase","ControlPanelEditChain","useControlPanelEditChainViewModel","changeName","createAnother","editOrAddChainDecision","saveChain","editOrAddChainLink","isCreateAnother","setIsCreateAnother","copyChainToEdit","newMode","validateInput","updateSequence","decisionToEdit","chainLinkToEdit","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanelEditSequence","useControlPanelEditSequenceViewModel","deleteSequence","saveSequence","editOrAddSequenceStep","editOrAddDecision","saveNote","selectedSequence","copySequenceToEdit","stepToEdit","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","center","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","useChainDecisionViewModel","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","saveChainLink","deleteChainLink","isRoot","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","InitDataTO","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","EditDataSetupModal","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","EditDecisionModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","isActive","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","zIndex","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.952b0479.chunk.js","sourcesContent":["import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.2;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic/dropdowns/InstanceDropDown\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator02.migrate(\n                    DavitVersionMigrator01.migrate(dataStoreObject),\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator02.migrate(dataStoreObject);\n        }\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { ChainlinkCTO } from \"./ChainlinkCTO\";\n\nexport class ChainCTO {\n    constructor(\n        public chain: ChainTO = new ChainTO(),\n        public links: ChainlinkCTO[] = [],\n        public decisions: ChainDecisionTO[] = [],\n    ) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------------------- Sequence ----------------------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findSequenceTO(sequenceId: number): SequenceTO | undefined {\n        return SequenceRepository.find(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.sequenceFk === -1) {\n                step.squenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const savedSequenceTO: SequenceTO = SequenceRepository.save(sequenceTO);\n        return savedSequenceTO;\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.squenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.goto.type === GoToTypes.STEP || step.squenceStepTO.goto.type === GoToTypes.DEC) {\n                step.squenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ---------------------------------------------------------- ROOT ----------------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ---------------------------------------------------------- Sequence step ----------------------------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.squenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.squenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.squenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.squenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.squenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ---------------------------------------------------------- Decision ----------------------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ---------------------------------------------------------- Action ----------------------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        const savedActionTO: ActionTO = ActionRepository.save(copyAction);\n        return savedActionTO;\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // ---------------------------------------------------------- Data Setup ----------------------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        const dataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetup);\n        return dataSetupTO;\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ---------------------------------------------------------- Init Data ----------------------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        const savedInitData: InitDataTO = InitDataRepository.save(initData);\n        return savedInitData;\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // ---------------------------------------------------------- Chain ----------------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainlink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainlink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainlink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"could not find chain link with id: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"could not find chain decision with id: \" + id);\n        }\n    },\n};\n// ======================================================== PRIVATE ========================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(\n        createSequenceStepCTO,\n    );\n    sequenceStepCTOs.sort((step1, step2) => step1.squenceStepTO.index - step2.squenceStepTO.index);\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n    return {sequenceTO: sequence!, sequenceStepCTOs: sequenceStepCTOs, decisions: decisions};\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        squenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n    const chainCTO: ChainCTO = new ChainCTO();\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n    chainCTO.chain = copyChain;\n    chainCTO.links = chainLinkCTOs;\n    chainCTO.decisions = chainDecisions;\n    return chainCTO;\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainlink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n};\n\n// ----------------------------------------------- SEARCH --------------------------------------------------\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.squenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.squenceStepTO.id,\n                            type: \"STEP\",\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).squenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {stepId: \"root\", actorDatas: result.actorDatas, type: \"INIT\", errors: result.errors};\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).squenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.squenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[]): GoToChain => {\n    // const filteredCompData: ActorData[] = actorDatas.filter((actorData) => actorData.actorFk === chainDecision.actorFk);\n    let goTo: GoToChain | undefined;\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.squenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.squenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.squenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditInitData } from \"./thunks/InitDataThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set initData to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getstate) => {\n    if (mode !== getstate().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.squenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).squenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).squenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).squenceStepTO !== undefined) {\n                (from as SequenceStepCTO).squenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.squenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.squenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.squenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.squenceStepTO.goto.type === GoToTypes.STEP &&\n                item.squenceStepTO.goto.id === step.squenceStepTO.id\n            ) {\n                item.squenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.squenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.squenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).squenceStepTO !== undefined) {\n                (from as SequenceStepCTO).squenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.squenceStepTO.goto.type === GoToTypes.DEC && step.squenceStepTO.goto.id === decision.id) {\n                step.squenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    console.info(\"parsing data: \", data);\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps extends DavitButtonProps {\n    show?: boolean\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show} = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if (show !== undefined) {\n            setShowMore(show);\n        }\n    }, [show]);\n\n    const onToggle = () => {\n        setShowMore(!showMore);\n        onClick();\n    };\n\n    return <DavitIconButton onClick={onToggle}\n                            size={ElementSize.tiny}\n                            iconName={showMore ? faAngleDown : faAngleRight}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.squenceStepTO.id,\n            value: step.squenceStepTO.id.toString(),\n            text: step.squenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.squenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium\"} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport interface FormLineProps {\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-horizontal-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { EditChain } from \"../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton } from \"../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ChainDecisionDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDecisionDropDown\";\nimport { ChainLinkDropDownButton } from \"../../../../../../atomic/dropdowns/ChainLinkDropDown\";\nimport { DavitTextInput } from \"../../../../../../atomic/textinput/DavitTextInput\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n    } = useControlPanelEditChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../../../../../../../dataAccess/access/to/GroupTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport { ActorDropDownLabel } from \"../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { ChainDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDropDown\";\nimport { DataLabelDropDown } from \"../../../../../../atomic/dropdowns/DataDropDown\";\nimport { DataSetupLabelDropDown } from \"../../../../../../atomic/dropdowns/DataSetupDropDown\";\nimport { RelationLabelDropDown } from \"../../../../../../atomic/dropdowns/RelationDropDown\";\nimport { SequenceLabelDropDown } from \"../../../../../../atomic/dropdowns/SequenceDropDown\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Data - Setup\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupLabelDropDown onSelect={editOrAddDataSetup}\n                                                             label=\"Data-Setup\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public squenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequence } from \"../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton } from \"../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DecisionLabelDropDown } from \"../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { StepLabelDropDown } from \"../../../../../../atomic/dropdowns/StepDropDown\";\nimport { DavitTextInput } from \"../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../molecules\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n    } = useControlPanelEditSequenceViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    )\n        ;\n};\n\nconst useControlPanelEditSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.squenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.squenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit) && text !== \"\") {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormLine>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormLine>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        // saveDecision,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*// TODO: Condition list*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataSetupViewModel } from \"../viewmodels/DataSetupViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Data Setup Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataSetupCTO } from \"../../../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditDataSetup } from \"../../../../../../../../slices/thunks/DataSetupThunks\";\nimport { EditInitData } from \"../../../../../../../../slices/thunks/InitDataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit dataSetup without dataSetupToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== \"\") {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + \"-copy\";\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== \"\") {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataSetupToEdit?.dataSetup.name || \"\"),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : \"\",\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataSetupForm } from \"../forms/DataSetupForm\";\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n            <FormDivider />\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.squenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.squenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitEditButton } from \"../../../../../../../atomic/buttons/DavitEditButton\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic/buttons/DavitShowMoreButton\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{textAlign: \"end\"}}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={\"border\"}\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr>\n                    <td style={{textAlign: \"center\"}}>Action</td>\n                    <td style={{textAlign: \"end\"}}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel><h3>Actions</h3></FormLabel>\n                    <DavitShowMoreButton show={showActions}\n                                         onClick={() => setShowActions(!showActions)}\n                    />\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>Select type of the next element</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <GoToOptionDropDown onSelect={handleType}\n                                        value={goTo ? goTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={setGoToTypeStep}\n                                value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                exclude={stepId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={createGoToStep} />\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={setGoToTypeDecision}\n                                value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.squenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.squenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.squenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.squenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.squenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.squenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.squenceStepTO.sequenceFk = stepToEdit!.squenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.squenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.squenceStepTO.sequenceFk, stepToEdit!.squenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.squenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.squenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.squenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.squenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.squenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.squenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.squenceStepTO.root ? stepToEdit?.squenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.squenceStepTO.id,\n        note: stepToEdit ? stepToEdit.squenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDataSetupModal } from \"./fragments/modals/EditDataSetupModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { ChainDropDown, DataSetupDropDown, SequenceDropDown } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Data - Setup\">\n                <DataSetupDropDown\n                    onSelect={selectDataSetup}\n                    placeholder=\"Select Data Setup ...\"\n                    value={currentDataSetup}\n                />\n            </OptionField>\n\n            <OptionField label=\"SEQUENCE\">\n                <SequenceDropDown onSelect={selectSequence}\n                                  value={currentSequence}\n                />\n            </OptionField>\n\n            <OptionField label=\"CHAIN\"\n                         divider={true}\n            >\n                <ChainDropDown onSelect={selectChain}\n                               value={currentChain}\n                />\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={true}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return \" * \" + sequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                \" * \" +\n                sequence.sequenceStepCTOs.find((step) => step.squenceStepTO.id === stepIndex)?.squenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{display: \"flex\"}}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\nimport { FlowChartlabel } from \"./fragments/FlowChartlabel\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n                \n                {renderFlowChart() && <>\n                    <div style={{display: \"flex\", position: \"absolute\", zIndex: 1, width: \"47vw\"}}>\n                        {chain && (\n                            <TabGroupFragment label=\"Mode\"\n                                              style={{backgroundColor: \"var(--background-color-header)\"}}\n                            >\n                                <TabFragment label=\"Chain\"\n                                             isActive={showChain}\n                                             onClick={() => setShowChain(true)}\n                                />\n                                <TabFragment label=\"Sequence\"\n                                             isActive={!showChain}\n                                             onClick={() => setShowChain(false)}\n                                />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{marginLeft: \"auto\"}}>\n                            <FlowChartlabel label=\"CHAIN:\"\n                                            text={chainName}\n                            />\n                            <FlowChartlabel label=\"SEQU.:\"\n                                            text={sequenceName}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.squenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.squenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.squenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.squenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.squenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).squenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).squenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).squenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).squenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).squenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Errors\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ACTION-ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.squenceStepTO.id === step.modelElementFk)\n                    ?.squenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.squenceStepTO.id === (goto as Intermediate).id)?.squenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.squenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.squenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.squenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.squenceStepTO.id === (goto as Intermediate).id)?.squenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.squenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.squenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";"],"sourceRoot":""}