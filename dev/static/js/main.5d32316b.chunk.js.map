{"version":3,"sources":["dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/davitVersion03/DavitVersionMigrator03.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateTable.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx","assets/exxcellent_logo_200.png"],"names":["DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","sequenceStates","chainStates","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","DavitVersionMigrator02","DavitVersionMigrator03","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","sequenceMockId","dataId","dataRelationExists","some","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceStateId","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateId","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","chainDecisions","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","FormLinePosition","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","useState","showMore","setShowMore","useEffect","tiny","faAngleRight","DavitDeleteButton","noConfirm","fluid","setFluid","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","isState","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveState","stateToSave","changeName","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createState","newChainState","deleteState","stateToDeleteId","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","selectedSequence","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","saveNote","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","useChainDecisionViewModel","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","StateTable","statesToEdit","addStateCallback","removeStateCallback","setActiveCallback","inputClasses","buildStateTableRow","ChainStateForm","stateToToggle","is","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","InitDataTO","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","EditDataSetupModal","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","isActive","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","zIndex","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"+UAoBaA,EACT,aA8BG,IA7BQC,EA6BT,uDC1C8B,cDcrBC,EA4BT,uDC5C+B,GDiBtBC,EA2BT,uDCxC8B,EDcrBC,EA0BT,uDCxC8B,EDgBrBC,EAwBT,uDAxBkB,IAAIC,IACbC,EAuBT,uDAvBkB,IAAID,IAEbE,EAqBT,uDArBqB,IAAIF,IAChBG,EAoBT,uDApBmB,IAAIH,IACdI,EAmBT,uDAnB4B,IAAIJ,IAEvBK,EAiBT,uDAjBqB,IAAIL,IAChBM,EAgBT,0DAhBiB,IAAIN,IACZO,EAeT,0DAfmB,IAAIP,IACdQ,EAcT,0DAdqB,IAAIR,IAEhBS,EAYT,0DAZiB,IAAIT,IACZU,EAWT,0DAX2B,IAAIV,IAEtBW,EAST,0DATqB,IAAIX,IAChBY,EAQT,0DARsB,IAAIZ,IAEjBa,EAMT,0DANkB,IAAIb,IACbc,EAKT,0DALsB,IAAId,IACjBe,EAIT,0DAJ0B,IAAIf,IAErBgB,EAET,0DAF0B,IAAIhB,IACrBiB,EACT,0DADuB,IAAIjB,IAC3B,yBA7BSL,cA6BT,KA5BSC,UA4BT,KA3BSC,YA2BT,KA1BSC,WA0BT,KAxBSC,SAwBT,KAvBSE,SAuBT,KArBSC,YAqBT,KApBSC,UAoBT,KAnBSC,mBAmBT,KAjBSC,YAiBT,KAhBSC,QAgBT,KAfSC,UAeT,KAdSC,YAcT,KAZSC,QAYT,KAXSC,kBAWT,KATSC,YAST,KARSC,aAQT,KANSC,SAMT,KALSC,aAKT,KAJSC,iBAIT,KAFSC,iBAET,KADSC,eExBFC,EAAyB,SAC1BC,GACJC,QAAQC,KAAK,kCACb,IAGMd,EAAuBY,EAAgBZ,QAAyBe,KAAI,SAACC,EAAQC,GAC/E,MAAO,CACHC,GAAIF,EAAOE,GACXC,WAAYH,EAAOG,WACnBC,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBC,iBAAkBN,EAAOM,iBACzBC,eAAgBP,EAAOO,eACvBC,eAAgBR,EAAOQ,eACvBC,YAAa,GACbR,MAAOA,MAGThB,EAA6BW,EAAgBX,UAA6Bc,KAAI,SAACW,GACjF,IAAMC,EAAyC,GAK/C,OAJAD,EAASE,iBAAiBC,SAAQ,SAACC,GAC/BH,EAAkBI,KAAKD,MAGpB,CACHE,QAASN,EAASM,QAClBL,kBAAmBA,EACnBM,SAAUP,EAASO,SACnBf,GAAIQ,EAASR,GACbgB,OAAQR,EAASQ,OACjBC,KAAMT,EAASS,KACfC,KAAMV,EAASU,KACfC,WAAYX,EAASW,eAGvBnC,EAAmBU,EAAgBV,MAAqBa,KAAI,SAACuB,GAC/D,MAAO,CACHpB,GAAIoB,EAAKpB,GACTiB,KAAMG,EAAKH,KACXI,kBAAmBD,EAAKC,kBACxBC,kBAAmBF,EAAKE,kBACxBC,KAAM,GACNC,UAAWJ,EAAKI,UAAU3B,KAAI,SAAC4B,GAC3B,MAAO,CAACzB,GAAIyB,EAASzB,GAAIiB,KAAMQ,EAASR,aAe9C3B,EAAqCI,EAAgBJ,eAAuCO,KAC9F,SAAC6B,GACG,MAAO,CACH1B,GAAI0B,EAAc1B,GAClBiB,KAAMS,EAAcT,KACpBU,QAASD,EAAcC,QACvBC,WAAYF,EAAcjB,kBAAkBZ,KAAI,SAAAgC,GAAc,OAhBhC,SAACA,EAAmCf,EAAiBgB,GAC3F,MAAO,CACH9B,IAAK,EACLc,QAASA,EACTgB,WAAYA,EACZ5B,OAAQ2B,EAAe3B,OACvBC,WAAY0B,EAAeE,YAU2CC,CAAkCH,EAAgBH,EAAcZ,QAASY,EAAc1B,OACzJgB,OAAQU,EAAcV,OACtBD,SAAUW,EAAcX,aAKpC,MAAO,CACH5C,QAtEoB,GAuEpBD,YD3FwB,cC6FxBI,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBI,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAE5BP,QAASA,EACTC,UAAWA,EACXC,MAAOA,EACPM,eAAgBA,ICjGf2C,EAAyB,SAC1BvC,GACJC,QAAQC,KAAK,kCACb,IAGMb,EAA2BW,EAAgBX,UAA6Bc,KAAI,SAACW,GAC/E,IAAMoB,EAA4B,GAWlC,OAVApB,EAASC,kBAAkBE,SAAQ,SAACC,GAChCgB,EAAWf,KAAK,CACZiB,WAAYtB,EAASR,GACrBG,WAAYS,EAAiBmB,WAC7B7B,OAAQU,EAAiBV,OACzBY,QAASN,EAASM,QAClBd,IAAK,OAIN,CACHc,QAASN,EAASM,QAClBc,WAAYA,EACZb,SAAUP,EAASO,SACnBf,GAAIQ,EAASR,GACbgB,OAAQR,EAASQ,OACjBC,KAAMT,EAASS,KACfC,KAAMV,EAASU,KACfC,WAAYX,EAASW,WACrBI,KAAM,OAId,MAAO,CACHpD,QF9CyB,GE+CzBD,YAAawB,EAAgBxB,YAC7BE,UF5CwB,EE6CxBC,SF7CwB,EE+CxBC,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBC,QAASY,EAAgBZ,QACzBC,UAAWA,EACXC,MAAOU,EAAgBV,MACvBC,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAC5BC,eAAgBI,EAAgBJ,iBCtD/B4C,EAAyB,SAC1BxC,GACJC,QAAQC,KAAK,kCACb,IAAMxB,EAAoBsB,EAAgBtB,UACpCC,EAAmBqB,EAAgBrB,SAEzC,MAAO,CACHF,QHnByB,GGoBzBD,YAAawB,EAAgBxB,YAC7BE,UAAWA,EACXC,SAAUA,EAEVC,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBC,QAASY,EAAgBZ,QACzBC,UAAWW,EAAgBX,UAC3BC,MAAOU,EAAgBV,MACvBC,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAC5BC,eAAgBI,EAAgBJ,eAChCC,eAAgB,GAChBC,YAAa,KC1CZ2C,EAAsB,SACjBzC,GACVC,QAAQC,KAAK,+BACb,IAAIwC,EAAmC,GAEvC,OAAQ1C,EAAgBvB,SACpB,UAAKkE,EACDD,EAA0BF,EACtBD,EACIxC,EAA+BC,KAGvC,MACJ,IAAK,GACD0C,EAA0BF,EACtBD,EAA+BvC,IACnC,MACJ,IAAK,GACD0C,EAA0BF,EAA+BxC,GAGjE,OAAO0C,GArBFD,EAAsB,SAwBGG,GAC9B,IAAIC,GAAyB,EAM7B,YALwBF,IAApBC,EAAQnE,SJzBiB,KIyBQmE,EAAQnE,QACzCoE,GAAgB,EAEhB5C,QAAQ6C,KAAR,6DAAmEF,EAAQnE,QAA3E,OAEGoE,GChCTE,E,WAIF,aAII,GAJkB,yBAFdrB,UAEa,EACZqB,EAAUhB,UAAagB,EAAUhB,SAASL,MAC3CsB,KAAKC,sBAELF,EAAUhB,SACV,OAAOgB,EAAUhB,SAErBgB,EAAUhB,SAAWiB,K,uDAGzB,WACI,IAAME,EAAkCC,aAAaC,QLfrC,SKgBZC,EAAuB,CACvB5E,QLfyB,GKgBzBD,YLdwB,cKexBE,ULbwB,EKcxBC,SLdwB,EKexBC,OAAQ,GACRE,OAAQ,GACRG,iBAAkB,GAClBF,UAAW,GACXC,QAAS,GACTE,UAAW,GACXC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXC,MAAO,GACPC,gBAAiB,GACjBC,UAAW,GACXC,WAAY,GACZC,OAAQ,GACRC,WAAY,GACZC,eAAgB,GAChBC,eAAgB,GAChBC,YAAa,IAEZoD,GAGDG,EAAcC,KAAKC,MAAML,GACpBT,EAAsDY,KACvDA,EAAcZ,EAAkCY,GAChDL,KAAKQ,cAAcF,KAAKG,UAAUJ,MALtCF,aAAaO,QLzCD,QKyCmBJ,KAAKG,UAAUJ,IAQlDL,KAAKW,SAASN,K,sBAGlB,SAAiBA,GAAuB,IAAD,OACnCL,KAAKtB,KAAO,IAAInD,EACXkE,EAAsDY,KACvDA,EAAcZ,EAAkCY,IAEpDO,OAAOC,QAAQR,GAAapC,SAAQ,YAAmB,IAAD,mBAAhB6C,EAAgB,KAAXC,EAAW,KAClD,QAAcpB,IAAVoB,EAkBA,MAAM,IAAIC,MAAJ,iCAAoCF,IAjB1C,GAAIG,MAAMC,QAAQH,GAAQ,CACtB,IAAMI,EAAYP,OAAOC,QAAQ,EAAKnC,MAAO0C,MAAK,yCAA2BN,KAC7E,IAAIK,EAMA,MADAlE,QAAQ6C,KAAR,qCAA2CgB,EAA3C,mBAAyDC,IACnD,IAAIC,MAAJ,qCAAwCF,EAAxC,mBAAsDC,IAL5DA,EAAM9C,SAAQ,SAACoD,GACXF,EAAU,GAAGG,IAAID,EAAW/D,GAAI+D,MAO5C,EAAK3C,KAAMlD,YAAc6E,EAAY7E,YAGrC,EAAKkD,KAAMhD,UAAY2E,EAAY3E,UAAY2E,EAAY3E,UAAY,EACvE,EAAKgD,KAAM/C,SAAW0E,EAAY1E,SAAW0E,EAAY1E,SAAW,O,sBAOhF,WACIwE,aAAaO,QLlFG,QKkFeJ,KAAKG,UAAUT,KAAKuB,yB,gCAGvD,WACI,MAAO,CACH/F,YAAawE,KAAKtB,KAAMlD,YAAYgG,WACpC/F,QLtFyB,GKuFzBC,UAAW+F,OAAOzB,KAAKtB,KAAMhD,WAC7BC,SAAU8F,OAAOzB,KAAKtB,KAAM/C,UAC5BC,OAAQqF,MAAMS,KAAK1B,KAAKtB,KAAM9C,OAAO+F,UACrC7F,OAAQmF,MAAMS,KAAK1B,KAAKtB,KAAM5C,OAAO6F,UACrC3F,QAASiF,MAAMS,KAAK1B,KAAKtB,KAAM1C,QAAQ2F,UACvC1F,iBAAkBgF,MAAMS,KAAK1B,KAAKtB,KAAMzC,iBAAiB0F,UACzD5F,UAAWkF,MAAMS,KAAK1B,KAAKtB,KAAM3C,UAAU4F,UAC3CzF,UAAW+E,MAAMS,KAAK1B,KAAKtB,KAAMxC,UAAUyF,UAC3CxF,MAAO8E,MAAMS,KAAK1B,KAAKtB,KAAMvC,MAAMwF,UACnCvF,QAAS6E,MAAMS,KAAK1B,KAAKtB,KAAMtC,QAAQuF,UACvCrF,MAAO2E,MAAMS,KAAK1B,KAAKtB,KAAMpC,MAAMqF,UACnCpF,gBAAiB0E,MAAMS,KAAK1B,KAAKtB,KAAMnC,gBAAgBoF,UACvDnF,UAAWyE,MAAMS,KAAK1B,KAAKtB,KAAMlC,UAAUmF,UAC3ClF,WAAYwE,MAAMS,KAAK1B,KAAKtB,KAAMjC,WAAWkF,UAC7CtF,UAAW4E,MAAMS,KAAK1B,KAAKtB,KAAMrC,UAAUsF,UAC3CjF,OAAQuE,MAAMS,KAAK1B,KAAKtB,KAAMhC,OAAOiF,UACrChF,WAAYsE,MAAMS,KAAK1B,KAAKtB,KAAM/B,WAAWgF,UAC7C/E,eAAgBqE,MAAMS,KAAK1B,KAAKtB,KAAM9B,eAAe+E,UACrD9E,eAAgBoE,MAAMS,KAAK1B,KAAKtB,KAAM7B,eAAe8E,UACrD7E,YAAamE,MAAMS,KAAK1B,KAAKtB,KAAM5B,YAAY6E,a,2BAIvD,SAAqBC,GACjB,IAAMvB,EAAuBC,KAAKC,MAAMqB,GACxC5B,KAAKW,SAASN,GACdF,aAAaO,QLnHG,QKmHekB,K,0BAGnC,SAAoBpG,GAChB,IAAMqG,EAAUvB,KAAKG,UAAUT,KAAKuB,sBAC9BO,EAAU,uCAAyCC,mBAAmBF,GACtEG,EAAcC,SAASC,cAAc,KAC3CF,EAAYG,aAAa,OAAQL,GACjCE,EAAYG,aAAa,WAAY3G,EAAc,SACnDwG,EAAYI,U,8BAGhB,WACIjC,aAAakC,WLhIG,SKiIhBrC,KAAKC,wB,2BAGT,WACID,KAAKsC,WACLtC,KAAKC,wB,sBAGT,WACIhD,QAAQ6C,KAAK,0BACbE,KAAKC,wB,0BAGT,WAII,OAHKD,KAAKtB,MACNsB,KAAKC,sBAEFD,KAAKtB,S,KAlJdqB,EACKhB,c,EAqJX,ICvJYwD,EDyJGC,EAFG,IAAIzC,EE3JT0C,EAAY,CACrBC,kBADqB,SACHC,GACd,OAAkB,OAAXA,QAA8BhD,IAAXgD,GAG9BC,SALqB,SAKZD,GACL,OAAOF,EAAUC,kBAAkBC,GAAUA,EAASrC,KAAKC,MAAMD,KAAKG,UAAUkC,KAGpFE,YATqB,SASTtE,GACR,IAAIuE,GAAiB,EAKrB,OAJK9C,KAAK0C,kBAAkBnE,KAExBuE,EAAiB,KAATvE,GAELuE,K,SDXHP,K,UAAAA,E,cAAAA,E,YAAAA,E,YAAAA,E,WAAAA,M,KEEL,ICFKQ,EDECC,EAAoB,SAEKC,EAAwBT,KAFjDQ,EAAoB,SAMEC,EAAwBT,KAN9CQ,EAAoB,SAUHE,EAAgBV,GACtC,IAAMW,EAA8BlC,MAAMS,KAAKc,EAAUjG,gBAAgBoF,UAAUyB,MAC/E,SAACC,GAAD,OAAcA,EAASC,UAAYJ,GAAUG,EAASE,UAAYL,KAGhEM,EAAuBvC,MAAMS,KAAKc,EAAUpG,QAAQuF,UAAUyB,MAChE,SAACK,GAAD,OAAeA,EAAUjG,SAAW0F,KAGlCQ,EAA0BzC,MAAMS,KAAKc,EAAUnG,UAAUsF,UAAUyB,MAAK,SAACtF,GAAD,OAC1EA,EAASoB,WAAWkE,MAAK,SAACO,GAAD,OAAeA,EAAUnG,SAAW0F,QAG3DU,EAA+B3C,MAAMS,KAAKc,EAAU5F,eAAe+E,UAAUyB,MAAK,SAACpE,GAAD,OACpFA,EAAcE,WAAWkE,MAAK,SAACO,GAAD,OAAeA,EAAUnG,SAAW0F,QAGhEW,EAA0B5C,MAAMS,KAAKc,EAAUhG,UAAUmF,UAAUyB,MACrE,SAACU,GAAD,OAAcA,EAAStG,SAAW0F,KAGtC,GAAIC,GAAsBK,GAAeE,GAAkBE,GAAuBC,EAC9E,MAAM,IAAI7C,MAAJ,sCAAyCkC,EAAzC,uCAhCLF,EAAoB,SAoCKE,EAAgB7D,EAAoBmD,GAClE,IAAMuB,EAAwB9C,MAAMS,KAAKc,EAAUpG,QAAQuF,UAAUyB,MACjE,SAAChG,GAAD,OAAYA,EAAOI,SAAW0F,GAAU9F,EAAOK,aAAe4B,KAG5DqE,EAA0BzC,MAAMS,KAAKc,EAAUnG,UAAUsF,UAAUyB,MAAK,SAACtF,GAAD,OAC1EA,EAASoB,WAAWkE,MAAK,SAACO,GAAD,OAAeA,EAAUnG,SAAW0F,GAAUS,EAAUlG,aAAe4B,QAG9FuE,EAA+B3C,MAAMS,KAAKc,EAAU5F,eAAe+E,UAAUyB,MAAK,SAACpE,GAAD,OACpFA,EAAcE,WAAWkE,MACrB,SAACO,GAAD,OAAeA,EAAUnG,SAAW0F,GAAUS,EAAUlG,aAAe4B,QAIzEwE,EAA0B5C,MAAMS,KAAKc,EAAUhG,UAAUmF,UAAUyB,MACrE,SAACU,GAAD,OAAcA,EAAStG,SAAW0F,GAAUY,EAASrG,aAAe4B,KAGxE,GAAI0E,GAAgBL,GAAkBG,GAAkBD,EACpD,MAAM,IAAI5C,MAAJ,+CAAkD3B,EAAlD,uCAxDL2D,EAAoB,SA4DFgB,EAAiBxB,GACxC,IAAMuB,EAAwB9C,MAAMS,KAAKc,EAAUpG,QAAQuF,UAAUyB,MACjE,SAAChG,GAAD,OAAYA,EAAOO,iBAAmBqG,GAAW5G,EAAOM,mBAAqBsG,KAG3EN,EAA0BzC,MAAMS,KAAKc,EAAUnG,UAAUsF,UAAUyB,MAAK,SAACtF,GAAD,OAC1EA,EAASoB,WAAWkE,MAAK,SAACO,GAAD,OAAeA,EAAUvF,UAAY4F,QAG5DJ,EAA+B3C,MAAMS,KAAKc,EAAU5F,eAAe+E,UAAUyB,MAC/E,SAACpE,GAAD,OAAmBA,EAAcE,WAAWkE,MAAK,SAAAO,GAAS,OAAIA,EAAUvF,UAAY4F,QAGlFH,EAA0B5C,MAAMS,KAAKc,EAAUhG,UAAUmF,UAAUyB,MACrE,SAACU,GAAD,OAAcA,EAAS1F,UAAY4F,KAGvC,GAAID,GAAgBL,GAAkBE,GAAuBC,EACzD,MAAM,IAAI7C,MAAJ,uCAA0CgD,EAA1C,uCA9ELhB,EAAoB,SAkFHiB,EAA8BzB,GACpD,IAAI0B,EAA0B,8BAA0BD,EAAa1F,KAAvC,qBAAwD0F,EAAa3G,GAArE,8BAC1B6G,EAA6B,GAE3BC,EAA6CnD,MAAMS,KAAKc,EAAUrG,MAAMwF,UAAUP,MACpF,SAACiD,GAAD,OAAUA,EAAKC,KAAKC,OAAShC,EAAUiC,MAAQH,EAAKC,KAAKhH,KAAO2G,EAAa3G,MAGjF6G,GAC0BC,EAAc,gBAAYA,EAAe7F,KAA3B,qBAA4C6F,EAAe9G,GAA3D,KAAmE,GAE3G,IAAMmH,EAAyCxD,MAAMS,KAAKc,EAAUpG,QAAQuF,UAAUP,MAClF,SAAChE,GAAD,OAAYA,EAAOQ,iBAAmBqG,EAAa3G,MAGvD6G,GAEKM,EAAgB,qBAAiBA,EAAiBlH,WAAlC,qBAAyDkH,EAAiBnH,GAA1E,KAAkF,GAEvG,IAAMoH,EAA6CzD,MAAMS,KAAKc,EAAUnG,UAAUsF,UAAUP,MACxF,SAACtD,GAAD,OACKA,EAASQ,OAAOiG,OAAShC,EAAUiC,MAAQ1G,EAASQ,OAAOhB,KAAO2G,EAAa3G,IAC/EQ,EAASO,SAASkG,OAAShC,EAAUiC,MAAQ1G,EAASO,SAASf,KAAO2G,EAAa3G,MAO5F,IAJA6G,GAEKO,EAAkB,uBAAmBA,EAAmBnG,KAAtC,qBAAuDmG,EAAmBpH,GAA1E,KAAkF,IAElFqH,OAAS,EAC5B,MAAM,IAAI3D,MAAMkD,EAAqBC,IAhHpCnB,EAAoB,SAoHC4B,EAAoBpC,GAC9C,IAAMqC,EAAsB5D,MAAMS,KAAKc,EAAUrG,MAAMwF,UAAUyB,MAAK,SAACiB,GAAD,OAAUA,EAAK5F,aAAemG,KAE9FlB,EAA0BzC,MAAMS,KAAKc,EAAUnG,UAAUsF,UAAUyB,MACrE,SAAC0B,GAAD,OAASA,EAAIrG,aAAemG,KAEhC,GAAIC,GAAcnB,EACd,MAAM,IAAI1C,MAAJ,kCAAqC4D,EAArC,oDA3HL5B,EAAoB,SA6IQ+B,EAAsBvC,GACvD,IAAMwC,EAAuB/D,MAAMS,KAAKc,EAAU5G,OAAO+F,UAAUyB,MAC/D,SAAC6B,GAAD,OAAWA,EAAMtG,oBAAsBoG,KAErCG,EAAsBjE,MAAMS,KAAKc,EAAUlG,MAAMqF,UAAUyB,MAC7D,SAAC1E,GAAD,OAAUA,EAAKC,oBAAsBoG,KAEzC,GAAIC,GAAeE,EACf,MAAM,IAAIlE,MAAJ,kDAAqD+D,EAArD,uCArJL/B,EAAoB,SAyJCmC,EAAoB3C,GAI9C,GAHuCvB,MAAMS,KAAKc,EAAUvG,iBAAiB0F,UAAUyB,MACnF,SAACgC,GAAD,OAAaA,EAAQC,aAAeF,KAGpC,MAAM,IAAInE,MAAJ,0CAA6CmE,EAA7C,gDA9JLnC,EAAoB,SAkKDsC,EAAkB9C,GAE1C,GAD6BvB,MAAMS,KAAKc,EAAU5G,OAAO+F,UAAUyB,MAAK,SAAC6B,GAAD,OAAWA,EAAMM,WAAaD,KAElG,MAAM,IAAItE,MAAJ,wCAA2CsE,EAA3C,sCArKLtC,EAAoB,SAyKFwC,EAAiBhD,GAExC,GAD6BvB,MAAMS,KAAKc,EAAU5G,OAAO+F,UAAUyB,MAAK,SAAC6B,GAAD,OAAWA,EAAMQ,WAAaD,KAElG,MAAM,IAAIxE,MAAJ,uCAA0CwE,EAA1C,sCEhLLE,EAAc,SACb/C,EAAapE,GACnB,GAAIkE,EAAUC,kBAAkBC,GAE5B,MADA1F,QAAQ6C,KAAR,UAAgBvB,EAAhB,mCACM,IAAIyC,MAAJ,sBAAyBzC,EAAzB,oC,QCJLoH,EAAiB,CAC1BC,eAD0B,SACXC,GACX,IAAIvI,EAAKwI,KAAKC,IAAL,MAAAD,KAAI,YAAQD,EAAY1I,KAAI,SAAC6I,GAAD,OAAcA,EAAS1I,QAAO,EAInE,OAHIA,KAAQ2I,MACR3I,EAAK,GAEFA,GAGX4I,cAT0B,SASZ5I,EAAYuI,GACtB,IAAIM,EAAoB7I,EAMxB,OAJmB,IAAf6I,IACAA,EAAYnG,KAAK4F,eAAeC,IAG7BM,ICZFC,EAAkB,CAC3BhF,KAD2B,SACtB9D,GACD,OAAOkF,EAAU6D,eAAezK,OAAO0K,IAAIhJ,IAG/CiJ,QAL2B,WAMvB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAezK,OAAO+F,WAGtD6E,OAT2B,SASpBvB,GAGH,GAFAjC,EAA6CiC,EAAM3H,GAAIkF,EAAU6D,iBACjD7D,EAAU6D,eAAezK,OAAO4K,OAAOvB,EAAM3H,IAEzD,MAAM,IAAI0D,MAAM,yCAEpB,OAAOiE,GAGXwB,KAlB2B,SAkBtBxB,GAED,IAAIyB,EAUJ,OAXAhB,EAAsBT,EAAO,SAGzByB,GADc,IAAdzB,EAAM3H,GACC,2BACA2H,GADA,IAEH3H,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGpC,eAAOtB,GAElBzC,EAAU6D,eAAezK,OAAO0F,IAAIoF,EAAQpJ,GAAKoJ,GAC1CA,IC9BFC,EAAkB,CAC3BvF,KAD2B,SACtB9D,GACD,OAAOkF,EAAU6D,eAAevK,OAAOwK,IAAIhJ,IAG/CiJ,QAL2B,WAMvB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAevK,OAAO6F,WAGtD6E,OAT2B,SASpBI,GAGH,GAFA5D,EAA6C4D,EAAMtJ,GAAIkF,EAAU6D,iBACjD7D,EAAU6D,eAAevK,OAAO0K,OAAOI,EAAMtJ,IAEzD,MAAM,IAAI0D,MAAM,yCAEpB,OAAO4F,GAGXH,KAlB2B,SAkBtBG,GAED,IAAIC,EAWJ,OAZAnB,EAAsBkB,EAAO,UAEX,IAAdA,EAAMtJ,IACNuJ,EAAO,2BACAD,GADA,IAEHtJ,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAE3CtJ,QAAQC,KAAK,qBAAuB2J,EAAQvJ,KAE5CuJ,EAAO,eAAOD,GAElBpE,EAAU6D,eAAevK,OAAOwF,IAAIuF,EAAQvJ,GAAKuJ,GAC1CA,IChCFC,EAAmB,CAC5B1F,KAD4B,SACvB9D,GACD,OAAOkF,EAAU6D,eAAerK,QAAQsK,IAAIhJ,IAGhDiJ,QAL4B,WAMxB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAerK,QAAQ2F,WAGvD6E,OAT4B,SASrBO,GAGH,GAFA/D,EAA8C+D,EAAOzJ,GAAIkF,EAAU6D,iBACnD7D,EAAU6D,eAAerK,QAAQwK,OAAOO,EAAOzJ,IAE3D,MAAM,IAAI0D,MAAM,yCAEpB,OAAO+F,GAGXN,KAlB4B,SAkBvBM,GACD,IAAIC,EAUJ,OARIA,GADe,IAAfD,EAAOzJ,GACC,2BACDyJ,GADC,IAEJzJ,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGnC,eAAOQ,GAEnBvE,EAAU6D,eAAerK,QAAQsF,IAAI0F,EAAS1J,GAAK0J,GAC5CA,IC7BFC,EAA4B,CACrC7F,KADqC,SAChC9D,GACD,OAAOkF,EAAU6D,eAAepK,iBAAiBqK,IAAIhJ,IAGzDiJ,QALqC,WAMjC,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAepK,iBAAiB0F,WAGhE6E,OATqC,SAS9BU,GACHlE,EAAuDkE,EAAgB5J,GAAIkF,EAAU6D,gBACrF,IAAMc,EAAU3E,EAAU6D,eAAepK,iBAAiBuK,OAAOU,EAAgB5J,IACjF,IAAK6J,EACD,MAAM,IAAInG,MAAM,yCAEpB,OAAOmG,GAGXV,KAlBqC,SAkBhCS,GACD,IAAIE,EAUJ,OARIA,GADwB,IAAxBF,EAAgB5J,GACC,2BACV4J,GADU,IAEb5J,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAG1B,eAAOW,GAE5B1E,EAAU6D,eAAepK,iBAAiBqF,IAAI8F,EAAkB9J,GAAK8J,GAC9DA,IC7BFC,EAAqB,CAC9BjG,KAD8B,SACzB9D,GACD,OAAOkF,EAAU6D,eAAetK,UAAUuK,IAAIhJ,IAGlDiJ,QAL8B,WAM1B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAetK,UAAU4F,WAGzD6E,OAT8B,SASvBc,GACHtE,EAAgDsE,EAAShK,GAAIkF,EAAU6D,gBACvE,IAAMc,EAAU3E,EAAU6D,eAAetK,UAAUyK,OAAOc,EAAShK,IACnE,IAAK6J,EACD,MAAM,IAAInG,MAAM,yCAEpB,OAAOmG,GAGXV,KAlB8B,SAkBzBa,GACD,IAAIC,EAUJ,OARIA,GADiB,IAAjBD,EAAShK,GACC,2BACHgK,GADG,IAENhK,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGjC,eAAOe,GAErB9E,EAAU6D,eAAetK,UAAUuF,IAAIiG,EAAWjK,GAAKiK,GAChDA,IChCFC,EAAoB,SACbjJ,GAEZ,OADAiE,EAAU6D,eAAe7K,YAAc+C,EAChCA,GAHFiJ,EAAoB,SAMdC,GAEX,OADAjF,EAAU6D,eAAe3K,UAAY+L,EAC9BA,GARFD,EAAoB,SAWhBC,GAET,OADAjF,EAAU6D,eAAe1K,SAAW8L,EAC7BA,GAbFD,EAAoB,WAiBzB,OAAOhF,EAAU6D,eAAe3K,WAjB3B8L,EAAoB,WAqBzB,OAAOhF,EAAU6D,eAAe1K,UCZ3B+L,EAA6B,SAKfpK,GACnB,IAAM4J,EAAkBD,EAA0B7F,KAAK9D,GACvDoI,EAAsBwB,EAAiB,mBACvC,IAAMI,EAAWD,EAAmBjG,KAAK8F,EAAiB7B,YAE1D,OADAK,EAAsB4B,EAAU,YACzB,CAACJ,gBAAiBA,EAAkBI,SAAUA,IAVhDI,GAA6B,SAiB3BpK,GACP,OAAOwJ,EAAiB1F,KAAK9D,IAlBxBoK,GAA6B,SAqBlBC,GAChBjC,EAAsBiC,EAAoB,sBAC1CjC,EAAsBiC,EAAmBL,SAAU,YACnD,IAAMM,EAAgBP,EAAmBZ,KAAKkB,EAAmBL,UAC3DO,EAA6CpF,EAAUG,SAAS+E,GAGtE,OAFAE,EAAuBX,gBAAgB7B,WAAauC,EAActK,GAE3D,CACHgK,SAAUM,EACVV,gBAHyBD,EAA0BR,KAAKoB,EAAuBX,mBA3B9EQ,GAA6B,SAkC3BX,GAEP,OADArB,EAAsBqB,EAAQ,UACvBD,EAAiBL,KAAKM,IApCxBW,GAA6B,SAuCbC,GACrBjC,EAAsBiC,EAAoB,sBAC1C,IAAMG,EAAmBb,EAA0BT,OAAOmB,EAAmBT,iBAE7E,IAD0BG,EAAmBb,OAAOmB,EAAmBL,YAC5CQ,EACvB,MAAM,IAAI9G,MAAM,mBAEpB,OAAO2G,GA9CFD,GAA6B,SAiDzBX,GAET,IADkBD,EAAiBN,OAAOO,GAEtC,MAAM,IAAI/F,MAAM,mBAEpB,OAAO+F,GAtDFW,GAA6B,SAyDxBD,GACV,OAAOD,EAAiCC,IA1DnCC,GAA6B,SA6DzBD,GACT,OAAOD,EAA+BC,IA9DjCC,GAA6B,SAiEtBlM,GACZ,OAAOgM,EAAkChM,IAlEpCkM,GAA6B,WAsElC,OAAOF,KAtEFE,GAA6B,WA0ElC,OAAOF,KC1EFO,GAAyB,CAClCxB,QADkC,WAE9B,OAAOH,EAAgBG,UAAUpJ,KAAI,SAAC8H,GAAD,OAAW+C,GAAe/C,OAGnEgD,QALkC,SAK1B3K,GACJ,OAAO0K,GAAe5B,EAAgBhF,KAAK9D,KAG/C8D,KATkC,SAS7B9D,GACD,OAAO8I,EAAgBhF,KAAK9D,IAGhC4K,cAbkC,WAc9B,OAAOvB,EAAgBJ,WAG3BC,OAjBkC,SAiB3BvB,GAOH,OANAS,EAAsBT,EAAMiC,gBAAiB,sBAC7CxB,EAAsBT,EAAM8B,OAAQ,YACpCrB,EAAsBT,EAAMA,MAAO,WACnCmB,EAAgBI,OAAOvB,EAAMA,OAC7ByC,GAAoDzC,EAAMiC,iBAC1DQ,GAAwCzC,EAAM8B,QACvC9B,GAGXkD,YA3BkC,SA2BtBvB,GAA0B,IAAD,OAQjC,OAPAlB,EAAsBkB,EAAO,SACK5G,KAAKuG,UAAU6B,QAAO,SAACnD,GAAD,OAAWA,EAAMA,MAAMQ,WAAamB,EAAMtJ,MACpFW,SAAQ,SAACgH,GACnBA,EAAMA,MAAMQ,UAAY,EACxB,EAAK4C,QAAQpD,MAEjB0B,EAAgBH,OAAOI,GAChBA,GAGXyB,QAtCkC,SAsC1BC,GACJ5C,EAAsB4C,EAAU,YAChC,IAAMC,EAAiB9F,EAAUG,SAAS0F,GACpCE,EAAcd,GAAsCa,EAAKxB,QAC/DwB,EAAKtD,MAAMM,SAAWiD,EAAYlL,GAClC,IAAMmL,EAAuBf,GAA+Ca,EAAKrB,iBAGjF,OAFAqB,EAAKtD,MAAMtG,kBAAoB8J,EAAqBvB,gBAAgB5J,GAE7D,CACH2H,MAFemB,EAAgBK,KAAK8B,EAAKtD,OAGzCiC,gBAAiBuB,EACjB1B,OAAQyB,IAIhBE,UArDkC,SAqDxB9B,GAEN,OADAlB,EAAsBkB,EAAO,SACtBD,EAAgBF,KAAKG,KAI9BoB,GAAiB,SAAC/C,GACpBS,EAAsBT,EAAO,SAC7B,IAAM8B,EAA+BW,GAAsCzC,EAAOM,UAClFG,EAAsBqB,EAAQ,UAC9B,IAAMG,EAAkDQ,EACpDzC,EAAOtG,mBAGX,OADA+G,EAAsBwB,EAAiB,mBAChC,CACHjC,MAAOA,EACPiC,gBAAiBA,EACjBH,OAAQA,IC5EH4B,GAA2B,CACpCvH,KADoC,SAC/BwH,GACD,OAAOpG,EAAU6D,eAAe9J,gBAAgB+J,IAAIsC,IAExDrC,QAJoC,WAKhC,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe9J,gBAAgBoF,WAE/D8E,KAPoC,SAO/BoC,GAED,IAAIC,EAWJ,OAZApD,EAAsBmD,EAAc,mBAEX,IAArBA,EAAavL,IACbwL,EAAc,2BACPD,GADO,IAEVvL,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAE3CtJ,QAAQC,KAAK,qBAAuB4L,EAAexL,KAEnDwL,EAAc,eAAOD,GAEzBrG,EAAU6D,eAAe9J,gBAAgB+E,IAAIwH,EAAexL,GAAKwL,GAC1DA,GAGXtC,OAvBoC,SAuB7BqC,GAGH,GAFAnD,EAAsBmD,EAAc,mBACpBrG,EAAU6D,eAAe9J,gBAAgBiK,OAAOqC,EAAavL,IAEzE,MAAM,IAAI0D,MAAM,yCAEpB,OAAO6H,ICzBFE,GAAiB,CAC1B3H,KAD0B,SACrB8B,GACD,OAAOV,EAAU6D,eAAe/J,MAAMgK,IAAIpD,IAG9CqD,QAL0B,WAMtB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe/J,MAAMqF,WAGrD8E,KAT0B,SASrB/H,GAGD,GAFAgH,EAAsBhH,EAAM,QAExBA,EAAKI,UAAU6F,QAAU,EACzB,MAAM,IAAI3D,MAAJ,0BAA6BtC,EAAKpB,GAAlC,uBAGV0L,GAA+BtK,EAAMsB,KAAKuG,UAAW/D,EAAU6D,gBAE/D,IAAI4C,EAAc,eAAOvK,GAMzB,OAJAuK,EAASC,GAAoBlJ,KAAKuG,UAAW0C,IACtCnK,UAAYJ,EAAKI,UAAU3B,KAAI,SAAC4B,GAAD,OAAcoK,GAAwBzK,EAAKI,UAAWC,MAE5FyD,EAAU6D,eAAe/J,MAAMgF,IAAI2H,EAAO3L,GAAK2L,GACxCA,GAGXzC,OA3B0B,SA2BnByC,GAMH,GALAjG,EAA4CiG,EAAO3L,GAAIkF,EAAU6D,gBACjE4C,EAAOnK,UAAUb,SAAQ,SAACc,GAAD,OACrBiE,EAAoDiG,EAAO3L,GAAIyB,EAASzB,GAAIkF,EAAU6D,oBAE1E7D,EAAU6D,eAAe/J,MAAMkK,OAAOyC,EAAO3L,IAEzD,MAAM,IAAI0D,MAAM,yCAEpB,OAAOiI,IAITE,GAA0B,SAACrK,EAA6BC,GAC1D,IAAMqK,EAA+B3G,EAAUG,SAAS7D,GAIxD,OAHqB,IAAjBA,EAASzB,KACT8L,EAAa9L,GAAKqI,EAAeC,eAAe9G,IAE7CsK,GAGLF,GAAsB,SAACG,EAAmBJ,GAC5C,IAAMK,EAAqB7G,EAAUG,SAASqG,GAI9C,OAHuB,IAAnBK,EAAWhM,KACXgM,EAAWhM,GAAKqI,EAAeC,eAAeyD,IAE3CC,GAGLN,GAAiC,SAACtK,EAAcpC,EAAiBkG,GACnE,IAAiB,IAAb9D,EAAKpB,GAAW,CAChB,IAAMiM,EAAmCjN,EAAM8E,MAAK,SAACoI,GAAD,OAAQA,EAAGlM,KAAOoB,EAAKpB,MAC3E,GAAIiM,EAC2CA,EAAazK,UAAUsJ,QAC9D,SAACrJ,GAAD,OAAeL,EAAKI,UAAUsE,MAAK,SAACqG,GAAD,OAAUA,EAAKnM,KAAOyB,EAASzB,SAErDW,SAAQ,SAACc,GAAD,OACrBiE,EAAoDtE,EAAKpB,GAAIyB,EAASzB,GAAIkF,QC/D7EkH,GAAwB,CAGjCC,SAHiC,SAGxBrM,GACL,OAAOyL,GAAe3H,KAAK9D,IAG/BsM,YAPiC,SAOrBtM,GACR,OAAOuM,GAAcd,GAAe3H,KAAK9D,KAG7CwM,aAXiC,WAY7B,OAAOf,GAAexC,UAAUpJ,KAAI,SAACuB,GAAD,OAAUmL,GAAcnL,OAGhEqL,YAfiC,SAerBC,GACRtE,EAAsBsE,EAAS,WAC/B,IAAMC,EAAuBxH,EAAUG,SAASoH,GAC1CvB,EAAuBf,GAA+CsC,EAAQ9C,iBAGpF,OAFA+C,EAAYvL,KAAKC,kBAAoB8J,EAAqBvB,gBAAgB5J,GAEnE,CACHoB,KAFgBqK,GAAetC,KAAKwD,EAAYvL,MAGhDwI,gBAAiBuB,IAIzByB,cA3BiC,SA2BnBF,GAA4B,IAAD,OAUrC,OATAtE,EAAsBsE,EAAQ9C,gBAAiB,sBAC/CxB,EAAsBsE,EAAQtL,KAAM,UACAsB,KAAKmK,0BACyB/B,QAC9D,SAAC/E,GAAD,OAAcA,EAASC,UAAY0G,EAAQtL,KAAKpB,IAAM+F,EAASE,UAAYyG,EAAQtL,KAAKpB,MAE1EW,SAAQ,SAACoF,GAAD,OAAc,EAAK+G,sBAAsB/G,MACnE0F,GAAevC,OAAOwD,EAAQtL,MAC9BgJ,GAAoDsC,EAAQ9C,iBACrD8C,GAKXK,uBA1CiC,WA2C7B,OAAO1B,GAAyBpC,WAGpC4D,wBA9CiC,WA+C7B,OAAOT,GAAsBW,yBAAyBlN,IAAImN,KAG9DC,iBAlDiC,SAkDhB1B,GAGb,OAFAnD,EAAsBmD,EAAc,gBACTF,GAAyBlC,KAAKoC,IAI7DuB,sBAxDiC,SAwDXtB,GAGlB,OAFApD,EAAsBoD,EAAgB,mBACtCH,GAAyBnC,OAAOsC,GACzBA,IAMTwB,GAAwB,SAACxB,GAC3BpD,EAAsBoD,EAAgB,kBACtC,IAAM0B,EAAgCX,GAAcH,GAAsBC,SAASb,EAAexF,UAClGoC,EAAsB8E,EAAU,WAChC,IAAMC,EAAgCZ,GAAcH,GAAsBC,SAASb,EAAevF,UAElG,OADAmC,EAAsB+E,EAAU,WACzB3B,GAGLe,GAAgB,SAACnL,GACnBgH,EAAsBhH,EAAM,QAC5B,IAAMwI,EAAkDQ,EACpDhJ,EAAMC,mBAGV,OADA+G,EAAsBwB,EAAiB,mBAChC,CACHxI,KAAMA,EACNwI,gBAAiBA,I,0BbxFbnE,K,UAAAA,E,cAAAA,E,YAAAA,E,WAAAA,M,KcJL,IAAM2H,GACT,aAAqC,IAAlBpN,EAAiB,wDAAH,EAAG,yBAAjBA,MCEVqN,GAAb,oDACI,aAOG,IAAD,EANSpM,EAMT,uDANwB,GACfE,EAKT,wDAL+B,EACtBmM,EAIT,wDAJgC,EACvBtG,EAGT,uDAH2B,CAACC,KAAMxB,EAAe8H,OACxCrM,EAET,wDADSS,EACT,wDAD4B,EAC5B,4BACE,gBAPOV,OAMT,EALSE,aAKT,EAJSmM,cAIT,EAHStG,OAGT,EAFS9F,OAET,EADSS,UACT,EARN,UAAiCyL,ICDpBI,GAAb,oDACI,aAAyD,IAAD,EAArCvM,EAAqC,uDAA9B,GAAWM,EAAmB,uDAAJ,GAAI,4BACpD,gBADeN,OAAqC,EAAnBM,OAAmB,EAD5D,UAAiC6L,ICCpBK,GACT,aAAqG,IAAlFC,EAAiF,uDAAxD,IAAIF,GAAsBtO,EAA8B,uDAAJ,GAAI,yBAAjFwO,YAAiF,KAA9BxO,aCF7DyO,GAAb,oDACI,aAAiE,IAAD,EAA7C1M,EAA6C,uDAA9B,GAAWM,EAAmB,uDAAJ,GAAI,4BAC5D,gBADeN,OAA6C,EAAnBM,OAAmB,EADpE,UAAgC6L,ICGnBQ,GACT,aAKG,IAJQC,EAIT,uDAJkC,IAAIF,GAC7BG,EAGT,uDAH+C,GACtC/O,EAET,uDAFmC,GAC1BQ,EACT,uDAD6C,GAC7C,yBAJSsO,aAIT,KAHSC,mBAGT,KAFS/O,YAET,KADSQ,kBCNFwO,GACT,aAIG,IAHQC,EAGT,uDAHkC,IAAIX,GAC7BY,EAET,uDAFiC,IAAIL,GAC5BF,EACT,uDADmC,IAAID,GACvC,yBAHSO,YAGT,KAFSC,WAET,KADSP,aCHFQ,GAAmB,CAC5BpK,KAD4B,SACvBqK,GACD,OAAOjJ,EAAU6D,eAAejK,QAAQkK,IAAImF,IAGhDlF,QAL4B,WAMxB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAejK,QAAQuF,WAGvD+J,eAT4B,SASbC,GACX,OAAO3L,KAAKuG,UAAU6B,QAAO,SAAChL,GAAD,OAAYA,EAAOQ,iBAAmB+N,MAGvElF,KAb4B,SAavBrJ,GAED,IAAIwO,EAUJ,OAXAlG,EAAsBtI,EAAQ,aAG1BwO,GADe,IAAfxO,EAAOE,GACC,2BACDF,GADC,IAEJE,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGnC,eAAOnJ,GAEnBoF,EAAU6D,eAAejK,QAAQkF,IAAIsK,EAAStO,GAAIsO,GAC3CA,GAGXpF,OA5B4B,SA4BrBlJ,GAEH,IADwBkF,EAAU6D,eAAejK,QAAQoK,OAAOlJ,GAE5D,MAAM0D,MAAM,oCAAsC1D,KC/BjDuO,GAA0B,CACnCzK,KADmC,SAC9B9D,GACD,OAAOkF,EAAU6D,eAAezJ,eAAe0J,IAAIhJ,IAGvDiJ,QALmC,WAM/B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAezJ,eAAe+E,WAG9DmK,gBATmC,SASnBxO,GAEZ,OAD+B0C,KAAKuG,UACzB6B,QAAO,SAACtD,GAAD,OAASA,EAAI7F,UAAY3B,MAG/CkJ,OAdmC,SAc5B1I,GAEH,IADgB0E,EAAU6D,eAAezJ,eAAe4J,OAAO1I,EAASR,IAEpE,MAAM,IAAI0D,MAAM,yCAEpB,OAAOlD,GAGX2I,KAtBmC,SAsB9B3I,GAED,IAAIiO,EAUJ,OAXArG,EAAsB5H,EAAU,YAG5BiO,GADiB,IAAjBjO,EAASR,GACM,2BACRQ,GADQ,IAEXR,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAG5B,eAAOzI,GAE1B0E,EAAU6D,eAAezJ,eAAe0E,IAAIyK,EAAgBzO,GAAKyO,GAC1DA,IClCFC,GAAsB,CAC/B5K,KAD+B,SAC1B9D,GACD,OAAOkF,EAAU6D,eAAe1J,WAAW2J,IAAIhJ,IAGnDiJ,QAL+B,WAM3B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe1J,WAAWgF,WAG1DmK,gBAT+B,SASfxO,GAGZ,OAF2B0C,KAAKuG,UACI6B,QAAO,SAAC6D,GAAD,OAAUA,EAAKhN,UAAY3B,MAI1EkJ,OAf+B,SAexBnC,GAGH,IADgB7B,EAAU6D,eAAe1J,WAAW6J,OAAOnC,EAAK/G,IAE5D,MAAM,IAAI0D,MAAM,yCAEpB,OAAOqD,GAGXoC,KAxB+B,SAwB1B6E,GAED,IAAIY,EAUJ,OAXAxG,EAAsB4F,EAAW,aAG7BY,GADkB,IAAlBZ,EAAUhO,GACC,2BACJgO,GADI,IAEPhO,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGhC,eAAO+E,GAEtB9I,EAAU6D,eAAe1J,WAAW2E,IAAI4K,EAAY5O,GAAK4O,GAClDA,ICpCFC,GAAkB,CAC3B/K,KAD2B,SACtB9D,GACD,OAAOkF,EAAU6D,eAAe3J,OAAO4J,IAAIhJ,IAG/CiJ,QAL2B,WAMvB,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe3J,OAAOiF,WAGtDyK,OAT2B,SASpBC,GAEH,IAAIC,EAUJ,OAXA5G,EAAsB2G,EAAO,SAGzBC,GADc,IAAdD,EAAM/O,GACC,2BACA+O,GADA,IAEH/O,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGpC,eAAO8F,GAElB7J,EAAU6D,eAAe3J,OAAO4E,IAAIgL,EAAQhP,GAAKgP,GAC1CA,GAGX9F,OAxB2B,SAwBpB6F,GAGH,IADgB7J,EAAU6D,eAAe3J,OAAO8J,OAAO6F,EAAM/O,IAEzD,MAAM,IAAI0D,MAAM,yCAEpB,OAAOqL,IC7BFE,GAAuB,CAChChG,QADgC,WAE5B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAevJ,YAAY6E,WAG3D6K,iBALgC,SAKfC,GACb,OAAOzM,KAAKuG,UAAU6B,QAAO,SAAAsE,GAAK,OAAIA,EAAMzN,UAAYwN,MAG5DrL,KATgC,SAS3B9D,GACD,OAAOkF,EAAU6D,eAAevJ,YAAYwJ,IAAIhJ,IAGpDmJ,KAbgC,SAa3BkG,GAED,IAAIC,EADJlH,EAAsBiH,EAAY,cAElC,IAAIE,EAAsBF,EAAWrP,GAWrC,OATAuP,EAAclH,EAAeO,cAAc2G,EAAa7M,KAAKuG,WAE7DqG,EAAgB,2BACTD,GADS,IAEZrP,GAAIuP,IAGRrK,EAAU6D,eAAevJ,YAAYwE,IAAIuL,EAAaD,GAE/CA,GAGXpG,OA9BgC,SA8BzBmG,GAKH,GAJA3J,EAAiD2J,EAAWrP,GAAIkF,EAAU6D,iBAE1D7D,EAAU6D,eAAevJ,YAAY0J,OAAOmG,EAAWrP,IAGnE,MAAM,IAAI0D,MAAJ,0DAA6D2L,EAAWrP,GAAxE,mCAGV,OAAOqP,ICxCFG,GAAsB,CAC/B1L,KAD+B,SAC1B2L,GACD,OAAOvK,EAAU6D,eAAe5J,WAAW6J,IAAIyG,IAEnDxG,QAJ+B,WAK3B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe5J,WAAWkF,WAG1D8E,KAR+B,SAQ1BuE,GAED,IAAIgC,EAUJ,OAXAtH,EAAsBsF,EAAW,aAG7BgC,GADkB,IAAlBhC,EAAU1N,GACC,2BACJ0N,GADI,IAEP1N,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGhC,eAAOyE,GAEtBxI,EAAU6D,eAAe5J,WAAW6E,IAAI0L,EAAY1P,GAAK0P,GAClDA,GAGXxG,OAvB+B,SAuBxBwE,GAGH,IADgBxI,EAAU6D,eAAe5J,WAAW+J,OAAOwE,EAAU1N,IAEjE,MAAM,IAAI0D,MAAM,yCAEpB,OAAOgK,IC5BFiC,GAAqB,CAC9B7L,KAD8B,SACzB9D,GACD,OAAOkF,EAAU6D,eAAehK,UAAUiK,IAAIhJ,IAGlDiJ,QAL8B,WAM1B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAehK,UAAUsF,WAGzDuL,mBAT8B,SASX5P,GACf,OAAO0C,KAAKuG,UAAU6B,QAAO,SAAC+E,GAAD,OAAUA,EAAK1O,aAAenB,MAG/DmJ,KAb8B,SAazB3I,GAED,IAAIsP,EADJ1H,EAAsB5H,EAAU,YAIhC,IAAMuP,EAAiC5K,EAAUG,SAAS9E,GAiB1D,OAhBAuP,EAAmBnO,WAAW/B,KAAI,SAACwG,GAI/B,OAHsB,IAAlBA,EAAUrG,KACVqG,EAAUrG,GAAKqI,EAAeC,eAAe9H,EAASoB,aAEnDyE,KAIPyJ,GAD2B,IAA3BC,EAAmB/P,GACT,2BACH+P,GADG,IAEN/P,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGjC,eAAO8G,GAErB7K,EAAU6D,eAAehK,UAAUiF,IAAI8L,EAAW9P,GAAI8P,GAC/CA,GAGX5G,OAtC8B,SAsCvB1I,GAEH,GADyB0E,EAAU6D,eAAehK,UAAUmK,OAAO1I,EAASR,IAIxE,OAAOQ,EAFP,MAAMkD,MAAM,sCAAwClD,EAASR,MCzC5DgQ,GAAqB,CAC9BlM,KAD8B,SACzBmM,GACD,OAAO/K,EAAU6D,eAAe7J,UAAU8J,IAAIiH,IAGlDhH,QAL8B,WAM1B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAe7J,UAAUmF,WAGzD6L,gBAT8B,SASdT,GAEZ,OADuCtK,EAAUG,SAAS5C,KAAKuG,WACvC6B,QAAO,SAACtE,GAAD,OAAcA,EAAS8G,cAAgBmC,MAG1EtG,KAd8B,SAczB3C,GAED,IAAI2J,EAUJ,OAXA/H,EAAsB5B,EAAU,YAG5B2J,GADiB,IAAjB3J,EAASxG,GACC,2BACHwG,GADG,IAENxG,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGjC,eAAOzC,GAErBtB,EAAU6D,eAAe7J,UAAU8E,IAAImM,EAAWnQ,GAAKmQ,GAChDA,GAGXjH,OA7B8B,SA6BvBlJ,GACH,IAAMoQ,EAA0C1N,KAAKoB,KAAK9D,GAC1D,GAAKoQ,EAEE,CAEH,IADgBlL,EAAU6D,eAAe7J,UAAUgK,OAAOlJ,GAEtD,MAAM,IAAI0D,MAAM,yCAEpB,OAAO0M,EANP,MAAM,IAAI1M,MAAM,sDAAwD1D,KChCvEqQ,GAAqB,CAC9BvM,KAD8B,SACzBwD,GACD,OAAOpC,EAAU6D,eAAenK,UAAUoK,IAAI1B,IAGlD2B,QAL8B,WAM1B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAenK,UAAUyF,WAGzD8E,KAT8B,SASzB8E,GAED,IAAIJ,EAUJ,OAXAzF,EAAsB6F,EAAU,YAG5BJ,GADiB,IAAjBI,EAASjO,GACC,2BACHiO,GADG,IAENjO,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAGjC,eAAOgF,GAErB/I,EAAU6D,eAAenK,UAAUoF,IAAI6J,EAAW7N,GAAK6N,GAChDA,GAGX3E,OAxB8B,SAwBvB+E,GAGH,GAFAvI,EAAgDuI,EAASjO,GAAIkF,EAAU6D,iBACvD7D,EAAU6D,eAAenK,UAAUsK,OAAO+E,EAASjO,IAE/D,MAAM,IAAI0D,MAAM,yCAEpB,OAAOuK,IC9BFqC,GAA0B,CACnCrH,QADmC,WAE/B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAexJ,eAAe8E,WAG9DuL,mBALmC,SAKhBtI,GACf,OAAO5E,KAAKuG,UAAU6B,QAAO,SAAAsE,GAAK,OAAIA,EAAMjO,aAAemG,MAG/DxD,KATmC,SAS9B9D,GACD,OAAOkF,EAAU6D,eAAexJ,eAAeyJ,IAAIhJ,IAGvDmJ,KAbmC,SAa9BoH,GAED,IAAIC,EADJpI,EAAsBmI,EAAe,iBAErC,IAAIE,EAA0BF,EAAcvQ,GAW5C,OATAyQ,EAAkBpI,EAAeO,cAAc6H,EAAiB/N,KAAKuG,WAErEuH,EAAqB,2BACdD,GADc,IAEjBvQ,GAAIyQ,IAGRvL,EAAU6D,eAAexJ,eAAeyE,IAAIyM,EAAiBD,GAEtDA,GAGXtH,OA9BmC,SA8B5BwH,GAKH,GAJAhL,EAAoDgL,EAAa1Q,GAAIkF,EAAU6D,iBAE/D7D,EAAU6D,eAAexJ,eAAe2J,OAAOwH,EAAa1Q,IAGxE,MAAM,IAAI0D,MAAJ,gEAAmEgN,EAAa1Q,GAAhF,mCAGV,OAAO0Q,ICvCFC,GAAyB,CAClC7M,KADkC,SAC7BuK,GACD,OAAOnJ,EAAU6D,eAAelK,MAAMmK,IAAIqF,IAG9CpF,QALkC,WAM9B,OAAOtF,MAAMS,KAAKc,EAAU6D,eAAelK,MAAMwF,WAGrDuL,mBATkC,SASfgB,GACf,OAAOlO,KAAKuG,UAAU6B,QAAO,SAAC/D,GAAD,OAAUA,EAAK5F,aAAeyP,MAG/D1H,OAbkC,SAa3BnC,GAGH,GAFArB,EAA4CqB,EAAM7B,EAAU6D,iBAC5C7D,EAAU6D,eAAelK,MAAMqK,OAAOnC,EAAK/G,IAEvD,MAAM,IAAI0D,MAAM,yCAEpB,OAAOqD,GAGXoC,KAtBkC,SAsB7B0H,GAED,IAAIC,EAUJ,OAXA1I,EAAsByI,EAAc,gBAGhCC,GADqB,IAArBD,EAAa7Q,GACC,2BACP6Q,GADO,IAEV7Q,GAAIqI,EAAeC,eAAe5F,KAAKuG,aAG7B,eAAO4H,GAEzB3L,EAAU6D,eAAelK,MAAMmF,IAAI8M,EAAe9Q,GAAK8Q,GAChDA,ICTFC,GAA4B,CAGrCC,gBAHqC,SAGrB1J,GACZ,OAAO2J,GAAkBZ,GAAmBvM,KAAKwD,KAGrD2B,QAPqC,WAQjC,OAAOoH,GAAmBpH,WAG9BiI,gBAXqC,SAWrBjD,GAAqC,IAAD,OAChD7F,EAAsB6F,EAAU,eAChC,IAAMJ,EAAyBwC,GAAmBlH,KAAK8E,EAASJ,YAOhE,OANAI,EAASH,iBAAiBnN,SAAQ,SAACoG,IACS,IAApCA,EAAK+J,eAAe3P,aACpB4F,EAAK+J,eAAe3P,WAAa0M,EAAW7N,IAEhD,EAAKmR,iBAAiBpK,MAEnBkK,GAAkBpD,IAG7BuD,eAvBqC,SAuBtBvD,GAEX,OADAzF,EAAsByF,EAAY,cAC3BwC,GAAmBlH,KAAK0E,IAGnCwD,iBA5BqC,SA4BpBxD,GACbzF,EAAsByF,EAAY,cAClC,IAAMyD,EAAuBL,GAAkBpD,GAG/C,OAFAyD,EAAQxD,iBAAiBnN,SAAQ,SAACoG,GAAD,OAAU4J,GAAuBzH,OAAOnC,EAAK+J,mBAC9EQ,EAAQvS,UAAU4B,SAAQ,SAACkP,GAAD,OAAUF,GAAmBzG,OAAO2G,MACvDQ,GAAmBnH,OAAO2E,IAGrC0D,kBApCqC,SAoCnBtD,GAAqC,IAAD,OA2BlD,OA1BA7F,EAAsB6F,EAASJ,WAAY,cAG3CI,EAASlP,UAAU4B,SAAQ,SAACH,GACpBA,EAASQ,OAAOiG,OAAShC,EAAUiC,MAAQ1G,EAASQ,OAAOiG,OAAShC,EAAUuM,MAC9EhR,EAASQ,OAAOhB,IAAM,EACtB,EAAKyR,aAAajR,IAElBA,EAASO,SAASkG,OAAShC,EAAUiC,MAAQ1G,EAASO,SAASkG,OAAShC,EAAUuM,MAClFhR,EAASO,SAASf,IAAM,EACxB,EAAKyR,aAAajR,OAI1ByN,EAASH,iBAAiBnN,SAAQ,SAACoG,GAC3BA,EAAK+J,eAAe9J,KAAKC,OAAShC,EAAUiC,MAAQH,EAAK+J,eAAe9J,KAAKC,OAAShC,EAAUuM,MAChGzK,EAAK+J,eAAe9J,KAAKhH,IAAM,EAC/B,EAAKmR,iBAAiBpK,OAK9BkH,EAASlP,UAAU4B,QAAQ+B,KAAKgP,gBAChCzD,EAASH,iBAAiBnN,QAAQ+B,KAAKiP,oBAEvCjP,KAAK2O,iBAAiBpD,EAASJ,YACxBI,GAKX2D,QApEqC,SAoE7BtK,EAAoBtH,EAAY6R,GACpC,IAAI3Q,EAA2C,KACzC4Q,EAA8BnC,GAAmBC,mBAAmBtI,GACpEyK,EAA8BpB,GAAuBf,mBAAmBtI,GAwB9E,GAtBAwK,EAAcnR,SAAQ,SAACH,GACnBA,EAASU,MAAO,EACZ2Q,GACIrR,EAASR,KAAOA,IAChBQ,EAASU,MAAO,EAChBA,EAAOV,MAInBuR,EAAUpR,SAAQ,SAACoG,GACfA,EAAK7F,MAAO,EACP2Q,GACG9K,EAAK/G,KAAOA,IACZ+G,EAAK7F,MAAO,EACZA,EAAO6F,MAKnB+K,EAAcnR,SAAQ,SAACH,GAAD,OAAcmP,GAAmBxG,KAAK3I,MAC5DuR,EAAUpR,SAAQ,SAACoG,GAAD,OAAU4J,GAAuBxH,KAAKpC,MAE3C,OAAT7F,EACA,MAAMwC,MAAM,mBAEZ,OAAOxC,GAIf8Q,aAtGqC,SAsGxB7C,EAAiBnP,EAAY6R,GACtC,IAAI3Q,EAA6C,KAC3C4Q,EAAmCvD,GAAwBC,gBAAgBW,GAC3E4C,EAA2BrD,GAAoBF,gBAAgBW,GAsBrE,GApBA2C,EAAcnR,SAAQ,SAACH,GACfqR,GACIrR,EAASR,KAAOA,IAChBkB,EAAOV,MAInBuR,EAAUpR,SAAQ,SAACoG,GACfA,EAAK7F,MAAO,EACP2Q,GACG9K,EAAK/G,KAAOA,IACZ+G,EAAK7F,MAAO,EACZA,EAAO6F,MAKnB+K,EAAcnR,SAAQ,SAACH,GAAD,OAAc+N,GAAwBpF,KAAK3I,MACjEuR,EAAUpR,SAAQ,SAACoG,GAAD,OAAU2H,GAAoBvF,KAAKpC,MAExC,OAAT7F,EACA,MAAMwC,MAAM,mBAEZ,OAAOxC,GAMfiQ,iBAxIqC,SAwIpBN,GAGb,GAFAzI,EAAsByI,EAAc,iBAEY,IAA5CA,EAAaC,eAAe3P,WAC5B,MAAM,IAAIuC,MAAM,qCAEiBwK,GAAiBE,eAAeyC,EAAaC,eAAe9Q,IAC5C8K,QACjD,SAAChL,GAAD,OAAa+Q,EAAa/R,QAAQgH,MAAK,SAACmM,GAAD,OAAWA,EAAMjS,KAAOF,EAAOE,SAE1DH,KAAI,SAACqS,GAAD,OAAUA,EAAKlS,MAAIW,QAAQuN,GAAiBhF,QAEhE,IAAMiJ,EAA4BxB,GAAuBxH,KAAK0H,EAAaC,gBAM3E,OAJAD,EAAa/R,QAAQ6B,SAAQ,SAACb,GAE1BoO,GAAiB/E,KAAKrJ,MAEnBsS,GAAsBD,IAGjCR,mBA7JqC,SA6JlBd,GACfzI,EAAsByI,EAAc,QACpCA,EAAa/R,QAAQe,KAAI,SAACC,GAAD,OAAYoO,GAAiBhF,OAAOpJ,EAAOE,OACpE2Q,GAAuBzH,OAAO2H,EAAaC,gBAC3C,IAAMuB,EAA6BlN,EAAUG,SACzCqL,GAAuBf,mBAAmBiB,EAAaC,eAAe3P,aAK1E,OAHAkR,EAASC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAExS,MAAQyS,EAAEzS,SACpCsS,EAAS1R,SAAQ,SAACoG,EAAMhH,GAAP,OAAkBgH,EAAKhH,MAAQA,EAAQ,KACxDsS,EAAS1R,QAAQgQ,GAAuBxH,MACjC0H,GAGX4B,oBA1KqC,SA0KjBzS,GAChB,IAAM+G,EAAmC4J,GAAuB7M,KAAK9D,GACrE,OAAOoS,GAAsBrL,IAKjC0K,aAjLqC,SAiLxBjR,GACT,OAAOmP,GAAmBxG,KAAK3I,IAGnCkR,eArLqC,SAqLtBlR,GACX,OAAOmP,GAAmBzG,OAAO1I,IAGrCkS,aAzLqC,SAyLxB1S,GACT,IAAMQ,EAAmCmP,GAAmB7L,KAAK9D,GACjE,QAAiBqC,IAAb7B,EACA,MAAMkD,MAAM,qBAAuB1D,EAAK,oBAE5C,OAAOQ,GAKXmS,aAnMqC,SAmMxB7S,GACTsI,EAAsBtI,EAAQ,YAC9B,IAAM8S,EAAuBzN,EAAUG,SAASxF,GAChD,OAAOoO,GAAiB/E,KAAKyJ,IAGjCC,aAzMqC,SAyMxB/S,GAGT,OAFAsI,EAAsBtI,EAAQ,UAC9BoO,GAAiBhF,OAAOpJ,EAAOE,IACxBF,GAKXgT,iBAjNqC,WAkNjC,OAAOtD,GAAoBvG,WAG/B8J,gBArNqC,SAqNrBnN,GACZ,OAAOoN,GAAmBxD,GAAoB1L,KAAK8B,KAGvDqN,cAzNqC,SAyNvBvF,GAEV,OADAtF,EAAsBsF,EAAW,aAC1B8B,GAAoBrG,KAAKuE,IAGpCwF,iBA9NqC,SA8NpBC,GACb/K,EAAsB+K,EAAc,gBACpC,IAAMC,EAAiCjO,EAAUG,SAAS6N,GACpDE,EAAgC7D,GAAoBrG,KAAKgK,EAAazF,WAE5EsC,GAAmBE,gBAAgBiD,EAAazF,UAAU1N,IAAIW,SAAQ,SAAC6F,GAAD,OAClEwJ,GAAmB9G,OAAO1C,EAASxG,OAGvCoT,EAAiBlU,UAAUyB,SAAQ,SAAC6F,GAChCA,EAAS8G,YAAc+F,EAAiBrT,GACxCgQ,GAAmB7G,KAAK3C,MAE5B,IAAM8M,EAA+BtD,GAAmBE,gBAAgBmD,EAAiBrT,IACzF,MAAO,CAAC0N,UAAW2F,EAAkBnU,UAAWoU,IAGpDC,gBA/OqC,SA+OrB7F,GAIZ,OAHAtF,EAAsBsF,EAAW,aACjCA,EAAUxO,UAAUyB,SAAQ,SAAC6F,GAAD,OAAcwJ,GAAmB9G,OAAO1C,EAASxG,OAC7EwP,GAAoBtG,OAAOwE,EAAUA,WAC9BA,GAIX8F,iBAvPqC,WAwPjC,OAAOxD,GAAmB/G,WAG9BwK,aA3PqC,SA2PxBzT,GACT,IAAMwG,EAAmCwJ,GAAmBlM,KAAK9D,GACjE,GAAKwG,EAGD,OAAOA,EAFP,MAAM,IAAI9C,MAAM,qCAAuC1D,IAM/D0T,aApQqC,SAoQxBlN,GAET,OADA4B,EAAsB5B,EAAU,YACzBwJ,GAAmB7G,KAAK3C,IAGnCmN,eAzQqC,SAyQtB3T,GACX,OAAOgQ,GAAmB9G,OAAOlJ,IAKrC4T,sBA/QqC,WAgRjC,OAAOtD,GAAwBrH,WAGnC4K,kCAnRqC,SAmRH1S,GAC9B,OAAOmP,GAAwBV,mBAAmBzO,IAGtD2S,kBAvRqC,SAuRnBvD,GAEd,OADAnI,EAAsBmI,EAAe,iBAC9BD,GAAwBnH,KAAKoH,IAGxCwD,oBA5RqC,SA4RjBtD,GAChBrI,EAAsBqI,EAAiB,mBACvC,IAAMuD,EAAyCtR,KAAKuR,kBAAkBxD,GACtE,OAAOH,GAAwBpH,OAAO8K,IAG1CC,kBAlSqC,SAkSnBjU,GACd,IAAMuQ,EAA6CD,GAAwBxM,KAAK9D,GAEhF,GAAKuQ,EAGD,OAAOA,EAFP,MAAM,IAAI7M,MAAM,0CAA4C1D,IAQpEkU,mBA9SqC,WA+SjC,OAAOjF,GAAqBhG,WAGhCkL,4BAlTqC,SAkTTxS,GACxB,OAAOsN,GAAqBC,iBAAiBvN,IAGjDyS,eAtTqC,SAsTtB/E,GAEX,OADAjH,EAAsBiH,EAAY,cAC3BJ,GAAqB9F,KAAKkG,IAGrCgF,iBA3TqC,SA2TpBC,GACblM,EAAsBkM,EAAc,gBACpC,IAAMC,EAAmC7R,KAAK8R,eAAeF,GAC7D,OAAOrF,GAAqB/F,OAAOqL,IAGvCC,eAjUqC,SAiUtBxU,GACX,IAAMqP,EAAuCJ,GAAqBnL,KAAK9D,GAEvE,GAAKqP,EAGD,OAAOA,EAFP,MAAM,IAAI3L,MAAM,uCAAyC1D,IAOjEyU,cA5UqC,WA6UjC,OAAO5F,GAAgB5F,WAG3ByL,YAhVqC,SAgVzB3F,GACR,OAAO4F,GAAc5F,IAGzB6F,YApVqC,SAoVzB7F,GACR,OAAOF,GAAgBC,OAAOC,IAGlC8F,YAxVqC,SAwVzB9F,GACR,IAAM+F,EAA+BpG,GAAoBF,gBAAgBO,EAAM/O,IACzE+U,EAAuCxG,GAAwBC,gBAAgBO,EAAM/O,IAG3F,OAFA8U,EAAcnU,SAAQ,SAACgO,GAAD,OAAUD,GAAoBxF,OAAOyF,MAC3DoG,EAAkBpU,SAAQ,SAAC6G,GAAD,OAAS+G,GAAwBrF,OAAO1B,MAC3DqH,GAAgB3F,OAAO6F,IAGlCiG,cAhWqC,SAgWvBrG,GACV,OAAOD,GAAoBvF,KAAKwF,IAGpCsG,kBApWqC,WAqWjC,OAAOvG,GAAoBzF,WAG/BiM,cAxWqC,SAwWvBlH,GACV,OAAOU,GAAoBxF,OAAO8E,IAGtCmH,kBA5WqC,SA4WnB3U,GACd,OAAO+N,GAAwBpF,KAAK3I,IAGxC4U,sBAhXqC,WAiXjC,OAAO7G,GAAwBtF,WAGnCoM,oBApXqC,SAoXjB7U,GAChB,OAAO+N,GAAwBrF,OAAO1I,IAG1C8U,cAxXqC,SAwXvBtV,GACV,IAAM2O,EAAgCD,GAAoB5K,KAAK9D,GAC/D,GAAI2O,EACA,OAAOA,EAEP,MAAMjL,MAAM,8DAAgE1D,IAIpFuV,kBAjYqC,SAiYnBvV,GACd,IAAMQ,EAAwC+N,GAAwBzK,KAAK9D,GAC3E,GAAIQ,EACA,OAAOA,EAEP,MAAMkD,MAAM,sEAAwE1D,KAM1FiR,GAAoB,SAAChD,GACvB7F,EAAsB6F,EAAU,YAEhC,IAAMH,EAAsC6C,GAAuBf,mBAAmB3B,EAAUjO,IAAIH,IAAIuS,IAQxG,OANAtE,EAAiBwE,MAAK,SAACkD,EAAOC,GAAR,OAAkBD,EAAM1E,eAAe/Q,MAAQ0V,EAAM3E,eAAe/Q,SAMnF,CACH8N,WAAYI,EACZH,iBAAkBA,EAClB/O,UAP4B4Q,GAAmBC,mBAAmB3B,EAAUjO,IAQ5ET,eANsC+Q,GAAwBV,mBAAmB3B,EAAUjO,MAU7FoS,GAAwB,SAACtB,GAM3B,OALA1I,EAAsB0I,EAAgB,kBAK/B,CACHA,eAAgBA,EAChBhS,QAN0BoP,GAAiBE,eAAe0C,EAAgB9Q,IAC7BsS,MAAK,SAAUC,EAAGC,GAC/D,OAAOD,EAAExS,MAAQyS,EAAEzS,WAQrBiT,GAAqB,SAACtD,GAGxB,OAFAtH,EAAsBsH,EAAa,eAE5B,CACHhC,UAAWgC,EACXxQ,UAH4B8Q,GAAmBE,gBAAgBR,EAAa1P,MAsB9E2U,GAAgB,SAAC5F,GACnB3G,EAAsB2G,EAAO,WAE7B,IAAM2G,EAAqBvQ,EAAUG,SAASyJ,GAExC4G,EAA0CjH,GAAoBF,gBAAgBkH,EAAU1V,IAE1F4V,EAAgC,GAUpC,OARID,IACAC,EAAgBD,EAAa9V,KAAI,SAAC8O,GAAD,OAzBd,SAACA,GACxBvG,EAAsBuG,EAAM,aAC5B,IAAMkH,EAA6B,IAAI9H,GACvC8H,EAAa7H,UAAYW,EACzB,IAAMe,EAAuCF,GAAoB1L,KAAK6K,EAAMrB,aACtEO,EAAqCwC,GAAmBvM,KAAK6K,EAAMxN,YACzE,GAAIuO,GAAe7B,EAAY,CAC3B,IAAMsF,EAA6BH,GAAmBtD,GAChDoG,EAA2B7E,GAAkBpD,GACnDgI,EAAanI,UAAYyF,EACzB0C,EAAa5H,SAAW6H,EAE5B,OAAOD,EAawCE,CAAmBpH,OAO3D,CAACI,MAAO2G,EAAWM,MAAOJ,EAAe7W,UAJNwP,GAAwBC,gBAAgBkH,EAAU1V,IAIjBR,YAFvCyP,GAAqBC,iBAAiBH,EAAO/O,MCvdxEiW,GAAa,SAGR3R,GACV,IAAM4R,EAAqC,CACvC7Q,YAAQhD,EACR8T,QAAS,GACTC,KAAM,KAEV,IAEI,OADAlR,EAAUhC,cAAcoB,GACjB,2BAAI4R,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YAbnCF,GAAa,WAkBlB,IAAMC,EAAqC,CACvC7Q,YAAQhD,EACR8T,QAAS,GACTC,KAAM,KAEV,IAEI,OADAlR,EAAUoR,mBACH,2BAAIJ,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YA3BnCF,GAAa,SA+BT/X,GACT,IAAMgY,EAAqC,CACvC7Q,YAAQhD,EACR8T,QAAS,GACTC,KAAM,KAEVG,IAAkB,kBAAMnM,GAA2ClM,MACnE,IAEI,OADAgH,EAAUsR,aAAatY,GAChB,2BAAIgY,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YA1CnCF,GAAa,SAgDT9L,GACT,OAAOoM,IAAkB,kBAAMnM,GAAyCD,OAjDnE8L,GAAa,SAoDV9L,GACR,OAAOoM,IAAkB,kBAAMnM,GAAwCD,OArDlE8L,GAAa,WAyDlB,OAAOM,GAAkBnM,KAzDpB6L,GAAa,WA6DlB,OAAOM,GAAkBnM,KA7DpB6L,GAAa,WAmElB,OAAOM,GAAkB9L,GAAuBxB,UAnE3CgN,GAAa,SAsETtO,GACT,OAAO4O,IAAkB,kBAAM9L,GAAuBM,QAAQpD,OAvEzDsO,GAAa,SA0EPtO,GACX,OAAO4O,IAAkB,kBAAM9L,GAAuBvB,OAAOvB,OA3ExDsO,GAAa,SAgFJhI,GACd,OAAOsI,IAAkB,kBAAMxF,GAA0BQ,kBAAkBtD,OAjFtEgI,GAAa,WAyFlB,OAAOM,GAAkBxF,GAA0B9H,UAzF9CgN,GAAa,SA4FN3O,GACZ,OAAOiP,IAAkB,kBAAMxF,GAA0BC,gBAAgB1J,OA7FpE2O,GAAa,SAoGPhI,GACX,OAAOsI,IAAkB,kBAAMxF,GAA0BK,eAAenD,OArGnEgI,GAAa,SAwGd3O,EAAoBtH,EAAY6R,GACpC,OAAO0E,IAAkB,kBAAMxF,GAA0Ba,QAAQtK,EAAYtH,EAAI6R,OAzG5EoE,GAAa,SA8GFpF,GAChB,OAAO0F,IAAkB,kBAAMxF,GAA0BI,iBAAiBN,OA/GrEoF,GAAa,SAkHApF,GAClB,OAAO0F,IAAkB,kBAAMxF,GAA0BY,mBAAmBd,OAnHvEoF,GAAa,SAsHFjW,GAChB,OAAOuW,IAAkB,kBAAMxF,GAA0B0B,oBAAoBzS,OAvHxEiW,GAAa,WA6HlB,OAAOM,GAAkBxF,GAA0B+B,mBA7H9CmD,GAAa,SAgILxG,GACb,OAAO8G,IAAkB,kBAAMxF,GAA0BgC,gBAAgBtD,OAjIpEwG,GAAa,SAwINvI,GACZ,OAAO6I,IAAkB,kBAAMxF,GAA0BwC,gBAAgB7F,OAzIpEuI,GAAa,SA4ILvI,GACb,OAAO6I,IAAkB,kBAAMxF,GAA0BmC,iBAAiBxF,OA7IrEuI,GAAa,SAsJTjW,GACT,OAAOuW,IAAkB,kBAAMxF,GAA0B0C,aAAazT,OAvJjEiW,GAAa,SA0JTzP,GACT,OAAO+P,IAAkB,kBAAMxF,GAA0B2C,aAAalN,OA3JjEyP,GAAa,SA8JPjW,GACX,OAAOuW,IAAkB,kBAAMxF,GAA0B4C,eAAe3T,OA/JnEiW,GAAa,WAoKlB,OAAOM,GAAkBnK,GAAsBI,eApK1CyJ,GAAa,SAuKVvJ,GACR,OAAO6J,IAAkB,kBAAMnK,GAAsBK,YAAYC,OAxK5DuJ,GAAa,SA2KRvJ,GACV,OAAO6J,IAAkB,kBAAMnK,GAAsBQ,cAAcF,OA5K9DuJ,GAAa,SAiLHQ,GACf,OAAOF,IAAkB,kBAAMnK,GAAsBU,sBAAsB2J,OAlLtER,GAAa,WAsLlB,OAAOM,GAAkBnK,GAAsBW,yBAtL1CkJ,GAAa,SAyLF1K,GAChB,OAAOgL,IAAkB,kBAAMnK,GAAsBa,iBAAiB1B,OA1LjE0K,GAAa,WAgMlB,OAAOM,GAAkB9L,GAAuBG,gBAhM3CqL,GAAa,SAmMZ3M,GACN,OAAOiN,IAAkB,kBAAM9L,GAAuBW,UAAU9B,OApM3D2M,GAAa,SA6MPnW,GACX,OAAOyW,IAAkB,kBAAMxF,GAA0B8B,aAAa/S,OA9MjEmW,GAAa,SAiNTnW,GACT,OAAOyW,IAAkB,kBAAMxF,GAA0B4B,aAAa7S,OAlNjEmW,GAAa,SAuNTzV,GACT,OAAO+V,IAAkB,kBAAMxF,GAA0BU,aAAajR,OAxNjEyV,GAAa,SA2NPzV,GACX,OAAO+V,IAAkB,kBAAMxF,GAA0BW,eAAelR,OA5NnEyV,GAAa,SA+NTjW,GACT,OAAOuW,IAAkB,kBAAMxF,GAA0B2B,aAAa1S,OAhOjEiW,GAAa,WAsOlB,OAAOM,GAAkBxF,GAA0B0D,gBAtO9CwB,GAAa,SAyOVlH,GACR,OAAOwH,IAAkB,kBAAMxF,GAA0B2D,YAAY3F,OA1OhEkH,GAAa,SA6OVlH,GACR,OAAOwH,IAAkB,kBAAMxF,GAA0B6D,YAAY7F,OA9OhEkH,GAAa,SAiPVlH,GACR,OAAOwH,IAAkB,kBAAMxF,GAA0B8D,YAAY9F,OAlPhEkH,GAAa,SAqPRtH,GACV,OAAO4H,IAAkB,kBAAMxF,GAA0BiE,cAAcrG,OAtPlEsH,GAAa,WA0PlB,OAAOM,GAAkBxF,GAA0BkE,oBA1P9CgB,GAAa,SA6PNlP,GACZ,OAAOwP,IAAkB,kBAAMxF,GAA0BmE,cAAcnO,OA9PlEkP,GAAa,SAiQJzV,GACd,OAAO+V,IAAkB,kBAAMxF,GAA0BoE,kBAAkB3U,OAlQtEyV,GAAa,WAsQlB,OAAOM,GAAkBxF,GAA0BqE,wBAtQ9Ca,GAAa,SAyQFzV,GAChB,OAAO+V,IAAkB,kBAAMxF,GAA0BsE,oBAAoB7U,OA1QxEyV,GAAa,SA6QT9G,EAAiBnP,EAAY6R,GACtC,OAAO0E,IAAkB,kBAAMxF,GAA0BiB,aAAa7C,EAASnP,EAAI6R,OA9Q9EoE,GAAa,SAiRJjW,GACd,OAAOuW,IAAkB,kBAAMxF,GAA0BwE,kBAAkBvV,OAlRtEiW,GAAa,SAqRRjW,GACV,OAAOuW,IAAkB,kBAAMxF,GAA0BuE,cAActV,OAtRlEiW,GAAa,WA4RlB,OAAOM,GAAkBxF,GAA0B6C,wBA5R9CqC,GAAa,SAuSJ1F,GACd,OAAOgG,IAAkB,kBAAMxF,GAA0B+C,kBAAkBvD,OAxStE0F,GAAa,SA2SFxF,GAChB,OAAO8F,IAAkB,kBAAMxF,GAA0BgD,oBAAoBtD,OA5SxEwF,GAAa,WAkTlB,OAAOM,GAAkBxF,GAA0BmD,qBAlT9C+B,GAAa,SAyTP5G,GACX,OAAOkH,IAAkB,kBAAMxF,GAA0BqD,eAAe/E,OA1TnE4G,GAAa,SA6TL3B,GACb,OAAOiC,IAAkB,kBAAMxF,GAA0BsD,iBAAiBC,OAWlF,SAASiC,GAAqBG,GAC1B,IAAMR,EAAkC,CACpC7Q,OAAQ,GACR8Q,QAAS,GACTC,KAAM,KAEV,IACI,IAAM/Q,EAASqR,IACfR,EAAS7Q,OAA2B,qBAAXA,OAAyBhD,EAAYW,KAAKC,MAAMD,KAAKG,UAAUkC,IACxF6Q,EAASE,KAAO,IAChBlR,EAAUyR,gBACZ,MAAON,GACL1W,QAAQ6C,KAAK6T,GACbH,EAASC,QAAUE,EAAMF,QACzBjR,EAAU0R,WAEd,OAAOV,ECxWX,ICJYW,GDcCC,GAAcC,YAAY,CACnC9V,KAAM,SACN+V,aAXO,CACHC,OAAQ,GACR7Y,UAAW,EACXC,SAAU,GASd6Y,SAAU,CACNC,YAAa,SAAC/H,EAAOtP,GACjBsP,EAAM6H,OAAOpW,KAAKf,EAAOsX,UAE7BC,YAAa,SAACjI,GACVA,EAAM6H,OAAS,IAEnBK,mBAAoB,SAAClI,EAAOtP,GACpBA,EAAOsX,SAAW,GAAKtX,EAAOsX,QAAUhI,EAAM6H,OAAO5P,SACrD+H,EAAM6H,OAAS7H,EAAM6H,OAAOnM,QAAO,SAACuL,EAAOtW,GAAR,OAAkBA,IAAUD,EAAOsX,aAG9EG,aAAc,SAACnI,EAAOtP,GAClBsP,EAAMhR,UAAY0B,EAAOsX,SAE7BI,YAAa,SAACpI,EAAOtP,GACjBsP,EAAM/Q,SAAWyB,EAAOsX,YA4FvBK,GAAgB,CACzBC,cAtFkB,SAACpT,GAAD,8CAAgC,WAAOqT,GAAP,eAAApF,EAAA,sEACD0D,GAAyB3R,GADxB,OAE5B,OADhB4R,EAD4C,QAErCE,KACTwB,OAAOC,SAASC,SAEhBH,EAASb,GAAYhY,QAAQqY,YAAYjB,EAASC,UALJ,2CAAhC,uDAuFlBG,iBA9EqB,kBAAgB,SAACqB,GACtC,IAAMzB,EAAqCD,KACrB,MAAlBC,EAASE,KACTwB,OAAOC,SAASC,SAEhBH,EAASb,GAAYhY,QAAQqY,YAAYjB,EAASC,YA0EtDK,aAtEiB,SAACtY,GAAD,OAAmC,SAACyZ,GACrD,IAAMzB,EAAqCD,GAAwB/X,GAC7C,MAAlBgY,EAASE,MACTuB,EAASb,GAAYhY,QAAQqY,YAAYjB,EAASC,YAoEtD4B,YAhE2B,kBAAgB,SAACJ,EAAUK,GACtD,IAAMC,EAAkBD,IAAWE,OAAO9Z,UAtDlB,GAwDF,MADuB6X,GAAwBgC,GACxD7B,KACTuB,EAASb,GAAYhY,QAAQyY,aAAaU,IAE1CN,EAASb,GAAYhY,QAAQqY,YAAY,2BA2D7CgB,aAvD4B,kBAAgB,SAACR,EAAUK,GACvD,IAAMC,EAAkBD,IAAWE,OAAO9Z,UAhElB,GAkEF,MADuB6X,GAAwBgC,GACxD7B,KACTuB,EAASb,GAAYhY,QAAQyY,aAAaU,IAE1CN,EAASb,GAAYhY,QAAQqY,YAAY,2BAkD7CiB,WA9C0B,kBAAgB,SAACT,EAAUK,GACrD,IAAMC,EAAkBD,IAAWE,OAAO7Z,SA1ElB,GA4EF,MADuB4X,GAAuBgC,GACvD7B,KACTuB,EAASb,GAAYhY,QAAQ0Y,YAAYS,IAEzCN,EAASb,GAAYhY,QAAQqY,YAAY,2BAyC7CkB,YArC2B,kBAAgB,SAACV,EAAUK,GACtD,IAAMC,EAAkBD,IAAWE,OAAO7Z,SApFlB,GAsFF,MADuB4X,GAAuBgC,GACvD7B,KACTuB,EAASb,GAAYhY,QAAQ0Y,YAAYS,IAEzCN,EAASb,GAAYhY,QAAQqY,YAAY,2BAgC7CmB,yBA5B6B,kBAAgB,SAACX,GAC9C,IAAMzB,EAAuCD,KACvB,MAAlBC,EAASE,KACTuB,EAASb,GAAYhY,QAAQyY,aAAarB,EAAS7Q,SAEnDsS,EAASb,GAAYhY,QAAQqY,YAAY,2BAwB7CoB,wBApB4B,kBAAgB,SAACZ,GAC7C,IAAMzB,EAAuCD,KACvB,MAAlBC,EAASE,KACTuB,EAASb,GAAYhY,QAAQ0Y,YAAYtB,EAAS7Q,SAElDsS,EAASb,GAAYhY,QAAQqY,YAAY,2BAgB7CA,YAAaL,GAAYhY,QAAQqY,aAKxBqB,GACe,SAACpJ,GACrB,OAAOA,EAAM8I,OAAOjB,QAFfuB,GAKc,SAACpJ,GACpB,OAAOA,EAAM8I,OAAO9Z,WANfoa,GAQa,SAACpJ,GACnB,OAAOA,EAAM8I,OAAO7Z,UAIfoa,GAAgB3B,GAAY4B,Q,qHEnJ5BC,GAAa,CACtBC,OAAQC,YACRC,YAAaC,iBACbC,KAAMC,KACNC,KAAMC,KACNC,MAAOC,cACPC,UAAWC,eACXC,QAASC,aACT3O,OAAQ4O,YACRC,OAAQC,KACRC,KAAMC,UACNC,IAAKC,SACLC,QAASC,yBACT7D,MAAO8D,iBACPva,KAAMwa,iB,gBDpBEvD,K,YAAAA,E,kBAAAA,E,eAAAA,Q,KAaL,IElBKwD,GAOAC,GFWCC,GAA+D,SAACC,GACzE,IAAOC,EAAwCD,EAAxCC,OAAQC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,MAAOC,EAAmBJ,EAAnBI,gBAe5B,OACI,yBAAKC,UAAW,oBAAsBF,GAElC,4BAAQE,UAAWF,EAAQ,iBACnBG,QAAS,kBAAMF,MAEnB,kBAAC,KAAD,CAAiBG,KAnBD,WACxB,OAAQJ,GACJ,IAAK,OACD,OAAOhC,GAAW/Y,KACtB,IAAK,UACD,OAAO+Y,GAAWsB,QACtB,IAAK,QACD,OAAOtB,GAAWtC,MACtB,QACI,OAAO+D,MAUgBY,GACNC,KAAM,KACNJ,UAAWF,KAGhC,6BACI,wBAAIE,UAAWF,GAAQF,GACvB,+BAAQC,MGzCXQ,GAA+D,WACpE,IAAMC,EAA0BC,YAAY5C,IACtCb,EAAW0D,cAWjB,OACI,oCAEQF,EAAc9T,OAAS,GACvB8T,EAActb,KAAI,SAACwW,EAAOtW,GAAR,OAbT,SAACoW,EAAiBpW,GACnC,OAAO,kBAAC,GAAD,CAAmByD,IAAKzD,EACL0a,OAAQ,QACRC,KAAMvE,EACNwE,MAAO9D,GAAkBR,MACzBuE,gBAAiB,kBAAMjD,EAASb,GAAYhY,QAAQwY,mBAAmBvX,OAQrDub,CAAajF,EAAOtW,Q,mBDvBhEsa,K,YAAAA,E,cAAAA,E,UAAAA,E,iBAAAA,Q,cAOAC,K,QAAAA,E,WAAAA,Q,KAKL,IEDKiB,GAKAC,GAKAC,GFTCC,GAAb,oDACI,aAUG,IAAD,EATS1V,EAST,wDAT4B,EACnBC,EAQT,wDAR4B,EACnB0V,EAOT,uDAP0B,GACjBC,EAMT,uDAN0B,GACjBC,EAKT,uDALiCxB,GAAUyB,MAClCC,EAIT,uDAJiC1B,GAAU2B,KAClCC,EAGT,uDAH+B3B,GAAa4B,IACnCC,EAET,uDAF+B7B,GAAa8B,GACnC7a,EACT,uDADwB,GACxB,4BACE,gBAVOyE,UAST,EARSC,UAQT,EAPS0V,SAOT,EANSC,SAMT,EALSC,aAKT,EAJSE,aAIT,EAHSE,QAGT,EAFSE,QAET,EADS5a,OACT,EAXN,UAAoC6L,I,gBEDxBmO,K,YAAAA,E,mBAAAA,Q,cAKAC,K,gBAAAA,E,aAAAA,Q,cAKAC,K,eAAAA,Q,KAwBL,IC/CKY,GD+CCC,GAA+C,SAAC9B,GACzD,IACI+B,EAgBA/B,EAhBA+B,QACAC,EAeAhC,EAfAgC,QACAC,EAcAjC,EAdAiC,QACAC,EAaAlC,EAbAkC,QACAC,EAYAnC,EAZAmC,YACAC,EAWApC,EAXAoC,aACAC,EAUArC,EAVAqC,aACAC,EASAtC,EATAsC,YACA9c,EAQAwa,EARAxa,GACA+c,EAOAvC,EAPAuC,OACAC,EAMAxC,EANAwC,gBACAC,EAKAzC,EALAyC,gBACAC,EAIA1C,EAJA0C,QACAC,EAGA3C,EAHA2C,KACAC,EAEA5C,EAFA4C,SACAC,EACA7C,EADA6C,UAGEC,EAAyB,CAACC,EAAG,EAAGC,EAAGX,EAAe,GAClDY,EAA0B,CAACF,EAAG,EAAGC,EAAGZ,EAAe,GAuGnDc,EAAqB,SAACC,GAExB,OAAQA,GACJ,KAAKtD,GAAUuD,IACX,MAAO,CAACL,EAAG,EAAGC,GAHP,IAIX,KAAKnD,GAAU2B,KACX,MAAO,CAACuB,GALD,GAKaC,EAAG,GAC3B,KAAKnD,GAAUyB,MACX,MAAO,CAACyB,EAPD,GAOYC,EAAG,GAC1B,KAAKnD,GAAUwD,OACX,MAAO,CAACN,EAAG,EAAGC,EATP,IAUX,UAAKnb,EACD,MAAO,CAACkb,EAAG,EAAGC,EAAG,KAIvBM,EAAoB,SAACC,EAAcC,EAAeC,EAAgBN,GACpE,OAAQA,GACJ,KAAKtD,GAAUuD,IACXG,EAAMR,EAAIQ,EAAMR,EAAIS,EAAQ,EAC5B,MACJ,KAAK3D,GAAU2B,KACX+B,EAAMP,EAAIO,EAAMP,EAAIS,EAAS,EAC7B,MACJ,KAAK5D,GAAUyB,MACXiC,EAAMR,EAAIQ,EAAMR,EAAIS,EACpBD,EAAMP,EAAIO,EAAMP,EAAIS,EAAS,EAC7B,MACJ,KAAK5D,GAAUwD,OACXE,EAAMR,EAAIQ,EAAMR,EAAIS,EAAQ,EAC5BD,EAAMP,EAAIO,EAAMP,EAAIS,EAG5B,OAAOF,GAGLG,EAAiB,SAACC,EAAcC,GAClC,OAAQA,EAAOD,GAAQ,EAAIA,GAGzBE,EAAkB,SAACN,EAAcO,EAAgBC,GACnD,MAAoB,SAAbA,EAAsB,CAAChB,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,GAAK,CAACD,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,IAG9FgB,EAAoB,SAACT,EAAcO,GACrC,MAAO,CAACf,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,IAGpCiB,EAAY,SAACC,EAAeC,GAC9B,MAAO,CAACpB,EAAGmB,EAAOnB,EAAIoB,EAAOpB,EAAGC,EAAGkB,EAAOlB,EAAImB,EAAOnB,IAGnDoB,EAAiB,SAACC,EAAmBC,GACvC,MAAO,CACHvB,EAAGW,EAAeW,EAAWtB,EAAGuB,EAASvB,GACzCC,EAAGU,EAAeW,EAAWrB,EAAGsB,EAAStB,KAI3CuB,EAAkB,SAACC,EAAwBC,GAC7C,MAAO,CACH1B,EAAGW,EAAec,EAAgBzB,EAAG0B,EAAc1B,GACnDC,EAAGwB,EAAgBxB,IAa3B,OACI,kBAAC,KAAO0B,IAAR,CAAYrE,UAAU,oBACjBsC,IAAS1B,GAAc0D,OACpB,8BACI,4BACInf,GAAG,QACHof,YAAY,KACZC,aAAa,KACbC,KAAK,IACLC,KAAK,IACLC,OAAO,OACPC,YAAY,KAEZ,0BAAMC,EAAE,mBACF7E,UAAU,sBAvBjB,SAAC5T,GAChB,OAAQA,GACJ,KAAKuU,GAAemE,OAChB,OAvKa,SAACC,EAAYC,EAAYC,EAAYC,GAC1D,IAAMxB,EAA8BuB,EAAKF,EAAKjD,EAAc,EAAI,OAAS,SACnEqD,EAA4BJ,EAAKE,EAAKnD,EAAc,EAAI,OAAS,SAGnEkC,EAAoB,CAACtB,EAFG,SAAbgB,EAAsBqB,EAAKA,EAAKjD,EAEXa,EAAGqC,GACnCf,EAAkB,CAACvB,EAFC,SAAXyC,EAAoBF,EAAKA,EAAKhD,EARxB,GACM,GASOU,EAAGuC,GAEnClB,EAAaJ,EAAUI,EAAYpB,GACnCqB,EAAWL,EAAUK,EAAUxB,GAE/B,IAAM2C,EAAmB5B,EAAgBQ,EAftB,GAe0CN,GAC7DO,EAAWN,EAAkBM,EAhBV,IAkBnB,IAAMoB,EAActB,EAAeqB,EAAkBnB,GAC/CqB,EAAgBpB,EAAgBkB,EAAkBC,GAClDE,EAA+B,SAAb7B,EAAsB,IAAM,GAC9C8B,EAA2B,SAAXL,EAAoB,GAAK,IAE/C,OACI,oCACI,0BACIN,EAAC,YAAOb,EAAWtB,EAAlB,YAAuBsB,EAAWrB,EAAlC,wBACT4C,EADS,2BAETD,EAAc5C,EAFL,uBAGX4C,EAAc3C,EAHH,sBAIX0C,EAAY3C,EAJD,uBAKX2C,EAAY1C,EALD,uBAMTsB,EAASvB,EANA,aAMMuB,EAAStB,EANf,uBAOT6C,EAPS,kBASDxF,UAAW,YACXyF,UAAU,cACVC,MAAO,CAACC,OAAQnD,GAAwB,QAASoD,gBAAiBvD,EAAU,IAAM,MAErFH,EAAOld,KAAI,SAAC6gB,EAAO3gB,GAChB,OACI,oCACI,0BACIwd,EAAG2C,EAAY3C,EAzCf,GA0CAC,EAAG0C,EAAY1C,EAAY,GAARzd,EACnB8a,UAAU,oBAET6F,GAEL,0BACInD,EAAG2C,EAAY3C,EAhDf,GAiDAC,EAAG0C,EAAY1C,EAAY,GAARzd,EACnB8a,UAAU,kBAET6F,QAqHVC,CAAiBpE,EAASC,EAASC,EAASC,GACvD,KAAKlB,GAAeoF,KAChB,OA9GW,WACnB,IAAM/B,EAAoBf,EACtB,CAACP,EAAGhB,EAASiB,EAAGhB,GAChBG,EACAC,EACAI,GAEE8B,EAAkBhB,EACpB,CAACP,EAAGd,EAASe,EAAGd,GAChBI,EACAD,EACAI,GAIE4D,EAAUnD,EAAmBV,GAC7B8D,EAAUpD,EAAmBT,GAE7B8D,EAAetC,EAAUI,EAAYgC,GACrCG,EAAevC,EAAUK,EAAUgC,GAEzC,OACI,0BACIpB,EAAC,YAAOb,EAAWtB,EAAlB,YAAuBsB,EAAWrB,EAAlC,wBACLuD,EAAaxD,EADR,YACawD,EAAavD,EAD1B,uBAELwD,EAAazD,EAFR,YAEayD,EAAaxD,EAF1B,uBAGLsB,EAASvB,EAHJ,YAGSuB,EAAStB,EAHlB,cAKD+C,MAAO,CACHE,gBAAiBvD,EAAU,MAAQ,EACnCuC,YAAa,MACbwB,KAAM,cACNT,OAAQ,SAEZxgB,GAAIA,EAAGkE,aA4EAgd,IAuBVC,CAAW/D,KEvQXgE,GAAb,oDACI,aAKG,IAAD,EAJStf,EAIT,wDAJ+B,EACtBhB,EAGT,wDAH4B,EACnBZ,EAET,wDAF2B,EAClBC,EACT,wDAD+B,EAC/B,4BACE,gBALO2B,aAIT,EAHShB,UAGT,EAFSZ,SAET,EADSC,aACT,EANN,UAAiCiN,ICApBiU,GAAb,oDACI,aAAuC,IAAD,EAAnBpgB,EAAmB,uDAAJ,GAAI,4BAClC,gBADeA,OAAmB,EAD1C,UAAoCmM,K,SFFxBiP,K,UAAAA,E,gBAAAA,E,YAAAA,E,kCAAAA,E,mBAAAA,Q,KGiCZ,ICjCYiF,GD+CNC,GAAkBxK,YAAY,CAChC9V,KAAM,aACN+V,aAhBqC,CACrC1Y,OAAQ,GACRE,OAAQ,GACRQ,MAAO,GACPwiB,UAAW,GACX5iB,UAAW,GACXO,WAAY,GACZC,OAAQ,GACRqiB,WAAY,GACZC,eAAgB,GAChBnR,cAAe,GACflB,WAAY,IAMZ6H,SAAU,CACNyK,UAAW,SAACvS,EAAOtP,GACfsP,EAAM9Q,OAASwB,EAAOsX,SAE1BwK,UAAW,SAACxS,EAAOtP,GACfsP,EAAM5Q,OAASsB,EAAOsX,SAE1ByK,SAAU,SAACzS,EAAOtP,GACdsP,EAAMpQ,MAAQc,EAAOsX,SAEzB0K,aAAc,SAAC1S,EAAOtP,GAClBsP,EAAMoS,UAAY1hB,EAAOsX,SAE7B2K,aAAc,SAAC3S,EAAOtP,GAClBsP,EAAMxQ,UAAYkB,EAAOsX,SAE7B4K,cAAe,SAAC5S,EAAOtP,GACnBsP,EAAMjQ,WAAaW,EAAOsX,SAE9B6K,UAAW,SAAC7S,EAAOtP,GACfsP,EAAMhQ,OAASU,EAAOsX,SAE1B8K,cAAe,SAAC9S,EAAOtP,GACnBsP,EAAMqS,WAAa3hB,EAAOsX,SAE9B+K,kBAAmB,SAAC/S,EAAOtP,GACvBsP,EAAMsS,eAAiB5hB,EAAOsX,SAElCgL,kBAAmB,SAAChT,EAAOtP,GACvBsP,EAAMmB,cAAgBzQ,EAAOsX,SAEjCiL,eAAgB,SAACjT,EAAOtP,GACpBsP,EAAMC,WAAavP,EAAOsX,YAOhCkL,GAAwB,yDAAgB,WAAO3K,GAAP,eAAApF,EAAA,sEACY0D,KADZ,OAEpB,OADhBC,EADoC,QAE7BE,KACTuB,EAAS4J,GAAgBziB,QAAQ8iB,UAAU1L,EAAS7Q,SAEpDsS,EAASF,GAAcN,YAAYjB,EAASC,UALN,2CAAhB,uDASxBoM,GAAwB,yDAAgB,WAAO5K,GAAP,eAAApF,EAAA,sEACa0D,KADb,OAEpB,OADhBC,EADoC,QAE7BE,KACTuB,EAAS4J,GAAgBziB,QAAQ6iB,UAAUzL,EAAS7Q,SAEpDsS,EAASF,GAAcN,YAAYjB,EAASC,UALN,2CAAhB,uDASxBqM,GAAuB,kBAAgB,SAAC7K,GAC1C,IAAMzB,EAA0CD,KAC1B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQ+iB,SAAS3L,EAAS7Q,SAEnDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CsM,GAA2B,kBAAgB,SAAC9K,GAC9C,IAAMzB,EAAiDD,KACjC,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQgjB,aAAa5L,EAAS7Q,SAEvDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CuM,GAA2B,kBAAgB,SAAC/K,GAC9C,IAAMzB,EAA6CD,KAC7B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQijB,aAAa7L,EAAS7Q,SAEvDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CwM,GAA4B,kBAAgB,SAAChL,GAC/C,IAAMzB,EAA8CD,KAC9B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQkjB,cAAc9L,EAAS7Q,SAExDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CyM,GAAwB,kBAAgB,SAACjL,GAC3C,IAAMzB,EAA0CD,KAC1B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQmjB,UAAU/L,EAAS7Q,SAEpDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C0M,GAA4B,kBAAgB,SAAClL,GAC/C,IAAMzB,EAA8CD,KAC9B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQojB,cAAchM,EAAS7Q,SAExDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C2M,GAAgC,kBAAgB,SAACnL,GACnD,IAAMzB,EAAkDD,KAClC,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQqjB,kBAAkBjM,EAAS7Q,SAE5DsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C4M,GAA6B,kBAAgB,SAACpL,GAChD,IAAMzB,EAA+CD,KAC/B,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQujB,eAAenM,EAAS7Q,SAEzDsS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C6M,GAAgC,kBAAgB,SAACrL,GACnD,IAAMzB,EAAkDD,KAClC,MAAlBC,EAASE,KACTuB,EAAS4J,GAAgBziB,QAAQsjB,kBAAkBlM,EAAS7Q,SAE5DsS,EAASF,GAAcN,YAAYjB,EAASC,YA6BvC8M,GAAoB1B,GAAgB7I,QAEpCwK,GACK,SAAC9T,GAAD,OAAkCA,EAAM+T,WAAW7kB,QADxD4kB,GAGI,SAAC9T,GAAD,OAAiCA,EAAM+T,WAAWnkB,OAHtDkkB,GAIQ,SAAC9T,GAAD,OAAwCA,EAAM+T,WAAW3B,WAJjE0B,GAKQ,SAAC9T,GAAD,OAAoCA,EAAM+T,WAAWvkB,WAL7DskB,GAMK,SAAC9T,GAAD,OAAiCA,EAAM+T,WAAW/jB,QANvD8jB,GAOS,SAAC9T,GAAD,OAAqCA,EAAM+T,WAAW1B,YAP/DyB,GAQa,SAAC9T,GAAD,OAAyCA,EAAM+T,WAAWzB,gBARvEwB,GASS,SAAC9T,GAAD,OAAqCA,EAAM+T,WAAWhkB,YAT/D+jB,GAqBwB,SAAC5b,GAC9B,OAAO,SAAC8H,GACJ,OAAOA,EAAM+T,WAAW5S,cAAczF,QAAO,SAAAsE,GAAK,OAAIA,EAAMjO,aAAemG,OAvB1E4b,GA2BkB,SAAC/T,GACxB,OAAO,SAACC,GACJ,OAAOA,EAAM+T,WAAW9T,WAAWvE,QAAO,SAAAsE,GAAK,OAAIA,EAAMzN,UAAYwN,OA7BpE+T,GAiCU,SAACljB,GAChB,OAAO,SAACoP,GACJ,OAAOA,EAAM+T,WAAWnkB,MAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOA,MAAO,OAnCpEkjB,GA4CY,SAACljB,GAClB,OAAO,SAACoP,GACJ,IAAIgU,GAAmB,EAOvB,OANIhU,EAAM+T,WAAW1B,WAAW3b,MAAK,SAAC6I,GAAD,OAAUA,EAAKhN,UAAY3B,OAC5DojB,GAAU,GAEVhU,EAAM+T,WAAWzB,eAAe5b,MAAK,SAAC0B,GAAD,OAASA,EAAI7F,UAAY3B,OAC9DojB,GAAU,GAEPA,IAONC,GACTT,GADSS,GAETR,GAFSQ,GAGTP,GAHSO,GAITN,GAJSM,GAKTf,GALSe,GAMTd,GANSc,GAOTV,GAPSU,GAQTZ,GARSY,GASTX,GATSW,GAUTL,GAVSK,GAWTb,GAXSa,GA9EG,kBAAgB,SAAC1L,GAC7BA,EAAS2K,MACT3K,EAAS4K,MACT5K,EAASgL,MACThL,EAAS8K,MACT9K,EAAS+K,MACT/K,EAAS6K,MACT7K,EAASiL,MACTjL,EAASkL,MACTlL,EAASmL,MACTnL,EAASoL,MACTpL,EAASqL,QAmEAK,GAaH,CACF5Q,oBArGoB,SAACzS,GACzB,IAAI+G,EACEmP,EAAgDD,GAA+BjW,GAIrF,OAHsB,MAAlBkW,EAASE,OACTrP,EAAO5B,EAAUG,SAAS4Q,EAAS7Q,SAEhC0B,K,SClMCua,K,UAAAA,E,wBAAAA,E,4BAAAA,E,YAAAA,E,wBAAAA,E,kBAAAA,E,kBAAAA,E,4BAAAA,E,sBAAAA,E,0BAAAA,E,wBAAAA,E,6BAAAA,Q,KCqBL,IAAMgC,GAAwB,SACNxkB,EAAqBykB,GAE5C,IAAMC,EAA6BD,EAC9BzY,QAAO,SAAC3E,GAAD,OAAgBsd,GAAiBtd,EAAUiJ,UAClDvP,KAAI,SAACsG,GACF,OAAO,2BAAIA,GAAX,IAAsBiJ,MAAOkS,GAAeoC,gBAE9CzM,EAAqB,GAwF3B,OAtFAnY,EAAQ6B,SAAQ,SAACb,GACb,IAAM6jB,EAAkCC,GACpC9jB,EAAOM,iBACPN,EAAOI,OACPsjB,GAGEK,EAAgCD,GAClC9jB,EAAOO,eACPP,EAAOI,OACPsjB,GAGJ,OAAQ1jB,EAAOG,YACX,KAAKoc,GAAWyH,IACPC,GAAmBJ,GAObH,EAAcG,GAAyBxjB,aAAeL,EAAOK,YACpEqjB,EAAc3iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBiP,MAAOkS,GAAe0C,aAE1BR,EAAcG,GAAd,2BACOH,EAAcG,IADrB,IAEIvU,MAAOkS,GAAe2C,gBAG1BhN,EAAOpW,KAAKf,GAlBZ0jB,EAAc3iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBiP,MAAOkS,GAAe4C,MAgB9B,MACJ,KAAK7H,GAAW8H,OACZJ,GAAmBJ,GACZH,EAAcG,GAAyBvU,MAAQkS,GAAe8C,QAC/DnN,EAAOpW,KAAKf,GAClB,MACJ,KAAKuc,GAAWgI,KACZ,GAAIN,GAAmBF,GAAwB,CAC3C,IAAM1d,EAAuB,CACzBrF,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYqjB,EAAcK,GAAuB1jB,WACjDiP,MAAOkS,GAAegD,MAE1Bd,EAAcK,GAAuBzU,MAAQkS,GAAegD,KACxDP,GAAmBJ,IACnBH,EAAc3iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYqjB,EAAcG,GAAyBxjB,WACnDiP,MAAOkS,GAAe2C,eAE1BT,EAAcG,GAAd,2BAA6Cxd,GAA7C,IAAwDiJ,MAAOkS,GAAe0C,cAE9ER,EAAc3iB,KAAKsF,QAGvB8Q,EAAOpW,KAAKf,GAEhB,MACJ,KAAKuc,GAAWkI,gBACZ,GAAIR,GAAmBF,GAAwB,CAC3C,IAAM1d,EAAuB,CACzBrF,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYqjB,EAAcK,GAAuB1jB,WACjDiP,MAAOkS,GAAegD,MAE1Bd,EAAcK,GAAuBzU,MAAQkS,GAAe8C,QACxDL,GAAmBJ,GACnBH,EAAcG,GAAd,2BAA6Cxd,GAA7C,IAAwDiJ,MAAOkS,GAAe0C,aAE9ER,EAAc3iB,KAAKsF,QAGvB8Q,EAAOpW,KAAKf,OAKrB,CAACyjB,WAAYC,EAAevM,WAhG9BqM,GAAwB,SAmGZ9iB,EAAsB+iB,GAKvC,IAAIiB,EAAiCjB,EAChCzY,QAAO,SAAC3E,GAAD,OAAgBsd,GAAiBtd,EAAUiJ,UAClDvP,KAAI,SAACsG,GACF,OAAO,2BAAIA,GAAX,IAAsBiJ,MAAOkS,GAAeoC,gBAGhDe,EAAOjkB,EAASQ,OAoBpB,OAlBAR,EAASoB,WAAWjB,SAAQ,SAAC0F,GACzB,IAAMqe,EAA0CF,EAAkB1gB,MAC9D,SAACqC,GAAD,OAAeA,EAAUrF,UAAYuF,EAAUvF,SAAWqF,EAAUjG,SAAWmG,EAAUnG,QAAUiG,EAAUhG,aAAekG,EAAUlG,cAGtIukB,EACAA,EAAiBtV,MAAQkS,GAAeqD,SAExCH,EAAkB3jB,KAAK,CACnBC,QAASuF,EAAUvF,QACnBZ,OAAQmG,EAAUnG,OAClBC,WAAYkG,EAAUlG,WACtBiP,MAAOkS,GAAesD,eAE1BH,EAAOjkB,EAASO,aAIjB,CAACwiB,WAAYiB,EAAmBxd,KAAMyd,IAM/Cb,GAAqB,SAACld,EAAiBd,EAAgB2d,GACzD,OAAOA,EAAWsB,WACd,SAAC1e,GAAD,OACIA,EAAUrF,UAAY4F,GAAWP,EAAUjG,SAAW0F,IAAW6d,GAAiBtd,EAAUiJ,WAIlGqU,GAAmB,SAACrU,GACtB,OACIA,IAAUkS,GAAe8C,SACzBhV,IAAUkS,GAAe2C,cACzB7U,IAAUkS,GAAesD,cAIjC,SAASb,GAAmBe,GACxB,OAAiC,IAA1BA,EC/IJ,IAAMC,GACU,SACf9W,EACAP,EACAsX,GAEA,IAAMC,EAA6B,CAC/BC,cAAejX,EACfkX,QAAS,GACTC,gBAAiB,GACjBC,SAAU,CAACpe,KAAMhC,EAAUsI,QAEzB4X,EAAoB,GACtBG,GAA4B,EAGhC,GAAIrX,GAAYP,EAAW,CAEvB,IAAM6X,EAA+B7X,EAAUxO,UAAUW,KAAI,SAACuB,EAAMrB,GAChE,MAAO,CACHE,WAAYoc,GAAWyH,IACvB1jB,iBAAkBgB,EAAKN,QACvBZ,OAAQkB,EAAKlB,OACbC,WAAYiB,EAAKjB,WACjBH,IAAK,EACLM,gBAAiB,EACjBD,gBAAiB,EACjBE,YAAa,GACbR,MAAOA,MAITylB,EAAwClC,GAC1CiC,EACAP,GAAmB,IAGvBC,EAAaG,gBAAgBvkB,KAAK4kB,GAAYD,IAC9C,IAAIjC,EAA0Bpe,EAAUG,SAASkgB,EAAgBjC,YAG3DriB,EAAiDwkB,GAAQzX,GAE/D,QAAa5L,IAATnB,EAAoB,CAMpB,IALA,IAAIykB,EAA0DzkB,EAC1D+F,EAAO2e,GAAQD,GACftX,EAAiB,QAGbwX,GAAUP,KAAsBre,IAAShC,EAAUiC,MAAQD,IAAShC,EAAUuM,MAAM,CAExF,GAAIvK,IAAShC,EAAUiC,KAAM,CACzB,IAAMH,EAAwB4e,EACxBG,EAA+BC,GAAchf,EAAMwc,GACzDA,EAAauC,EAAOvC,WAEpB+B,EAAmBU,GAAaf,EAAcle,EAAM+e,GAGpDzX,GADkB,SAAWtH,EAAK+J,eAAe9Q,GAEjDmlB,EAAQtkB,KAAKwN,GAEb4W,EAAaG,gBAAgBvkB,KAAK,CAC9BwN,OAAQA,EACRkV,WAAYA,EACZtM,OAAQ6O,EAAO7O,OACfgP,eAAgBlf,EAAK+J,eAAe9Q,GACpCiH,KAAM,SAGL4e,GAAUP,KAEXK,EAAiBO,GAASP,EAAmC7U,eAAe9J,KAAMiH,GAClFhH,EAAO2e,GAAQD,IAKvB,GAAI1e,IAAShC,EAAUuM,IAAK,CACxB,IAAMhR,EAAuBmlB,EAEvBG,EAAiCxC,GACnC9iB,EACA+iB,GAEJA,EAAauC,EAAOvC,WAEpBoC,EAAiBO,GAAQJ,EAAO9e,KAAMiH,GACtChH,EAAO2e,GAAQD,GAGftX,GADkB,QAAU7N,EAASR,GAErCmlB,EAAQtkB,KAAKwN,GAEb4W,EAAaG,gBAAgBvkB,KAAK,CAC9BwN,OAAQA,EACRkV,WAAYA,EACZtM,OAAQ,GACRgP,eAAgBzlB,EAASR,GACzBiH,KAAM,cAIlB,IAAK4e,GAAUP,GAAmB,CAC9BL,EAAaI,SAAWM,EACxB,IAAMQ,EAAuC7C,GACzC,GACAC,GAEJ0B,EAAaG,gBAAgBvkB,KAAK,CAC9BwN,OAAQA,EAAS,IAAOsX,EAA4B1e,KACpDsc,WAAY4C,EAAe5C,WAC3Btc,KAAM,WACNgQ,OAAQkP,EAAelP,SAG3BkO,EAAQtkB,KAAKwN,EAAS,IAAOsX,EAA4B1e,QAIrE,OAAO,2BACAge,GADP,IAEIE,QAASA,EACTiB,sBAAuBP,GAAUP,GAAoBA,OAAmBjjB,KAO9EojB,GAAc,SAACK,GACjB,MAAO,CAACzX,OAAQ,OAAQkV,WAAYuC,EAAOvC,WAAYtc,KAAM,OAAQgQ,OAAQ6O,EAAO7O,SAWlFyO,GAAU,SAACzX,GACb,IAAMlH,EAAoCkH,EAASH,iBAAiBhK,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe5P,QACjG2O,EAA+B5B,EAASlP,UAAU+E,MAAK,SAAC+L,GAAD,OAAUA,EAAK3O,QAC5E,OAAO6F,IAAc8I,QAAcxN,IAGjC6jB,GAAU,SAACzB,EAAYxW,GACzB,IAAIoY,EACJ,OAAQ5B,EAAKxd,MACT,KAAKhC,EAAUiC,KACXmf,EAlBgB,SAAChY,EAAgBJ,GACzC,OAAOA,EAASH,iBAAiBhK,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOqO,KAiBpCiY,CAAoB7B,EAAKzkB,GAAIiO,IAAa,CAAChH,KAAMhC,EAAUsI,OAC1F,MACJ,KAAKtI,EAAUuM,IACX6U,EAjBoB,SAACrmB,EAAYiO,GACzC,OAAOA,EAASlP,UAAU+E,MAAK,SAAC+L,GAAD,OAAUA,EAAK7P,KAAOA,KAgBdumB,CAAwB9B,EAAKzkB,GAAIiO,IAAa,CAAChH,KAAMhC,EAAUsI,OAC9F,MACJ,KAAKtI,EAAUuhB,IACXH,EAA+B,CAACpf,KAAMhC,EAAUuhB,KAChD,MACJ,KAAKvhB,EAAUwhB,KACXJ,EAA+B,CAACpf,KAAMhC,EAAUwhB,MAChD,MACJ,QACIJ,EAA+B,CAACpf,KAAMhC,EAAUsI,OAExD,OAAO8Y,GAGLN,GAAgB,SAAChf,EAAuBwc,GAC1C,OAAOD,GAAiDvc,EAAKjI,QAASykB,IAGpEqC,GAAU,SAACc,GACb,GAAKA,EAA6C5V,eAC9C,OAAO7L,EAAUiC,KACd,GAAKwf,EAAwC3lB,SAChD,OAAOkE,EAAUuM,IACd,GAAKkV,EAAsCzf,KAC9C,OAAQyf,EAAsCzf,KAE9C,MAAMvD,MAAM,6BAIdsiB,GAAe,SAACf,EAA4Ble,EAAuB+e,GACrE,OAAOb,EAAaG,gBAAgBP,WAChC,SAAC8B,GAAD,OACIA,EAASV,iBAAmBlf,EAAK+J,eAAe9Q,IAChD2mB,EAASpD,WAAWlc,SAAWye,EAAOvC,WAAWlc,SAChDsf,EAASpD,WAAWzd,MACjB,SAAC8gB,GAAD,OAASd,EAAOvC,WAAWzd,MAAK,SAAC+gB,GAAD,OAASA,EAAI/lB,UAAY8lB,EAAG9lB,SAAW+lB,EAAI3mB,SAAW0mB,EAAG1mB,iBAKnG2lB,GAAY,SAACP,GACf,OAAOA,GAAoB,GCzMlBwB,GACO,SAACC,GACb,IAAMC,EAA+B,CAACC,UAAW,GAAIC,QAAS,GAAI7B,SAAU,CAACpe,KAAMxB,EAAe8H,QAC9F+X,GAA4B,EAC5B/B,EAA0B,GAE9B,GAAIwD,EAAe,CACf,IAAM7lB,EAA4BwkB,GAAQqB,GAE1C,GAAI7lB,EAAM,CAKN,IAJA,IAAI6F,EAAuD7F,EACvD+F,EAAO2e,GAAQ7e,GACfsH,EAAiB,IAEbwX,GAAUP,KAAsBre,IAASxB,EAAe0hB,MAAQlgB,IAASxB,EAAe+L,MAAM,CAClG,GAAIvK,IAASxB,EAAe0hB,KAAM,CAC9B,IAAMxY,EAAqB5H,EAE3Bue,EAAmBU,GAAagB,EAAmBrY,EAAM4U,GAEzD,IAAMuC,EAAuBf,GACzBpW,EAAKV,SACLU,EAAKjB,UACL6V,GAGJA,EACIuC,EAAOV,gBAAgB/d,OAAS,EAC1Bye,EAAOV,gBAAgBU,EAAOV,gBAAgB/d,OAAS,GAAGkc,WAC1D,GAGV,IAAM6D,EAAY,SAAWzY,EAAKX,UAAUhO,GAC5CqO,EAAoB,KAAXA,EAAgBM,EAAKX,UAAUhO,GAAGkE,WAAamK,EAAS+Y,EACjEJ,EAAkBE,QAAQrmB,KAAKwN,GAE/B2Y,EAAkBC,UAAUpmB,KAAK,CAC7BI,KAAM0N,EAAKX,UAAU/M,KACrBomB,YAAa1Y,EAAKX,UAAUhO,GAC5BqO,OAAQA,EACRJ,SAAU6X,EACVpY,UAAWiB,EAAKjB,UAChBuJ,OAAQ6O,EAAOV,gBAAgBvlB,KAAI,SAACkH,GAAD,OAAUA,EAAKkQ,UAAQqQ,KAAK,KAG9DzB,GAAUP,KAEXve,EAAOmf,GAASnf,EAAsBiH,UAAUhH,KAAM+f,GACtD9f,EAAO2e,GAAQ7e,IAIvB,GAAIE,IAASxB,EAAe+L,IAAK,CAC7B,IAAMhR,EAA4BuG,EAE5B0d,EAAkB8C,GAA0B/mB,EAAU+iB,GAC5Dxc,EAAOmf,GAAQzB,EAAMsC,GACrB9f,EAAO2e,GAAQ7e,GAEf,IAAMygB,EAAY,QAAUhnB,EAASR,GACrCqO,EAAoB,KAAXA,EAAgB,OAASA,EAASmZ,EAC3CR,EAAkBE,QAAQrmB,KAAKwN,IAGlCwX,GAAUP,KACX0B,EAAkB3B,SAAWte,EAC7BigB,EAAkBE,QAAQrmB,KAAKwN,EAAS,IAAOtH,EAAuBE,QAIlF,OAAO,2BAAI+f,GAAX,IAA8BS,kBAAmB5B,GAAUP,GAAoBA,OAAmBjjB,KAIpGklB,GAA4B,SAAC7lB,EAAgC6hB,GAE/D,IAAIkB,EAWJ,OAVI/iB,EAAcE,aAAe,IAC7BF,EAAcE,WAAWjB,SAAQ,SAAC0F,GACFkd,EAAWzd,MACnC,SAAC4hB,GAAD,OAAQA,EAAGxnB,SAAWmG,EAAUnG,QAAUwnB,EAAGvnB,aAAekG,EAAUlG,YAAcunB,EAAG5mB,UAAYuF,EAAUvF,aAG7G2jB,EAAO/iB,EAAcX,aAI1B0jB,GAAQ/iB,EAAcV,QAWpB0kB,GAAU,SAAC3W,GACpB,IAAI4Y,EAAgC,KAIpC,OAHKxiB,EAAUC,kBAAkB2J,KAC7B4Y,EAAW5Y,EAAOiH,MAAMlS,MAAK,SAAC6K,GAAD,OAAUA,EAAKX,UAAU9M,SAAS,MAE5DymB,GAGLzB,GAAU,SAACzB,EAAiB1V,GAC9B,IAAIsX,EAA+E,CAACpf,KAAMxB,EAAe8H,OACzG,OAAQkX,EAAKxd,MACT,KAAKxB,EAAe0hB,KAChBd,EApBa,SAACuB,EAAgB7Y,GACtC,OAAOA,EAAMiH,MAAMlS,MAAK,SAAC6K,GAAD,OAAUA,EAAKX,UAAUhO,KAAO4nB,KAmBjBC,CAAiBpD,EAAKzkB,GAAI+O,IAAU,CAAC9H,KAAMxB,EAAe8H,OACzF,MACJ,KAAK9H,EAAe+L,IAChB6U,EAnBiB,SAACrmB,EAAY+O,GACtC,OAAOA,EAAMhQ,UAAU+E,MAAK,SAACtD,GAAD,OAAcA,EAASR,KAAOA,KAkBnB8nB,CAAqBrD,EAAKzkB,GAAI+O,IAAU,CAAC9H,KAAMxB,EAAe8H,OAC7F,MACJ,KAAK9H,EAAe+gB,IAChBH,EAA+B,CAACpf,KAAMxB,EAAe+gB,KAE7D,OAAOH,GAGLT,GAAU,SAAC7e,GACb,GAAKA,EAAsBiH,UACvB,OAAOvI,EAAe0hB,KACnB,GAAKpgB,EAAyBhG,SACjC,OAAO0E,EAAe+L,IACnB,GAAKzK,EAAuBE,KAC/B,OAAQF,EAAuBE,KAE/B,MAAMvD,MAAM,6BAIdsiB,GAAe,SAACgB,EAA8BjgB,EAAoBwc,GACpE,OAAOyD,EAAkBC,UAAUpC,WAC/B,SAACkD,GAAD,OACIA,EAASV,cAAgBtgB,EAAKiH,UAAUhO,IACxC+nB,EAAS9Z,SAASmX,gBAAgB,GAAG7B,WAAWlc,SAAWkc,EAAWlc,SACrE0gB,EAAS9Z,SAASmX,gBAAgB,GAAG7B,WAAWzd,MAC7C,SAAC8gB,GAAD,OAASrD,EAAWzd,MAAK,SAAC+gB,GAAD,OAASA,EAAI/lB,UAAY8lB,EAAG9lB,SAAW+lB,EAAI3mB,SAAW0mB,EAAG1mB,iBAK5F2lB,GAAY,SAACP,GACf,OAAOA,GAAoB,GClHzB0C,GAAqBjR,YAAY,CACnC9V,KAAM,gBACN+V,aAhBwC,CACxCiR,sBAAuB,KACvBC,kBAAmB,KACnBjD,aAAc,KACdkD,UAAW,KACXC,iBAAkB,EAClBC,iBAAkB,EAClBC,aAAc,GACdxpB,QAAS,GACTykB,WAAY,GACZgF,aAAc,GACdC,cAAe,MAMftR,SAAU,CACNuR,oBAAqB,SAACrZ,EAAOtP,GACzBsP,EAAM6Y,sBAAwBnoB,EAAOsX,QAErChI,EAAMoZ,cAAgB,KACtBpZ,EAAM+Y,UAAY,KAClB/Y,EAAMiZ,iBAAmB,EACzBjZ,EAAMgZ,iBAAmB,EACrBtoB,EAAOsX,SAAWhI,EAAM8Y,kBACxBQ,GAAwB5oB,EAAOsX,QAAShI,EAAM8Y,kBAAmB9Y,GAEjEuZ,GAAWvZ,IAGnBwZ,eAAgB,SAACxZ,GACTA,EAAM6Y,uBAAyB7Y,EAAM8Y,mBACrCQ,GAAwBtZ,EAAM6Y,sBAAuB7Y,EAAM8Y,kBAAmB9Y,IAGtFyZ,oBAAqB,SAACzZ,EAAOtP,GACzBsP,EAAMgZ,iBAAmB,EAErBhZ,EAAM+Y,WAAa/Y,EAAM+Y,UAAUlB,UAAU5f,OAASvH,EAAOsX,SAAWtX,EAAOsX,SAAW,EAC1FhI,EAAMiZ,iBAAmBvoB,EAAOsX,QACzBhI,EAAM+Y,WAAaroB,EAAOsX,QAAU,EAC3ChI,EAAMiZ,iBAAmBjZ,EAAM+Y,UAAUlB,UAAU5f,OAAS,EAE5D+H,EAAMiZ,iBAAmB,GAGjCS,iBAAkB,SAAC1Z,EAAOtP,GACtBsP,EAAMoZ,cAAgB1oB,EAAOsX,QAC7BuR,GAAWvZ,GACXA,EAAM6Y,sBAAwB,KAC9B7Y,EAAM8Y,kBAAoB,KAC1B9Y,EAAMiZ,iBAAmB,EACzBjZ,EAAMgZ,iBAAmB,GAE7BW,aAAc,SAAC3Z,EAAOtP,GAClBsP,EAAM+Y,UAAYroB,EAAOsX,SAE7B4R,qBAAsB,SAAC5Z,EAAOtP,GAC1BsP,EAAM8Y,kBAAoBpoB,EAAOsX,QAEjChI,EAAMoZ,cAAgB,KACtBpZ,EAAM+Y,UAAY,KAClB/Y,EAAMiZ,iBAAmB,EACrBvoB,EAAOsX,SAAWhI,EAAM6Y,sBACxBS,GAAwBtZ,EAAM6Y,sBAAuBnoB,EAAOsX,QAAShI,GAErEuZ,GAAWvZ,IAGnB6Z,cAAe,SAAC7Z,EAAOtP,GACnBsP,EAAMmZ,aAAN,sBAAyBnZ,EAAMmZ,cAA/B,CAA6C,CAACthB,KAAM,OAAQjH,GAAIF,EAAOsX,WACvEhI,EAAMgZ,iBAAmB,GAE7Bc,iBAAkB,SAAC9Z,EAAOtP,GACtBsP,EAAMmZ,aAAenZ,EAAMmZ,aAAazd,QACpC,SAACqe,GAAD,QAA0B,SAAdA,EAAKliB,MAAmBkiB,EAAKnpB,KAAOF,EAAOsX,YAE3DhI,EAAMgZ,iBAAmB,GAE7BgB,gBAAiB,SAACha,EAAOtP,GACrBsP,EAAMmZ,aAAN,sBAAyBnZ,EAAMmZ,cAA/B,CAA6C,CAACthB,KAAM,QAASjH,GAAIF,EAAOsX,WACxEhI,EAAMgZ,iBAAmB,GAE7BiB,kBAAmB,SAACja,EAAOtP,GACvBsP,EAAMmZ,aAAenZ,EAAMmZ,aAAazd,QACpC,SAACqe,GAAD,QAA0B,UAAdA,EAAKliB,MAAoBkiB,EAAKnpB,KAAOF,EAAOsX,YAE5DhI,EAAMgZ,iBAAmB,GAE7BkB,oBAAqB,SAACla,EAAOtP,GACzB,IACmC,IAD/BypB,EAAkC,GAClCC,GAAuBpa,KACvBma,EAAgBE,IACZ,UAAAD,GAAuBpa,UAAvB,eAA+BgW,kBAAmB,GAClDhW,EAAMmZ,cACN,UAAAmB,GAAwBta,UAAxB,eAAgCtB,mBAAoB,KAG5D,IAAM6b,EAAe7pB,EAAOsX,QAC5B,GAAIoS,GAAuBpa,IAAUua,GAAgB,GAAKA,EAAeJ,EAAcliB,OACnF+H,EAAMgZ,iBAAmBtoB,EAAOsX,aAC7B,GAAIhI,EAAM+Y,WAAawB,IAAiBJ,EAAcliB,OACrD+H,EAAMiZ,iBAAmBjZ,EAAM+Y,UAAUlB,UAAU5f,OAAS,GAC5D+H,EAAMiZ,iBAAmBjZ,EAAMiZ,iBAAmB,EAClDjZ,EAAMgZ,iBAAmB,IAEzBhZ,EAAMiZ,iBAAmB,EACzBjZ,EAAMgZ,iBAAmB,QAE1B,GAAIhZ,EAAM+Y,YAA+B,IAAlBwB,EAAqB,CAAC,IAAD,EACzCC,EACFxa,EAAMiZ,iBAAmB,EAAIjZ,EAAMiZ,iBAAmB,EAAIjZ,EAAM+Y,UAAUlB,UAAU5f,OAAS,EAC3FwiB,EAAmBJ,GACrBra,EAAM+Y,UAAUlB,UAAU2C,GAAc3b,SAASmX,iBAAmB,GACpEhW,EAAMmZ,cACN,UAAAnZ,EAAM+Y,UAAUlB,UAAU2C,GAAc3b,SAASiX,qBAAjD,eAAgEpX,mBAAoB,IAExFsB,EAAMgZ,iBAAmByB,EAAiBxiB,OAAS,EACnD+H,EAAMiZ,iBAAmBuB,OAEzBxa,EAAMgZ,iBAAmB,GAGjC0B,gBAAiB,SAAC1a,EAAOtP,GACrBsP,EAAMkZ,aAAexoB,EAAOsX,SAEhC2S,WAAY,SAAC3a,EAAOtP,GAChBsP,EAAMtQ,QAAUgB,EAAOsX,SAE3B4S,cAAe,SAAC5a,EAAOtP,GACnBsP,EAAMmU,WAAazjB,EAAOsX,SAE9B6S,UAAW,SAAC7a,EAAOtP,GACfsP,EAAMmZ,aAAezoB,EAAOsX,QAC5BhI,EAAMgZ,iBAAmB,MAKrC,SAASM,GAAwBxD,EAA4BxX,EAAyB0B,GAA4B,IAAD,IACvG0W,EAAuBf,GAAkCG,EAAexX,GAC9E0B,EAAMgZ,iBAAmB,EACzBhZ,EAAMkZ,cAAe,UAAAxC,EAAOV,gBAAgBhW,EAAMgZ,yBAA7B,eAAgDnR,SAAU,GAC/E7H,EAAMmU,YAAa,UAAAuC,EAAOV,gBAAgBhW,EAAMgZ,yBAA7B,eAAgD7E,aAAc,GACjFnU,EAAM6V,aAAea,EAGzB,SAAS6C,GAAWvZ,GAChBA,EAAMkZ,aAAe,GACrBlZ,EAAMmU,WAAa,GACnBnU,EAAM6V,aAAe,KACrB7V,EAAMmZ,aAAe,GAKzB,IAyFMkB,GAAc,SAAC5qB,EAAyBiM,EAAkBof,GAC5D,OAAsB,IAAlBpf,EAAOzD,OACAxI,EAEJA,EAAMiM,QAAO,SAAC/D,GAAD,OAChB+D,EAAOhF,MAAK,SAACqkB,GAAmB,IAAD,EACrBrrB,GACF,UAAAorB,EAAWpmB,MAAK,SAACsmB,GAAD,OAAeA,EAAUtZ,eAAe9Q,KAAO+G,EAAKkf,yBAApE,eAAqFnnB,UAAW,GACpG,OAAQqrB,EAAcljB,MAClB,IAAK,QACD,OAAOnI,EAAQgH,MAAK,SAAChG,GAAD,OAAYA,EAAOM,mBAAqB+pB,EAAcnqB,MAC9E,IAAK,OACD,OAAOlB,EAAQgH,MAAK,SAAChG,GAAD,OAAYA,EAAOI,SAAWiqB,EAAcnqB,MACpE,QACI,OAAO,UAkBrBqqB,GAAqB,SAACvrB,EAAqBsQ,GAC7C,IAAMkb,EAAkB,GA4CxB,OA1CAxrB,EAAQ6B,SAAQ,SAACb,GAAY,IAAD,IAClByqB,EAAqD,UAAGnb,EAAM+T,WAAW7kB,OAAOwF,MAClF,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOF,EAAOO,yBADkB,aAAG,EAE3DuJ,gBAEG4gB,EAAqD,UAAGpb,EAAM+T,WAAW7kB,OAAOwF,MAClF,SAAC2mB,GAAD,OAAUA,EAAK9iB,MAAM3H,KAAOF,EAAOM,2BADoB,aAAG,EAE3DwJ,gBAEG8gB,EAAuB,GAE7B,GAAI5qB,EAAOG,aAAeoc,GAAWsO,QACjCD,EAAW7pB,KAAKf,EAAOS,iBACpB,CAAC,IAAD,EACGqqB,EAA6B,UAAGxb,EAAM+T,WAAWnkB,MAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,iBAAjE,aAAG,EAChCkB,KAAKH,KACP2pB,GACAF,EAAW7pB,KAAK+pB,GAIxB,IAAM3jB,EAAkBnH,EAAOG,WAAW4qB,SAAS,QAAUtP,GAAU8I,KAAO9I,GAAUoP,QAExF,GAAIJ,GAAyBC,EAAuB,CAChD,IAMmB,EANbM,EAAmCR,EAAOxmB,MAC5C,SAACinB,GAAD,OACIA,EAAMR,sBAAsB3gB,gBAAgB5J,KAAOuqB,EAAsB3gB,gBAAgB5J,IACzF+qB,EAAMP,sBAAsB5gB,gBAAgB5J,KAAOwqB,EAAsB5gB,gBAAgB5J,MAGjG,GAAI8qB,GACA,EAAAA,EAAcJ,YAAW7pB,KAAzB,QAAiC6pB,QAEjCJ,EAAOzpB,KAAK,CACR0pB,wBACAC,wBACAE,aACAzjB,aAKTqjB,GAKEU,GAAuBhD,GAAmBtP,QAC1CuS,GACM,SAAC7b,GAAD,OAAgCA,EAAM8V,cAAcqD,cAD1D0C,GAEO,SAAC7b,GAAD,OAA0Csa,GAAwBta,EAAM8V,gBAF/E+F,GAGI,SAAC7b,GAAD,aAAsC,UAAAA,EAAM8V,cAAcsD,qBAApB,eAAmCzZ,QAAS,MAHtFkc,GAIO,SAAC7b,GAAD,OAAuCA,EAAM8V,cAAcsD,eAAiB,MAJnFyC,GAKgB,SAAC7b,GAAD,aAAsC,UAAAA,EAAM8V,cAAcsD,qBAApB,eAAmCxS,QAAS,IALlGiV,GAMoB,SAAC7b,GAAD,aACzB,UAAAA,EAAM8V,cAAcsD,qBAApB,eAAmCzpB,YAAa,IAP3CksB,GAQQ,SAAC7b,GAAD,OAAwCA,EAAM8V,cAAciD,WAAa,MARjF8C,GASQ,SAAC7b,GACd,GAAIA,EAAM8b,KAAKC,OAASC,GAAKC,KAAM,CAC/B,IAAMC,EAAsC5B,GAAwBta,EAAM8V,eACpED,EAAoCuE,GAAuBpa,EAAM8V,eACvE,OAAOuE,IACS,OAAZxE,QAAY,IAAZA,OAAA,EAAAA,EAAcG,kBAAmB,GACjChW,EAAM8V,cAAcqD,cACL,OAAf+C,QAAe,IAAfA,OAAA,EAAAA,EAAiBxd,mBAAoB,IAGzC,MAAO,IAnBNmd,GAsBU,SAAC7b,GAAD,aACfA,EAAM8b,KAAKC,OAASC,GAAKC,OAAO,UAAA7B,GAAuBpa,EAAM8V,sBAA7B,eAA6CC,UAAgB,IAvBxF8F,GAwBW,SAAC7b,GAAD,aAChBA,EAAM8b,KAAKC,OAASC,GAAKC,OAAO,UAAA7B,GAAuBpa,EAAM8V,sBAA7B,eAA6CG,WAAmB,MAzB3F4F,GA0BQ,SAAC7b,GACd,OAAIA,EAAM8b,KAAKC,OAASC,GAAKC,KAyHrC,SAA6Bjc,GAAiD,IAAD,EACzE,OAAOA,EAAMoZ,eACP,UAAApZ,EAAM+Y,iBAAN,eAAiBlB,UAAU7X,EAAMiZ,kBAAkB3a,YAAa,KAChE0B,EAAM8Y,kBA3HGqD,CAAoBnc,EAAM8V,eAE1B,MA9BN+F,GAiCQ,SAAC7b,GACd,IAAImU,EAA0B,GAE9B,GAAInU,EAAM8V,cAAcD,cAAgB7V,EAAM8V,cAAciD,UAAW,CAAC,IAAD,EAC7DoB,EAAgBiC,GAAiBpc,GACvCmU,EAAW1iB,KAAX,MAAA0iB,EAAU,aAAS,UAAAgG,EAAcna,EAAM8V,cAAckD,yBAAlC,eAAqD7E,aAAc,KAG1F,GAAInU,EAAM8V,cAAcgD,oBAAsB9Y,EAAM8V,cAAcD,eAAiB7V,EAAM8V,cAAciD,UAAW,CAAC,IAAD,EACxGsD,GAAyB,UAAArc,EAAM8V,cAAcgD,yBAApB,eAAuChpB,YAAa,GACnFqkB,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASkI,EAAuB5rB,IAAI6rB,MAGlD,OAAOnI,GA9CF0H,GAgDK,SAAC7b,GAAkC,IAAD,EAE5C,OAAO,UADeoc,GAAiBpc,GAClBA,EAAM8V,cAAckD,yBAAlC,eAAqDnR,SAAU,IAlDjEgU,GAoDM,SAAC7b,GAAkC,IAAD,MAEvCf,EAA0B,UADVmd,GAAiBpc,GACUA,EAAM8V,cAAckD,yBAArC,aAAG,EAAqDnC,eACxF,OAAO5X,IACD,UAAAqb,GAAwBta,EAAM8V,sBAA9B,mBAA8CpX,iBAAiBhK,MACjE,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOqO,YADnC,eAEHvP,UACG,IA3DDmsB,GA6De,SAAC7b,GAAD,OAA8BA,EAAM8V,cAAckD,kBA7DjE6C,GA8DY,SAAC7b,GAA8B,IAAD,IAC/C,OACI,UAAAoa,GAAuBpa,EAAM8V,sBAA7B,mBAA6CE,gBAAgBhW,EAAM8V,cAAckD,yBAAjF,eACM/Z,SAAU,IAjEf4c,GAoEe,SAAC7b,GAAD,OAA8BA,EAAM8V,cAAcmD,kBApEjE4C,GAqEY,SAAC7b,GAAD,eACjB,UAAAA,EAAM8V,cAAciD,iBAApB,mBAA+BlB,UAAU7X,EAAM8V,cAAcmD,yBAA7D,eAAgFha,SAAU,IAtErF4c,GAuEY,SAAC7b,GAA+B,IAAD,IAC1Ckb,EAAkB,GAClBf,EAAgBiC,GAAiBpc,GACjCuc,EAAoB,GAEpBC,EAC4D,UAA9D,UAAArC,EAAcna,EAAM8V,cAAckD,yBAAlC,eAAqDnhB,MAArD,UACMsiB,EAAcna,EAAM8V,cAAckD,yBADxC,aACM,EAAqDnC,oBACrD5jB,EACNupB,GACAD,EAAQ9qB,KAAK+qB,GAEjB,IAAIC,EAAqB,GAYzB,OAXAF,EAAQhrB,SAAQ,SAACirB,GAAY,IAAD,EAClBE,EApJS,SAACF,EAAgB9d,EAAqCie,GAC7E,IACIhlB,EADAujB,EAAkB,GAQtB,OANIsB,GAAU9d,IACV/G,EAAO+G,EAAiBhK,MAAK,SAACkoB,GAAD,OAASA,EAAIlb,eAAe9Q,KAAO4rB,MAEhE7kB,IACAujB,EAASD,GAAmBtjB,EAAKjI,QAASitB,IAEvCzB,EA2IsB2B,CACjBL,GACA,UAAAlC,GAAwBta,EAAM8V,sBAA9B,eAA8CpX,mBAAoB,GAClEsB,GAEJyc,EAAYA,EAAUK,OAAOJ,MAEjCD,EAAUlrB,SAAQ,SAACoqB,GACXA,GAAOT,EAAOzpB,KAAKkqB,MAEpBT,GA/FFW,GAiGiB,SAAC7b,GAAD,aACtB,UAAAoa,GAAuBpa,EAAM8V,sBAA7B,eAA6CkB,wBAAyB,MAKjE+F,GAAuB,CAChCC,mBAhN8B,SAAC9kB,GAAD,OAAkC,SAACqQ,GACjE,IAAMzB,EAA4CD,GAA2B3O,GACvD,MAAlB4O,EAASE,KACTuB,EAASqQ,GAAmBlpB,QAAQ2pB,oBAAoBvS,EAAS7Q,SAEjEsS,EAASF,GAAcN,YAAYjB,EAASC,YA4MhDkW,oBA1N+B,SAAC5c,GAAD,OAAmC,SAACkI,GACnE,IAAMzB,EAA6CD,GAA4BxG,GACzD,MAAlByG,EAASE,KACTuB,EAASqQ,GAAmBlpB,QAAQkqB,qBAAqB9S,EAAS7Q,SAElEsS,EAASF,GAAcN,YAAYjB,EAASC,YAsNhDmW,sBAAuBtE,GAAmBlpB,QAAQkqB,qBAAqB,MACvEuD,sBAAuBvE,GAAmBlpB,QAAQwqB,qBAAqB,GACvEkD,qBAAsBxE,GAAmBlpB,QAAQ2pB,oBAAoB,MACrEgE,kBAAmBzE,GAAmBlpB,QAAQgqB,iBAAiB,MAC/DQ,oBAAqBtB,GAAmBlpB,QAAQwqB,oBAChDT,oBAAqBb,GAAmBlpB,QAAQ+pB,oBAChD6D,sBA/M0B,SAAChmB,GAAD,OAA+B,SAACiR,GAC1D,IAAM7M,EAAmB,GACzBA,EAAOjK,KAAK,CAACoG,KAAM,QAASjH,GAAI0G,IAChCiR,EAASqQ,GAAmBlpB,QAAQmrB,UAAUnf,MA6M9C6hB,qBA1MyB,SAAC/mB,GAAD,OAA8B,SAAC+R,GACxD,IAAM7M,EAAmB,GACzBA,EAAOjK,KAAK,CAACoG,KAAM,OAAQjH,GAAI4F,IAC/B+R,EAASqQ,GAAmBlpB,QAAQmrB,UAAUnf,MAwM9C8hB,SAtQa,SAACC,GAAD,OAAoC,SAAClV,GAClDA,EAASwU,GAAqB7C,oBAAoBuD,EAAe,MAsQjEC,SAnQa,SAACD,GAAD,OAAoC,SAAClV,GAClDA,EAASwU,GAAqB7C,oBAAoBuD,EAAe,MAmQjEE,SA5Pa,SAACF,GAAD,OAAoC,SAAClV,EAAUK,GAGxDL,EAFsBK,IAAWkN,cAAckD,iBACnC,EACHJ,GAAmBlpB,QAAQwqB,oBAAoB,GAE/C6C,GAAqBtD,oBAAoBgE,EAAe,MAwPrEG,SAjQa,SAACH,GAAD,OAAoC,SAAClV,GAClDA,EAASwU,GAAqBtD,oBAAoBgE,EAAe,MAiQjEI,gBArP0B,SAACle,GAAD,OAA8B,SAAC4I,EAAUK,GACnE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC7BjV,EAAyCD,GAAuBlH,GACtE,GAAsB,MAAlBmH,EAASE,KACTzW,QAAQ6C,KAAK0T,EAASC,aACnB,CACH,IAAM+W,EAAqBhX,EAAS7Q,OACpCsS,EAASqQ,GAAmBlpB,QAAQgqB,iBAAiBoE,IACjDA,GAAY/B,IAASC,GAAKC,MAAQ3F,GAAQwH,IAC1CvV,EAASqQ,GAAmBlpB,QAAQiqB,aAAajC,GAAoCoG,QA6O7FC,eAAgBnF,GAAmBlpB,QAAQmqB,cAC3CmE,kBAAmBpF,GAAmBlpB,QAAQoqB,iBAC9CE,gBAAiBpB,GAAmBlpB,QAAQsqB,gBAC5CC,kBAAmBrB,GAAmBlpB,QAAQuqB,kBAC9ClB,UAvSoB,kBAAgB,SAACxQ,EAAUK,GAE3CA,IAAWkT,KAAKC,OAASC,GAAKC,MACa,OAA3CrT,IAAWkN,cAAcsD,eACzB9C,GAAQ1N,IAAWkN,cAAcsD,eAAiB,OAElD7Q,EAASwU,GAAqBc,gBAAgBjV,IAAWkN,cAAcsD,cAAezZ,QACtF4I,EACIqQ,GAAmBlpB,QAAQiqB,aACvBjC,GAAoC9O,IAAWkN,cAAcsD,kBAIrExQ,IAAWkT,KAAKC,OAASC,GAAKC,MACqB,OAAnDrT,IAAWkN,cAAc+C,uBACsB,OAA/CjQ,IAAWkN,cAAcgD,oBAEzBvQ,EACIwU,GAAqBC,mBAAmBpU,IAAWkN,cAAc+C,sBAAuBpa,WAAW7N,KAEvG2X,EAASwU,GAAqBE,oBAAoBrU,IAAWkN,cAAcgD,kBAAmBxa,UAAU1N,SAsRhH,SAASwrB,GAAiBpc,GAAqC,IAAD,IAC1D,OAAOA,EAAM8b,KAAKC,OAASC,GAAKC,KAC1B5B,IACE,UAAAD,GAAuBpa,EAAM8V,sBAA7B,eAA6CE,kBAAmB,GAChEhW,EAAM8V,cAAcqD,cACpB,UAAAmB,GAAwBta,EAAM8V,sBAA9B,eAA8CpX,mBAAoB,IAEpE,GAGV,SAAS0b,GAAuBpa,GAAiD,IAAD,EAC5E,OAAOA,EAAMoZ,eACP,UAAApZ,EAAM+Y,iBAAN,eAAiBlB,UAAU7X,EAAMiZ,kBAAkBpa,WAAY,KAC/DmB,EAAM6V,aAGhB,SAASyE,GAAwBta,GAAgD,IAAD,EAC5E,OAAOA,EAAMoZ,eACP,UAAApZ,EAAM+Y,iBAAN,eAAiBlB,UAAU7X,EAAMiZ,kBAAkBpa,SAASiX,gBAAiB,KAC7E9V,EAAM6Y,sBAShB,ICteYmD,GDseNM,GAAyB,SAACllB,GAC5B,MAAO,CACH4I,MAAOkS,GAAeoC,WACtB5iB,QAAS0F,EAAS1F,QAClBZ,OAAQsG,EAAStG,OACjBC,WAAYqG,EAASrG,aEjhBhBktB,GAAb,oDACI,aAMG,IAAD,EALSpsB,EAKT,uDALwB,GACfI,EAIT,wDAJsC,EAC7B4G,EAGT,wDAH6B,EACpBE,EAET,wDAF6B,EACpB5G,EACT,uDADwB,GACxB,4BACE,gBANON,OAKT,EAJSI,oBAIT,EAHS4G,WAGT,EAFSE,WAET,EADS5G,OACT,EAPN,UAA6B6L,ICAhBkgB,GAAb,oDACI,aAA+C,IAAD,EAA3BC,EAA2B,uDAAX,UAAW,4BAC1C,gBADeA,QAA2B,EADlD,UAA8BngB,ICAjBogB,GAAb,oDACI,aAAqG,IAAD,EAAjFxP,EAAiF,uDAAjE,IAAYC,EAAqD,uDAApC,GAAWlW,EAAyB,wDAAH,EAAG,4BAChG,gBADeiW,QAAiF,EAArDC,SAAqD,EAAzBlW,aAAyB,EADxG,UAAuCqF,ICA1BqgB,GAAb,oDACI,aAA2D,IAAD,EAAvClQ,EAAuC,uDAA3B,GAAWC,EAAgB,uDAAJ,GAAI,4BACtD,gBADeD,IAAuC,EAAhBC,IAAgB,EAD9D,UAAgCpQ,ICCnBsgB,GACT,aAGG,IAFQ1jB,EAET,uDAFgC,IAAIyjB,GAC3B7jB,EACT,uDAD8C,IAAI4jB,GAClD,yBAFSxjB,WAET,KADSJ,mBCFF+jB,GACT,aAIG,IAHQhmB,EAGT,uDAH0B,IAAI0lB,GACrBzjB,EAET,uDAF+C,IAAI8jB,GAC1CjkB,EACT,uDAD4B,IAAI6jB,GAChC,yBAHS3lB,QAGT,KAFSiC,kBAET,KADSH,UC6BTmkB,GAAsB,SAACjmB,GAAD,OAA+B,SAACgQ,EAAUK,GAClE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC/BA,IAASC,GAAKyC,WACdlW,EAASmW,GAAYC,eAAepmB,IAEpCgQ,EAASF,GAAcN,YAAY,qCAAuCgU,MAIrE6C,GA3BU,SAACrmB,GAAD,OAA+B,SAACgQ,GACnD,IAAMzB,EAAyCD,GAAwBtO,GACjD,MAAlBuO,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,QAqBA2K,GAlBY,SAACrmB,GAAD,8CAA+B,WAAOgQ,GAAP,eAAApF,EAAA,sEACC0D,GAA0BtO,GAD3B,OAE9B,OADhBuO,EAD8C,QAEvCE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MAN2C,2CAA/B,uDAkBZ2K,GAtCY,kBAAgB,SAACrW,GACtC,IAAMhQ,EAAkB,IAAIgmB,GACtBzX,EAAyCD,GAAwBtO,GACjD,MAAlBuO,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MACT1L,EAASiW,GAAoB1X,EAAS7Q,WCoBpC6oB,GAAqB,SAACvf,GAAD,OAAiC,SAACgJ,GACzD,IAAMzB,EAA4CD,GAAyBtH,GACrD,MAAlBuH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAoBP8K,GAA0B,SAACxf,GAAD,OAAiC,SAACgJ,EAAUK,GACxE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,IAASC,GAAKgD,gBACdzW,EAASmW,GAAYO,mBAAmB1f,IAExChP,QAAQ6C,KAAK,0CAA4C2oB,KAIpDmD,GAAgB,CACzBC,OA7DyB,SAAC5f,EAAmBvK,EAAsCoqB,GAA1D,OAAyF,SAClH7W,GAEA,IAAMzB,EAA4CD,GAAyBtH,GACrD,MAAlBuH,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B9T,IAAT+B,SAC0C/B,IAArC+B,EAAqBkJ,cACrBlJ,EAAqB4C,KAAO,CAACC,KAAMxB,EAAe0hB,KAAMnnB,GAAIkW,EAAS7Q,OAAOrF,IAC7E2X,EAASuW,GAAmB9pB,UAES/B,IAApC+B,EAAyBpD,SACtBwtB,EACCpqB,EAAyBpD,OAAS,CAACiG,KAAMxB,EAAe0hB,KAAMnnB,GAAIkW,EAAS7Q,OAAOrF,IAElFoE,EAAyBrD,SAAW,CAACkG,KAAMxB,EAAe0hB,KAAMnnB,GAAIkW,EAAS7Q,OAAOrF,IAEzF2X,EAAS8W,GAAkBtlB,KAAK/E,MAGxCuT,EAASwW,GAAwBjY,EAAS7Q,YAyC9C8D,KAAM+kB,GACNhlB,OA9ByB,SAACyF,GAAD,OAAiC,SAACgJ,GAC3D,IAAMzB,EAA4CD,GAA2BtH,GACvD,MAAlBuH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QA0BTvf,KAvBuB,SAAC9D,GACxB,IAAMkW,EAA4CD,GAAyBjW,GAK3E,OAJsB,MAAlBkW,EAASE,MAETzW,QAAQ6C,KAAK0T,EAASC,SAEnBD,EAAS7Q,SCpBdqpB,GAAyB,SAACluB,GAAD,OAAyC,SAACmX,GACrE,IAAMzB,EAAgDD,GAA6BzV,GAC7D,MAAlB0V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAoBPsL,GAA8B,SAACnuB,GAAD,OAAyC,SAACmX,EAAUK,GACpF,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,IAASC,GAAKwD,qBAAuBzD,IAASC,GAAKyD,8BACnDlX,EAASmW,GAAYgB,uBAAuBtuB,IAE5CmX,EAASF,GAAcN,YAAY,0CAA4CgU,MAI1EsD,GAAoB,CAC7BF,OA/D6B,SAC7B/tB,EACA4D,EACAoqB,GAH6B,OAIlB,SAAC7W,GACZ,IAAMzB,EAAgDD,GAA6BzV,GAC7D,MAAlB0V,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B9T,IAAT+B,SAC0C/B,IAArC+B,EAAqBkJ,cACrBlJ,EAAqB4C,KAAO,CAACC,KAAMxB,EAAe+L,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAC5E2X,EAAS2W,GAAcnlB,KAAK/E,UAEW/B,IAAtC+B,EAAyBrD,WACtBytB,EACCpqB,EAAyBpD,OAAS,CAACiG,KAAMxB,EAAe+L,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAEjFoE,EAAyBrD,SAAW,CAACkG,KAAMxB,EAAe+L,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAExF2X,EAAS+W,GAAuBtqB,MAGxCuT,EAASgX,GAA4BzY,EAAS7Q,YAyClD8D,KAAMulB,GACNxlB,OA9B6B,SAAC1I,GAAD,OAAyC,SAACmX,GACvE,IAAMzB,EAAgDD,GAA+BzV,GAC/D,MAAlB0V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QA0BTvf,KAvB2B,SAAC9D,GAC5B,IAAMkW,EAAgDD,GAA6BjW,GAKnF,OAJsB,MAAlBkW,EAASE,MAETzW,QAAQ6C,KAAK0T,EAASC,SAEnBD,EAAS7Q,QAkBhB0pB,OAAQJ,IC5ECK,GAAb,oDACI,aAAuC,IAAD,EAAnB/tB,EAAmB,uDAAJ,GAAI,4BAClC,gBADeA,OAAmB,EAD1C,UAA6BmM,IC+DhB6hB,GApDY,kBAAgB,SAACtX,GACtC,IAAM5I,EAAiB,IAAIigB,GACrB9Y,EAAwCD,GAAuBlH,GAC/C,MAAlBmH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAASwU,GAAqBc,gBAAgB/W,EAAS7Q,WA6C9C4pB,GAjCU,SAAClgB,GAAD,OAA8B,SAAC4I,GAClD,IAAMzB,EAAwCD,GAAuBlH,GAC/C,MAAlBmH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAASwU,GAAqBc,gBAAgB/W,EAAS7Q,WA2B9C4pB,GAxBY,SAAClgB,GAAD,OAA8B,SAAC4I,GACpD,IAAMzB,EAAwCD,GAAuBlH,GAC/C,MAAlBmH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAAS0L,MACT1L,EAAS0L,QAiBA4L,GAda,SAAC9f,EAAiB+f,EAAgBrd,GAAlC,OAAoE,SAAC8F,GAC3F,IAAMzB,EAA8DD,GAChE9G,EACA+f,EACArd,GAEkB,MAAlBqE,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAAS0L,MACT1L,EAAS0L,QC5BP8L,GAAoB,SAACzhB,GAAD,OAAuC,SAACiK,EAAUK,GACxE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,IAASC,GAAKgE,eACdzX,EAASmW,GAAYuB,mBAAmB3hB,IAExCiK,EAASF,GAAcN,YAAY,yCAA2CgU,MAIzEmE,GAAgB,CACzBnmB,KA3BuB,SAACuE,GAAD,OAAuC,SAACiK,GAC/D,IAAMzB,EAA6CD,GAA4BvI,GACzD,MAAlBwI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAuBTna,OApByB,SAACwE,GAAD,OAAuC,SAACiK,GACjE,IAAMzB,EAA6CD,GAA2BvI,GACxD,MAAlBwI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAgBT0L,OAAQI,GACRZ,OAxCyB,kBAAgB,SAAC5W,GAC1C,IAAMjK,EAA0B,IAAID,GAC9ByI,EAA6CD,GAA4BvI,GACzD,MAAlBwI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAASwX,GAAkBjZ,EAAS7Q,YCZ3BkqB,GAAb,oDACI,aAMG,IAAD,EALStuB,EAKT,uDALwB,GACfI,EAIT,wDAJsC,EAC7BC,EAGT,uDAHuC,GAC9BE,EAET,uDAFuC,CAAC,CAACxB,IAAK,EAAGiB,KAAM,YAC9CM,EACT,uDADwB,GACxB,4BACE,gBANON,OAKT,EAJSI,oBAIT,EAHSC,oBAGT,EAFSE,YAET,EADSD,OACT,EAPN,UAA4B6L,ICAfoiB,GACT,aAGG,IAFQpuB,EAET,uDAFwB,IAAImuB,GACnB3lB,EACT,uDAD+C,IAAI8jB,GACnD,yBAFStsB,OAET,KADSwI,mBCgCT6lB,GAAgB,SAACruB,GAAD,OAA6B,SAACuW,EAAUK,GAC1D,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC/BA,IAASC,GAAKsE,WAAavE,IAASC,GAAKuE,mBACzChY,EAASmW,GAAY2B,cAAcruB,IAEnCuW,EAASF,GAAcN,YAAY,oCAAsCgU,MAIpEyE,GA5BS,SAACxuB,GAAD,OAA6B,SAACuW,GAChD,IAAMzB,EAAwCD,GAAuB7U,GAC/C,MAAlB8U,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,QAsBAuM,GAnBW,SAACxuB,GAAD,OAA6B,SAACuW,GAClD,IAAMzB,EAAwCD,GAAyB7U,GACjD,MAAlB8U,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MACT1L,EAAS0L,QAYAuM,GAvCW,kBAAgB,SAACjY,GACrC,IAAMvW,EAAgB,IAAIouB,GACpBtZ,EAAwCD,GAAuB7U,GAC/C,MAAlB8U,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MACT1L,EAAS8X,GAAcvZ,EAAS7Q,WC6D9BwqB,GAAwB,SAAC9oB,GAAD,OAAqC,SAAC4Q,GAChE,IAAMzB,EAAgDD,GAA+BlP,GAC/D,MAAlBmP,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAGPyM,GAAqB,SAAC/oB,GAAD,OAAqC,SAAC4Q,EAAUK,GACvE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,EAAK4E,WAAW3E,GAAK4E,oBACrBrY,EAASmW,GAAYmC,cAAclpB,IAEnC4Q,EAASF,GAAcN,YAAY,oCAAsCgU,MAIpE+E,GAAW,CACpB/mB,KAAM0mB,GACN3mB,OAtD4B,SAACnC,EAAuB+O,GAAxB,OAAgE,SAAC6B,GAE7F,GAAI7B,EAAa,CACb,IAAMqa,EAA4BhrB,EAAUG,SAASwQ,GAErDqa,EAAariB,iBAAiBnN,SAAQ,SAACyvB,GAE/BA,EAAKtf,eAAe9J,KAAKC,OAAShC,EAAUiC,MAC5CkpB,EAAKtf,eAAe9J,KAAKhH,KAAO+G,EAAK+J,eAAe9Q,KAEpDowB,EAAKtf,eAAe9J,KAAO,CAACC,KAAMhC,EAAUsI,OAC5CoK,EAASkY,GAAsBO,QAIvCD,EAAapxB,UAAU4B,SAAQ,SAACkP,GACxBA,EAAK7O,OAAOiG,OAAShC,EAAUiC,MAAQ2I,EAAK7O,OAAOhB,KAAO+G,EAAK+J,eAAe9Q,KAC9E6P,EAAK7O,OAAS,CAACiG,KAAMhC,EAAUsI,OAC/BoK,EAAS0Y,GAAalnB,KAAK0G,KAE3BA,EAAK9O,SAASkG,OAAShC,EAAUiC,MAAQ2I,EAAK9O,SAASf,KAAO+G,EAAK+J,eAAe9Q,KAClF6P,EAAK9O,SAAW,CAACkG,KAAMhC,EAAUsI,OACjCoK,EAAS0Y,GAAalnB,KAAK0G,QAKvC,IAAMqG,EAAgDD,GAAiClP,GACjE,MAAlBmP,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAwBT0L,OAAQe,GACRvB,OAtF4B,SAC5BxnB,EACA3C,EACAoqB,GAH4B,OAIjB,SAAC7W,GACZ,IAAMzB,EAAgDD,GAA+BlP,GAC/D,MAAlBmP,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B9T,IAAT+B,SACiD/B,IAA5C+B,EAAyB0M,iBACzB1M,EAAyB0M,eAAe9J,KAAO,CAC5CC,KAAMhC,EAAUiC,KAChBlH,GAAIkW,EAAS7Q,OAAOyL,eAAe9Q,IAEvC2X,EAASkY,GAAsBzrB,UAEG/B,IAAjC+B,EAAoBrD,WACjBytB,EACCpqB,EAAoBpD,OAAS,CAACiG,KAAMhC,EAAUiC,KAAMlH,GAAIkW,EAAS7Q,OAAOyL,eAAe9Q,IAEvFoE,EAAoBrD,SAAW,CAACkG,KAAMhC,EAAUiC,KAAMlH,GAAIkW,EAAS7Q,OAAOyL,eAAe9Q,IAE9F2X,EAAS0Y,GAAalnB,KAAK/E,MAGnCuT,EAASmY,GAAmB5Z,EAAS7Q,aCDvCirB,GAAoB,SAAC9vB,GAAD,OAAoC,SAACmX,GAC3D,IAAMzB,EAA2CD,GAAwBzV,GACnD,MAAlB0V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,YAmC9Coa,GAAsB,SAACC,GACzB,IAAMta,EAA2CD,GAAwBua,GAKzE,OAJsB,MAAlBta,EAASE,MAETzW,QAAQ6C,KAAK0T,EAASC,SAEnBhR,EAAUG,SAAS4Q,EAAS7Q,SAGjCorB,GAAyB,SAACjwB,GAAD,OAAoC,SAACmX,EAAUK,GAC1E,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,IAASC,GAAKsF,wBAA0BtF,GAAKuF,iCAC7ChZ,EAASmW,GAAY8C,kBAAkBL,GAAoB/vB,EAASR,MAEpE2X,EAASF,GAAcN,YAAY,wCAA0CgU,MAIxEkF,GAAe,CACxB9B,OAnFwB,SAAC/tB,EAAsB4D,EAAqCpD,GAA5D,OAA2F,SACnH2W,GAEA,IAAMzB,EAA2CD,GAAwBzV,GACnD,MAAlB0V,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,WAExC/R,SACiD/B,IAA5C+B,EAAyB0M,iBACzB1M,EAAyB0M,eAAe9J,KAAO,CAACC,KAAMhC,EAAUuM,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAC1F2X,EAASuY,GAAS/mB,KAAK/E,UAEW/B,IAAjC+B,EAAoBrD,WACjBC,EACCoD,EAAoBpD,OAAS,CAACiG,KAAMhC,EAAUuM,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAEvEoE,EAAoBrD,SAAW,CAACkG,KAAMhC,EAAUuM,IAAKxR,GAAIkW,EAAS7Q,OAAOrF,IAE9E2X,EAAS2Y,GAAkBlsB,MAGnCuT,EAAS8Y,GAAuBva,EAAS7Q,YA+D7C0pB,OAAQ0B,GACRtnB,KAAMmnB,GACNpnB,OAtDwB,SAAC1I,EAAsBsV,GAAvB,OAA+D,SAAC6B,GAExF,GAAI7B,EAAa,CACb,IAAMqa,EAA4BhrB,EAAUG,SAASwQ,GAErDqa,EAAariB,iBAAiBnN,SAAQ,SAACoG,GAC/BA,EAAK+J,eAAe9J,KAAKC,OAAShC,EAAUuM,KAAOzK,EAAK+J,eAAe9J,KAAKhH,KAAOQ,EAASR,KAC5F+G,EAAK+J,eAAe9J,KAAO,CAACC,KAAMhC,EAAUsI,OAC5CoK,EAASuY,GAAS/mB,KAAKpC,QAI/BopB,EAAapxB,UAAU4B,SAAQ,SAACkP,GACxBA,EAAK7O,OAAOiG,OAAShC,EAAUuM,KAAO3B,EAAK7O,OAAOhB,KAAOQ,EAASR,KAClE6P,EAAK7O,OAAS,CAACiG,KAAMhC,EAAUsI,OAC/BoK,EAAS2Y,GAAkBzgB,KAE3BA,EAAK9O,SAASkG,OAAShC,EAAUuM,KAAO3B,EAAK9O,SAASf,KAAOQ,EAASR,KACtE6P,EAAK9O,SAAW,CAACkG,KAAMhC,EAAUsI,OACjCoK,EAAS2Y,GAAkBzgB,QAKvC,IAAMqG,EAA2CD,GAA0BzV,GACrD,MAAlB0V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QA2BTvf,KAAMysB,IClGGM,GAAb,oDACI,aAAqE,IAAD,EAAjD5vB,EAAiD,uDAAlC,GAAWssB,EAAuB,uDAAP,MAAO,4BAChE,gBADetsB,OAAiD,EAAvBssB,QAAuB,EADxE,UAA6BngB,ICoCvB0jB,GAAsB,SAACxnB,GAAD,OAA8B,SAACqO,EAAUK,GACjE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC/BA,IAASC,GAAKsE,WAAavE,IAASC,GAAKuE,mBACzChY,EAASmW,GAAYiD,eAAeznB,IAEpCqO,EAASF,GAAcN,YAAY,oCAAsCgU,MAIpE6F,GAvCY,kBAAgB,SAACrZ,GACtC,IAAMrO,EAAiB,IAAIunB,GACrB3a,EAAwCD,GAAqB3M,GAC7C,MAAlB4M,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MACT1L,EAASmZ,GAAoB5a,EAAS7Q,WCkB7B4rB,GA1Ba,SAACzqB,GAAD,OAAoC,SAACmR,GAC3D,IAAMzB,EAA2CD,GAAwBzP,GACnD,MAAlB0P,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAASuZ,GAAYC,QAAQC,aAAalb,EAAS7Q,WAqB1C4rB,GAlBe,SAAChhB,GAAD,OAAkC,SAAC0H,GAC3D,IAAMzB,EAA2CD,GAA0BhG,GACrD,MAAlBiG,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QCgBPgO,GAAyB,SAACtrB,GAAD,OAAwC,SAAC4R,EAAUK,GAC9E,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC/BA,IAASC,GAAKkG,cACd3Z,EAASmW,GAAYyD,kBAAkBxrB,IAEvC4R,EAASF,GAAcN,YAAY,wCAA0CgU,MAIxEqG,GA3Ba,SAACzrB,GAAD,8CAAwC,WAAO4R,GAAP,eAAApF,EAAA,sEACH0D,GAA+BlQ,GAD5B,OAExC,OADhBmQ,EADwD,QAEjDE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MANqD,2CAAxC,uDA2BbmO,GAlBe,SAACzrB,GAAD,8CAAwC,WAAO4R,GAAP,eAAApF,EAAA,sEACL0D,GAA8BlQ,GADzB,OAE1C,OADhBmQ,EAD0D,QAEnDE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MANuD,2CAAxC,uDAkBfmO,GAtCe,kBAAgB,SAAC7Z,GACzC,IAAM5R,EAA2B,IAAI2V,GAC/BxF,EAA+CD,GAA+BlQ,GAC9D,MAAlBmQ,EAASE,OACTzW,QAAQsuB,IAAI/X,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS0L,MACT1L,EAAS0Z,GAAuBnb,EAAS7Q,WCCvCosB,GAAoB,SAACxjB,GAAD,OAAoC,SAAC0J,GAC3D,IAAMzB,EAA2CD,GAA0BhI,GACrD,MAAlBiI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,MACT1L,EAAS+Z,GAAuBxb,EAAS7Q,SACzCsS,EAASwU,GAAqBC,mBAAmBlW,EAAS7Q,OAAOrF,OAqB/D2xB,GAAqB,SAACrqB,GACxB,IAAM4O,EAA4CD,GAA2B3O,GAC7E,OAAsB,MAAlB4O,EAASE,KACF,KAEJF,EAAS7Q,QAedqsB,GAAyB,SAACzjB,GAAD,OAAoC,SAAC0J,EAAUK,GAC1E,IAAMmT,EAAanT,IAAWkT,KAAKC,KAE/BA,IAASC,GAAKwG,cACdja,EAASmW,GAAY+D,kBAAkB5jB,IAEvC0J,EAASF,GAAcN,YAAY,wCAA0CgU,MAIxE2G,GAAe,CACxB3oB,KAAMsoB,GACNvoB,OAlDwB,SAAC+E,GAAD,OAAoC,SAAC0J,EAAUK,GACvE,IAAM+Z,EAA0CJ,GAAmB1jB,EAASjO,IAE5E,GAA4B,OAAxB+xB,EAA8B,CAAC,IAAD,IACxB7b,EAA4CD,GAA6B8b,GAEzD,MAAlB7b,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,WAG5C,UAAA6B,IAAWkN,cAAc+C,6BAAzB,mBAAgDpa,kBAAhD,eAA4D7N,MAAOiO,EAASjO,IAC5E2X,EAASwU,GAAqBK,sBAGlC7U,EAAS0L,SAqCb0L,OAAQ2C,GACR/mB,QAASgnB,GACTpD,OApEwB,kBAAgB,SAAC5W,GACzC,IAAM1J,EAAuB,IAAIN,GACjCgK,EAAS8Z,GAAkBxjB,MAmE3B2D,QA5BiB,SAACtK,EAAoB4nB,EAAgBrd,GAArC,OAAuE,SAAC8F,GACzF,IAAMzB,EAA4DD,GAC9D3O,EACA4nB,EACArd,GAEkB,MAAlBqE,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,U,StBtBD+H,K,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,wBAAAA,E,wBAAAA,E,sBAAAA,E,wCAAAA,E,8BAAAA,E,gCAAAA,E,mDAAAA,E,wBAAAA,E,sCAAAA,E,0CAAAA,E,8DAAAA,E,kCAAAA,E,8BAAAA,E,4CAAAA,E,gDAAAA,E,oEAAAA,E,wCAAAA,E,uDAAAA,Q,KAyBZ,IuB/DY4G,GAIAC,GvB0FNC,GAA6B,CAC/BC,aAAc,GACdhH,KAAMC,GAAKgH,KACXrwB,YAAa,GAGXswB,GAAYtb,YAAY,CAC1B9V,KAAM,OACN+V,aAAckb,GACdhb,SAAU,CACNmX,mBAAoB,SAACjf,EAAOtP,GACpBsP,EAAM+b,OAASC,GAAKgD,gBACpBhf,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,0CAA4C4M,EAAM+b,OAGvEmH,cAAe,SAACljB,EAAOtP,GACnBsP,EAAMrN,WAAajC,EAAOsX,SAE9B0X,uBAAwB,SAAC1f,EAAOtP,GACxBsP,EAAM+b,OAASC,GAAKwD,qBAAuBxf,EAAM+b,OAASC,GAAKyD,8BAC/Dzf,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,0CAA4C4M,EAAM+b,OAGvE4C,eAAgB,SAAC3e,EAAOtP,GAChBsP,EAAM+b,OAASC,GAAKyC,WACpBze,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,qCAAuC4M,EAAM+b,OAGlEsE,cAAe,SAACrgB,EAAOtP,GACfsP,EAAM+b,OAASC,GAAKsE,WAAatgB,EAAM+b,OAASC,GAAKuE,mBACrDvgB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,oCAAsC4M,EAAM+b,OAGjEoH,kBAAmB,SAACnjB,EAAOtP,GACnBsP,EAAM+b,OAASC,GAAKuE,mBACpBvgB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,oCAAsC4M,EAAM+b,OAGjEoG,kBAAmB,SAACniB,EAAOtP,GACnBsP,EAAM+b,OAASC,GAAKkG,cACpBliB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,wCAA0C4M,EAAM+b,OAGrE0G,kBAAmB,SAACziB,EAAOtP,GACnBsP,EAAM+b,OAASC,GAAKwG,cACpBxiB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,wCAA0C4M,EAAM+b,OAGrE8E,cAAe,SAAC7gB,EAAOtP,GACfsP,EAAM+b,KAAK4E,WAAW3E,GAAK4E,oBAC3B5gB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,oCAAsC4M,EAAM+b,OAGjEqH,gBAAiB,SAACpjB,EAAOtP,GACjBsP,EAAM+b,OAASC,GAAKqH,0BACpBrjB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,sCAAwC4M,EAAM+b,OAGnEkE,mBAAoB,SAACjgB,EAAOtP,GACpBsP,EAAM+b,OAASC,GAAKgE,eACpBhgB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,yCAA2C4M,EAAM+b,OAGtEuH,kBAAmB,SAACtjB,EAAOtP,GACnBsP,EAAM+b,OAASC,GAAKuH,wBACpBvjB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,wCAA0C4M,EAAM+b,OAGrE4F,eAAgB,SAAC3hB,EAAOtP,GAChBsP,EAAM+b,OAASC,GAAKwH,WACpBxjB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,qCAAuC4M,EAAM+b,OAGlEyF,kBAAmB,SAACxhB,EAAOtP,GACnBsP,EAAM+b,OAASC,GAAKsF,wBAA0BtF,GAAKuF,iCACnDvhB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,wCAA0C4M,EAAM+b,OAGrE0H,mBAAoB,SAACzjB,EAAOtP,GACpBsP,EAAM+b,OAASC,GAAKuF,iCACpBvhB,EAAM+iB,aAAeryB,EAAOsX,QAE5BzX,QAAQ6C,KAAK,wCAA0C4M,EAAM+b,OAGrE2H,kBAAmB,SAAC1jB,GAChBA,EAAM+iB,aAAe,IAEzBhB,QAAS,SAAC/hB,EAAOtP,GACbsP,EAAM+b,KAAOrrB,EAAOsX,YAKnB0W,GAAcuE,GAAUvzB,QAK/Bi0B,GAA0B,SAAC5H,GAAD,OAA0B,SAACxT,EAAUK,GAC7DmT,IAASnT,IAAWkT,KAAKC,OACzBtoB,aAAaO,QA9JM,OA8JsB+nB,GACzCxT,EAAS0a,GAAUvzB,QAAQqyB,QAAQhG,OAwKrC6H,GAAyB,SAC3BC,EACA7uB,EACApD,GAH2B,OAIhB,SAAC2W,GACZA,EAASob,GAAwB3H,GAAK4E,qBACtCrY,EAASuY,GAAS3B,OAAO0E,EAAS7uB,EAAMpD,MA4FtCqpB,GAAqB,SAACvrB,EAAqBsQ,GAC7C,IAAMkb,EAAkB,GA2CxB,OAzCAxrB,EAAQ6B,SAAQ,SAACb,GAAY,IAAD,IAClByqB,EAAqD,UAAGnb,EAAM+T,WAAW7kB,OAAOwF,MAClF,SAAC2mB,GAAD,OAAUA,EAAK9iB,MAAM3H,KAAOF,EAAOO,yBADoB,aAAG,EAE3DuJ,gBAEG4gB,EAAqD,UAAGpb,EAAM+T,WAAW7kB,OAAOwF,MAClF,SAAC2mB,GAAD,OAAUA,EAAK9iB,MAAM3H,KAAOF,EAAOM,2BADoB,aAAG,EAE3DwJ,gBAEG8gB,EAAuB,GAC7B,GAAI5qB,EAAOG,aAAeoc,GAAWsO,QACjCD,EAAW7pB,KAAKf,EAAOS,iBACpB,CAAC,IAAD,EACGqqB,EAA6B,UAAGxb,EAAM+T,WAAWnkB,MAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,iBAAjE,aAAG,EAChCkB,KAAKH,KACP2pB,GACAF,EAAW7pB,KAAK+pB,GAIxB,IAAM3jB,EAAkBnH,EAAOG,WAAW4qB,SAAS,QAAUtP,GAAU8I,KAAO9I,GAAUoP,QAExF,GAAIJ,GAAyBC,EAAuB,CAChD,IAMmB,EANbM,EAAmCR,EAAOxmB,MAC5C,SAACinB,GAAD,OACIA,EAAMR,sBAAsB3gB,gBAAgB5J,KAAOuqB,EAAsB3gB,gBAAgB5J,IACzF+qB,EAAMP,sBAAsB5gB,gBAAgB5J,KAAOwqB,EAAsB5gB,gBAAgB5J,MAGjG,GAAI8qB,GACA,EAAAA,EAAcJ,YAAW7pB,KAAzB,QAAiC6pB,QAEjCJ,EAAOzpB,KAAK,CACR0pB,wBACAC,wBACAE,aACAzjB,aAKTqjB,GAIE4I,GAAcb,GAAU3Z,QAKxBya,GACG,SAAC/jB,GAAD,OAA4BA,EAAM8b,KAAKC,MAD1CgI,GAEU,SAAC/jB,GAChB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKyC,YAAeze,EAAM8b,KAAKiH,aAA0BxqB,MAC7EyH,EAAM8b,KAAKiH,aACZ,MALDgB,GAOc,SAAC/jB,GACpB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKgD,iBAAoBhf,EAAM8b,KAAKiH,aAA6B7kB,YACrF8B,EAAM8b,KAAKiH,aACZ,MAVDgB,GAYkB,SAAC/jB,GACxB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKwD,qBAC/Bxf,EAAM8b,KAAKC,OAASC,GAAKyD,+BACrBzf,EAAM8b,KAAKiH,aAAiCpxB,SAC1CqO,EAAM8b,KAAKiH,aACZ,MAjBDgB,GAmBS,SAAC/jB,GACf,OAAOA,EAAM8b,KAAKC,OAASC,GAAKsE,WAC/BtE,GAAKuE,oBAAuBvgB,EAAM8b,KAAKiH,aAAyB/wB,KAC1DgO,EAAM8b,KAAKiH,aACZ,MAvBDgB,GA8Ba,SAAC/jB,GACnB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKkG,eAAkBliB,EAAM8b,KAAKiH,aAAgCtW,WACtFzM,EAAM8b,KAAKiH,aACZ,MAjCDgB,GAmCa,SAAC/jB,GACnB,OAAQA,EAAM8b,KAAKC,OAASC,GAAKwG,eAAiBxiB,EAAM8b,KAAKC,OAASC,GAAKgI,uBAA0BhkB,EAAM8b,KAAKiH,aAE1G,KADC/iB,EAAM8b,KAAKiH,cArCbgB,GAwCc,SAAC/jB,GACpB,GACIA,EAAM8b,KAAKC,OAASC,GAAKqH,2BACxBrjB,EAAM8b,KAAKiH,aAA0B/xB,iBACxC,CAAC,IAAD,EACQizB,EAAyBjkB,EAAM8b,KAAKiH,aAEpCmB,EAAmClkB,EAAM+T,WAAW7kB,OAAOwF,MAC7D,SAAC2mB,GAAD,OAAUA,EAAK9iB,MAAM3H,KAAOqzB,EAAahzB,kBAGvCkzB,EAAmCnkB,EAAM+T,WAAW7kB,OAAOwF,MAC7D,SAAC2mB,GAAD,OAAUA,EAAK9iB,MAAM3H,KAAOqzB,EAAajzB,oBAGvCwqB,EACFyI,EAAapzB,aAAeoc,GAAWsO,QACjC0I,EAAa9yB,aACb,UAAA2iB,GAAsCmQ,EAAanzB,OAAnDgjB,CAA2D9T,UAA3D,eAAmEhO,KAAKH,OAC1E,sBAEFgG,EAAkBosB,EAAapzB,WAAW4qB,SAAS,QAAUtP,GAAU8I,KAAO9I,GAAUoP,QAE9F,OAAI2I,GAAcC,EACP,CACHhJ,sBAAuB+I,EAAW1pB,gBAClC4gB,sBAAuB+I,EAAW3pB,gBAClC8gB,WAAY,CAACE,GACb3jB,KAAMA,GAGH,KAGX,OAAO,MA1ENksB,GA6Ea,SAAC/jB,GACnB,IA1IoBokB,EAAkCzH,EA0IlDzB,EAAkB,GAKtB,OAHIlb,EAAM8b,KAAKC,OAASC,GAAK4E,oBAAuB5gB,EAAM8b,KAAKiH,aAAiCrhB,iBA5I5E0iB,EA6IYpkB,EAAM8b,KAAKiH,aA7IWpG,EA6IsB3c,EAAxEkb,EA3ICD,GAAmBmJ,EAAgB10B,QAASitB,IA6I1CzB,GAnFF6I,GAqFc,SAAC/jB,GACpB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKgE,gBAAmBhgB,EAAM8b,KAAKiH,aAA8BzkB,UACrF0B,EAAM8b,KAAKiH,aACZ,MAxFDgB,GA0Fa,SAAC/jB,GACnB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKuH,yBAA4BvjB,EAAM8b,KAAKiH,aAA4B7kB,YAC5F8B,EAAM8b,KAAKiH,aACZ,MA7FDgB,GA+FS,SAAC/jB,GACf,OAAQA,EAAM8b,KAAKC,MACf,KAAKC,GAAK4E,mBACN,OAAQ5gB,EAAM8b,KAAKiH,aAAiCrhB,eAC7C1B,EAAM8b,KAAKiH,aACZ,KACV,KAAK/G,GAAKqH,0BACN,OAAQrjB,EAAM8b,KAAKiH,aAA4BprB,KACxCqI,EAAM8b,KAAKiH,aAA4BprB,KACxC,KACV,QACI,OAAO,OA1GVosB,GA6GW,SAAC/jB,GACjB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKqH,2BAA8BrjB,EAAM8b,KAAKiH,aAA0BlyB,WAC5FmP,EAAM8b,KAAKiH,aACZ,MAhHDgB,GAkHa,SAAC/jB,GACnB,OAAQA,EAAM8b,KAAKC,OAASC,GAAKsF,wBAA0BtF,GAAKuF,mCAC/DvhB,EAAM8b,KAAKiH,aAA4BvwB,WACjCwN,EAAM8b,KAAKiH,aACZ,MAtHDgB,GAwHc,SAAC/jB,GACpB,OAAOA,EAAM8b,KAAKC,OAASC,GAAKuF,kCAC/BvhB,EAAM8b,KAAKiH,aAA6BrwB,WAClCsN,EAAM8b,KAAKiH,aACZ,MASDjB,GAAc,CACvBC,QAAS,CACLsC,UA3ZwB,SAAC9rB,GAAD,OAAgC,SAACgQ,GAC7DA,EAASob,GAAwB3H,GAAKyC,aAElClW,OADUtV,IAAVsF,EACSqmB,KAEAqE,GAAUvzB,QAAQivB,eAAepmB,MAuZ1C+rB,cAnZ4B,SAAC1zB,GAAD,OAA0B,SAAC2X,EAAUK,GACrE,IAAMrQ,EAA8BqQ,IAAWmL,WAAW7kB,OAAOwF,MAAK,SAAC6vB,GAAD,OAASA,EAAIhsB,MAAM3H,KAAOA,KAC5F2H,IACAgQ,EAASob,GAAwB3H,GAAKyC,aACtClW,EAAS0a,GAAUvzB,QAAQivB,eAAepmB,OAgZ1CisB,SA5XuB,SAACxyB,GAAD,OAA8B,SAACuW,GAC1DA,EAASob,GAAwB3H,GAAKsE,YAElC/X,OADStV,IAATjB,EACSwuB,KAEAyC,GAAUvzB,QAAQ2wB,cAAcruB,MAwXzCyyB,aA9Y2B,SAAC7zB,GAAD,OAA0B,SAAC2X,EAAUK,GACpE,IAAM5W,EAA4B4W,IAAWmL,WAAWnkB,MAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOA,KAC1FoB,IACAuW,EAASob,GAAwB3H,GAAKsE,YACtC/X,EAAS0a,GAAUvzB,QAAQ2wB,cAAcruB,OA2YzC0yB,iBArX+B,SAAC9zB,GAAD,OAA2B,SAAC2X,EAAUK,GACzE,GAAKA,IAAWkT,KAAKiH,aAAyB/wB,KAAM,CAChD,QAAWiB,IAAPrC,EAAkB,CAClB,IAAM+zB,EAAoB5uB,EAAUG,SAAS0S,IAAWkT,KAAKiH,cACvD6B,EAA8B,IAAI3S,GACxC2S,EAAYh0B,GAAK+zB,EAAS3yB,KAAKI,UAAU6F,OACzC0sB,EAAS3yB,KAAKI,UAAUX,KAAKmzB,GAC7Brc,EAAS0a,GAAUvzB,QAAQ2wB,cAAcsE,IACzC/zB,EAAKg0B,EAAYh0B,GAErB2X,EAAS0a,GAAUvzB,QAAQwzB,cAActyB,IACzC2X,EAASob,GAAwB3H,GAAKuE,wBA2WtCsE,iBAxY0B,SAACj0B,GAAD,OAA0B,SAAC2X,EAAUK,GAC9DA,IAAWkT,KAAKiH,aAAyB/wB,MAC1CuW,EAASob,GAAwB3H,GAAKuE,qBACtChY,EAAS0a,GAAUvzB,QAAQwzB,cAActyB,KAEzC2X,EAASob,GAAwB3H,GAAKgH,SAoYtC8B,UAtRwB,SAAC5qB,GAAD,OAA+B,SAACqO,GAC5DA,EAASob,GAAwB3H,GAAKwH,aAElCjb,OADUtV,IAAViH,EACS0nB,KAEAqB,GAAUvzB,QAAQiyB,eAAeznB,MAkR1C6qB,aAzW2B,SAACpuB,GAAD,OAAyC,SAAC4R,GACzEA,EAASob,GAAwB3H,GAAKkG,gBAElC3Z,OADatV,IAAb0D,EACSyrB,KAEAa,GAAUvzB,QAAQyyB,kBAAkBxrB,MAqW7CquB,aA7V2B,SAAC9sB,GAAD,OAAmC,SAACqQ,GAEnE,GADAA,EAASob,GAAwB3H,GAAKwG,gBAClCtqB,EAAY,CAEZ,IAAM4O,EAA4CD,GAA2B3O,GACvD,MAAlB4O,EAASE,MACTuB,EAAS0a,GAAUvzB,QAAQ+yB,kBAAkB1sB,EAAUG,SAAS4Q,EAAS7Q,OAAOwI,cAChF8J,EAASwU,GAAqBC,mBAAmB9kB,KAEjDqQ,EAASF,GAAcN,YAAYjB,EAASC,eAGhDwB,EAASma,GAAavD,YAkVtB8F,mBAlWiC,kBAAgB,SAAC1c,GACtDA,EAASob,GAAwB3H,GAAKgI,yBAkWlCkB,cAnQ4B,SAACt0B,GAAD,OAA2B,SAAC2X,GAE5D,GADAA,EAASob,GAAwB3H,GAAKgE,iBAClCpvB,EAAI,CACJ,IAAMkW,EAA6CD,GAA4BjW,GACzD,MAAlBkW,EAASE,KACTuB,EAAS0a,GAAUvzB,QAAQuwB,mBAAmBlqB,EAAUG,SAAS4Q,EAAS7Q,UAE1EsS,EAASF,GAAcN,YAAYjB,EAASC,eAGhDwB,EAAS2X,GAAcf,YA0PvB6C,aAlR2B,SAAC5qB,GAAD,OAAoC,SAACmR,GAEpE,GADAA,EAASob,GAAwB3H,GAAKuH,2BACjB,IAAjBnsB,EAASxG,GAAW,CACpB,IAAMkW,EAA2CD,GAAwBzP,EAASxG,IAC5D,MAAlBkW,EAASE,KACTuB,EAAS0a,GAAUvzB,QAAQ4zB,kBAAkBvtB,EAAUG,SAAS4Q,EAAS7Q,UAEzEsS,EAASF,GAAcN,YAAYjB,EAASC,eAGhDwB,EAASsZ,GAAkBzqB,MAyQ3B+tB,SAAUvB,GACVwB,aAxP2B,SAC/Bh0B,EACA4D,EACApD,GAH+B,OAIpB,SAAC2W,GACZA,EAASob,GAAwB3H,GAAKsF,yBACtC/Y,EAAS0Y,GAAa9B,OAAO/tB,EAAU4D,EAAMpD,MAmPzCyzB,cAhP4B,SAACj0B,EAAsB6F,GAAvB,OAA6D,SAACsR,GAC9F,GAAKxS,EAAUC,kBAAkB5E,GAyB7BmX,EAASF,GAAcN,YAAY,0DAvBnC,GADAQ,EAASob,GAAwB3H,GAAKuF,mCAClCtqB,EACAsR,EAASmW,GAAY+E,mBAAmBxsB,QACrC,CACH,IAAMquB,EAA2BvvB,EAAUG,SAAS9E,GAEhDm0B,EAAwC,IAAIvT,GAChDuT,EAAa7yB,WAAatB,EAASR,GACnC00B,EAAa9yB,WAAWf,KAAK8zB,GAE7Bhd,EAAS0Y,GAAalnB,KAAKurB,KAK3BC,EAHoCtE,GAAavsB,KAAK4wB,EAAa10B,IAGpC4B,WAAWkC,MACtC,SAACuC,GAAD,OAAsC,IAAvBA,EAAUvF,UAAwC,IAAtBuF,EAAUnG,YAIrDyX,EAASmW,GAAY+E,mBAAmB8B,OA2NhDC,WApSyB,SAAC90B,GAAD,OAAgC,SAAC6X,GAC9DA,EAASob,GAAwB3H,GAAKqH,4BACtC9a,EAAS0a,GAAUvzB,QAAQ0zB,gBAAgB1yB,MAmSvC+0B,UArVwB,SAAC9lB,GAAD,OAA+B,SAAC4I,GAIxDA,EAHC5I,EAGQod,GAAqBc,gBAAgBle,GAFrCkgB,MAIbtX,EAASob,GAAwB3H,GAAK0J,eAgVlCC,gBAnT8B,kBAAgB,SAACpd,GACnDA,EAASob,GAAwB3H,GAAK4J,sBAmTlCC,cA9U4B,SAChCjnB,EACA5J,EACApD,GAHgC,OAIrB,SAAC2W,GACZA,EAASob,GAAwB3H,GAAKgD,kBACtCzW,EAAS2W,GAAcC,OAAOvgB,EAAW5J,EAAMpD,MAyU3Ck0B,kBAtU8B,SAClCxzB,EACA0C,EACAoqB,GAHkC,OAIvB,SAAC7W,GACZA,EAASob,GAAwB3H,GAAKwD,sBACtCjX,EAAS8W,GAAkBF,OAAO7sB,EAAe0C,EAAMoqB,MAiUnD2G,mBA9TiC,SAAC30B,GAAD,OAAyC,SAACmX,GAE3EA,EADa,OAAbnX,QAAkC6B,IAAb7B,EACZuyB,GAAwB3H,GAAKyD,+BAE7BpX,GAAcN,YAAY,uDA2TnC+T,KAvcmB,kBAAgB,SAACvT,EAAUK,GAElD,GADAL,EAAS0a,GAAUvzB,QAAQg0B,qBACvB9a,IAAWkT,KAAKC,OAASC,GAAKC,KAC9B1T,EAASob,GAAwB3H,GAAKgH,WACnC,CACH,IAAMgD,EAA2Bpd,IAAWkN,cAAckD,iBAC1D,GAAkB,OAAdgN,GAAsBA,EAAY,EAAG,CAAC,IAAD,EAC/BruB,EAES,UAAGiR,IAAWkN,cAAc+C,6BAA5B,aAAG,EAAgDna,iBAAiBhK,MAC/E,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOo1B,KAGrCzd,EADA5Q,EACSisB,GAAuBjsB,GAEvBgsB,GAAwB3H,GAAKgH,YAG1Cza,EAASob,GAAwB3H,GAAKgH,UAsb1CiD,KA9cmB,kBAAgB,SAAC1d,GACxCA,EAAS0a,GAAUvzB,QAAQg0B,qBAC3Bnb,EAASob,GAAwB3H,GAAKC,OACtC1T,EAASwU,GAAqBhE,eA4c1BtO,KAzdmB,kBAAgB,SAAClC,GACxCA,EAAS0a,GAAUvzB,QAAQg0B,qBAC3Bnb,EAASob,GAAwB3H,GAAKkK,SAwdlCC,IArdkB,kBAAgB,SAAC5d,GACvCA,EAAS0a,GAAUvzB,QAAQg0B,qBAC3Bnb,EAASob,GAAwB3H,GAAKoK,W,SuBzO9BxD,O,iBAAAA,I,mBAAAA,I,iBAAAA,I,gBAAAA,Q,cAIAC,O,iBAAAA,I,uBAAAA,I,kBAAAA,Q,KAOL,ICXKwD,GDWCC,GAAuC,SAAClb,GACjD,IAAOmb,EAAYnb,EAAZmb,SAEP,OACI,yBAAK9a,UAAU,QACV8a,IEPAC,I,MAAmD,SAACpb,GAC7D,IAAOM,EAAqEN,EAArEM,QAAP,EAA4EN,EAA5DS,YAAhB,MAAuB+W,GAAY6D,OAAnC,EAA2Chb,EAAiCL,EAAjCK,UAAW8a,EAAsBnb,EAAtBmb,SAAUG,EAAYtb,EAAZsb,SAEhE,OACI,4BAAQhb,QAASA,EACTD,UAAWmX,GAAY/W,GAAQ,IAAMJ,EACrCib,SAAUA,GAEbH,KCRAI,GAA2D,SAACvb,GACrE,IAAOM,EAAqDN,EAArDM,QAASG,EAA4CT,EAA5CS,KAAhB,EAA4DT,EAAtCK,iBAAtB,MAAkC,GAAlC,EAAsCmb,EAAsBxb,EAAtBwb,SAAUL,EAAYnb,EAAZmb,SAEhD,OACI,kBAAC,GAAD,CAAa7a,QAASA,EACTG,KAAMA,EACNJ,UAAWA,GAEnBmb,GAAY,kBAAC,KAAD,CAAiBjb,KAAMib,IACnCL,ICZAM,GAAyD,SAACzb,GACnE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACTkb,SAAUrd,GAAWK,QCJpCkd,GAA2D,SAAC1b,GACrE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACTkb,SAAUrd,GAAWO,QCJpCid,GAA2D,SAAC3b,GACrE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACTkb,SAAUnd,e,SCDzBud,GAA+D,SAAC5b,GACzE,IAAOM,EAAiBN,EAAjBM,QAASub,EAAQ7b,EAAR6b,KAEhB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,gBACOp0B,IAATg0B,GACAG,EAAYH,KAEjB,CAACA,IAOJ,OAAO,kBAAC,GAAD,CAAiBvb,QALP,WACb0b,GAAaD,GACbzb,KAIoBG,KAAM+W,GAAY0E,KAClBV,SAAUO,EAAWhd,eAAcod,mBCnBlDC,I,MAA+D,SAACpc,GACzE,IAAOM,EAAgCN,EAAhCM,QAASgb,EAAuBtb,EAAvBsb,SAAUe,EAAarc,EAAbqc,UAI1B,EAA0BP,oBAAkB,GAA5C,mBAAOQ,EAAP,KAAcC,EAAd,KAGAN,qBAAU,WACFK,GAAOE,YAAW,kBAAMD,GAAS,KANZ,OAO1B,CAACD,IAUJ,OACI,kBAAC,GAAD,CACId,SAAUc,OAAQz0B,EAAYsW,GAAWS,MACzC0B,QAXkB,WAClBgc,GAASD,EACT/b,IAEAic,GAAS,IAQTlc,UAAWic,EAAQ,6EAA+E,eAClGhB,SAAUA,GAETgB,EAAQ,YAASz0B,K,SCJjB40B,I,MAAuD,SAACzc,GACjE,IAAO0c,EAAkF1c,EAAlF0c,cAAeC,EAAmE3c,EAAnE2c,SAAUC,EAAyD5c,EAAzD4c,YAAa3zB,EAA4C+W,EAA5C/W,MAAO4zB,EAAqC7c,EAArC6c,UAAWC,EAA0B9c,EAA1B8c,YAAazc,EAAaL,EAAbK,UAG5E,OACI,kBAAC,KAAD,CACI0c,gBAAiBD,GAA4B,eAC7Czc,UAAWA,GAAwB,yBACnC2c,YAAaH,EACbD,YAAaA,EACb3zB,MAAOg0B,GAAiBh0B,EAAOyzB,GAC/BQ,QAASR,EAAc5kB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEmI,KAAKid,cAAcC,cAAcplB,EAAEkI,KAAKid,kBAAgB93B,IAAIg4B,IACpGC,SAAU,SAACr0B,GAAD,OAAWs0B,GAAet0B,EAAO0zB,QAK1Ca,GAAiE,SAACxd,GACvE,IAAO0c,EAA0D1c,EAA1D0c,cAAeC,EAA2C3c,EAA3C2c,SAAUzW,EAAiClG,EAAjCkG,MAAO7F,EAA0BL,EAA1BK,UAAWyc,EAAe9c,EAAf8c,YAElD,OACI,kBAAC,KAAD,CACIC,gBAAiBD,GAA4B,qBAC7Czc,UAAWA,GAAwB,+BACnCpX,MAAO,CAACA,MAAOid,EAAOA,MAAOA,GAC7BgX,QAASR,EAAc5kB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEmI,KAAKid,cAAcC,cAAcplB,EAAEkI,KAAKid,kBAAgB93B,IAAIg4B,IACpGC,SAAU,SAACr0B,GAAD,OAAWs0B,GAAet0B,EAAO0zB,IAC3Cc,cAAc,KAcxBJ,GAAuB,SAACK,GAC1B,MAAO,CAACz0B,MAAOy0B,EAAaz0B,MAAOid,MAAOwX,EAAaxd,OAGrDqd,GAAiB,SAACt0B,EAAY0zB,GAE5B,IAdkC/1B,EAaxB,OAAVqC,EAEA0zB,EAdG,CACH3zB,KAAM,EACNkX,MAHkCtZ,EAcsCqC,GAX7Did,MAAQtf,EAAKsf,MAAQ,GAChCjd,MAAOrC,EAAKqC,MAAQrC,EAAKqC,MAAQ,KAajC0zB,EAAS,CAAC3zB,KAAM,EAAGC,MAAO,GAAIiX,KAAM,MAItC+c,GAAmB,SAACh0B,EAA2ByzB,GACjD,IAAIiB,EAAmC,CAAC10B,MAAO,GAAIid,MAAO,IAE1D,GAAIjd,EAAO,CAEP,IAAM20B,EAA6ClB,EAAcpzB,MAAK,SAAAs0B,GAAM,OAAIA,EAAO30B,QAAUA,KAE7F20B,IACAD,EAAc10B,MAAQ20B,EAAO30B,MAC7B00B,EAAczX,MAAQ0X,EAAO1d,MAGrC,OAAOyd,GCzFEE,GAAkE,SAAC7d,GAC5E,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MACxB3E,EAAwBwE,OAAOe,OAAOgY,IAEtCic,EAAqB,SAACrxB,GACxB,IAAIyZ,EAAgB,GACpB,OAAQzZ,GACJ,KAAKoV,GAAWyH,IACZpD,EAAQ,gBACR,MACJ,KAAKrE,GAAW8H,OACZzD,EAAQ,SACR,MACJ,KAAKrE,GAAWgI,KACZ3D,EAAQ,OACR,MACJ,KAAKrE,GAAWkI,gBACZ7D,EAAQ,kBACR,MACJ,KAAKrE,GAAWsO,QACZjK,EAAQ,UAGhB,OAAOA,GAWX,OACI,kBAAC,GAAD,CACIwW,cAAep4B,EAAQe,KAAI,SAACC,EAAQC,GAAT,MATxB,CACHyD,IAQyEzD,EAPzE0D,MAHoBxD,EAU6CH,EANjE4a,KAAM4d,EAAmBr4B,IAJN,IAACA,KAWpBk3B,SAAU,SAAC/G,GAAD,OAAU+G,EAAS/G,EAAK3sB,QAClC2zB,YAAaA,EACb3zB,MAAOA,KC/BN80B,GAAuD,SAAC/d,GACjE,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAA6C+0B,KAAtCl6B,EAAP,EAAOA,OAAQm6B,EAAf,EAAeA,cAAeC,EAA9B,EAA8BA,YAE9B,OACI,kBAAC,GAAD,CACIxB,cAAe54B,EAAOuB,KAAI,SAAC8H,GAAD,OAAW8wB,EAAc9wB,MACnDwvB,SAAU,SAAC/G,GAAD,OAAU+G,EAASuB,EAAYv0B,OAAOisB,EAAK3sB,OAAQnF,KAC7D84B,YAAaA,EACb3zB,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKby0B,GAAiE,SAACne,GAC3E,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAA6C8X,KAAtCC,EAAP,EAAOA,cAAen6B,EAAtB,EAAsBA,OAAQo6B,EAA9B,EAA8BA,YAE9B,OACI,kBAAC,GAAD,CACIxB,cAAe54B,EAAOuB,KAAI,SAAC8H,GAAD,OAAW8wB,EAAc9wB,MACnDwvB,SAAU,SAAC/G,GAAD,OAAU+G,EAASuB,EAAYv0B,OAAOisB,EAAK3sB,OAAQnF,KAC7DoiB,MAAOA,KAKb8X,GAA4B,WAkB9B,MAAO,CAACl6B,OAjBmB8c,YAAY8H,IAiBvBuV,cAfM,SAAC9wB,GACnB,MAAO,CACHnE,IAAKmE,EAAMA,MAAM3H,GACjByD,MAAOkE,EAAMA,MAAM3H,GAAGkE,WACtBwW,KAAM/S,EAAMA,MAAM1G,OAWKy3B,YAPX,SAAChyB,EAAiBpI,GAClC,IAAK6G,EAAUC,kBAAkB9G,KAAY6G,EAAUC,kBAAkBsB,GACrE,OAAOpI,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAO0G,QCpChDkyB,GAAkF,SAACpe,GAC5F,IAAO2c,EAAqC3c,EAArC2c,SAAUzW,EAA2BlG,EAA3BkG,MAAOvR,EAAoBqL,EAApBrL,QAAS0pB,EAAWre,EAAXqe,QACjC,EAAqDC,GAAkC3pB,EAAS0pB,GAAzFE,EAAP,EAAOA,sBAAuBC,EAA9B,EAA8BA,oBAE9B,OACI,kBAAC,GAAD,CACI9B,cAAe6B,IACfrY,MAAOA,EACPyW,SAAU,SAAC/G,GAAD,OAAU+G,EAAS6B,EAAoB70B,OAAOisB,EAAK3sB,aAK5Dw1B,GAAuE,SAACze,GACjF,IAAO2c,EAAkD3c,EAAlD2c,SAAUC,EAAwC5c,EAAxC4c,YAAa3zB,EAA2B+W,EAA3B/W,MAAO0L,EAAoBqL,EAApBrL,QAAS0pB,EAAWre,EAAXqe,QAC9C,EAAqDC,GAAkC3pB,EAAS0pB,GAAzFE,EAAP,EAAOA,sBAAuBC,EAA9B,EAA8BA,oBAE9B,OACI,kBAAC,GAAD,CACI9B,cAAe6B,IACf5B,SAAU,SAAC/G,GAAD,OAAU+G,EAAS6B,EAAoB70B,OAAOisB,EAAK3sB,UAC7D2zB,YAAaA,EACb3zB,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKpB40B,GAAoC,SAAC3pB,EAAiB0pB,GACxD,IAAMnX,EAAoCtG,YAAY8H,IAEhDgW,EAAwB,SAAC14B,GAC3B,MAAO,CACHgD,IAAKhD,EAASR,GACdyD,MAAOjD,EAASR,GAAGkE,WACnBwW,KAAMla,EAASS,OAuBvB,MAAO,CAAC83B,sBAnBsB,WAC1B,IAAK5zB,EAAUC,kBAAkBsc,GAAiB,CAC9C,IAAIgT,EAAkCvvB,EAAUG,SAASoc,GAKzD,OAJAgT,EAAeA,EAAa5pB,QAAO,SAACtD,GAAD,OAASA,EAAI7F,UAAYwN,KACxD0pB,IACAnE,EAAeA,EAAa5pB,QAAO,SAACtD,GAAD,OAASA,EAAIxH,KAAO64B,MAEpDnE,EAAa70B,IAAIq5B,GAE5B,MAAO,IAUoBF,oBAPH,SAACh5B,GACzB,IAAKmF,EAAUC,kBAAkBsc,KAAoBvc,EAAUC,kBAAkBpF,GAC7E,OAAO0hB,EAAe5d,MAAK,SAACiD,GAAD,OAAUA,EAAK/G,KAAOA,QCxDhDm5B,GAAuD,SAAC3e,GACjE,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAA6C21B,KAAtCC,EAAP,EAAOA,cAAej6B,EAAtB,EAAsBA,OAAQk6B,EAA9B,EAA8BA,YAE9B,OACI,kBAAC,GAAD,CACIpC,cAAe93B,EAAOS,IAAIw5B,GAC1BlC,SAAU,SAAClpB,GAAD,OAAckpB,EAASmC,EAAYn1B,OAAO8J,EAASxK,UAC7D2zB,YAAaA,EACb3zB,MAAOA,EAAQA,EAAMS,gBAAa7B,EAClCg1B,WAAW,KAKVkC,GAAkE,SAAC/e,GAC5E,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAA6C0Y,KAAtCE,EAAP,EAAOA,YAAaD,EAApB,EAAoBA,cAAej6B,EAAnC,EAAmCA,OAEnC,OACI,kBAAC,GAAD,CACI83B,cAAe93B,EAAOS,IAAIw5B,GAC1BlC,SAAU,SAACpoB,GAAD,OAAWooB,EAASmC,EAAYn1B,OAAO4K,EAAMtL,UACvDid,MAAOA,KAKb0Y,GAA4B,WAC9B,IAAMh6B,EAAoBgc,YAAY8H,IAiBtC,MAAO,CAACmW,cARc,SAACtqB,GACnB,MAAO,CACHvL,IAAKuL,EAAM/O,GACXyD,MAAOsL,EAAM/O,GAAGkE,WAChBwW,KAAM3L,EAAM9N,OAIGq4B,YAfH,SAACt5B,GACjB,IAAKmF,EAAUC,kBAAkBpF,KAAQmF,EAAUC,kBAAkBhG,GACjE,OAAOA,EAAO0E,MAAK,SAACiL,GAAD,OAAWA,EAAM/O,KAAOA,MAafZ,WC1C3Bo6B,GAA+D,SAAChf,GACzE,IAAO2c,EAAkD3c,EAAlD2c,SAAUC,EAAwC5c,EAAxC4c,YAAa3zB,EAA2B+W,EAA3B/W,MAAO0L,EAAoBqL,EAApBrL,QAAS0pB,EAAWre,EAAXqe,QAC9C,EAAuCY,GAA8BtqB,EAAS0pB,GAAvEa,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,gBAMpB,OACI,kBAAC,GAAD,CACIzC,cAAewC,IACfj2B,MANGA,GAAoB,IAAXA,OAAepB,EAAYoB,EAAMS,gBAAc7B,EAO3D+0B,YAAaA,EACbD,SAAU,SAACnpB,GAAD,OAAempB,EAASwC,EAAgBx1B,OAAO6J,EAAUvK,aAKlEm2B,GAA0E,SAACpf,GACpF,IAAO2c,EAAqC3c,EAArC2c,SAAUzW,EAA2BlG,EAA3BkG,MAAOvR,EAAoBqL,EAApBrL,QAAS0pB,EAAWre,EAAXqe,QACjC,EAAuCY,GAA8BtqB,EAAS0pB,GAAvEc,EAAP,EAAOA,gBAAiBD,EAAxB,EAAwBA,YAExB,OACI,kBAAC,GAAD,CACIxC,cAAewC,IACfvC,SAAU,SAACxoB,GAAD,OAAUwoB,EAASwC,EAAgBx1B,OAAOwK,EAAKlL,UACzDid,MAAOA,KAKb+Y,GAAgC,SAACtqB,EAAiB0pB,GACpD,IAAMx5B,EAA4B+b,YAAY8H,IAExC2W,EAAoB,SAAClrB,GACvB,MAAO,CACHnL,IAAKmL,EAAK3O,GACVyD,MAAOkL,EAAK3O,GAAGkE,WACfwW,KAAM/L,EAAK1N,OAuBnB,MAAO,CAACy4B,YAnBY,WAChB,IAAKv0B,EAAUC,kBAAkB/F,GAAa,CAC1C,IAAIy6B,EAA2B30B,EAAUG,SAASjG,GAKlD,OAJAy6B,EAAYA,EAAUhvB,QAAO,SAAC6D,GAAD,OAAUA,EAAKhN,UAAYwN,KACpD0pB,IACAiB,EAAYA,EAAUhvB,QAAO,SAAC6D,GAAD,OAAUA,EAAK3O,KAAO64B,MAEhDiB,EAAUj6B,IAAIg6B,GAEzB,MAAO,IAUUF,gBAPG,SAAC35B,GACrB,IAAKmF,EAAUC,kBAAkB/F,KAAgB8F,EAAUC,kBAAkBpF,GACzE,OAAOX,EAAWyE,MAAK,SAACiD,GAAD,OAAUA,EAAK/G,KAAOA,QC5D5C+5B,GAAqD,SAACvf,GAC/D,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAA0Cu2B,KAAnCh7B,EAAP,EAAOA,MAAOi7B,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,aAE1B,OACI,kBAAC,GAAD,CACIhD,cAAel4B,EAAMa,IAAIq6B,GACzB9C,YAAaA,EACb3zB,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACdizB,SAAU,SAAC/1B,GAAD,OAAU+1B,EAAS8C,EAAW91B,OAAO/C,EAAKqC,OAAQzE,QAK3Dm7B,GAA+D,SAAC3f,GACzE,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAA0CsZ,KAAnCh7B,EAAP,EAAOA,MAAOi7B,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,aAE1B,OACI,kBAAC,GAAD,CACIhD,cAAel4B,EAAMa,IAAIq6B,GACzB/C,SAAU,SAAC/1B,GAAD,OAAU+1B,EAAS8C,EAAW91B,OAAO/C,EAAKqC,OAAQzE,KAC5D0hB,MAAOA,KAKbsZ,GAA2B,WAkB7B,MAAO,CAACh7B,MAjBiBoc,YAAY8H,IAiBtB+W,WAfI,SAACr0B,EAAgB5G,GAChC,IAAKmG,EAAUC,kBAAkBQ,KAAYT,EAAUC,kBAAkBpG,GACrE,OAAOA,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,MAa1Bs0B,aARN,SAAC94B,GAClB,MAAO,CACHoC,IAAKpC,EAAKA,KAAKpB,GACfyD,MAAOrC,EAAKA,KAAKpB,GAAGkE,WACpBwW,KAAMtZ,EAAKA,KAAKH,SCzCfm5B,GAA+D,SAAC5f,GACzE,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAAyD42B,KAAlDl7B,EAAP,EAAOA,WAAYm7B,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,kBAEpC,OACI,kBAAC,GAAD,CACIrD,cAAe/3B,EAAWU,IAAI06B,GAC9B92B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACdmzB,WAAW,EACXF,SAAU,SAACqD,GAAD,OAAWrD,EAASmD,EAAgBn2B,OAAOq2B,EAAM/2B,OAAQtE,KACnEi4B,YAAaA,KAKZqD,GAAyE,SAACjgB,GACnF,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAAyD2Z,KAAlDl7B,EAAP,EAAOA,WAAYm7B,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,kBAEpC,OACI,kBAAC,GAAD,CACIrD,cAAe/3B,EAAWU,IAAI06B,GAC9B7Z,MAAOA,EACPyW,SAAU,SAACqD,GAAD,OAAWrD,EAASmD,EAAgBn2B,OAAOq2B,EAAM/2B,OAAQtE,QAKzEk7B,GAAgC,WAkBlC,MAAO,CAACl7B,WAjB0Bic,YAAY8H,IAiB1BqX,kBAfM,SAAC7sB,GACvB,MAAO,CACHlK,IAAKkK,EAAU1N,GACfyD,MAAOiK,EAAU1N,GAAGkE,WACpBwW,KAAMhN,EAAUzM,OAWeq5B,gBAPf,SAAC7qB,EAAqBtQ,GAC1C,IAAKgG,EAAUC,kBAAkBjG,KAAgBgG,EAAUC,kBAAkBqK,GACzE,OAAOtQ,EAAW2E,MAAK,SAAC4J,GAAD,OAAeA,EAAU1N,KAAOyP,QCvCtDirB,GAAuE,SAAClgB,GACjF,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAA0Dia,KAAnDC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,gBAAiBC,EAAxC,EAAwCA,eAExC,OACI,kBAAC,GAAD,CACI5D,cAAe2D,IACf1D,SAAU,SAAC32B,GAAD,OAAc22B,EAAS2D,EAAe32B,OAAO3D,EAASiD,OAAQm3B,KACxEla,MAAOA,KAKNqa,GAA6D,SAACvgB,GACvE,IAAO2c,EAAyC3c,EAAzC2c,SAAUC,EAA+B5c,EAA/B4c,YAAa3zB,EAAkB+W,EAAlB/W,MAAOo1B,EAAWre,EAAXqe,QACrC,EAA0D8B,GAA6B9B,GAAhF+B,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,gBAAiBC,EAAxC,EAAwCA,eAExC,OACI,kBAAC,GAAD,CACI5D,cAAe2D,IACfzD,YAAaA,EACbD,SAAU,SAAC32B,GAAD,OAAc22B,EAAS2D,EAAe32B,OAAO3D,EAASiD,OAAQm3B,KACxEn3B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKpBy2B,GAA+B,SAAC9B,GAClC,IAAM+B,EAAqCxf,YAAY6P,IAEjD+P,EAAmB,SAACx6B,GACtB,MAAO,CACHgD,IAAKhD,EAASR,GACdyD,MAAOjD,EAASR,GAAGkE,WACnBwW,KAAMla,EAASS,OAsBvB,MAAO,CAAC25B,iBAAgBC,gBAlBA,WACpB,IAAK11B,EAAUC,kBAAkBw1B,GAAiB,CAC9C,IAAIK,EAAwB91B,EAAUG,SAASs1B,EAAgB77B,WAI/D,OAHI85B,IACAoC,EAAUA,EAAQnwB,QAAO,SAACtD,GAAD,OAASA,EAAIxH,KAAO64B,MAE1CoC,EAAQp7B,IAAIm7B,GAEvB,MAAO,IAU8BF,eAPlB,SAACtK,EAAoBviB,GACxC,IAAK9I,EAAUC,kBAAkB6I,KAAc9I,EAAUC,kBAAkBorB,GACvE,OAAOviB,EAAUlP,UAAU+E,MAAK,SAACtD,GAAD,OAAcA,EAASR,KAAOwwB,QC7D7D0K,GAA2E,SAAC1gB,GACrF,IAAO2c,EAAmB3c,EAAnB2c,SAAU1zB,EAAS+W,EAAT/W,MAMX03B,EAAe,SAAC1W,EAAsBjhB,GACxC,MAAO,CACHA,IAAKA,EACLC,MAAOghB,EACP/J,KAAM+J,IAQd,OACI,kBAAC,GAAD,CACIyS,cAjBG5zB,OAAOe,OAAOoB,GAAgB5F,KAAI,SAACmH,EAAMjH,GAAP,OAAiBo7B,EAAan0B,EAAMjH,MAkBzEo3B,SAAU,SAACnwB,GAAD,OAAUmwB,GAPJiE,EAO4Bp0B,EAAKvD,OANlCgC,EAAuB21B,QAAY/4B,GADnC,IAAC+4B,GAQhB33B,MAAOA,GAAgBwB,EAAUsI,SCxBhC8tB,GAAiE,SAAC7gB,GAC3E,IAAO2c,EAAmB3c,EAAnB2c,SAAU1zB,EAAS+W,EAAT/W,MAMX03B,EAAe,SAAC1W,EAAiBjhB,GACnC,MAAO,CACHA,IAAKA,EACLC,MAAOghB,EACP/J,KAAM+J,IAQd,OACI,kBAAC,GAAD,CACIyS,cAjBG5zB,OAAOe,OAAOY,GAAWpF,KAAI,SAACmH,EAAMjH,GAAP,OAAiBo7B,EAAan0B,EAAMjH,MAkBpEo3B,SAAU,SAAC/1B,GAAD,OAAU+1B,GAPJiE,EAO4Bh6B,EAAKqC,OANlCwB,EAAkBm2B,QAAY/4B,GAD9B,IAAC+4B,GAQhB33B,MAAOA,GAAgBwB,EAAUsI,SCdhC+tB,GAA6D,SAAC9gB,GACvE,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAAwC83B,KAAjCC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,cAEvB,OACI,kBAAC,GAAD,CACIvE,cAAeuE,IACfrE,YAAaA,EACbD,SAAU,SAAC11B,GAAD,OAAc01B,EAASqE,EAAe/5B,EAASgC,SACzDA,MAAiB,KAAVA,EAAeA,OAAQpB,KAMpCk5B,GAA+B,WACjC,IAAMv8B,EAAmBoc,YAAY8H,IAE/BsY,EAAiB,SAACE,GACpB,GAAyB,OAArBA,GAAuC,OAAV18B,EAC7B,OAAOgE,KAAKC,MAAMy4B,IA8BpBC,EAAmB,SAACl6B,EAA0BL,EAAeoC,GAC/D,IAAMo4B,EAAgC,CAAC17B,OAAQkB,EAAKA,KAAKpB,GAAI+B,WAAYN,EAASzB,IAC5E07B,EAA2B14B,KAAKG,UAAUy4B,GAC5CC,EAAsBz6B,EAAKA,KAAKH,KAIpC,OAHqB,IAAjBQ,EAASzB,KACT67B,EAAcA,EAAc,MAAQp6B,EAASR,MAE1C,CACHuC,IAAKA,EACLC,MAAOi4B,EACPhhB,KAAMmhB,IAId,MAAO,CAACL,iBAAgBM,gBAvCA,SAACC,GACrB,IAAMC,EAA0C,GAShD,OARID,GACAA,EAAkBp7B,SAAQ,SAACs7B,GACvB,IAAMC,EAA0CV,EAAeS,GAC3DC,GACAF,EAAmBn7B,KAAKq7B,MAI7BF,GA6B8BP,cA1BnB,WAClB,IAAMU,EAA2C,GAQjD,OAPIn9B,GACAA,EAAM2B,SAAQ,SAACS,GACXA,EAAKA,KAAKI,UAAUb,SAAQ,SAACwL,GACzBgwB,EAAet7B,KAAK86B,EAAiBxvB,EAAM/K,EAAqB,IAAfA,EAAKA,KAAKpB,GAAWmM,EAAKnM,WAIhFm8B,KClCFC,GAAuE,SAAC5hB,GACjF,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAA0D2b,KAAnD7a,EAAP,EAAOA,UAAW8a,EAAlB,EAAkBA,mBAAoBC,EAAtC,EAAsCA,iBAEtC,OACI,kBAAC,GAAD,CACIrF,cAAe1V,EAAU3hB,IAAI08B,GAC7B7b,MAAOA,EACPyW,SAAU,SAACpxB,GAAD,OAAcoxB,EAASmF,EAAmBn4B,OAAO4B,EAAStC,OAAQ+d,QAKlF6a,GAA+B,WACjC,IAAM7a,EAA8BpG,YAAY8H,IAC1ClkB,EAAmBoc,YAAY8H,IAE/BsZ,EAAc,SAAC52B,EAAgB5G,GAA8B,IAAD,EAC9D,OAAO,UAAAA,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,YAAtC,eAA+CxE,KAAKH,OAAQ,IAmBvE,MAAO,CAACugB,YAAW8a,mBAhBQ,SAACG,EAAoBjb,GAC5C,IAAKrc,EAAUC,kBAAkBq3B,KAAgBt3B,EAAUC,kBAAkBoc,GACzE,OAAOA,EAAU1d,MAAK,SAACiC,GAAD,OAAcA,EAAS/F,KAAOy8B,MAcrBF,iBATd,SAACx2B,GACtB,IAAM2U,EAAe8hB,EAAYz2B,EAASC,QAAShH,GAAS,MAAQw9B,EAAYz2B,EAASE,QAASjH,GAClG,MAAO,CACHwE,IAAKuC,EAAS/F,GACdyD,MAAOsC,EAAS/F,GAAGkE,WACnBwW,KAAMA,MC9CLgiB,GAA6D,SAACliB,GACvE,IAAO2c,EAAgC3c,EAAhC2c,SAAUC,EAAsB5c,EAAtB4c,YAAa3zB,EAAS+W,EAAT/W,MAC9B,EAAsDk5B,KAA/C/9B,EAAP,EAAOA,UAAWg+B,EAAlB,EAAkBA,eAAgBC,EAAlC,EAAkCA,iBAElC,OACI,kBAAC,GAAD,CACI3F,cAAet4B,EAAUiB,IAAIg9B,GAC7BzF,YAAaA,EACbD,SAAU,SAAClpB,GAAD,OAAckpB,EAASyF,EAAez4B,OAAO8J,EAASxK,OAAQ7E,KACxE6E,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACdmzB,WAAW,KAKVyF,GAAuE,SAACtiB,GACjF,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAAsDic,KAA/C/9B,EAAP,EAAOA,UAAWg+B,EAAlB,EAAkBA,eAAgBC,EAAlC,EAAkCA,iBAElC,OACI,kBAAC,GAAD,CACI3F,cAAet4B,EAAUiB,IAAIg9B,GAC7Bnc,MAAOA,EACPyW,SAAU,SAAClpB,GAAD,OAAckpB,EAASyF,EAAez4B,OAAO8J,EAASxK,OAAQ7E,QAK9E+9B,GAA+B,WAkBjC,MAAO,CAAC/9B,UAjBwBwc,YAAY8H,IAiBzB0Z,eAfI,SAACt1B,EAAoB1I,GACxC,IAAKuG,EAAUC,kBAAkBkC,KAAgBnC,EAAUC,kBAAkBxG,GACzE,OAAOA,EAAUkF,MAAK,SAACmK,GAAD,OAAcA,EAASjO,KAAOsH,MAazBu1B,iBARV,SAAC5uB,GACtB,MAAO,CACHzK,IAAKyK,EAASjO,GACdyD,MAAOwK,EAASjO,GAAGkE,WACnBwW,KAAMzM,EAAShN,SCxCd87B,GAA+D,SAACviB,GACzE,IAAO2c,EAAmB3c,EAAnB2c,SAAUzW,EAASlG,EAATkG,MACjB,EAAoDsc,KAA7C/uB,EAAP,EAAOA,SAAUgvB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,mBAE9B,OACI,kBAAC,GAAD,CACIhG,cAAe+F,IACfvc,MAAOA,EACPyW,SAAU,SAACpwB,GAAD,OAAUowB,EAAS+F,EAAmB/4B,OAAO4C,EAAKtD,OAAQwK,QAKnEkvB,GAAqD,SAAC3iB,GAC/D,IAAO2c,EAAyC3c,EAAzC2c,SAAUC,EAA+B5c,EAA/B4c,YAAa3zB,EAAkB+W,EAAlB/W,MAAOo1B,EAAWre,EAAXqe,QACrC,EAAoDmE,GAAyBnE,GAAtE5qB,EAAP,EAAOA,SAAUgvB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,mBAE9B,OACI,kBAAC,GAAD,CACIhG,cAAe+F,IACf7F,YAAaA,EACbD,SAAU,SAACpwB,GAAD,OAAUowB,EAAS+F,EAAmB/4B,OAAO4C,EAAKtD,OAAQwK,KACpExK,OAAkB,IAAXA,GAAA,OAA2BA,QAA3B,IAA2BA,OAAZpB,EAAYoB,EAAOS,cAK/C84B,GAA2B,SAACnE,GAC9B,IAAM+B,EAAqCxf,YAAY6P,IAEjDmS,EAAe,SAACr2B,GAClB,MAAO,CACHvD,IAAKuD,EAAK+J,eAAe9Q,GACzByD,MAAOsD,EAAK+J,eAAe9Q,GAAGkE,WAC9BwW,KAAM3T,EAAK+J,eAAe7P,OAsBlC,MAAO,CAACgN,SAAU2sB,EAAgBqC,YAlBd,WAChB,IAAK93B,EAAUC,kBAAkBw1B,GAAiB,CAC9C,IAAI7oB,EAA+B5M,EAAUG,SAASs1B,EAAgB9sB,kBAItE,OAHI+qB,IACA9mB,EAAYA,EAAUjH,QAAO,SAAC/D,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAO64B,MAE/D9mB,EAAUlS,IAAIu9B,GAEzB,MAAO,IAUoCF,mBAPpB,SAAC7uB,EAAgBJ,GACxC,IAAK9I,EAAUC,kBAAkB6I,KAAc9I,EAAUC,kBAAkBiJ,GACvE,OAAOJ,EAAUH,iBAAiBhK,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOqO,QC/DlFgvB,GAAW,kBAAMzlB,OAAO0lB,YAAc34B,SAAS44B,gBAAgBC,aAAe74B,SAAS84B,KAAKD,aAC5FE,GAAY,kBAAM9lB,OAAO+lB,aAAeh5B,SAAS44B,gBAAgBK,cAAgBj5B,SAAS84B,KAAKG,cA0JxFC,GAAa,SAACnnB,GAEvB+f,qBAAU,WACN,IAAMqH,EAAgB,SAACC,GACD,WAAdA,EAAMv6B,KACNkT,KAMR,OAFA/R,SAASq5B,iBAAiB,UAAWF,GAAe,GAE7C,WACHn5B,SAASs5B,oBAAoB,UAAWH,GAAe,MAE5D,CAACpnB,KAOKwnB,GAAe,SAACxnB,GAEzB+f,qBAAU,WACN,IAAMqH,EAAgB,SAACC,GACD,UAAdA,EAAMv6B,KACNkT,KAMR,OAFA/R,SAASq5B,iBAAiB,UAAWF,GAAe,GAE7C,WACHn5B,SAASs5B,oBAAoB,UAAWH,GAAe,MAE5D,CAACpnB,KC1LKynB,I,MAAyD,SAAC3jB,GACnE,IAAOkG,EAA8DlG,EAA9DkG,MAAO0W,EAAuD5c,EAAvD4c,YAAa3zB,EAA0C+W,EAA1C/W,MAAO26B,EAAmC5jB,EAAnC4jB,iBAAkBC,EAAiB7jB,EAAjB6jB,OAAQC,EAAS9jB,EAAT8jB,MAE5D,EAAoChI,mBAAiB,IAArD,mBAAOiI,EAAP,KAAmBC,EAAnB,KAEA/H,qBAAU,WACN+H,EAAc/6B,GAAgB,MAC/B,CAACA,IAEJ,IAAMg7B,EAAkCC,iBAAyB,MASjE,OANAjI,qBAAU,WACW,OAAbgI,GAA0C,OAArBA,EAASE,SAAoBL,GAClDG,EAASE,QAAQL,UAEtB,CAACA,EAAOG,IAGP,yBAAK5jB,UAAU,QACV6F,GAAS,2BAAO7F,UAAW,6CAA8C6F,GAC1E,2BACI7F,UAAW6F,EAAQ,4BAA8B,gBACjDzZ,KAAM,OACNmwB,YAAaA,EACb3zB,MAAO86B,EACPK,IAAKH,EACL3G,SAAU,SAACiG,GACPS,EAAcT,EAAMc,OAAOp7B,OAC3B26B,EAAiBL,EAAMc,OAAOp7B,QAElC46B,OAAQA,OCrCXS,I,MAAiD,SAACtkB,GAC3D,IAAOmb,EAAYnb,EAAZmb,SAEP,OACI,yBAAK9a,UAAW,iEACX8a,KCNAoJ,GAAiD,SAACvkB,GAC3D,IAAOmb,EAAYnb,EAAZmb,SAEP,OACI,yBAAK9a,UAAW,iEACX8a,ICIAqJ,GAA+D,SAACxkB,GACzE,IAAOI,EAAmBJ,EAAnBI,gBACDjD,EAAW0D,cACjB,EAAsCib,mBAAiB,IAAvD,mBAAOp4B,EAAP,KAAoB+gC,EAApB,KAEMC,EAAW,WACbvnB,EAASF,GAAcjB,aAA6B,KAAhBtY,EAAqBA,EAAc,YACvE0c,KAQJ,OAJAijB,GAAWjjB,GAEXsjB,GAAagB,GAGT,yBAAKrkB,UAAU,+BACX,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI6F,MAAM,aACN0W,YAAY,kBACZgH,iBAAkB,SAACn9B,GAAD,OAAkBg+B,EAAeh+B,IACnDwC,MAAOvF,KAGf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAa4c,QAAS,kBAAMF,MACvB,UAEL,kBAAC,GAAD,CAAaE,QAAS,kBAAMokB,MACvB,eCtCRC,GAAmD,WAE5D,OACI,yBAAKtkB,UAAW,gD,S5BPZ4a,K,cAAAA,E,gBAAAA,E,WAAAA,Q,KAUL,I6BgBK2J,G7BhBCC,GAA6C,SAAC7kB,GACvD,IAAOmb,EAAsBnb,EAAtBmb,SAAU3rB,EAAYwQ,EAAZxQ,SAEjB,OACI,yBAAK6Q,UAAW,cAAgB7Q,GAAsByrB,GAAiB6J,QAAU,gEAC5E3J,I8BXA4J,I,MAA6C,SAAC/kB,GACvD,IAAOmb,EAAmBnb,EAAnBmb,SAAUpV,EAAS/F,EAAT+F,MAEjB,OACI,yBAAK1F,UAAU,0BACV0F,MAAOA,GAEPoV,KCIA6J,GAAuD,SAAChlB,GACjE,IAAOilB,EAAuCjlB,EAAvCilB,UAAWC,EAA4BllB,EAA5BklB,SAAUR,EAAkB1kB,EAAlB0kB,SAAUxkB,EAAQF,EAARE,KAChCilB,EAAajB,iBAA4B,MAC/C,EAAgCpI,mBAAiB,IAAjD,mBAAOsJ,EAAP,KAAiBC,EAAjB,KAaA,OAXApJ,qBAAU,WACNoJ,EAAYnlB,GAAc,IAC1BilB,EAAWhB,QAASL,UACrB,CAAC5jB,IAGJmjB,GAAW6B,GAGXxB,IAAa,kBAAMgB,EAASU,MAGxB,yBAAK/kB,UAAU,2BACX,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,MAEC4kB,GAAa,kBAAC,GAAD,KAAU,4BAAKA,IAE7B,kBAAC,GAAD,KACI,8BACI5kB,UAAW,qCACXid,SAAU,SAACgI,GAAD,OAAOD,EAAYC,EAAEjB,OAAOp7B,QACtCA,MAAOm8B,EACPhB,IAAKe,KAIb,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAa7kB,QAAS,kBAAM4kB,MACvB,UAEL,kBAAC,GAAD,CAAa5kB,QAAS,kBAAMokB,EAASU,KAChC,WCrDRG,I,MAAqC,SAACvlB,GAC/C,IAAOmb,EAAYnb,EAAZmb,SAEP,OACI,yBAAK9a,UAAW,6EACX8a,KCLAqK,I,WAAiD,SAACxlB,GAC3D,IAAOmb,EAAYnb,EAAZmb,SAEP,OAAO,yBAAK9a,UAAU,cAAc8a,KCD3BsK,GAAiE,SAACzlB,GAC3E,IAAO0lB,EAAiB1lB,EAAjB0lB,cAEP,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBtlB,gBAAiBslB,MCInCC,I,YAAiD,SAAC3lB,GAAW,IAAD,IAC9D4lB,EAA8F5lB,EAA9F4lB,mBAAoBC,EAA0E7lB,EAA1E6lB,MAAOC,EAAmE9lB,EAAnE8lB,MAAOC,EAA4D/lB,EAA5D+lB,iBAAkB14B,EAA0C2S,EAA1C3S,WAAY24B,EAA8BhmB,EAA9BgmB,OAAQC,EAAsBjmB,EAAtBimB,YAAaC,EAASlmB,EAATkmB,MAEtFnjB,EAAIojB,aAAeN,GACnB7iB,EAAImjB,aAAeL,GACzB,EAAyBM,eAAlBC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAEfrK,qBAAU,WACNlZ,EAAEvZ,IAAIq8B,GAASD,EAAmBzB,QAAQoC,YAAc,MACxDvjB,EAAExZ,IAAIs8B,GAASF,EAAmBzB,QAAQqC,aAAe,QAC1D,CAACzjB,EAAG8iB,EAAO7iB,EAAG8iB,EAAOF,IAExB,IAAMxB,EAAMF,iBAAuB,MASnC,OAPAjI,qBAAU,WACFmI,GAAOA,EAAID,SAAW8B,GAAeC,GACrCD,EAAY7B,EAAID,QAAQsC,wBAAwBjjB,MAAO4gB,EAAID,QAAQsC,wBAAwBhjB,OAAQyiB,KAGxG,QAAC9B,QAAD,IAACA,GAAD,UAACA,EAAKD,eAAN,aAAC,EAAcsC,wBAAwBjjB,MAAvC,OAA8C4gB,QAA9C,IAA8CA,GAA9C,UAA8CA,EAAKD,eAAnD,aAA8C,EAAcsC,wBAAwBhjB,SAGnF,kBAAC,KAAOijB,IAAR,CACIC,MAAM,EACNC,gBAAiBhB,EACjBiB,cAAc,EACdC,YAAa,EACbC,UAAW,SAACxD,EAAOn+B,GACf2gC,EAKIp8B,OAAOvE,EAAKme,MAAMR,EAAEikB,QAAQ,KAAOpB,EAAmBzB,QAAQoC,YrHjD7C,KqHkDjB58B,OAAOvE,EAAKme,MAAMP,EAAEgkB,QAAQ,KAAOpB,EAAmBzB,QAAQqC,arHlD7C,KqHmDjBn5B,IAGRgT,UAAU,aACV0F,MAAO,CACHkhB,UAAWjB,EAAS,eAAiBA,EAAS,GAC9CjjB,IACAC,IACAqjB,SACAC,UAEJlC,IAAKA,GAEJpkB,EAAMmb,a,SNrCPyJ,K,mBAAAA,E,iBAAAA,E,yBAAAA,Q,KAML,IOhCKsC,GPgCCC,GAAoC,SAACnnB,GAC9C,IACIonB,EASApnB,EATAonB,WACAC,EAQArnB,EARAqnB,cACAtB,EAOA/lB,EAPA+lB,iBACAuB,EAMAtnB,EANAsnB,OACAC,EAKAvnB,EALAunB,QACA53B,EAIAqQ,EAJArQ,KACAlD,EAGAuT,EAHAvT,KACA+6B,EAEAxnB,EAFAwnB,YACAvB,EACAjmB,EADAimB,YAGJ,EAAoDwB,GAAmBD,GAAhEx+B,EAAP,EAAOA,IAAK0+B,EAAZ,EAAYA,eAAgBjkB,EAA5B,EAA4BA,OAAQD,EAApC,EAAoCA,MAAOmkB,EAA3C,EAA2CA,MAE3C,EAAkC7L,oBAAkB,GAApD,mBAAO8L,EAAP,KAAkBC,EAAlB,MNQ8B,SAC9BC,EACAC,GAEA,IAAMC,EAAgB,SAACC,GACfA,EAAWC,UACXD,EAAWE,iBACPL,GAAiBC,IACjBE,EAAWG,OAAS,GAAKN,EAAcO,iBACvCJ,EAAWG,OAAS,GAAKN,EAAcQ,qBAK7CC,EAAY,SAAChF,GACXA,EAAM2E,UACY,MAAd3E,EAAMv6B,KAA6B,MAAdu6B,EAAMv6B,KAC3Bu6B,EAAM4E,mBAKlBlM,qBAAU,WAIN,OAHA9xB,SAASq5B,iBAAiB,QAASwE,EAAe,CAACQ,SAAS,IAC5Dr+B,SAASq5B,iBAAiB,UAAW+E,GAE9B,WACHp+B,SAASs5B,oBAAoB,QAASuE,GACtC79B,SAASs5B,oBAAoB,UAAW8E,OMlChDE,CAAmB,CAACJ,eAAgBf,EAAQgB,gBAAiBf,GAAUK,GAoBvE,OACI,kBAAC,KAAOlB,IAAR,CACIgC,aAAc,kBAAMb,GAAa,IACjCc,aAAc,kBAAMd,GAAa,IACjCzD,IAAKsD,EACL3hB,MAAOqhB,EAAa,CAAC3jB,OAAQA,EAAQmlB,SAAUplB,GAAS,GACxDnD,UAAW5T,EAAK/C,WAChBV,IAAKA,GAEJq+B,EAAchiC,KArBN,SAACwjC,GAA8C,IAAD,EMY/Dr5B,EACAs5B,EACAlD,EACAzK,EACA6K,EACAE,EACA6C,ENjBI,OMWJv5B,ENVQq5B,EAAar5B,SMWrBs5B,ENVQ/C,EMWRH,ENVQ8B,EMWRvM,ENVQ0N,EAAaG,QMWrBhD,ONVQn+B,EMWRq+B,GNVQ,UAAA2C,EAAaz5B,uBAAb,eAA8B5J,UAAMqC,EMW5CkhC,ENVQ9C,EMaJ,kBAAC,GAAD,CACIj9B,IAAKwG,EAAShK,GACdugC,iBAAkB+C,EAClBz7B,WAAYmC,EAAShK,GACrBqgC,MAAOr2B,EAASuT,EAChB+iB,MAAOt2B,EAASwT,EAChB4iB,mBAAoBA,EACpBI,OAAQA,EACRC,YAAa8C,EACb7C,MAAOA,GAEN/K,MNVD,kBAAC,KAAOjV,MAAR,CAAc7F,UAAU,YACVrX,IAAK2G,GAAc,IAE5BA,EAAO3B,KAAKi7B,MAAa,IAAPt5B,GAAc,IAAM,IAE3C,kBAAC,KAAO+U,IAAR,CAAYrE,UAAU,SAjCN,SAACsnB,GACrB,OAAOA,EAAMtiC,KAAI,SAACqf,EAAKnf,GACnB,OAAO,kBAAC,GAAD,iBAAemf,EAAf,CAAoB1b,IAAKzD,QA+BD2jC,CAAgBvB,MAKrDF,GAAqB,SAACD,GACxB,MAAsB1L,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KACMzB,EAAiBxD,iBAAyB,MAEhD,EAA0BpI,mBAA2B,IAArD,mBAAO6L,EAAP,KAAcyB,EAAd,KAIMC,ENxFqB,WAE3B,MAA0BvN,mBAAS+G,MAAnC,mBAAOrf,EAAP,KAAc8lB,EAAd,KAkBA,OAdArN,qBAAU,WACN,IAAMsN,EAAiB,WACnB/M,YAAW,kBAAM8M,EAASzG,QAAa,MAM3C,OAHAzlB,OAAOomB,iBAAiB,SAAU+F,GAG3B,WAEHnsB,OAAOqmB,oBAAoB,SAAU8F,MAE1C,IAEI/lB,EMkE4BgmB,G/GhGF,IAED,M+GiG1BC,ENlEsB,WAE5B,MAA4B3N,mBAASoH,MAArC,mBAAOzf,EAAP,KAAeimB,EAAf,KAkBA,OAdAzN,qBAAU,WACN,IAAMsN,EAAiB,WACnB/M,YAAW,kBAAMkN,EAAUxG,QAAc,MAM7C,OAHA9lB,OAAOomB,iBAAiB,SAAU+F,GAG3B,WAEHnsB,OAAOqmB,oBAAoB,SAAU8F,MAE1C,IAEI9lB,EM4C6BkmB,G/G/FJ,MAFC,I+G6HjC,OAxBA1N,qBAAU,WACN,IAAM2N,EAAe,kBAAMT,GAAO,SAACU,GAAD,OAAeA,EAAY,MAG7D,OAFAzsB,OAAOomB,iBAAiB,SAAUoG,GAE3B,WACHxsB,OAAOqmB,oBAAoB,SAAUmG,MAE1C,IAEH3N,qBAAU,WACN,GAAuB,OAAnByL,GAAsD,OAA3BA,EAAevD,QAAkB,CAC5D,IAAI2F,EAA6B,GACjCtC,EAAYrhC,SAAQ,SAACue,GACjB,IAAIqlB,EAA6BrlB,EACjCqlB,EAAWhoB,QAAU2C,EAAI3C,SAAW2lB,EAAevD,QAASoC,YAAc,KAC1EwD,EAAW/nB,QAAU0C,EAAI1C,SAAW0lB,EAAevD,QAASqC,aAAe,KAC3EuD,EAAW9nB,QAAUyC,EAAIzC,SAAWylB,EAAevD,QAASoC,YAAc,KAC1EwD,EAAW7nB,QAAUwC,EAAIxC,SAAWwlB,EAAevD,QAASqC,aAAe,KAC3EsD,EAASzjC,KAAK0jC,MAElBX,EAASU,MAEd,CAACpC,EAAgBF,IAEb,CACHE,iBACAjkB,OAAQ4lB,EACR7lB,MAAOimB,EACPzgC,MACA2+B,UQ1HKqC,GAAmE,SAAChqB,GAC7E,IAAOiqB,EAAQjqB,EAARiqB,KAEP,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIlE,iBAAkB,aAElBsB,cAAe,CACX,CACI2B,QAASiB,EACTz6B,SAAU,IAAIyjB,GAAW,GAAI,MAGrCuU,YAAa,GACbF,OAAQ,aAERC,QAAS,aAET96B,KAAMm4B,GAAWsF,eClBpBC,GAAyD,SAACnqB,GACnE,IAAOE,EAAyCF,EAAzCE,KAAMwlB,EAAmC1lB,EAAnC0lB,cAAe0E,EAAoBpqB,EAApBoqB,iBAE5B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIlqB,KAAMA,EACNwkB,SAAU,SAACxkB,GACPwlB,IACA0E,EAAiBlqB,IAErBglB,SAAU,kBAAMQ,SCZnB2E,GAA+C,SAACrqB,GACzD,IAAOsqB,EAAyBtqB,EAAzBsqB,YAAaC,EAAYvqB,EAAZuqB,SAEpB,OACI,yBAAKlqB,UAAU,QACX,kBAAC,GAAD,CAAgBC,QAAS,kBAAMgqB,KACf7pB,KAAM+W,GAAY6D,SAEjCkP,ICPAC,GAAiE,SAACxqB,GAC3E,IAAOyqB,EAA2BzqB,EAA3ByqB,eAAgBC,EAAW1qB,EAAX0qB,QAEvB,EAAgC5O,oBAAkB,GAAlD,mBAAO6O,EAAP,KAAiBC,EAAjB,KAEA,OACI,oCACI,kBAAC,GAAD,CAAiBtqB,QAAS,kBAAMsqB,GAAY,IAC3BpP,SAAsB,KAAZkP,EAAiBG,KAAYC,OAEvDH,GACD,kBAAC,GAAD,CAAgBzqB,KAAMwqB,EACNhF,cAAe,kBAAMkF,GAAY,IACjCR,iBAAkBK,MCTjCM,I,MAAqB,SAACC,EAA2ChiC,GAC1E,IALsC4L,EAKhCq2B,EAAgB,SAACr2B,GACnB,OAAIA,IAAUkS,GAAeqD,QAErB,yBACI9J,UAAW,aAEX0F,MAAO,CAACgN,MAAO,QAASmY,gBAAiB,kCAKjDt2B,IAAUkS,GAAesD,aAErB,yBACI/J,UAAW,aAEX0F,MAAO,CAACgN,MAAO,MAAOmY,gBAAiB,kCAK5C,MAGX,OACI,yBAAK7qB,UAAU,4CACVrX,IAAKA,GAEN,yBAAKqX,WAjCyBzL,EAiCmBo2B,EAAuBp2B,MAhC1E,aAAN,OAAoBA,EAApB,sBAiCa5L,IAAKA,GAELgiC,EAAuBvkC,MAE3BwkC,EAAcD,EAAuBp2B,QAAUq2B,EAAcD,EAAuBp2B,UCpBpFu2B,I,MAA+C,SAA/CA,EAAgDnrB,GACzD,IAAOxa,EAAmFwa,EAAnFxa,GAAI4lC,EAA+EprB,EAA/EorB,SAAUC,EAAqErrB,EAArEqrB,UAAWC,EAA0DtrB,EAA1DsrB,WAAYC,EAA8CvrB,EAA9CurB,cAAevkC,EAA+BgZ,EAA/BhZ,UAAWwkC,EAAoBxrB,EAApBwrB,WAAY/+B,EAAQuT,EAARvT,KAElF,EAA4Eg/B,GAAsBh/B,EAAMjH,GAAjGkmC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,SAAUC,EAA7C,EAA6CA,YAAaC,EAA1D,EAA0DA,eA8C1D,OACI,yBACIzrB,UAAWyrB,EAAiB,oBAAsB,OAClD/lB,MAAO,CACHgmB,SAAUV,EAAYG,EACtBQ,UAAWV,EAAaE,EACxBS,SAAS,GAAD,OAAKT,EAAL,OAEZlrB,QAASN,EAAMM,QAAU,kBAAMN,EAAMM,QAASN,EAAMxa,UAAMqC,EAC1DmB,IAAKxD,GAEL,yBAAK6a,UAAU,cAEWurB,EAvCtB,yBAAKvrB,UAAU,gCACD,aAAT5T,GACD,yBAAK4T,UAAU,eACX,kBAAC,GAAD,CACII,KAAM+W,GAAY0U,MAClB5rB,QAAS,kBAAMorB,EAAYlmC,EAAIiH,IAC/B4T,UAAS,sBACTmb,SAAUrd,GAAWC,UAG7B,yBAAKiC,UAAU,eACX,kBAAC,GAAD,CACII,KAAM+W,GAAY0U,MAClB5rB,QAAS,kBAAMqrB,EAAcnmC,EAAIiH,IACjC4T,UAAS,8BAAyByrB,EAAiB,eAAiB,IACpEtQ,SAAUrd,GAAW7N,WAK7B,yBAAK+P,UAAU,kCACnB,+BAAQ+qB,IAoBR,yBAAK/qB,UAAU,eACX,kBAAC,GAAD,CAAqBA,UAAW,kCACXC,QAAS,WACLurB,GAAaD,QAM7C5kC,GACG,yBAAKqZ,UAAU,uBACVrZ,EAAU3B,KAAI,SAAC4B,EAAU1B,GAAX,OAtEP,SAACC,EAAY2mC,EAAsBroC,GACvD,OACI,kBAACqnC,EAAD,CACI3lC,GAAIA,EACJ4lC,SAAUe,EACVZ,cAAeznC,EACfunC,UAAWA,EACXC,WAAYA,EACZE,WAAYA,EACZxiC,IAAKxD,EACLiH,KAAK,aA6DG2/B,CACI7mC,EACA0B,EAASR,KACT8kC,EAAcj7B,QACV,SAACnD,GAAD,OACKA,EAAMk/B,SAGJ9kC,aAAeN,EAASzB,iBAOnCqC,IAAdb,GAAiD,KAAb,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW6F,UAAiB0+B,EAAclmC,IAAI0lC,OAMjFU,GAAwB,SAACh/B,EAAqCjH,GAChE,IAAM8mC,EAA0B1rB,YAAY6P,IAC5C,EAAgCqL,oBAAkB,GAAlD,mBAAO8P,EAAP,KAAiBC,EAAjB,KACM1uB,EAAW0D,cAqCXirB,EAAiBQ,EAAchhC,MACjC,SAACgF,GAAD,OAAaA,EAAO7D,OAASA,GAAyB,SAAhB6D,EAAO7D,MAA4B,aAATA,IAAyB6D,EAAO9K,KAAOA,KAG3G,MAAO,CACHkmC,YAxCgB,SAACa,EAAmBC,GACpC,OAAQA,GACJ,IAAK,QACDrvB,EAASuZ,GAAYC,QAAQuC,cAAcqT,IAC3C,MACJ,IAAK,OACDpvB,EAASuZ,GAAYC,QAAQ0C,aAAakT,IAC1C,MACJ,IAAK,WACDpvB,EAASuZ,GAAYC,QAAQ8C,iBAAiB8S,IAEtDV,GAAY,IA8BZF,cA5BkB,SAACY,EAAmBC,GACtC,OAAQA,GACJ,IAAK,QACGV,GACA3uB,EAASwU,GAAqB9C,kBAAkB0d,IAChDV,GAAY,IAEZ1uB,EAASwU,GAAqB/C,gBAAgB2d,IAElD,MACJ,IAAK,OACL,IAAK,WACGT,GACA3uB,EAASwU,GAAqBiB,kBAAkB2Z,IAChDV,GAAY,IAEZ1uB,EAASwU,GAAqBgB,eAAe4Z,MAazDX,WACAC,cACAC,eAAgBA,ICxKXW,I,MAAqD,SAACzsB,GAC/D,IAAOmb,EAAYnb,EAAZmb,SAEP,OACI,yBAAK9a,UAAW,cAAe8a,KCF1BuR,I,MAAmD,SAAC1sB,GAC7D,IAAOkG,EAA4BlG,EAA5BkG,MAAOiV,EAAqBnb,EAArBmb,SAAUwR,EAAW3sB,EAAX2sB,QAExB,OACI,yBAAKtsB,UAAW,eAAiBssB,EAAU,iBAAmB,KAC1D,yBAAKtsB,UAAW,wBAAyB8a,GAD7C,OAEKjV,QAFL,IAEKA,OAFL,EAEKA,EAAO0mB,iBCVPC,GAAb,oDACI,aAMG,IAAD,EALSpmC,EAKT,uDALwB,GACfU,EAIT,wDAJ4B,EACnBC,EAGT,uDAHqC,GAC5BZ,EAET,uDAF6B,CAACiG,KAAMxB,EAAe+gB,KAC1CzlB,EACT,uDAD+B,CAACkG,KAAMxB,EAAe8H,OACrD,4BACE,gBANOtM,OAKT,EAJSU,UAIT,EAHSC,aAGT,EAFSZ,SAET,EADSD,WACT,EAPN,UAAqCqM,ICFxBk6B,GAAb,oDACI,aAC8C,IAAD,EAD1B5mB,EAC0B,uDADV,GAChB6mB,IAA0B,qFACzC,gBAFe7mB,QAC0B,EAA1B6mB,UAA0B,EAFjD,UAA6Bn6B,ICAhBo6B,GAAb,oDACI,aAEG,IAAD,EADS7lC,EACT,wDAD4B,EAC5B,4BACE,gBAFOA,UACT,EAHN,UAAkC2lC,ICqBrBG,GAhBe,SAACp4B,GAAD,OAAwC,SAACsI,GACjE,IAAMzB,EAA6CD,GAA0B5G,GACvD,MAAlB6G,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAWAokB,GARiB,SAACnzB,GAAD,OAAoC,SAACqD,GAC/D,IAAMzB,EAA6CD,GAA4B3B,GACzD,MAAlB4B,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QCLAqkB,GAAoB,WAC7B,IAAMlf,EAAgCpN,YAAY6P,IAC5CtT,EAAW0D,cACjB,EAA8Cib,oBAAkB,GAAhE,mBAAOqR,EAAP,KAAwBC,EAAxB,KACMxkB,EAAmBhI,YAAY8H,IAAqD,OAAbsF,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,MAAO,IAEnGy2B,qBAAU,WAEFtxB,EAAUC,kBAAkBojB,KAC5B7oB,QAAQ6C,KAAK,uDAAyDgmB,GACtE7Q,EAASuZ,GAAYC,QAAQjG,UAEN,KAAV,OAAb1C,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,KACf4nC,GAAmB,KAExB,CAACpf,EAAe7Q,IAEnB,IAoEMkwB,EAAY,SAACC,GACfnwB,EAAS8vB,GAAoBK,KA2BjC,MAAO,CACHpnB,MAAO,YAA0B,OAAb8H,QAAa,IAAbA,OAAA,EAAAA,EAAevnB,OAAQ,IAC3CA,KAAI,OAAEunB,QAAF,IAAEA,OAAF,EAAEA,EAAevnB,KACrBjB,IAAiB,OAAbwoB,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,IAAKwoB,EAAcxoB,IAAM,EAC5C+nC,WApGe,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBojB,GAAgB,CAC7C,IAAMwf,EAA2B7iC,EAAUG,SAASkjB,GACpDwf,EAAgB/mC,KAAOA,EACvB0W,EAASsX,GAAe+Y,MAiG5BC,UA7Fc,SAACC,GACV/iC,EAAUC,kBAAkBojB,KACD,KAAxBA,EAAevnB,KACf0W,EAASsX,GAAezG,IAExB7Q,EAASsX,GAAiBzG,IAG1B7Q,EADAgwB,IAAoBO,EACXhX,GAAYC,QAAQ0D,YAEpB3D,GAAYC,QAAQjG,UAoFrCrW,YA/EgB,WACX1P,EAAUC,kBAAkBojB,IAC7B7Q,EAASsX,GAAiBzG,IAE9B7Q,EAASuZ,GAAYC,QAAQjG,SA4E7Bid,cAzEkB,WAClB,OAAKhjC,EAAUC,kBAAkBojB,IACtBrjB,EAAUI,YAAYijB,EAAevnB,OAwEhDmnC,cA/CkB,WAClBzwB,EAASuZ,GAAYC,QAAQiD,iBA+C7BiU,eA5CmB,WACnB,IAAMlY,EAA2BhrB,EAAUG,SAASkjB,GACpD7Q,EAASma,GAAa3oB,KAAKgnB,KA2C3BmY,uBA1D2B,SAAC9nC,GAC5B,IAAI+nC,EAA8C/nC,OAC3B6B,IAAnBkmC,KACAA,EAAiB,IAAIlB,IACN1lC,SAAuB,OAAb6mB,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,MAAO,GAEnD2X,EAASuZ,GAAYC,QAAQ+D,kBAAkBqT,KAqD/CC,mBArEuB,SAAC75B,GACxB,IAAI85B,EAA2C95B,OACvBtM,IAApBomC,KACAA,EAAkB,IAAIp7B,IACN1L,SAAuB,OAAb6mB,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,MAAO,EAChDyoC,EAAgBvnC,KAAOkiB,GAE3BzL,EAASuZ,GAAYC,QAAQ8D,cAAcwT,KA+D3CC,WAlBe,WACVvjC,EAAUC,kBAAkBojB,IAC7B7Q,EAASuZ,GAAYC,QAAQ4D,oBAiBjC8S,YACAhT,UA1Bc,WACT1vB,EAAUC,kBAAkBojB,IAC7B7Q,EAASuZ,GAAYC,QAAQ0D,UAAUrM,KAyB3CmgB,YAvCgB,WAChB,IAAKxjC,EAAUC,kBAAkBojB,GAAgB,CAC7C,IAAIogB,EAA8B,IAAIpB,GACtCoB,EAAcjnC,QAAU6mB,EAAexoB,GACvC6nC,EAAUe,KAoCdC,YAhCgB,SAACC,GACjBnxB,EAAS8vB,GAAsBqB,OChG1BC,GAAuE,WAChF,MAUIrB,KATAzmC,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACAK,EAHJ,EAGIA,cACAE,EAJJ,EAIIA,uBACAL,EALJ,EAKIA,UACApzB,EANJ,EAMIA,YACA7U,EAPJ,EAOIA,GACAwoC,EARJ,EAQIA,mBACAE,EATJ,EASIA,WAGJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAahoB,MAAM,gBACf,kBAAC,GAAD,CACIA,MAAM,QACN0W,YAAY,gBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,KAIf,kBAAC,GAAD,CAAa5d,MAAM,+BACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAa0D,EACbzD,SAAU,kBAAC,GAAD,CACN5N,SAAU,SAACxoB,GAAD,OAAU65B,EAAmB75B,IACvC+R,MAAM,OACNvR,QAASnP,OAK5B,kBAAC,GAAD,CAAa0gB,MAAM,mCACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAawD,EACbvD,SAAU,kBAAC,GAAD,CACN5N,SAAUmR,EACV5nB,MAAM,WACNvR,QAASnP,OAK5B,kBAAC,GAAD,CAAa0gB,MAAM,UACNymB,SAAS,GAElB,kBAAC,GAAD,CAAarsB,QAAS4tB,GAAtB,SACA,kBAAC,GAAD,CAAa5tB,QAASstB,GACjB,kBAEL,kBAAC,GAAD,CAAiBttB,QAASmtB,IAC1B,kBAAC,GAAD,CAAmBntB,QAASjG,OCnD/Bm0B,GAAqE,WAE9E,MAOIC,KANAC,EADJ,EACIA,eACAC,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,kBACAC,EAJJ,EAIIA,kBACAC,EALJ,EAKIA,mBACAC,EANJ,EAMIA,eAGJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAa7oB,MAAM,SACf,kBAAC,GAAD,CACIokB,YAAa,kBAAMoE,KACnBnE,SAAU,kBAAC,GAAD,CAAoB5N,SAAU+R,EACVxoB,MAAM,aAI5C,kBAAC,GAAD,CAAaA,MAAM,OACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAa,kBAAMqE,KACnBpE,SAAU,kBAAC,GAAD,CAAmB5N,SAAUgS,EACVzoB,MAAM,WAG9C,kBAAC,GAAD,CAAWokB,YAAa,kBAAMsE,KACnBrE,SAAU,kBAAC,GAAD,CAAuB5N,SAAUiS,EACV1oB,MAAM,gBAItD,kBAAC,GAAD,CAAaA,MAAM,eACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAa,kBAAMwE,KACnBvE,SAAU,kBAAC,GAAD,CAAwB5N,SAAUmS,EACV5oB,MAAM,kBAIvD,kBAAC,GAAD,CAAaA,MAAM,WACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAa,kBAAMuE,KACnBtE,SAAU,kBAAC,GAAD,CACN5N,SAAU,SAACtpB,GAAD,OAAgBw7B,EAAiB,OAACx7B,QAAD,IAACA,OAAD,EAACA,EAAY7N,KACxD0gB,MAAM,eAGrB,kBAAC,GAAD,CAAWokB,YAAa,kBAAMyE,KACnBxE,SAAU,kBAAC,GAAD,CACN5N,SAAU,SAACpoB,GAAD,OAAWw6B,EAAex6B,IACpC2R,MAAM,eAQ/BuoB,GAAmC,WACrC,IAAMtxB,EAAW0D,cAGjB,MAAO,CACH8P,KAHe/P,YAAY+X,IAI3B+V,eAAgB,SAACvhC,GAAD,OAAsBgQ,EAASuZ,GAAYC,QAAQsC,UAAU9rB,KAC7EwhC,cAAe,SAAC/nC,GAAD,OAAoBuW,EAASuZ,GAAYC,QAAQyC,SAASxyB,KACzEgoC,kBAAmB,SAACrjC,GAAD,OAA+B4R,EAASuZ,GAAYC,QAAQgD,aAAapuB,KAC5FsjC,kBAAmB,SAAC/hC,GAAD,OAAyBqQ,EAASuZ,GAAYC,QAAQiD,aAAa9sB,KACtFkiC,eAAgB,SAAClgC,GAAD,OAAqBqO,EAASuZ,GAAYC,QAAQ+C,UAAU5qB,KAC5EggC,mBAAoB,SAAC57B,GAAD,OAChBiK,EAASuZ,GAAYC,QAAQmD,cAAc5mB,EAAYA,EAAU1N,QAAKqC,KAC1EknC,eAAgB,SAACx6B,GAAD,OAAqB4I,EAASuZ,GAAYC,QAAQ0D,UAAU9lB,OCjGvE06B,GAAb,oDACI,aAOG,IAAD,EANSxoC,EAMT,uDANgB,GACPlB,EAKT,wDALkB,EACToB,EAIT,wDAJuB,EACd6F,EAGT,uDAHsB,CAACC,KAAMhC,EAAUsI,OAC9BrM,EAET,wDADSK,EACT,uDADwB,GACxB,4BACE,gBAPON,OAMT,EALSlB,QAKT,EAJSoB,aAIT,EAHS6F,OAGT,EAFS9F,OAET,EADSK,OACT,EARN,UAAoC6L,ICAvBs8B,GACT,aAA4G,IAAzF54B,EAAwF,uDAAvD,IAAI24B,GAAyB3qC,EAA0B,uDAAJ,GAAI,yBAAxFgS,iBAAwF,KAA1BhS,WCAxE6qC,GAAb,oDACI,aAQG,IAAD,EAPS1oC,EAOT,uDAPwB,GACfE,EAMT,wDAN+B,EACtBS,EAKT,uDALqC,GAC5BZ,EAIT,uDAJwB,CAACiG,KAAMhC,EAAUuhB,KAChCzlB,EAGT,uDAH0B,CAACkG,KAAMhC,EAAUsI,OAClCrM,EAET,wDADSK,EACT,uDADwB,GACxB,4BACE,gBARON,OAOT,EANSE,aAMT,EALSS,aAKT,EAJSZ,SAIT,EAHSD,WAGT,EAFSG,OAET,EADSK,OACT,EATN,UAAgC6L,ICFnBw8B,GAAb,oDACI,aAEG,IAAD,EADSzoC,EACT,wDAD+B,EAC/B,4BACE,gBAFOA,aACT,EAHN,UAAqCmmC,ICqBxBuC,GAhBkB,SAACt5B,GAAD,OAA8C,SAACoH,GAC1E,IAAMzB,EAAgDD,GAA6B1F,GAC7D,MAAlB2F,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QAWAwmB,GARoB,SAACC,GAAD,OAA+B,SAACnyB,GAC7D,IAAMzB,EAAgDD,GAA+B6zB,GAC/D,MAAlB5zB,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS0L,QCNA0mB,GAAuB,WAChC,IAAMnP,EAAoCxf,YAAY+X,IAChD6W,EAAuC5uB,YAAY6P,IACnDtT,EAAW0D,cACjB,EAA8Cib,oBAAkB,GAAhE,mBAAOqR,EAAP,KAAwBC,EAAxB,KAEAnR,qBAAU,WAEFtxB,EAAUC,kBAAkBw1B,KAC5BjjB,EAASF,GAAcN,YAAY,kEACnCQ,EAASuZ,GAAYC,QAAQjG,UAEL,KAAV,OAAd0P,QAAc,IAAdA,OAAA,EAAAA,EAAgB56B,KAChB4nC,GAAmB,KAExB,CAAChN,EAAgBjjB,IAEpB,IAsDMyL,EAAU,WACZ,OAAqD,KAA9B,OAAhB4mB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl8B,iBAAiBzG,SAAsD,IAAtC2iC,EAAiBjrC,UAAUsI,QA6BnFwgC,EAAY,SAACC,GACfnwB,EAASkyB,GAAuB/B,KA2BpC,MAAO,CACHpnB,MAAO,YAA2B,OAAdka,QAAc,IAAdA,OAAA,EAAAA,EAAgB35B,OAAQ,IAC5CA,KAAI,OAAE25B,QAAF,IAAEA,OAAF,EAAEA,EAAgB35B,KACtB8mC,WAnHe,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBw1B,GAAiB,CAC9C,IAAMqP,EAAiC9kC,EAAUG,SAASs1B,GAC1DqP,EAAmBhpC,KAAOA,EAC1B0W,EAASma,GAAa3oB,KAAK8gC,MAgH/BC,aA5GiB,WACY,KAAzBtP,EAAgB35B,KAChB0W,EAASma,GAAa3oB,KAAKyxB,IAE3BjjB,EAASma,GAAa5oB,OAAO0xB,IAG7BjjB,EADAgwB,EACSzW,GAAYC,QAAQiD,eAEpBlD,GAAYC,QAAQjG,SAoGjCif,eAhGmB,WACnBxyB,EAASma,GAAa5oB,OAAO0xB,IAC7BjjB,EAASuZ,GAAYC,QAAQjG,SA+F7Bkf,sBApF0B,SAACrjC,GAC3B,IAAIsjC,EAA0CtjC,OAC3B1E,IAAfgoC,KACAA,EAAa,IAAIX,IACN54B,eAAe3P,YAA2B,OAAdy5B,QAAc,IAAdA,OAAA,EAAAA,EAAgB56B,MAAO,EAC9DqqC,EAAWv5B,eAAe5P,KAAOkiB,KAErCzL,EAASuZ,GAAYC,QAAQoD,SAAS8V,KA8EtClC,cA7FkB,WAClB,OAAKhjC,EAAUC,kBAAkBw1B,IACtBz1B,EAAUI,YAAYq1B,EAAgB35B,OA4FjDkvB,aA9DiB,WACjB,IAAMA,EAA2BhrB,EAAUG,SAASs1B,GACpDzK,EAAalvB,MAAqB,OAAd25B,QAAc,IAAdA,OAAA,EAAAA,EAAgB35B,MAAO,QAC3CkvB,EAAanwB,IAAM,EACnB2X,EAASma,GAAa/C,OAAOoB,KA2D7BiY,cAxDkB,WAClBzwB,EAASuZ,GAAYC,QAAQiD,iBAwD7BiU,eArDmB,WACnB,IAAMlY,EAA2BhrB,EAAUG,SAASs1B,GACpDjjB,EAASma,GAAa3oB,KAAKgnB,KAoD3Bma,kBA/EsB,SAAC9pC,GACvB,IAAI+nC,EAAyC/nC,OACtB6B,IAAnBkmC,KACAA,EAAiB,IAAIoB,IACNxoC,YAA2B,OAAdy5B,QAAc,IAAdA,OAAA,EAAAA,EAAgB56B,MAAO,EACnDuoC,EAAernC,KAAOkiB,KAE1BzL,EAASuZ,GAAYC,QAAQqD,aAAa+T,KAyE1CvoC,IAAkB,OAAd46B,QAAc,IAAdA,OAAA,EAAAA,EAAgB56B,MAAO,EAC3BuB,KAAMq5B,EAAiBA,EAAer5B,KAAO,GAC7CgpC,SApDa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkBw1B,IAA4B,KAATlgB,EAAa,CAC7D,IAAMuvB,EAAiC9kC,EAAUG,SAASs1B,GAC1DqP,EAAmB1oC,KAAOmZ,EAC1B/C,EAASma,GAAa3oB,KAAK8gC,MAiD/BpC,YACAgB,YAhCgB,SAACC,GACjBnxB,EAASkyB,GAAyBf,KAgClCH,YAzCgB,WAChB,IAAKxjC,EAAUC,kBAAkBw1B,GAAiB,CAC9C,IAAI4P,EAAoC,IAAIZ,GAC5CY,EAAiBrpC,WAAay5B,EAAgB56B,GAC9C6nC,EAAU2C,KAsCd9B,WAxBe,WACVvjC,EAAUC,kBAAkBw1B,IAC7BjjB,EAASuZ,GAAYC,QAAQkD,uBAuBjCD,aA/BiB,WACZjvB,EAAUC,kBAAkBw1B,IAC7BjjB,EAASuZ,GAAYC,QAAQiD,aAAawG,EAAgB56B,QCpHzDyqC,GAA6E,WAEtF,MAYIV,KAXA9oC,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACAoC,EAHJ,EAGIA,eACAD,EAJJ,EAIIA,aACAE,EALJ,EAKIA,sBACAhC,EANJ,EAMIA,cACAC,EAPJ,EAOIA,eACAiC,EARJ,EAQIA,kBACA/oC,EATJ,EASIA,KACAgpC,EAVJ,EAUIA,SACA7B,EAXJ,EAWIA,WAGJ,OACI,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAahoB,MAAM,mBACf,kBAAC,GAAD,CACIA,MAAM,QACN0W,YAAY,mBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,EACPD,OAAQgK,KAGhB,kBAAC,GAAD,CAAa3nB,MAAM,kCACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAasF,EACbrF,SAAU,kBAAC,GAAD,CAAmB5N,SAAUiT,EACV1pB,MAAM,YAIlD,kBAAC,GAAD,CAAaA,MAAM,sCACNymB,SAAS,GAElB,kBAAC,GAAD,CAAWrC,YAAawF,EACbvF,SAAU,kBAAC,GAAD,CAAuB5N,SAAUmT,EACV5pB,MAAM,gBAItD,kBAAC,GAAD,CAAaA,MAAO,UACPymB,SAAS,GAElB,kBAAC,GAAD,CAAarsB,QAAS4tB,GAAtB,SAEA,kBAAC,GAAD,CAAa5tB,QAASstB,GAEjB,kBAEL,kBAAC,GAAD,CAAiBttB,QAASovB,IAC1B,kBAAC,GAAD,CAAoBjF,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAmBuZ,QAASqvB,OC1E/BO,GAAb,oDACI,aASG,IAAD,EARSpqC,EAQT,wDAR2B,EAClBF,EAOT,wDAP6B,EACpBC,EAMT,wDAN2B,EAClBH,EAKT,wDALmB,EACVC,EAIT,wDAJuB,EACdF,EAGT,uDAHsBoc,GAAWyH,IACxBvjB,EAET,uDAFuB,GACdR,EACT,wDADkB,EAClB,4BACE,gBATOO,iBAQT,EAPSF,mBAOT,EANSC,iBAMT,EALSH,SAKT,EAJSC,aAIT,EAHSF,aAGT,EAFSM,cAET,EADSR,QACT,EAVN,UAA8BqN,ICyDjBu9B,GAnCa,SAAC7qC,GAAD,OAAgC,SAAC6X,GACvD,IAAMizB,EAAsB9qC,EAAOC,MAE7BmW,EAAyCD,GAA0BnW,GACnD,MAAlBoW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAGhD,IAAM00B,EAAyDxnB,GAAuB5Q,oBAClF3S,EAAOQ,gBAGPuqC,IACAA,EAA0B/rC,QAAQe,KAAI,SAACC,GAInC,OAHIA,EAAOC,MAAQ6qC,IACf9qC,EAAOC,MAAQD,EAAOC,MAAQ,GAE3BD,KAGX6X,EAASuY,GAAS/mB,KAAK0hC,KAG3BlzB,EAAS0L,QAYAsnB,GATgB,SAAC7qC,GAAD,OAAgC,SAAC6X,EAAUK,GACpE,IAAMmT,EAAanT,IAAWkT,KAAKC,KAC/BA,IAASC,GAAKqH,0BACd9a,EAASmW,GAAY0E,gBAAgB1yB,IAErC6X,EAASF,GAAcN,YAAY,sCAAwCgU,MAItEwf,GA1CW,SAAC7qC,GAAD,OAAgC,SAAC6X,GACrD,IAAMzB,EAAyCD,GAAwBnW,GACjD,MAAlBoW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,YAuCvCw0B,GAlDa,SAAC7qC,GAAD,OAAgC,SAAC6X,GACvD,IAAMzB,EAAyCD,GAAwBnW,GACjD,MAAlBoW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAASuZ,GAAYC,QAAQyD,WAAW1e,EAAS7Q,WCExCylC,GAAqB,WAC9B,IAAMzX,EAAgCjY,YAAY+X,IAC5C70B,EAAqB8c,YAAY8H,IACjClkB,EAAmBoc,YAAY8H,IAC/B8mB,EAAuC5uB,YAAY6P,IACnDtT,EAAW0D,cAEjB,EAAsBib,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEM9wB,EAAe,SAAC/S,GAClB,GAAe,OAAXA,EAAiB,CACjB6X,EAASgzB,GAAkB7qC,IAE3B,IAAMiH,EAAoCsc,GAAuB5Q,oBAC7D3S,EAAOQ,gBAGPyG,EACA4Q,EAASuZ,GAAYC,QAAQoD,SAASxtB,KAGtC4Q,EAASF,GAAcN,YAAY,oBACnCQ,EAASuZ,GAAYC,QAAQjG,WA8GnC6f,EAAe,SAACrkC,EAAiBpI,GAAgC,IAAD,EAClE,OAAO,UAAAA,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAO0G,YAA1C,eAAoDiB,MAAM1G,OAAQ,IAQvEq3B,EAAqB,SAACrxB,GACxB,IAAIyZ,EAAgB,GACpB,OAAQzZ,GACJ,KAAKoV,GAAWyH,IACZpD,EAAQ,gBACR,MACJ,KAAKrE,GAAW8H,OACZzD,EAAQ,SACR,MACJ,KAAKrE,GAAWgI,KACZ3D,EAAQ,OACR,MACJ,KAAKrE,GAAWkI,gBACZ7D,EAAQ,kBACR,MACJ,KAAKrE,GAAWsO,QACZjK,EAAQ,UAGhB,OAAOA,GAiBX,MAAO,CACHA,MAAO,kCACP5gB,OAAQuzB,EACR2X,SAnJa,SAACrjC,EAA6BsjC,GAC3C,QAAc5oC,IAAVsF,EAAqB,CACrB,IAAMujC,EAA6B/lC,EAAUG,SAAS+tB,GACtD4X,EACOC,EAAiB7qC,eAAiBsH,EAAMA,MAAM3H,GAC9CkrC,EAAiB9qC,iBAAmBuH,EAAMA,MAAM3H,GACvD2X,EAASgzB,GAAkBO,IAC3BvzB,EAASgzB,GAAgBO,MA6I7BC,UAzIc,SAACC,GACf,QAAsB/oC,IAAlB+oC,GAAoD,OAArBpB,GAA8C,OAAjB3W,EAAuB,CACnF,IAAM6X,EAA6B/lC,EAAUG,SAAS+tB,GACtD6X,EAAiBjrC,WAAamrC,EAC9BF,EAAiB7qC,eAAiB+qC,EAAcvgB,SAAS,QAAUwI,EAAahzB,gBAAkB,EAClG6qC,EAAiB9qC,iBAAmBgrC,EAAcvgB,SAAS,QAAUwI,EAAajzB,kBAAoB,EACtGuX,EAASgzB,GAAkBO,IAC3BvzB,EAASgzB,GAAgBO,MAmI7BG,QArHY,SAACjqC,GACb,QAAaiB,IAATjB,EAAoB,CACpB,IAAM8pC,EAA6B/lC,EAAUG,SAAS+tB,GACtD6X,EAAiBhrC,OAASkB,EAAKA,KAAKpB,GACpC2X,EAASgzB,GAAkBO,IAC3BvzB,EAASgzB,GAAgBO,MAiH7BI,eAAc,OAAEjY,QAAF,IAAEA,OAAF,EAAEA,EAAchzB,eAC9BkrC,iBAAgB,OAAElY,QAAF,IAAEA,OAAF,EAAEA,EAAcjzB,iBAChCwF,QAAkC,KAAd,OAAZytB,QAAY,IAAZA,OAAA,EAAAA,EAAcnzB,SAAd,OAA0CmzB,QAA1C,IAA0CA,OAAZhxB,EAAYgxB,EAAcnzB,OAChED,WAAU,OAAEozB,QAAF,IAAEA,OAAF,EAAEA,EAAcpzB,WAC1B4S,eACA24B,mBAjKuB,WAClBrmC,EAAUC,kBAAkBiuB,IAC7BxgB,EAAawgB,IAgKjBlC,QAvFY,SAAC+W,GACb,IAAK/iC,EAAUC,kBAAkBiuB,GAI7B,GAvBY,SAACvzB,GACjB,IAAI0F,EACJ,OAAQ1F,EAAOG,YACX,KAAKoc,GAAWsO,QACZnlB,GAAqC,IAA7B1F,EAAOM,mBAAsD,IAA3BN,EAAOO,eACjD,MACJ,KAAKgc,GAAWgI,KAGhB,KAAKhI,GAAWkI,gBACZ/e,GAA2B,IAAnB1F,EAAOI,SAA8C,IAA7BJ,EAAOM,mBAAsD,IAA3BN,EAAOO,eACzE,MACJ,QACImF,GAA2B,IAAnB1F,EAAOI,SAA8C,IAA7BJ,EAAOM,iBAE/C,OAAOoF,EAKEimC,CAAYpY,IACbxgB,EAAawgB,GAEb6U,GAAuB,SAAZA,EACXvwB,EAASuZ,GAAYC,QAAQjG,aAC1B,GAAIgd,GAAuB,aAAZA,EAClBvwB,EAASuZ,GAAYC,QAAQiD,aAApB,OAAiC4V,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAkBn8B,WAAW7N,SACpE,CACH,IAAM+G,EAAoCsc,GAAuB5Q,oBAC7D4gB,EAAc/yB,gBAEdyG,GACA4Q,EAASuZ,GAAYC,QAAQoD,SAASxtB,MA0ElDqhC,cApEkB,WAClB,GAAI/U,EAAc,CACd,IAAMqY,EAAsB,IAAIhB,GAChCgB,EAAUprC,eAAiB+yB,EAAa/yB,eACxCorC,EAAU3rC,MAAQszB,EAAatzB,MAAQ,EACvC4X,EAASgzB,GAAkBe,IAC3B/H,EAAOngC,EAAM,KA+DjBA,MACAmoC,mBAtHuB,SAACC,GACxB,QAAwBvpC,IAApBupC,EAA+B,CAC/B,IAAMV,EAA6B/lC,EAAUG,SAAS+tB,GACtD6X,EAAiBhrC,OAAS0rC,EAAgB1rC,OAC1CgrC,EAAiB/qC,WAAayrC,EAAgB7pC,WAC9C4V,EAASgzB,GAAkBO,IAC3BvzB,EAASgzB,GAAgBO,MAiH7BU,gBAAiB5oC,KAAKG,UAAU,CAC5BjD,OAAM,OAAEmzB,QAAF,IAAEA,OAAF,EAAEA,EAAcnzB,OACtB6B,WAAU,OAAEsxB,QAAF,IAAEA,OAAF,EAAEA,EAAclzB,aAE9B0rC,gBA9IoB,SAACnxB,GACrB,QAAqBrY,IAAjBgxB,EAA4B,CAC5B,IAAM6X,EAA6B/lC,EAAUG,SAAS+tB,GACtD6X,EAAiB3qC,YAAcma,EAC/B/C,EAASgzB,GAAkBO,IAE3BvzB,EAASgzB,GAAgBO,MAyI7BY,cAA0B,OAAZzY,QAAY,IAAZA,OAAA,EAAAA,EAAcpzB,cAAeoc,GAAWsO,QAAU0I,EAAa9yB,YAAc,GAC3FwrC,cApCkB,SAACjsC,GAWnB,OATIA,EAAOG,aAAeoc,GAAWsO,QAC7B,UAAMogB,EAAajrC,EAAOM,iBAAkB9B,GAA5C,cAAyDg6B,EACzDx4B,EAAOG,YADP,cA9BQ,SAAC2F,EAAgB5G,GACjC,IAAMoC,EAA4BpC,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,KACxE,OAAOxE,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAMA,KAAKH,KAAO,eA8BrBu7B,CAAY18B,EAAOI,OAAQlB,IAE9B,UAAM+rC,EAAajrC,EAAOO,eAAgB/B,GAA1C,cAAuDg6B,EACvDx4B,EAAOG,YADP,cAEG8qC,EAAajrC,EAAOM,iBAAkB9B,Q,SzB3L7CojC,K,mBAAAA,E,gBAAAA,E,gBAAAA,Q,KAWL,IAAMsK,GAA+C,SAACxxB,GACzD,IAAOmb,EAA8Bnb,EAA9Bmb,SAAU9a,EAAoBL,EAApBK,UAAWoxB,EAASzxB,EAATyxB,MAE5B,OACI,2BAAOpxB,UAAWA,GAAwB,kBACnC0F,MAAO,CAAC2rB,eAAgBD,QAAgB5pC,IAC7CszB,I0BEGwW,GAAiD,WAE1D,MAeIrB,KAdAE,EADJ,EACIA,SACAG,EAFJ,EAEIA,UACAE,EAHJ,EAGIA,QACAG,EAJJ,EAIIA,mBACAF,EALJ,EAKIA,eACAC,EANJ,EAMIA,iBACA3lC,EAPJ,EAOIA,OACA3F,EARJ,EAQIA,WACAkxB,EATJ,EASIA,QACAiX,EAVJ,EAUIA,cACAuD,EAXJ,EAWIA,mBACAC,EAZJ,EAYIA,gBACAC,EAbJ,EAaIA,gBACAC,EAdJ,EAcIA,aAGJ,OAAO,kBAAC,GAAD,KAEH,kBAAC,GAAD,KACI,uCAGJ,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,kBAAC,GAAD,CAAoB3U,SAAUgU,EACV1nC,MAAOxD,KAI/B,kBAAC,GAAD,MAECA,IAAeoc,GAAWsO,SAAW,kBAAC,GAAD,KAEjC1qB,IAAeoc,GAAWyH,KACvB,oCACI,kBAAC,GAAD,6BACA,kBAAC,GAAD,CAAkBqT,SAAUwU,EACVloC,MAAOmoC,KAIhC3rC,IAAeoc,GAAWyH,KAC3B,oCACI,kBAAC,GAAD,oBACA,kBAAC,GAAD,CAAcqT,SAAUkU,EACV5nC,MAAOmC,MAK5B3F,IAAeoc,GAAWsO,SAC3B,kBAAC,GAAD,KACI,kBAAC,GAAD,2BACA,kBAAC,GAAD,CACIyM,YAAY,mBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB4qC,EAAgB5qC,IACpDwC,MAAOqoC,KAIf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWG,MAAOvK,GAAepC,QAC5Br/B,IAAeoc,GAAWyH,IAAM,KAAO,SAIhD,kBAAC,GAAD,KACI,kBAAC,GAAD,MAEkB,OAAV7jB,QAAU,IAAVA,OAAA,EAAAA,EAAY4qB,SAAS,UAAW5qB,IAAeoc,GAAWsO,QACpD,uBACA,SAGd,kBAAC,GAAD,CACIwM,SAAU,SAACxvB,GAAD,OACNqjC,EAASrjC,GAAiB,OAAV1H,QAAU,IAAVA,OAAA,EAAAA,EAAY4qB,SAAS,UAAW5qB,IAAeoc,GAAWsO,UAE9ElnB,OACc,OAAVxD,QAAU,IAAVA,OAAA,EAAAA,EAAY4qB,SAAS,UAAW5qB,IAAeoc,GAAWsO,QACpD2gB,EACAC,OAMH,OAAVtrC,QAAU,IAAVA,OAAA,EAAAA,EAAY4qB,SAAS,UAAW5qB,IAAeoc,GAAWsO,UAC3D,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWshB,MAAOvK,GAAepC,QAAjC,OAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,+BACA,kBAAC,GAAD,CACInI,SAAU,SAACxvB,GAAD,OAAWqjC,EAASrjC,GAAO,IACrClE,MAAO8nC,MAMvB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBzwB,QAAS0wB,IAC5B,kBAAC,GAAD,CAAa1wB,QAASstB,GACjB,kBAEL,kBAAC,GAAD,CAAiBttB,QAASqW,EACT6E,SAAU7c,UChI1BizB,GAA2D,WAEpE,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCKCC,GAA+C,WAExD,MAAsB/V,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEA,ECb6B,WAAO,IAAD,IAE7B2I,EAA+BlxB,YAAY+X,IAC3Cxb,EAAW0D,cAEjBob,qBAAU,WAEFtxB,EAAUC,kBAAkBknC,KAC5B30B,EAASF,GAAcN,YAAY,sEACnC+Z,GAAYC,QAAQjG,UAEzB,CAACohB,EAAa30B,IAEjB,IAWM40B,EAAY,WACTpnC,EAAUC,kBAAkBknC,KACG,MAAjB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAa3kC,MAAM1G,MACnB0W,EAASqW,GAAese,IAExBE,IAEJ70B,EAASuZ,GAAYC,QAAQjG,UAS/BshB,EAAc,WAChB70B,EAASqW,GAAiBse,IAC1B30B,EAASuZ,GAAYC,QAAQjG,SAWjC,MAAO,CACHqhB,YACAnE,cApBkB,WAClBmE,IACA50B,EAASuZ,GAAYC,QAAQsC,cAmB7B8W,SAXa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkBknC,GAAc,CAC3C,IAAMG,EAAsBtnC,EAAUG,SAASgnC,GAC/CG,EAAU9kC,MAAMpG,KAAOmZ,EACvB/C,EAASuZ,GAAYC,QAAQsC,UAAUgZ,MAQ3CD,cACAE,YAvCgB,WAChB,IAAMC,EAA4BxnC,EAAUG,SAASgnC,GACrD30B,EAASqW,GAAe2e,KAsCxB5E,WA9Ce,SAAC9mC,GAChB,IAAM0rC,EAA4BxnC,EAAUG,SAASgnC,GACrDK,EAAgBhlC,MAAM1G,KAAOA,EAC7B0W,EAASuZ,GAAYC,QAAQsC,UAAUkZ,KA4CvC1rC,MAAiB,OAAXqrC,QAAW,IAAXA,GAAA,UAAAA,EAAa3kC,aAAb,eAAoB1G,OAAQ,GAClCM,MAAiB,OAAX+qC,QAAW,IAAXA,GAAA,UAAAA,EAAa3kC,aAAb,eAAoBpG,OAAQ,IDvClCqrC,GARA7E,EADJ,EACIA,WACA2E,EAFJ,EAEIA,YACAF,EAHJ,EAGIA,YACAjC,EAJJ,EAIIA,SACAnC,EALJ,EAKIA,cACAmE,EANJ,EAMIA,UACAtrC,EAPJ,EAOIA,KACAM,EARJ,EAQIA,KAGJ,OACI,kBAAC,GAAD,CAAMiC,IAAKA,GACP,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIkd,MAAM,QACN0W,YAAY,aACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/Co9B,OAAQqO,EACRjpC,MAAOxC,EACPq9B,OAAK,MAMjB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBxjB,QAAS0xB,IAC5B,kBAAC,GAAD,CAAoBvH,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAAS,WAClBstB,IACAzE,EAAOngC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiBsX,QAASyxB,OE7D7BM,GAAyD,WAElE,OACI,kBAAC,GAAD,CAAqBpI,KAAM,kBAAC,GAAD,SCiBtBqI,GAA+D,WAExE,MCjBqC,WACrC,IAAMvE,EAAyCntB,YAAY+X,IACrD3K,EAAgCpN,YAAY6P,IAC5CtT,EAAW0D,cACjB,EAA0Cib,mBAAoB,CAACrvB,KAAMxB,EAAe+gB,MAApF,mBAAOumB,EAAP,KAAsBC,EAAtB,KACA,EAA8C1W,mBAAoB,CAACrvB,KAAMxB,EAAe8H,QAAxF,mBAAO0/B,EAAP,KAAwBC,EAAxB,KACA,EAAsB5W,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEAlN,qBAAU,WACFtxB,EAAUC,kBAAkBmjC,KAC5B5wB,EAASF,GAAcN,YAAY,yEACnCQ,EAASuZ,GAAYC,QAAQjG,SAE7Bqd,IACAyE,EAAiBzE,EAAevnC,QAChCksC,EAAmB3E,EAAexnC,aAEvC,CAAC4W,EAAU4wB,IAEd,IAAM4E,EAAsB,SAACzrC,GACpByD,EAAUC,kBAAkB1D,IAC7BiW,EAAS8W,GAAkBM,OAAOrtB,KAmBpC+P,EAAe,WACZtM,EAAUC,kBAAkBmjC,IAAoBpjC,EAAUC,kBAAkBojB,KAChD,KAAzB+f,EAAgBtnC,KAChB0W,EAAS8W,GAAkBtlB,KAAKo/B,IAEhC5wB,EAAS8W,GAAkBvlB,OAAOq/B,MAcxC6E,EAAe,SAACpsC,EAAiByjB,GACnC,QAAapiB,IAAToiB,EAAoB,CACpB,IAAM4oB,EAAsCloC,EAAUG,SAASijC,GAC/DvnC,EAAUqsC,EAAmBrsC,OAASyjB,EAAS4oB,EAAmBtsC,SAAW0jB,EAC7E9M,EAAS8W,GAAkBtlB,KAAKkkC,IAChC11B,EAASuZ,GAAYC,QAAQ+D,kBAAkBmY,MA6FvD,MAAO,CACHpsC,KAAI,OAAEsnC,QAAF,IAAEA,OAAF,EAAEA,EAAgBtnC,KACtB8mC,WAtIe,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM8E,EAAsCloC,EAAUG,SAASijC,GAC/D8E,EAAmBpsC,KAAOA,EAC1BksC,EAAoBE,KAmIxB57B,eACAC,eA9GmB,WACdvM,EAAUC,kBAAkBmjC,IAAoBpjC,EAAUC,kBAAkBojB,KAC7E7Q,EAAS8W,GAAkBvlB,OAAOq/B,IAClC5wB,EAASuZ,GAAYC,QAAQ0D,UAAUrM,MA4G3C8kB,WA9Fe,SAACtsC,EAAiBusC,GACjC,QAAoBlrC,IAAhBkrC,EAA2B,CAC3B,IAAMC,EAAQ,CAACvmC,KAAOxB,EAAuB8nC,IAE7C,OADAvsC,EAASgsC,EAAiBQ,GAASN,EAAmBM,GAC9CD,GACJ,KAAK9nC,EAAe8H,MAGpB,KAAK9H,EAAe+gB,IAChB4mB,EAAapsC,EAAQwsC,MAsFjCC,gBAhFoB,SAACzsC,EAAiB2N,GACtC,GAAIA,EAAM,CACN,IAAM++B,EAAqB,CAACzmC,KAAMxB,EAAe0hB,KAAMnnB,GAAI2O,EAAK3O,IAChEotC,EAAapsC,EAAQ0sC,KA8EzBC,oBA1EwB,SAAC3sC,EAAiBR,GAC1C,GAAIA,EAAU,CACV,IAAMktC,EAAqB,CAACzmC,KAAMxB,EAAe+L,IAAKxR,GAAIQ,EAASR,IACnEotC,EAAapsC,EAAQ0sC,KAwEzB1sC,OAAQ+rC,EACRhsC,SAAUksC,EACVW,eAtEmB,SAAC5sC,GACpB,IAAKmE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAAgCvvB,EAAUG,SAASijC,GACnDsF,EAAwB,IAAIxgC,GAClCwgC,EAASlsC,QAAU4mC,EAAgB5mC,QACnCgW,EAASuZ,GAAYC,QAAQ8D,cAAc4Y,EAAUnZ,EAAc1zB,MAkEvE8sC,mBA9DuB,SAAC9sC,GACxB,IAAKmE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAMwF,EAAgC,IAAI1G,GAC1C0G,EAAapsC,QAAU4mC,EAAgB5mC,QACvC,IAAM0rC,EAAsCloC,EAAUG,SAASijC,GAC/D5wB,EAASuZ,GAAYC,QAAQ+D,kBAAkB6Y,EAAcV,EAAoBrsC,IACjF2iC,EAAOngC,EAAM,KAyDjBA,MACAwqC,MAAK,OAAEzF,QAAF,IAAEA,OAAF,EAAEA,EAAgBvoC,GACvBmP,SAAuB,OAAdo5B,QAAc,IAAdA,OAAA,EAAAA,EAAgB5mC,WAAY,EACrCssC,iBAA+B,OAAd1F,QAAc,IAAdA,OAAA,EAAAA,EAAgB3mC,aAAc,GAC/CssC,OA5IW,WACN/oC,EAAUC,kBAAkBmjC,IAAoBpjC,EAAUC,kBAAkBojB,KAC7E/W,IACAkG,EAASuZ,GAAYC,QAAQ0D,UAAUrM,MA0I3C2lB,cAlCkB,SAACC,GACnB,IAAKjpC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAAgCvvB,EAAUG,SAASijC,GAGzD,GADiD7T,EAAa9yB,WAAWkC,MAAK,SAAAuC,GAAS,OAAIA,EAAUrG,KAAOouC,EAAgBpuC,MACrG,CACnB,IAAIquC,EAAoC3Z,EAAa9yB,WAAWkJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUrG,KAAOouC,EAAgBpuC,MACrHquC,EAAmBxtC,KAAKutC,GACxB1Z,EAAa9yB,WAAaysC,OAE1B3Z,EAAa9yB,WAAWf,KAAKutC,GAEjCjB,EAAoBzY,KAuBxB4Z,gBA3CoB,SAACC,GACrB,IAAKppC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAAgCvvB,EAAUG,SAASijC,GACzD7T,EAAa9yB,WAAa8yB,EAAa9yB,WAAWkJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUrG,KAAOuuC,KACvFpB,EAAoBzY,KAwCxB8Z,gBA1DoB,WACpB,IAAKrpC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAAgCvvB,EAAUG,SAASijC,GACzD7T,EAAa9yB,WAAWf,KAAK,CACzBiB,WAAY4yB,EAAa10B,GACzBA,GAAI00B,EAAa9yB,WAAWyF,OAC5BvG,SAAU,EACVX,YAAa,EACbD,QAAS,IAEbitC,EAAoBzY,MD5FxB+Z,GAlBAnB,EADJ,EACIA,WACAn+B,EAFJ,EAEIA,QACA44B,EAHJ,EAGIA,WACA+F,EAJJ,EAIIA,mBACA7sC,EALJ,EAKIA,KACAyQ,EANJ,EAMIA,eACA3Q,EAPJ,EAOIA,SACAC,EARJ,EAQIA,OAEA4sC,EAVJ,EAUIA,eACAI,EAXJ,EAWIA,MACAL,EAZJ,EAYIA,oBACAF,EAbJ,EAaIA,gBACAQ,EAdJ,EAcIA,gBACAE,EAfJ,EAeIA,cACAG,EAhBJ,EAgBIA,gBACAE,EAjBJ,EAiBIA,gBACAN,EAlBJ,EAkBIA,OAqDJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,+CAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7DU,yBA8DV,kBAAC,GAAD,CACIxtB,MAAM,QACN0W,YAAY,0BACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzEgB,eA6EpB,kBAAC,GAAD,KACI,2BAAOzjB,UAAW,SACX0F,MAAO,CAACvC,MAAO,OAAQwoB,UAAW,SAErC,+BACA,4BACI,wBAAIjmB,MAAO,CAACmuB,UAAW,WAAvB,SACA,wBAAInuB,MAAO,CAACmuB,UAAW,WAAvB,iBACA,wBAAI7zB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAAS0zB,OAG7D,2BAAOjuB,MAAO,CAACouB,UAAW,SACzBV,EAAgBpuC,KAjFD,SAACwG,GACjC,IAAIuoC,EAA6BzpC,EAAUG,SAASe,GAEpD,OACI,wBAAI7C,IAAKorC,EAAc5uC,IACnB,4BACI,yBAAKugB,MAAO,CAACsuB,QAAS,OAAQ3C,eAAgB,kBAC1C,kBAAC,GAAD,CACI/U,SAAU,SAACxvB,GACPinC,EAAc9tC,QAAU6G,EAAQA,EAAMA,MAAM3H,IAAM,EAClDmuC,EAAcS,IAElBxX,YAAa,kBACb3zB,MAAOmrC,EAAc9tC,UAEzB,kBAAC,GAAD,CACIq2B,SAAU,SAACyU,GACFzmC,EAAUC,kBAAkBwmC,KAC7BgD,EAAc1uC,OAAS0rC,EAAiB1rC,OACxC0uC,EAAczuC,WAAayrC,EAAiB7pC,WAC5CosC,EAAcS,KAGtBxX,YAAa,2BACb3zB,MAAOT,KAAKG,UAAU,CAClBjD,OAAQ0uC,EAAe1uC,OACvB6B,WAAY6sC,EAAezuC,gBAIZ,IAAtByuC,EAAc5uC,IAAa,kBAAC,GAAD,CAAmB8a,QAAS,WACpDwzB,EAAgBM,EAAc5uC,KAEa62B,WAAS,aAqDhE,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAhGgB,uBAiGhB,kBAAC,GAAD,CACIM,SAAU,SAAC2X,GACPxB,GAAW,EAAMwB,IAErBrrC,MAAOzC,EAASA,EAAOiG,KAAOxB,EAAe+gB,OAIpDxlB,EAAQiG,OAASxB,EAAe0hB,MAC7B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA3GQ,oBA4GR,kBAAC,GAAD,CACIgQ,SAAU,SAACxoB,GAAD,OAAU8+B,GAAgB,EAAM9+B,IAC1ClL,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAASxB,EAAe0hB,KAAOnmB,EAAOhB,GAAK,EAC1DmP,QAASA,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KApHQ,oBAqHR,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM8yB,GAAe,QAKzD5sC,EAAQiG,OAASxB,EAAe+L,KAC7B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA5HY,wBA6HZ,kBAAC,GAAD,CACI2lB,SAAU,SAACtnB,GAAD,OAAU89B,GAAoB,EAAM99B,IAC9CpM,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAASxB,EAAe+L,IAAMxQ,EAAOhB,GAAK,EACzD64B,QAASmV,EACT7+B,QAASA,KAIjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAvIY,wBAwIZ,kBAAC,GAAD,CAAgB2L,QAAS,kBAAMgzB,GAAmB,QAK9D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAnJkB,wBAoJlB,kBAAC,GAAD,CACI3W,SAAU,SAAC2X,GACPxB,GAAW,EAAOwB,IAEtBrrC,MAAO1C,EAAWA,EAASkG,KAAOxB,EAAe+gB,OAKxDzlB,EAAUkG,OAASxB,EAAe0hB,MAC/B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAhKQ,oBAiKR,kBAAC,GAAD,CACIgQ,SAAU,SAACxoB,GAAD,OAAU8+B,GAAgB,EAAO9+B,IAC3ClL,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAASxB,EAAe0hB,KAAOnmB,EAAOhB,GAAK,EAC1DmP,QAASA,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzKQ,oBA0KR,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM8yB,GAAe,QAKzD7sC,EAAUkG,OAASxB,EAAe+L,KAC/B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjLY,wBAkLZ,kBAAC,GAAD,CACI2lB,SAAU,SAACtnB,GAAD,OAAU89B,GAAoB,EAAO99B,IAC/CpM,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAASxB,EAAe+L,IAAMxQ,EAAOhB,GAAK,EACzD64B,QAASmV,EACT7+B,QAASA,KAIjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KA5LY,wBA6LZ,kBAAC,GAAD,CAAgB2L,QAAS,kBAAMgzB,GAAmB,SAOlE,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBhzB,QAASpJ,IAC5B,kBAAC,GAAD,CAAiBoJ,QAASozB,QE1PjCa,GAAyE,WAElF,OAEI,kBAAC,GAAD,CAAqBtK,KAAM,kBAAC,GAAD,SCctBuK,GAAuD,WAEhE,MCbiC,WACjC,IAAMvG,EAAsCrtB,YAAY+X,IAClD3K,EAAgCpN,YAAY6P,IAC5CtT,EAAW0D,cACjB,EAAsCib,mBAAoB,CAACrvB,KAAMxB,EAAe0hB,KAAMnnB,IAAK,IAA3F,mBAAOivC,EAAP,KAAoBC,EAApB,KAEAzY,qBAAU,WACFtxB,EAAUC,kBAAkBqjC,KAC5B9wB,EAASF,GAAcN,YAAY,2EACnCQ,EAASuZ,GAAYC,QAAQjG,SAE7Bud,GACAyG,EAAezG,EAAgBzhC,QAEpC,CAAC2Q,EAAU8wB,IAEd,IA+BM2E,EAAe,SAAC3oB,GAClB,QAAapiB,IAAToiB,IAAuBtf,EAAUC,kBAAkBqjC,GAAkB,CACrE,IAAM0G,EAA6BhqC,EAAUG,SAASmjC,GACtD0G,EAAcnoC,KAAOyd,EACrB9M,EAAS2W,GAAcnlB,KAAKgmC,IAC5Bx3B,EAASuZ,GAAYC,QAAQ8D,cAAcka,MAoFnD,MAAO,CACHzuB,MAAO,YAA0B,OAAb8H,QAAa,IAAbA,OAAA,EAAAA,EAAevnB,OAAQ,IAAM,QAAwB,OAAfwnC,QAAe,IAAfA,OAAA,EAAAA,EAAiBxnC,OAAQ,IACnFA,KAAMwnC,EAAkBA,EAAgBxnC,KAAO,GAC/C8mC,WA3He,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBqjC,GAAkB,CAC/C,IAAM2G,EAA6BjqC,EAAUG,SAASmjC,GACtD2G,EAAcnuC,KAAOA,EACrB0W,EAAS2W,GAAcnlB,KAAKimC,IAC5Bz3B,EAASuZ,GAAYC,QAAQ8D,cAAcma,MAuH/Cp6B,cAnHkB,SAACkzB,GACd/iC,EAAUC,kBAAkBqjC,IAAqBtjC,EAAUC,kBAAkBojB,KAChD,KAA1BigB,EAAiBxnC,KACjB0W,EAAS2W,GAAcnlB,KAAKs/B,IAE5B9wB,EAAS2W,GAAcplB,OAAOu/B,IAG9B9wB,EADAuwB,GAAuB,SAAZA,EACFhX,GAAYC,QAAQjG,OAEpBgG,GAAYC,QAAQ0D,UAAUrM,MA0G/C6mB,gBArGoB,WACflqC,EAAUC,kBAAkBqjC,IAAqBtjC,EAAUC,kBAAkBojB,KAC9E7Q,EAAS2W,GAAcplB,OAAOu/B,IAC9B9wB,EAASuZ,GAAYC,QAAQ0D,UAAUrM,MAmG3C/D,KAAMwqB,EACNK,UAAuB,OAAf7G,QAAe,IAAfA,OAAA,EAAAA,EAAiBvnC,OAAOunC,EAAgBvnC,KAChDmN,OAAM,OAAEo6B,QAAF,IAAEA,OAAF,EAAEA,EAAiBzoC,GACzBuvC,iBAAgB,OAAE9G,QAAF,IAAEA,OAAF,EAAEA,EAAiBn7B,YACnCge,gBAAe,OAAEmd,QAAF,IAAEA,OAAF,EAAEA,EAAiBtnC,WAClCquC,aA5CiB,SAAC9hC,GAClB,IAAKvI,EAAUC,kBAAkBqjC,GAAkB,CAC/C,IAAMgH,EAAmCtqC,EAAUG,SAASmjC,GAExDgH,EAAoBniC,YADpBI,EACkCA,EAAU1N,IAET,EAEvC2X,EAAS2W,GAAcnlB,KAAKsmC,IAC5B93B,EAASuZ,GAAYC,QAAQ8D,cAAcwa,MAoC/CC,iBAhCqB,SAACzhC,GACtB,IAAK9I,EAAUC,kBAAkBqjC,GAAkB,CAC/C,IAAMgH,EAAmCtqC,EAAUG,SAASmjC,GAExDgH,EAAoBtuC,WADpB8M,EACiCA,EAASjO,IAER,EAEtC2X,EAAS2W,GAAcnlB,KAAKsmC,IAC5B93B,EAASuZ,GAAYC,QAAQ8D,cAAcwa,MAwB/C7nB,OAAM,OAAE6gB,QAAF,IAAEA,OAAF,EAAEA,EAAiBzoC,GACzBmP,SAAwB,OAAfs5B,QAAe,IAAfA,OAAA,EAAAA,EAAiB9mC,WAAY,EACtC2rC,WA/Fe,SAACC,GAChB,QAAoBlrC,IAAhBkrC,EAA2B,CAC3B,IAAMC,EAAQ,CAACvmC,KAAOxB,EAAuB8nC,IAE7C,OADA2B,EAAe1B,GACPD,GACJ,KAAK9nC,EAAe8H,MAGpB,KAAK9H,EAAe+gB,IAChB4mB,EAAaI,MAuFzBmC,YAjFgB,SAAChhC,GACjB,GAAIA,EAAM,CACN,IAAM++B,EAAqB,CAACzmC,KAAMxB,EAAe0hB,KAAMnnB,GAAI2O,EAAK3O,IAChEotC,EAAaM,KA+EjBkC,gBA3EoB,SAACpvC,GACrB,GAAIA,EAAU,CACV,IAAMktC,EAAqB,CAACzmC,KAAMxB,EAAe+L,IAAKxR,GAAIQ,EAASR,IACnEotC,EAAaM,KAyEjBmC,mBArEuB,WACvB,IAAK1qC,EAAUC,kBAAkBqjC,GAAkB,CAC/C,IAAMgH,EAAmCtqC,EAAUG,SAASmjC,GACtDqH,EAA4B,IAAIziC,GACtCyiC,EAAanuC,QAAU8mC,EAAiB9mC,QACxCgW,EAASuZ,GAAYC,QAAQ8D,cAAc6a,EAAcL,MAiE7D3B,mBA7DuB,WACvB,IAAK3oC,EAAUC,kBAAkBqjC,GAAkB,CAC/C,IAAMsH,EAAkC5qC,EAAUG,SAASmjC,GACrDsF,EAAgC,IAAI1G,GAC1C0G,EAAapsC,QAAU8mC,EAAiB9mC,QACxCgW,EAASuZ,GAAYC,QAAQ+D,kBAAkB6Y,EAAcgC,MAyDjEn+B,QA3BY,WACPzM,EAAUC,kBAAkBqjC,KAC7B9wB,EAASsX,GAAkBwZ,EAAiB9mC,QAAS8mC,EAAiBzoC,IAAI,IAC1E2X,EAASuZ,GAAYC,QAAQ8D,cAAc3G,GAAcxqB,KAAK2kC,EAAiBzoC,QAyBnFA,IAAmB,OAAfyoC,QAAe,IAAfA,OAAA,EAAAA,EAAiBzoC,MAAO,GD7H5BgwC,GAlBA/uC,EADJ,EACIA,KACA6sC,EAFJ,EAEIA,mBACA/F,EAHJ,EAGIA,WACA54B,EAJJ,EAIIA,QACA0gC,EALJ,EAKIA,mBACAN,EANJ,EAMIA,iBACAjkB,EAPJ,EAOIA,gBACA+jB,EARJ,EAQIA,gBACA5qB,EATJ,EASIA,KACA6oB,EAVJ,EAUIA,WACAgC,EAXJ,EAWIA,OACA1nB,EAZJ,EAYIA,OACA5S,EAbJ,EAaIA,cACAw6B,EAdJ,EAcIA,aACAI,EAfJ,EAeIA,gBACAD,EAhBJ,EAgBIA,YACA/9B,EAjBJ,EAiBIA,QACA89B,EAlBJ,EAkBIA,iBAWJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,2CAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIhvB,MAAM,QACN0W,YAAY,qBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/Be,qBAgCf,kBAAC,GAAD,CACInH,SAAU,SAACzpB,GAAD,OAAe8hC,EAAa9hC,IACtC0pB,YAAY,wBACZ3zB,MAAO8rC,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzCc,mBA0Cd,kBAAC,GAAD,CACIpY,SAAU,SAAC8Y,GAAD,OAAcP,EAAiBO,IACzCxsC,MAAO6nB,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAlDc,2BAmDd,kBAAC,GAAD,CACI6L,SAAUmW,EACV7pC,MAAOghB,EAAOA,EAAKxd,KAAOxB,EAAe8H,SAIhDkX,EAAKxd,OAASxB,EAAe0hB,MAC1B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7DQ,oBA8DR,kBAAC,GAAD,CAAgBrM,QAAS+0B,KAE7B,kBAAC,GAAD,KACI,kBAAC,GAAD,KAhEQ,oBAiER,kBAAC,GAAD,CACI1Y,SAAUwY,EACVlsC,OAAW,OAAJghB,QAAI,IAAJA,OAAA,EAAAA,EAAMxd,QAASxB,EAAe0hB,KAAO1C,EAAKzkB,GAAK,EACtDmP,QAASA,EACT0pB,QAASjR,MAKxBnD,EAAKxd,OAASxB,EAAe+L,KAC1B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA9EY,wBA+EZ,kBAAC,GAAD,CAAgBsJ,QAASgzB,KAE7B,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjFY,wBAkFZ,kBAAC,GAAD,CACI3W,SAAU,SAACtnB,GAAD,OAAU+/B,EAAgB//B,IACpCpM,OAAW,OAAJghB,QAAI,IAAJA,OAAA,EAAAA,EAAMxd,QAASxB,EAAe+L,IAAMiT,EAAKzkB,GAAK,EACrDmP,QAASA,OAQ7B,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB2L,QAASu0B,EACTvZ,SAAUwZ,IAE7B,kBAAC,GAAD,CAAax0B,QAASlJ,EACTkkB,SAAUwZ,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiBx0B,QAAS9F,OEvJ7Bk7B,GAAiE,WAE1E,OACI,kBAAC,GAAD,CAAqBzL,KAAM,kBAAC,GAAD,SCEtB0L,I,MAAiD,SAAC31B,GAC3D,IAAO41B,EAAsF51B,EAAtF41B,aAAcC,EAAwE71B,EAAxE61B,iBAAkBtI,EAAsDvtB,EAAtDutB,WAAYuI,EAA0C91B,EAA1C81B,oBAAqBC,EAAqB/1B,EAArB+1B,kBAsCxE,OACI,2BAAO11B,UAAW,gBAEd,2BAAOA,UAAU,6CAEjB,wBAAIA,UAAU,oCACV,wBAAIA,UAAU,oBAAd,QACA,wBAAIA,UAAU,oBAAd,WACA,wBAAIA,UAAW,oBAAoB,kBAAC,GAAD,CAAgBC,QAASu1B,OAKhE,2BAAOx1B,UAAU,QAChBu1B,EAAavwC,KAAI,SAACuP,EAAOrP,GAAR,OAlDC,SAACqP,EAAgBrP,GAExC,IAAMywC,EAAuC,KAAhBphC,EAAMsR,MAAe,yCAA2C,GAE7F,OACI,wBAAI7F,UAAU,mCACVrX,IAAKzD,GAEL,wBAAI8a,UAAW21B,GACX,kBAAC,GAAD,CACIpS,iBAAkB,SAACn9B,GAAD,OAAU8mC,EAAW9mC,EAAMmO,EAAMpP,KACnDo3B,YAAY,aACZ3zB,MAAO2L,EAAMsR,MACb4d,OAAK,KAGb,wBAAIzjB,UAAU,oBAEV,kBAAC,GAAD,CACIA,UAAWzL,EAAMm4B,QAAU,UAAY,GACvCzsB,QAAS,kBAAMy1B,EAAkBnhC,GAAO,KAF5C,QAIA,kBAAC,GAAD,CACIyL,UAAWzL,EAAMm4B,QAAU,GAAK,UAChCzsB,QAAS,kBAAMy1B,EAAkBnhC,GAAO,KAF5C,UAKJ,wBAAIyL,UAAU,oBACV,kBAAC,GAAD,CAAmBC,QAAS,kBAAMw1B,EAAoBlhC,EAAMpP,KACzC62B,WAAS,MAqBA4Z,CAAmBrhC,EAAOrP,UCjD7D2wC,GAAyD,WAElE,MAA6DhJ,KAAtDG,EAAP,EAAOA,UAAWhT,EAAlB,EAAkBA,UAAW8T,EAA7B,EAA6BA,YAAaE,EAA1C,EAA0CA,YAAa7oC,EAAvD,EAAuDA,GAEjDR,EAA8B4b,YAAY8H,GAA8CljB,IAwB9F,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAYowC,aAAc5wC,EACd6wC,iBAAkB1H,EAClB2H,oBAAqBzH,EACrB0H,kBA5BL,SAACI,EAAwBC,GACxC,IAAMC,EAA6B1rC,EAAUG,SAASqrC,GACtDE,EAAkBtJ,QAAUqJ,EAC5B/I,EAAUgJ,IA0BU9I,WAvBL,SAAC9mC,EAAc6oC,GAC9B,IAAMgH,EAA8CtxC,EAAYsE,MAAK,SAAAsL,GAAK,OAAIA,EAAMpP,KAAO8pC,KAC3F,GAAIgH,EAAmB,CACnB,IAAMC,EAAsC5rC,EAAUG,SAASwrC,GAC/DC,EAAsBrwB,MAAQzf,EAC9B4mC,EAAUkJ,QAuBV,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBj2B,QA1CN,WACdtb,EAAYsG,MAAK,SAAAsJ,GAAK,MAAoB,KAAhBA,EAAMsR,WACjClhB,EAAYmB,QAAQknC,GACpBhT,WCnBCmc,GAA8D,WAEvE,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCQCC,GAA6C,WAElD,MAAsB3a,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEA,ECfwB,WAC5B,IAAMuN,EAA6B91B,YAAY+X,IACzCxb,EAAW0D,cAEjBob,qBAAU,WAEa,OAAfya,QAAsC7uC,IAAf6uC,IACvBv5B,EAASF,GAAcN,YAAY,0DACnCQ,EAASuZ,GAAYC,QAAQjG,YAIrC,IAmBMlmB,EAAW,WACb,GAA8B,MAAhB,OAAVksC,QAAU,IAAVA,OAAA,EAAAA,EAAY9vC,KAAKH,MAAa,CAC9B,IAAM8yB,EAAoB5uB,EAAUG,SAAS4rC,GAC7Cnd,EAAS3yB,KAAKI,UAAYuyB,EAAS3yB,KAAKI,UAAUsJ,QAAO,SAAArJ,GAAQ,MAAsB,KAAlBA,EAASR,QAC9E0W,EAASiY,GAAcmE,SAEvBod,IAEJx5B,EAASuZ,GAAYC,QAAQjG,SAG3BimB,EAAa,WACVhsC,EAAUC,kBAAkB8rC,KAC7Bv5B,EAASiY,GAAgBshB,IACzBv5B,EAASuZ,GAAYC,QAAQjG,UAkCrC,MAAO,CACHxK,MAAO,YAAuB,OAAVwwB,QAAU,IAAVA,OAAA,EAAAA,EAAY9vC,KAAKH,OAAQ,IAC7CA,KAAI,OAAEiwC,QAAF,IAAEA,OAAF,EAAEA,EAAY9vC,KAAKH,KACvB8mC,WAtEmB,SAAC9mC,GACpB,IAAMmwC,EAA0BjsC,EAAUG,SAAS4rC,GACnDE,EAAehwC,KAAKH,KAAOA,EAC3B0W,EAASuZ,GAAYC,QAAQyC,SAASwd,KAoEtCpsC,WACAmsC,aACAE,WA3De,WACf,IAAMD,EAA0BjsC,EAAUG,SAAS4rC,GACnDv5B,EAASiY,GAAcwhB,KA0DvBhJ,cArCkB,WAClBpjC,IACA2S,EAASuZ,GAAYC,QAAQyC,aAoC7BpyB,WAAqB,OAAV0vC,QAAU,IAAVA,OAAA,EAAAA,EAAY9vC,KAAKI,WAAY0vC,EAAW9vC,KAAKI,UAAY,GACpExB,IAAc,OAAVkxC,QAAU,IAAVA,OAAA,EAAAA,EAAY9vC,KAAKpB,MAAO,EAC5BuB,KAAM2vC,EAAaA,EAAW9vC,KAAKG,KAAO,GAC1CgpC,SAnCa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkB8rC,IAAwB,KAATx2B,EAAa,CACzD,IAAM02B,EAA0BjsC,EAAUG,SAAS4rC,GACnDE,EAAehwC,KAAKG,KAAOmZ,EAC3B/C,EAASuZ,GAAYC,QAAQyC,SAASwd,MAgC1CE,mBAzEuB,SAACrwC,EAAcswC,GACtC,GAAmB,OAAfL,GAAyC,OAAlBK,EAAwB,CAC/C,IAAMxd,EAAoB5uB,EAAUG,SAAS4rC,GAC7Cnd,EAAS3yB,KAAKI,UAAU+vC,GAAetwC,KAAOA,EAC9C0W,EAASuZ,GAAYC,QAAQyC,SAASG,MAsE1Cyd,eA7BmB,WACnB,IAAKrsC,EAAUC,kBAAkB8rC,GAAa,CAC1C,IAAMnd,EAAoB5uB,EAAUG,SAAS4rC,GAC7Cnd,EAAS3yB,KAAKI,UAAUX,KAAK,CAACb,IAAK,EAAGiB,KAAM,KAC5C0W,EAASuZ,GAAYC,QAAQyC,SAASG,MA0B1C0d,eAtBmB,SAACC,GACpB,IAAKvsC,EAAUC,kBAAkB8rC,GAAa,CAC1C,IAAMnd,EAAoB5uB,EAAUG,SAAS4rC,GAC7Cnd,EAAS3yB,KAAKI,UAAUmwC,OAAOD,EAAe,GAC9C/5B,EAASuZ,GAAYC,QAAQyC,SAASG,OD/CtC6d,GAZA3wC,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACA/iC,EAHJ,EAGIA,SACAmsC,EAJJ,EAIIA,WACAE,EALJ,EAKIA,WACAjJ,EANJ,EAMIA,cACA5mC,EAPJ,EAOIA,UACAD,EARJ,EAQIA,KACAgpC,EATJ,EASIA,SACA+G,EAVJ,EAUIA,mBACAE,EAXJ,EAWIA,eACAC,EAZJ,EAYIA,eAyBJ,OACI,kBAAC,GAAD,CAAMjuC,IAAKA,GAEP,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAGI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIkd,MAAM,QACN0W,YAAY,YACZgH,iBAAkB2J,EAClBtkC,MAAOxC,EACPq9B,OAAK,EACLD,OAAQgT,KAKhB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,2BAAOx2B,UAAW,SACX0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,wBAAIuC,MAAO,CAACmuB,UAAW,WAAvB,aACA,wBAAI7zB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAAS02B,OAG7D,+BACChwC,EAAU3B,KA3DL,SAAC4B,EAA0B1B,GACjD,OAAQ,wBAAIyD,IAAKzD,GACT,4BACI,yBAAKwgB,MAAO,CAACsuB,QAAS,OAAQ3C,eAAgB,gBAAiB2F,WAAY,WACvE,kBAAC,GAAD,CACIzT,iBAAkB,SAAC0T,GAAD,OAAaR,EAAmBQ,EAAS/xC,IAC3D0D,MAAOhC,EAASR,KAChBo9B,OAAQgT,IAED,IAAVtxC,GACD,6BACI,kBAAC,GAAD,CAAmB+a,QAAS,kBAAM22B,EAAe1xC,IAC9B82B,WAAS,eAsD5C,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB/b,QAASq2B,IAC5B,kBAAC,GAAD,CAAoBlM,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAAS,WAClBstB,IACAzE,EAAOngC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiBsX,QAAS9V,OE9GjC+sC,GAAuD,WAEhE,OACI,kBAAC,GAAD,CAAqBtN,KAAM,kBAAC,GAAD,SCStBuN,GAA6D,WAEtE,MAAsB1b,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEA,ECboC,WACpC,IAAM3kC,EAAmBoc,YAAY8H,IAC/B+uB,EAAwC72B,YAAY+X,IACpDxb,EAAW0D,cACjB,EAAsBib,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEAlN,qBAAU,WAEFtxB,EAAUC,kBAAkB6sC,KAC5Bt6B,EAASuZ,GAAYC,QAAQjG,QAC7BvT,EAASF,GAAcN,YAAY,qEAExC,CAAC86B,EAAgBt6B,IAEpB,IAyCMu6B,EAAiB,WACnBv6B,EAAS6Z,GAAoBygB,IAC7Bt6B,EAASuZ,GAAYC,QAAQjG,SAa3BinB,EAAmB7uC,OAAOC,QAAQ8W,IAAWxa,KAAI,WAAeE,GAAf,6BAA0B,CAC7EyD,IAAKzD,EACL2a,KAFmD,KAGnDjX,MAHmD,KAGtCS,eAGXkuC,EAAc9uC,OAAOC,QAAQ+W,IAAcza,KAAI,WAAeE,GAAf,6BAA0B,CAC3EyD,IAAKzD,EACL2a,KAFiD,KAGjDjX,MAHiD,KAGpCS,eAmBjB,MAAO,CACHwc,MAAO,kBACP/E,OAAM,OAAEs2B,QAAF,IAAEA,OAAF,EAAEA,EAAgBt2B,OACxBC,OAAM,OAAEq2B,QAAF,IAAEA,OAAF,EAAEA,EAAgBr2B,OACxBy2B,OAAoC,KAAf,OAAdJ,QAAc,IAAdA,OAAA,EAAAA,EAAgBjsC,UAAhB,OAA6CisC,QAA7C,IAA6CA,OAAZ5vC,EAAY4vC,EAAgBjsC,QAAQ9B,WAC5EouC,OAAoC,KAAf,OAAdL,QAAc,IAAdA,OAAA,EAAAA,EAAgBhsC,UAAhB,OAA6CgsC,QAA7C,IAA6CA,OAAZ5vC,EAAY4vC,EAAgBhsC,QAAQ/B,WAC5E2X,WAAU,OAAEo2B,QAAF,IAAEA,OAAF,EAAEA,EAAgBp2B,WAC5BE,WAAU,OAAEk2B,QAAF,IAAEA,OAAF,EAAEA,EAAgBl2B,WAC5BE,MAAK,OAAEg2B,QAAF,IAAEA,OAAF,EAAEA,EAAgBh2B,MACvBE,MAAK,OAAE81B,QAAF,IAAEA,OAAF,EAAEA,EAAgB91B,MACvBo2B,SAhFa,SAAC7xB,EAAe8xB,GAC7B,IAAMC,EAA+BttC,EAAUG,SAAS2sC,GACxDO,EAASC,EAAa72B,OAAS8E,EAAU+xB,EAAa92B,OAAS+E,EAC/D/I,EAASuZ,GAAYC,QAAQgD,aAAase,KA8E1CC,QArEY,SAACC,EAA4BH,GACzC,IAAMC,EAA+BttC,EAAUG,SAAS2sC,GACxDO,EAASC,EAAat2B,MAAQw2B,EAAiBF,EAAax2B,MAAQ02B,EACpEh7B,EAASuZ,GAAYC,QAAQgD,aAAase,KAmE1CG,aA5EiB,SAACj1B,EAAsB60B,GACxC,IAAMC,EAA+BttC,EAAUG,SAAS2sC,GACxDO,EAASC,EAAa12B,WAAa4B,EAAc80B,EAAa52B,WAAa8B,EAC3EhG,EAASuZ,GAAYC,QAAQgD,aAAase,KA0E1CpH,QAzFY,SAACzlC,EAAgB4sC,GAC7B,IAAMC,EAA+BttC,EAAUG,SAAS2sC,GACxDO,EAASC,EAAaxsC,QAAUL,EAAW6sC,EAAazsC,QAAUJ,EAClE+R,EAASuZ,GAAYC,QAAQgD,aAAase,KAuF1CI,aAlEiB,YACgB,KAAf,OAAdZ,QAAc,IAAdA,OAAA,EAAAA,EAAgBjsC,WAA+C,KAAf,OAAdisC,QAAc,IAAdA,OAAA,EAAAA,EAAgBhsC,SAClD0R,EAAS6Z,GAAkBygB,IAE3BC,IAEJv6B,EAASuZ,GAAYC,QAAQjG,SA6D7BgnB,iBACAY,OAAQ,kBAAMn7B,EAASuZ,GAAYC,QAAQjG,SAC3C6nB,YAAa/zC,EAAMa,KArGF,SAACuB,GAClB,MAAO,CACHoC,IAAKpC,EAAKA,KAAKpB,GACf0a,KAAMtZ,EAAKA,KAAKH,KAChBwC,MAAOrC,EAAKA,KAAKpB,GAAGkE,eAkGxBiuC,mBACAC,cACAY,cApCkB,WAClB,IAAIxtC,GAAiB,EAIrB,OAHKL,EAAUC,kBAAkB6sC,KAC7BzsC,GAAqC,IAA7BysC,EAAgBjsC,UAA+C,IAA7BisC,EAAgBhsC,SAEvDT,GAgCPhC,MACA4kC,cAvDkB,WAClBzE,EAAOngC,EAAM,GACbmU,EAASuZ,GAAYC,QAAQgD,iBAsD7B8e,eA7DmB,WACnB,IAAMC,EAAqC/tC,EAAUG,SAAS2sC,GAC9Dt6B,EAAS6Z,GAAkB0hB,KA4D3B3xC,KAAM0wC,EAAiBA,EAAe1wC,KAAO,GAC7CgpC,SAjCa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkB6sC,IAA4B,KAATv3B,EAAa,CAC7D,IAAM+3B,EAA+BttC,EAAUG,SAAS2sC,GACxDQ,EAAalxC,KAAOmZ,EACpB/C,EAASuZ,GAAYC,QAAQgD,aAAase,ODlE9CU,GAdAd,EADJ,EACIA,MACAC,EAFJ,EAEIA,MACAz2B,EAHJ,EAGIA,WACAE,EAJJ,EAIIA,WACA62B,EALJ,EAKIA,aACAvH,EANJ,EAMIA,QACAwH,EAPJ,EAOIA,aACAX,EARJ,EAQIA,eACAa,EATJ,EASIA,YACAZ,EAVJ,EAUIA,iBACA/J,EAXJ,EAWIA,cACA6K,EAZJ,EAYIA,eACA1xC,EAbJ,EAaIA,KACAgpC,EAdJ,EAcIA,SAGJ,OACI,kBAAC,GAAD,CAAM/mC,IAAKA,GACP,kBAAC,GAAD,KACI,8CAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWyoC,MAAOvK,GAAepC,QAAjC,SAGJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIlI,YAAY,iBACZF,cAAe6b,EACf5b,SAAU,SAAC/1B,GACPiqC,EAAQlnC,OAAO/C,EAAKqC,QACpBwvC,KAEJxvC,MAAO4uC,IAEX,kBAAC,GAAD,CACIjb,YAAY,oBACZF,cAAeib,EACfhb,SAAU,SAAC/1B,GACPwxC,EAAav4B,GAAUjZ,EAAKqC,QAC5BwvC,KAEJxvC,MAAOoY,KAIf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWowB,MAAOvK,GAAepC,QAAjC,OAEJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIlI,YAAY,iBACZF,cAAe6b,EACf5b,SAAU,SAAC/1B,GACPiqC,EAAQlnC,OAAO/C,EAAKqC,QAAQ,GAC5BwvC,KAEJxvC,MAAO6uC,IAEX,kBAAC,GAAD,CACIlb,YAAY,oBACZF,cAAeib,EACfhb,SAAU,SAAC/1B,GACPwxC,EAAav4B,GAAUjZ,EAAKqC,QAAqB,GACjDwvC,KAEJxvC,MAAOsY,KAGf,kBAAC,GAAD,OAKJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBjB,QAASo3B,IAC5B,kBAAC,GAAD,CAAoBjN,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAAS,WAClBstB,IACAzE,EAAOngC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiBsX,QAAS+3B,OE5G7BO,GAAuE,WAEhF,OACI,kBAAC,GAAD,CAAqB3O,KAAM,kBAAC,GAAD,SCTtB4O,GAAb,oDACI,aAAuG,IAAD,EAAnFvyC,EAAmF,wDAAxE,EAAUZ,EAA8D,wDAApD,EAAUC,EAA0C,wDAA5B,EAAUmN,EAAkB,wDAAH,EAAG,4BAClG,gBADexM,UAAmF,EAA9DZ,SAA8D,EAA1CC,aAA0C,EAAlBmN,cAAkB,EAD1G,UAAgCF,ICqBnBkmC,GAAuD,WAEhE,MCdiC,WACjC,IAAMC,EAAuCn4B,YAAY+X,IACnDxb,EAAW0D,cACjB,EAAsCib,mBAA0B,MAAhE,mBAAOgW,EAAP,KAAoBve,EAApB,KAEA0I,qBAAU,WAEFtxB,EAAUC,kBAAkBmuC,KAC5B57B,EAASF,GAAcN,YAAY,oEACnCQ,EAASuZ,GAAYC,QAAQjG,WAElC,CAACqoB,EAAiB57B,IAErB,IAsBMpE,EAAkB,WACpBoE,EAAS2X,GAAcpmB,OAAOqqC,IAC9B57B,EAASuZ,GAAYC,QAAQjG,SAyEjC,MAAO,CACHxK,MAAO,YAA4B,OAAf6yB,QAAe,IAAfA,OAAA,EAAAA,EAAiB7lC,UAAUzM,OAAQ,IACvDA,KAAI,OAAEsyC,QAAF,IAAEA,OAAF,EAAEA,EAAiB7lC,UAAUzM,KACjC8mC,WApGe,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBmuC,GAAkB,CAC/C,IAAMC,EAAoCruC,EAAUG,SAASiuC,GAC7DC,EAAoB9lC,UAAUzM,KAAOA,EACrC0W,EAAS2X,GAAcP,OAAOykB,MAiGlCvgC,cA7FkB,WAClB,IAAK9N,EAAUC,kBAAkBmuC,GAE7B,GAAwC,KAApCA,EAAiB7lC,UAAUzM,KAAa,CACxC,IAAMwyC,EAA8BtuC,EAAUG,SAASiuC,GACvDE,EAAev0C,UAAYu0C,EAAev0C,UAAW4L,QAAO,SAAAtE,GAAQ,OAAyB,IAArBA,EAAStG,SAA0C,IAAzBsG,EAASrG,aAA2C,IAAtBqG,EAAS1F,WACzI6W,EAAS2X,GAAcnmB,KAAKsqC,SAE5BlgC,IAGRoE,EAASuZ,GAAYC,QAAQjG,SAmF7B3X,kBACAkgC,cAnEkB,WAClB,IAAMA,EAA8BtuC,EAAUG,SAASiuC,GACvDE,EAAc/lC,UAAUzM,MAAsB,OAAfsyC,QAAe,IAAfA,OAAA,EAAAA,EAAiB7lC,UAAUzM,MAAO,QACjEwyC,EAAc/lC,UAAU1N,IAAM,EAC9ByzC,EAAcv0C,UAAUyB,SAAQ,SAAC6F,GAC7BA,EAASxG,IAAM,EACfwG,EAAS8G,aAAe,KAE5BqK,EAASuZ,GAAYC,QAAQmD,cAAcmf,EAAc/lC,UAAU1N,MA4DnE+tB,iBACA2lB,cAA6B,OAAfH,QAAe,IAAfA,OAAA,EAAAA,EAAiBr0C,WAAYq0C,EAAgBr0C,UAAY,GACvEy0C,SA3Da,WACb,IAAMC,EAAoB,GAM1B,OALKzuC,EAAUC,kBAAkBmuC,IAAqBpuC,EAAUC,kBAAkBknC,IAC9EiH,EAAiBr0C,UACZ4L,QAAO,SAACtE,GAAD,OAAcA,EAAS1F,UAAYwrC,EAAa3kC,MAAM3H,MAC7DW,SAAQ,SAAC6F,GAAD,OAAcotC,EAAQ/yC,KAAK2F,EAAStG,WAE9C0zC,GAqDPxL,cAhFkB,WAClBzwB,EAASuZ,GAAYC,QAAQmD,kBAgF7Buf,gBA7EoB,WACpB,IAAMJ,EAA8BtuC,EAAUG,SAASiuC,GACvD57B,EAAS2X,GAAcnmB,KAAKsqC,KA4E5BriB,aApDiB,SAAC5qB,GACdA,GACAmR,EAASuZ,GAAYC,QAAQC,aAAa5qB,KAmD9CstC,eA/CmB,WACnB,IAAK3uC,EAAUC,kBAAkBmuC,GAAkB,CAAC,IAAD,EACzC/sC,EAAuB,IAAI6sC,GACjC7sC,EAAS8G,YAAcimC,EAAiB7lC,UAAU1N,GAClD2X,EAASsZ,GAAkBzqB,IAC3BmR,EAASuZ,GAAYC,QAAQmD,cAApB,UAAkCif,EAAiB7lC,iBAAnD,aAAkC,EAA4B1N,OA2C3EuB,KAAMgyC,EAAkBA,EAAgB7lC,UAAUnM,KAAO,GACzDgpC,SAvBa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkBmuC,IAA6B,KAAT74B,EAAa,CAC9D,IAAM84B,EAAoCruC,EAAUG,SAASiuC,GAC7DC,EAAoB9lC,UAAUnM,KAAOmZ,EACrC/C,EAAS2X,GAAcP,OAAOykB,MAoBlCt0C,WAA0B,OAAfq0C,QAAe,IAAfA,OAAA,EAAAA,EAAiBr0C,YAAa,GACzCwU,aA1CiB,SAAClN,GAElB,GADA7G,QAAQC,KAAK4G,IACRrB,EAAUC,kBAAkBoB,KAAcrB,EAAUC,kBAAkBmuC,GAAkB,CAAC,IAAD,EACrFQ,EAA2B5uC,EAAUG,SAASkB,GAClD7G,QAAQC,KAAKm0C,GACbp8B,EAASsZ,GAAkB8iB,IAC3Bp8B,EAASuZ,GAAYC,QAAQmD,cAApB,UAAkCif,EAAiB7lC,iBAAnD,aAAkC,EAA4B1N,OAqC3E2T,eAjCmB,SAACnN,GAC0E,IAAD,EAAxFrB,EAAUC,kBAAkBoB,IAAcrB,EAAUC,kBAAkBmuC,KACvE57B,EAASsZ,GAAoBzqB,EAASxG,KACtC2X,EAASuZ,GAAYC,QAAQmD,cAApB,UAAkCif,EAAiB7lC,iBAAnD,aAAkC,EAA4B1N,QDvE3Eg0C,GAZA/yC,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACA90B,EAHJ,EAGIA,cACAM,EAJJ,EAIIA,gBACA60B,EALJ,EAKIA,cACAyL,EANJ,EAMIA,gBACAC,EAPJ,EAOIA,eACAvyC,EARJ,EAQIA,KACAgpC,EATJ,EASIA,SACArrC,EAVJ,EAUIA,UACAwU,EAXJ,EAWIA,aACAC,EAZJ,EAYIA,eA4CJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,2CAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI+M,MAAM,QACN0W,YAAY,sBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,EACPD,OAAQwV,KAIhB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,2BAAOh5B,UAAW,SACX0F,MAAO,CAACvC,MAAO,OAAQwoB,UAAW,SAErC,+BACA,4BACI,wBAAIjmB,MAAO,CAACmuB,UAAW,WAAvB,SACA,wBAAInuB,MAAO,CAACmuB,UAAW,WAAvB,iBACA,wBAAI7zB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAASg5B,OAG7D,2BAAOvzB,MAAO,CAACouB,UAAW,SACzBzvC,EAAUW,KA5EA,SAAC2G,GAC5B,IAAIutC,EAA2B5uC,EAAUG,SAASkB,GAElD,OACI,wBAAIhD,IAAKuwC,EAAa/zC,IAClB,4BACI,yBAAKugB,MAAO,CAACsuB,QAAS,OAAQ3C,eAAgB,kBAC1C,kBAAC,GAAD,CACI/U,SAAU,SAACxvB,GACPosC,EAAajzC,QAAU6G,EAAQA,EAAMA,MAAM3H,IAAM,EACjD0T,EAAaqgC,IAEjB3c,YAAa,kBACb3zB,MAAOswC,EAAajzC,UAExB,kBAAC,GAAD,CACIq2B,SAAU,SAACyU,GACFzmC,EAAUC,kBAAkBwmC,KAC7BmI,EAAa7zC,OAAS0rC,EAAiB1rC,OACvC6zC,EAAa5zC,WAAayrC,EAAiB7pC,WAC3C2R,EAAaqgC,KAGrB3c,YAAa,0BACb3zB,MAAOT,KAAKG,UAAU,CAClBjD,OAAQ6zC,EAAc7zC,OACtB6B,WAAYgyC,EAAc5zC,gBAIZ,IAArB4zC,EAAa/zC,IAAa,kBAAC,GAAD,CAAmB8a,QAAS,WACnDnH,EAAeogC,IAE2Bld,WAAS,aAgD/D,kBAAC,GAAD,OAKJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB/b,QAASvH,IAC5B,kBAAC,GAAD,CAAoB0xB,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAASstB,GACjB,kBAEL,kBAAC,GAAD,CAAiBttB,QAAS7H,OE9H7BghC,GAAiE,WAE1E,OACI,kBAAC,GAAD,CAAqBxP,KAAM,kBAAC,GAAD,SCiBtByP,GAAqD,WAE9D,MChBgC,WAChC,IAAM3L,EAAoCntB,YAAY+X,IAChD6W,EAAuC5uB,YAAY6P,IACnDtT,EAAW0D,cACjB,EAAsBib,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEAlN,qBAAU,WACFtxB,EAAUC,kBAAkBmjC,KAC5B5wB,EAASF,GAAcN,YAAY,yEACnCQ,EAASuZ,GAAYC,QAAQjG,WAElC,CAACvT,EAAU4wB,IAEd,IA2BM72B,EAAiB,WACdvM,EAAUC,kBAAkBmjC,IAAoBpjC,EAAUC,kBAAkB4kC,KAC7EryB,EAAS0Y,GAAannB,OAAOq/B,EAAiByB,IAC9CryB,EAASuZ,GAAYC,QAAQiD,aAAamU,EAAgBpnC,eAI5DgzC,EAAiB,SAACC,GACpB,IAAKjvC,EAAUC,kBAAkBgvC,GAAc,CAE3C,IAAM1f,EAA2BvvB,EAAUG,SAAS8uC,GAEpDz8B,EAAS0Y,GAAalnB,KAAKurB,IAC3B/c,EAAS0Y,GAAatB,OAAO2F,MAc/B0Y,EAAe,SAACpsC,EAAiByjB,GACnC,QAAapiB,IAAToiB,EAAoB,CACpB,IAAM4oB,EAAiCloC,EAAUG,SAASijC,GAC1DvnC,EAAUqsC,EAAmBrsC,OAASyjB,EAAS4oB,EAAmBtsC,SAAW0jB,EAC7E0vB,EAAe9G,GACf11B,EAASwU,GAAqBC,mBAAmBihB,EAAmBlsC,eA0GtEkzC,EAAa,SAACrtC,GAChB,IAAMstC,EAAiBnvC,EAAUG,SAAS0B,GAM1C,OAJKA,EAAKC,OAAShC,EAAUiC,MAAQF,EAAKC,OAAShC,EAAUuM,MAAsB,IAAbxK,EAAKhH,SAAyBqC,IAAZ2E,EAAKhH,KACzFs0C,EAASrtC,KAAOhC,EAAUsI,OAGvB+mC,GAkBX,MAAO,CACH5zB,MAAO,YAA6B,OAAhBspB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn8B,WAAW5M,OAAQ,IAAM,QAAuB,OAAdsnC,QAAc,IAAdA,OAAA,EAAAA,EAAgBtnC,OAAQ,IAChGA,KAAI,OAAEsnC,QAAF,IAAEA,OAAF,EAAEA,EAAgBtnC,KACtB8mC,WAjMe,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAMgM,EAAkCpvC,EAAUG,SAASijC,GAC3DgM,EAAoBtzC,KAAOA,EAE3B0W,EAASuZ,GAAYC,QAAQqD,aAAa+f,IAC1C58B,EAASwU,GAAqBC,mBAAmBmoB,EAAoBpzC,eA4LzEsQ,aA/KiB,SAACjR,GACb2E,EAAUC,kBAAkB5E,IACA,KAAzB+nC,EAAgBtnC,MAChB0W,EAAS0Y,GAAalnB,KAAK3I,KA6KnCg0C,UAvJc,WACd,IAAIhvC,GAAiB,EAMrB,OALKL,EAAUC,kBAAkBmjC,IACA,KAAzBA,EAAgBtnC,OAChBuE,GAAQ,GAGTA,GAiJP2uC,iBACAziC,iBACA47B,WAvIe,SAACtsC,EAAiBusC,GACjC,QAAoBlrC,IAAhBkrC,EAA2B,CAC3B,IAAMC,EAAQ,CAACvmC,KAAOhC,EAAkBsoC,IACxC,OAAQA,GACJ,KAAKtoC,EAAUsI,MAGf,KAAKtI,EAAUuhB,IAGf,KAAKvhB,EAAUwhB,KAGf,KAAKxhB,EAAUiC,KAGf,KAAKjC,EAAUuM,IACX47B,EAAapsC,EAAQwsC,MAuHjCC,gBAjHoB,SAACzsC,EAAiB+F,GACtC,GAAIA,EAAM,CACN,IAAM2mC,EAAgB,CAACzmC,KAAMhC,EAAUiC,KAAMlH,GAAI+G,EAAK+J,eAAe9Q,IACrEotC,EAAapsC,EAAQ0sC,KA+GzBC,oBA3GwB,SAAC3sC,EAAiBR,GAC1C,GAAIA,EAAU,CACV,IAAMktC,EAAgB,CAACzmC,KAAMhC,EAAUuM,IAAKxR,GAAIQ,EAASR,IACzDotC,EAAapsC,EAAQ0sC,KAyGzB1sC,OAAM,OAAEunC,QAAF,IAAEA,OAAF,EAAEA,EAAgBvnC,OACxBD,SAAQ,OAAEwnC,QAAF,IAAEA,OAAF,EAAEA,EAAgBxnC,SAC1B6sC,eAvGmB,SAAC5sC,GACpB,IAAKmE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAMkM,EAA4B,IAAI/K,GACtC+K,EAAS3jC,eAAe3P,WAAaonC,EAAgBpnC,WACrD,IAAMuzB,EAA2BvvB,EAAUG,SAASijC,GACpD5wB,EAASuZ,GAAYC,QAAQoD,SAASkgB,EAAU/f,EAAc1zB,MAmGlE8sC,mBA/FuB,SAAC9sC,GACxB,IAAKmE,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAMwF,EAA2B,IAAIpE,GACrCoE,EAAa5sC,WAAaonC,EAAgBpnC,WAC1C,IAAMuzC,EAAkCvvC,EAAUG,SAASijC,GAC3D5wB,EAASuZ,GAAYC,QAAQqD,aAAauZ,EAAc2G,EAAgB1zC,IACxE2iC,EAAOngC,EAAM,KA0FjBoO,QAtFY,WACPzM,EAAUC,kBAAkBmjC,KAC7B5wB,EAASma,GAAalgB,QAAQ22B,EAAgBpnC,WAAYonC,EAAgBvoC,IAAI,IAC9E2X,EAASuZ,GAAYC,QAAQqD,aAAanE,GAAavsB,KAAKykC,EAAgBvoC,QAoFhFsvC,UAAsB,OAAd/G,QAAc,IAAdA,OAAA,EAAAA,EAAgBrnC,OAAOqnC,EAAernC,KAC9CsC,MACAgrC,gBAlFoB,WACpB,IAAKrpC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAA2BvvB,EAAUG,SAASijC,GACpD7T,EAAa9yB,WAAWf,KAAK,CACzBiB,WAAY4yB,EAAa10B,GACzBA,IAAK,EACLc,SAAU,EACVX,YAAa,EACbD,QAAS,IAEbi0C,EAAezf,KAyEnBsZ,MAAK,OAAEzF,QAAF,IAAEA,OAAF,EAAEA,EAAgBvoC,GACvB4B,YAA0B,OAAd2mC,QAAc,IAAdA,OAAA,EAAAA,EAAgB3mC,aAAc,GAC1CL,KAAMgnC,EAAiBA,EAAehnC,KAAO,GAC7CgpC,SA1Ma,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAMgM,EAAkCpvC,EAAUG,SAASijC,GAC3DgM,EAAoBhzC,KAAOmZ,EAC3B/C,EAASuZ,GAAYC,QAAQqD,aAAa+f,IAC1C58B,EAASwU,GAAqBC,mBAAmBmoB,EAAoBpzC,eAsMzEmtC,gBAxEoB,SAACC,GACrB,IAAKppC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAA2BvvB,EAAUG,SAASijC,GACpD7T,EAAa9yB,WAAa8yB,EAAa9yB,WAAWkJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUrG,KAAOuuC,KACvF4F,EAAezf,KAqEnByZ,cAjEkB,SAACC,GACnB,IAAKjpC,EAAUC,kBAAkBmjC,GAAiB,CAC9C,IAAM7T,EAA2BvvB,EAAUG,SAASijC,GAGpD,GADiD7T,EAAa9yB,WAAWkC,MAAK,SAAAuC,GAAS,OAAIA,EAAUrG,KAAOouC,EAAgBpuC,MACrG,CACnB,IAAIquC,EAAoC3Z,EAAa9yB,WAAWkJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUrG,KAAOouC,EAAgBpuC,MACrHquC,EAAmBxtC,KAAKutC,GACxB1Z,EAAa9yB,WAAaysC,OAE1B3Z,EAAa9yB,WAAWf,KAAKutC,GAEjC+F,EAAezf,KAsDnBigB,cAxCkB,WAClB,IAAKxvC,EAAUC,kBAAkBmjC,KAAoBpjC,EAAUC,kBAAkB4kC,GAAmB,CAChG,IAAMtV,EAA2BvvB,EAAUG,SAASijC,GACzB,KAAvB7T,EAAczzB,MACdyzB,EAAa1zB,OAASqzC,EAAW3f,EAAa1zB,QAC9C0zB,EAAa3zB,SAAWszC,EAAW3f,EAAa3zB,UAEhD4W,EAAS0Y,GAAalnB,KAAKurB,IAC3B/c,EAASuZ,GAAYC,QAAQiD,aAAa4V,EAAkBn8B,WAAW7N,MAEvE0R,ODjKRkjC,GApBA3zC,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACAuF,EAHJ,EAGIA,WACAtsC,EAJJ,EAIIA,OACAD,EALJ,EAKIA,SACA0sC,EANJ,EAMIA,gBACAG,EAPJ,EAOIA,eACAh8B,EARJ,EAQIA,QACA09B,EATJ,EASIA,OACA59B,EAVJ,EAUIA,eACAo8B,EAXJ,EAWIA,mBACAH,EAZJ,EAYIA,oBACAa,EAbJ,EAaIA,gBACAR,EAdJ,EAcIA,MACApsC,EAfJ,EAeIA,WACAL,EAhBJ,EAgBIA,KACAgpC,EAjBJ,EAiBIA,SACA+D,EAlBJ,EAkBIA,gBACAH,EAnBJ,EAmBIA,cACAwG,EApBJ,EAoBIA,cAuDJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KAAY,yCAEZ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIj0B,MAAM,QACN0W,YAAY,oBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,KAMf,kBAAC,GAAD,KACI,2BAAOzjB,UAAW,SACX0F,MAAO,CAACvC,MAAO,OAAQwoB,UAAW,SAErC,+BACA,4BACI,wBAAIjmB,MAAO,CAACmuB,UAAW,WAAvB,SACA,wBAAInuB,MAAO,CAACmuB,UAAW,WAAvB,iBACA,wBAAI7zB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAAS0zB,OAG7D,2BAAOjuB,MAAO,CAACouB,UAAW,SACzB/sC,EAAW/B,KAzED,SAACwG,GAC5B,IAAIuoC,EAA6BzpC,EAAUG,SAASe,GAEpD,OACI,wBAAI7C,IAAKorC,EAAc5uC,IACnB,4BACI,yBAAKugB,MAAO,CAACsuB,QAAS,OAAQ3C,eAAgB,kBAC1C,kBAAC,GAAD,CACI/U,SAAU,SAACxvB,GACPinC,EAAc9tC,QAAU6G,EAAQA,EAAMA,MAAM3H,IAAM,EAClDmuC,EAAcS,IAElBxX,YAAa,kBACb3zB,MAAOmrC,EAAc9tC,UAEzB,kBAAC,GAAD,CACIq2B,SAAU,SAACyU,GACFzmC,EAAUC,kBAAkBwmC,KAC7BgD,EAAc1uC,OAAS0rC,EAAiB1rC,OACxC0uC,EAAczuC,WAAayrC,EAAiB7pC,WAC5CosC,EAAcS,KAGtBxX,YAAa,2BACb3zB,MAAOT,KAAKG,UAAU,CAClBjD,OAAQ0uC,EAAe1uC,OACvB6B,WAAY6sC,EAAezuC,gBAIZ,IAAtByuC,EAAc5uC,IAAa,kBAAC,GAAD,CAAmB8a,QAAS,WACpDwzB,EAAgBM,EAAc5uC,KAEa62B,WAAS,aA+ChE,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWoV,MAAOvK,GAAepC,QAC7B,4BAxFS,6BA4FjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/FY,uBAgGZ,kBAAC,GAAD,CACInI,SAAU,SAAC2X,GAAD,OAAQxB,GAAW,EAAMwB,IACnCrrC,MAAOzC,EAASA,EAAOiG,KAAOhC,EAAUuhB,OAI/CxlB,EAAQiG,OAAShC,EAAUiC,MACxB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA3GE,oBA4GF,kBAAC,GAAD,CACIiwB,SAAU,SAACpwB,GAAD,OAAU0mC,GAAgB,EAAM1mC,IAC1CtD,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAAShC,EAAUiC,KAAOlG,EAAOhB,GAAK,KAG7D,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjHQ,yBAkHR,kBAAC,GAAD,CAAgB8a,QAAS,kBAAM8yB,GAAe,QAKzD5sC,EAAQiG,OAAShC,EAAUuM,KACxB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7HM,wBA8HN,kBAAC,GAAD,CACI2lB,SAAU,SAACtnB,GAAD,OAAU89B,GAAoB,EAAM99B,IAC9CpM,OAAa,OAANzC,QAAM,IAANA,OAAA,EAAAA,EAAQiG,QAAShC,EAAUuM,IAAMxQ,EAAOhB,GAAK,EACpD64B,QAASmV,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KApIY,8BAqIZ,kBAAC,GAAD,CAAgBlzB,QAAS,kBAAMgzB,GAAmB,QAM9D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW7B,MAAOvK,GAAepC,QAC7B,4BAzIW,8BA6InB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAhJc,wBAiJd,kBAAC,GAAD,CACInI,SAAU,SAAC2X,GAAD,OAAQxB,GAAW,EAAOwB,IACpCrrC,MAAO1C,EAAWA,EAASkG,KAAOhC,EAAUsI,SAInDxM,EAAUkG,OAAShC,EAAUiC,MAC1B,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7JE,oBA8JF,kBAAC,GAAD,CACIiwB,SAAU,SAACpwB,GAAD,OAAU0mC,GAAgB,EAAO1mC,IAC3CtD,OAAe,OAAR1C,QAAQ,IAARA,OAAA,EAAAA,EAAUkG,QAAShC,EAAUiC,KAAOnG,EAASf,GAAK,KAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,KAnKQ,yBAoKR,kBAAC,GAAD,CAAgB8a,QAAS,kBAAM8yB,GAAe,QAKzD7sC,EAAUkG,OAAShC,EAAUuM,KAC1B,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/KM,wBAgLN,kBAAC,GAAD,CACI2lB,SAAU,SAACtnB,GAAD,OAAU89B,GAAoB,EAAO99B,IAC/CpM,OAAe,OAAR1C,QAAQ,IAARA,OAAA,EAAAA,EAAUkG,QAAShC,EAAUuM,IAAMzQ,EAASf,GAAK,EACxD64B,QAASmV,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAtLY,8BAuLZ,kBAAC,GAAD,CAAgBlzB,QAAS,kBAAMgzB,GAAmB,SAKlE,kBAAC,GAAD,MACA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBhzB,QAASpJ,IAC5B,kBAAC,GAAD,CAAoBuzB,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAASlJ,EACTkkB,SAAUwZ,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiBx0B,QAAS65B,OEtP7BE,GAA+D,WAExE,OACI,kBAAC,GAAD,CAAqBpQ,KAAM,kBAAC,GAAD,SCMtBqQ,GAAuD,WAEhE,MAAgE/K,KAAzDlC,EAAP,EAAOA,UAAWzT,EAAlB,EAAkBA,aAAcuU,EAAhC,EAAgCA,YAAaE,EAA7C,EAA6CA,YAAa7oC,EAA1D,EAA0DA,GAEpDT,EAAoC6b,YAAY8H,GAAoDljB,IAwB1G,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAYowC,aAAc7wC,EACd8wC,iBAAkB1H,EAClB2H,oBAAqBzH,EACrB0H,kBA5BL,SAACI,EAAwBC,GACxC,IAAMC,EAA6B1rC,EAAUG,SAASqrC,GACtDE,EAAkBtJ,QAAUqJ,EAC5B/I,EAAUgJ,IA0BU9I,WAvBL,SAAC9mC,EAAc6oC,GAC9B,IAAMgH,EAAiDvxC,EAAeuE,MAAK,SAAAsL,GAAK,OAAIA,EAAMpP,KAAO8pC,KACjG,GAAIgH,EAAmB,CACnB,IAAMiE,EAAwC5vC,EAAUG,SAASwrC,GACjEiE,EAAqBr0B,MAAQzf,EAC7B4mC,EAAUkN,QAuBV,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBj6B,QA1CN,WACdvb,EAAeuG,MAAK,SAAAsJ,GAAK,MAAoB,KAAhBA,EAAMsR,WACpCnhB,EAAeoB,QAAQknC,GACvBzT,WCnBC4gB,GAAiE,WAE1E,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCmBCC,GAA6C,WAEtD,MChB4B,WAC5B,IAAM5K,EAAqCjvB,YAAY+X,IACjD6W,EAAuC5uB,YAAY6P,IACnDtT,EAAW0D,cACjB,EAAsCib,mBAAe,CACjDrvB,KAAMhC,EAAUiC,KAChBlH,IAAK,IAFT,mBAAOivC,EAAP,KAAoBC,EAApB,KAIA,EAAsB5Y,mBAAiB,GAAvC,mBAAO9yB,EAAP,KAAYmgC,EAAZ,KAEAlN,qBAAU,gBACap0B,IAAfgoC,IACA1yB,EAASF,GAAcN,YAAY,2EACnCQ,EAASuZ,GAAYC,QAAQjG,SAE7Bmf,GACA6E,EAAe7E,EAAWv5B,eAAe9J,QAG9C,CAAC2Q,EAAU0yB,IAEd,IA+DM+C,EAAe,SAAC3oB,GAClB,QAAapiB,IAAToiB,EAAoB,CACpB,IAAMywB,EAAoC/vC,EAAUG,SAAS+kC,GAC7D6K,EAAiBpkC,eAAe9J,KAAOyd,EACvC9M,EAASuY,GAASnB,OAAOmmB,IACzBv9B,EAASuY,GAAS/mB,KAAK+rC,IACvBv9B,EAASwU,GAAqBC,mBAAmB8oB,EAAiBpkC,eAAe3P,eAsGzF,MAAO,CACHuf,MAAO,YAA6B,OAAhBspB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn8B,WAAW5M,OAAQ,IAAM,QAAmB,OAAVopC,QAAU,IAAVA,OAAA,EAAAA,EAAYv5B,eAAe7P,OAAQ,IAC3GA,KAAMopC,EAAaA,EAAYv5B,eAAe7P,KAAO,GACrD8mC,WA9Ke,SAAC9mC,GAChB,IAAKkE,EAAUC,kBAAkBilC,GAAa,CAC1C,IAAM6K,EAAoC/vC,EAAUG,SAAS+kC,GAC7D6K,EAAiBpkC,eAAe7P,KAAOA,EACvC0W,EAASuZ,GAAYC,QAAQoD,SAAS2gB,IACtCv9B,EAASuY,GAAS/mB,KAAK+rC,IACvBv9B,EAASwU,GAAqBC,mBAAmB8oB,EAAiBpkC,eAAe3P,eAyKrFgQ,iBArKqB,SAAC+2B,GACjB/iC,EAAUC,kBAAkBilC,IAAgBllC,EAAUC,kBAAkB4kC,KACjC,KAApCK,EAAYv5B,eAAe7P,KAC3B0W,EAASuY,GAAS/mB,KAAKkhC,IAEvB1yB,EAASuY,GAAShnB,OAAOmhC,EAAaL,IAGtCryB,EADAuwB,GAAuB,SAAZA,EACFhX,GAAYC,QAAQjG,OAEpBgG,GAAYC,QAAQiD,aAAaiW,EAAYv5B,eAAe3P,eA4J7EwQ,mBAvJuB,WAClBxM,EAAUC,kBAAkBilC,IAAgBllC,EAAUC,kBAAkB4kC,KACzEryB,EAASuY,GAAShnB,OAAOmhC,EAAaL,IACtCryB,EAASuZ,GAAYC,QAAQiD,aAAaiW,EAAYv5B,eAAe3P,eAqJzEqzC,UA5Hc,WACd,IAAIhvC,GAAiB,EAMrB,OALKL,EAAUC,kBAAkBilC,IACW,KAApCA,EAAYv5B,eAAe7P,OAC3BuE,GAAQ,GAGTA,GAsHP2vC,gBA3IoB,SAACr1C,GACrB,IAAKqF,EAAUC,kBAAkBilC,GAAa,CAC1C,IAAIz3B,EAAmCzN,EAAUG,SAASxF,QACvCuC,IAAfuQ,IACAA,EAAa,IAAI83B,IACNpqC,eAAiB+pC,EAAYv5B,eAAe9Q,GACvD4S,EAAW7S,MAAQsqC,EAAYvrC,QAAQuI,OACvCsQ,EAASgzB,GAAkB/3B,KAE3B+E,EAASuZ,GAAYC,QAAQyD,WAAWhiB,MAmIhDwiC,WAnJe,aAoJf9H,WA3Ge,SAACC,GAChB,QAAoBlrC,IAAhBkrC,EAA2B,CAC3B,IAAMC,EAAQ,CAACvmC,KAAOhC,EAAkBsoC,IAExC,OADA2B,EAAe1B,GACPD,GACJ,KAAKtoC,EAAUsI,MAGf,KAAKtI,EAAUuhB,IACX4mB,EAAaI,GACb,MACJ,KAAKvoC,EAAUwhB,KACX2mB,EAAaI,MAgGzB/oB,KAAMwqB,EACNxB,gBA5FoB,SAAC1mC,GACrB,GAAIA,EAAM,CACN,IAAM2mC,EAAgB,CAACzmC,KAAMhC,EAAUiC,KAAMlH,GAAI+G,EAAK+J,eAAe9Q,IACrEotC,EAAaM,KA0FjBC,oBAtFwB,SAACntC,GACzB,GAAIA,EAAU,CACV,IAAMktC,EAAgB,CAACzmC,KAAMhC,EAAUuM,IAAKxR,GAAIQ,EAASR,IACzDotC,EAAaM,KAoFjBE,eAhFmB,WACnB,IAAKzoC,EAAUC,kBAAkBilC,GAAa,CAC1C,IAAMoK,EAA4B,IAAI/K,GACtC+K,EAAS3jC,eAAe3P,WAAakpC,EAAYv5B,eAAe3P,WAChE,IAAMuzC,EAAkCvvC,EAAUG,SAAS+kC,GAC3D1G,EAAOngC,EAAM,GACbmU,EAASuZ,GAAYC,QAAQoD,SAASkgB,EAAUC,IAChD/8B,EAASwU,GAAqBC,mBAAmBqoB,EAAS3jC,eAAe3P,eA0E7E2sC,mBAtEuB,WACvB,IAAK3oC,EAAUC,kBAAkBilC,GAAa,CAC1C,IAAM0D,EAA2B,IAAIpE,GACrCoE,EAAa5sC,WAAakpC,EAAYv5B,eAAe3P,WACrD,IAAMuzC,EAAkCvvC,EAAUG,SAAS+kC,GAC3D1yB,EAASuZ,GAAYC,QAAQqD,aAAauZ,EAAc2G,MAkE5D9iC,QA9DY,WACZ,IAAKzM,EAAUC,kBAAkBilC,KAAgBllC,EAAUC,kBAAkB4kC,GAAmB,CAC5FryB,EAASma,GAAalgB,QAAQy4B,EAAYv5B,eAAe3P,WAAYkpC,EAAYv5B,eAAe9Q,IAAI,IACpG,IAAM+G,EAAoCsc,GAAuB5Q,oBAC7D43B,EAAYv5B,eAAe9Q,IAG3B2X,EADA5Q,EACSmqB,GAAYC,QAAQoD,SAASxtB,GAE7BmqB,GAAYC,QAAQjG,UAsDrCokB,UAAkB,OAAVjF,QAAU,IAAVA,OAAA,EAAAA,EAAYv5B,eAAe5P,QAA3B,OAAkCmpC,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAYv5B,eAAe5P,MACrEsC,MACA6K,OAAM,OAAEg8B,QAAF,IAAEA,OAAF,EAAEA,EAAYv5B,eAAe9Q,GACnCuB,KAAM8oC,EAAaA,EAAWv5B,eAAevP,KAAO,GACpDgpC,SArDa,SAAC7vB,GACd,IAAKvV,EAAUC,kBAAkBilC,IAAwB,KAAT3vB,EAAa,CACzD,IAAMw6B,EAAoC/vC,EAAUG,SAAS+kC,GAC7D6K,EAAiBpkC,eAAevP,KAAOmZ,EACvC/C,EAASuZ,GAAYC,QAAQoD,SAAS2gB,IACtCv9B,EAASuY,GAAS/mB,KAAK+rC,IACvBv9B,EAASwU,GAAqBC,mBAAmB8oB,EAAiBpkC,eAAe3P,eAgDrFrC,SAAmB,OAAVurC,QAAU,IAAVA,OAAA,EAAAA,EAAYvrC,UAAW,GAChCu2C,qBA7CyB,SAACC,EAAuBC,GACjD,IAAMC,EAAmBD,EAAYD,EAAgB,EAAIA,EAAgB,EACnEG,EAA4BtwC,EAAUG,SAAS+kC,GAErD,GAAImL,GAAY,GAAKA,GAAYC,EAAS32C,QAAQuI,OAAS,EAAG,CAC1D,IAAMquC,EAAoBD,EAAS32C,QAAQw2C,GAC3CI,EAAQ31C,MAAQy1C,EAChB,IAAMG,EAAoBF,EAAS32C,QAAQ02C,GAC3CG,EAAQ51C,MAAQu1C,EAChBG,EAAS32C,QAAQw2C,GAAiBK,EAClCF,EAAS32C,QAAQ02C,GAAYE,EAG7B/9B,EAASuY,GAAS/mB,KAAKssC,IAGvB99B,EAASwU,GAAqBC,mBAAmBqpB,EAAS3kC,eAAe3P,aAGzEwW,EAASuY,GAASnB,OAAO0mB,ODxJ7BG,GAnBA30C,EADJ,EACIA,KACA8mC,EAFJ,EAEIA,WACAp2B,EAHJ,EAGIA,mBACAR,EAJJ,EAIIA,iBACAgkC,EALJ,EAKIA,gBACAC,EANJ,EAMIA,WACA9H,EAPJ,EAOIA,WACAG,EARJ,EAQIA,gBACAhpB,EATJ,EASIA,KACAkpB,EAVJ,EAUIA,oBACAC,EAXJ,EAWIA,eACAE,EAZJ,EAYIA,mBACAl8B,EAbJ,EAaIA,QACA09B,EAdJ,EAcIA,OACAjhC,EAfJ,EAeIA,OACA9M,EAhBJ,EAgBIA,KACAgpC,EAjBJ,EAiBIA,SACAzrC,EAlBJ,EAkBIA,QACAu2C,EAnBJ,EAmBIA,qBAGJ,EAAsCvK,KAA/Bj4B,EAAP,EAAOA,aAAck5B,EAArB,EAAqBA,cAOrB,EAAsCzV,oBAAS,GAA/C,mBAAOuf,EAAP,KAAoBC,EAApB,KAiDA,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,KAEI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIp1B,MAAM,QACN0W,YAAY,gBACZgH,iBAAkB,SAACn9B,GAAD,OAAkB8mC,EAAW9mC,IAC/CwC,MAAOxC,EACPq9B,OAAO,EACPD,OAAQ+W,KAIhB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUprC,SAAUyrB,GAAiB6J,QACjC,kBAAC,GAAD,KAAW,yCAEf,kBAAC,GAAD,CAAUt1B,SAAUyrB,GAAiB6J,QAEjC,kBAAC,GAAD,CAAqBjJ,KAAMwf,EACN/6B,QAAS,kBAAMg7B,GAAgBD,QAK3DA,GAAe,kBAAC,GAAD,OAAmB,kBAAC,GAAD,KA3DtB,SAAC/2C,GACtB,OACI,2BAAO+b,UAAW,SACX0F,MAAO,CAACvC,MAAO,OAAQ+3B,SAAU,WAEpC,+BACA,4BACI,wBAAIx1B,MAAO,CAACmuB,UAAW,WAAvB,UACA,wBAAInuB,MAAO,CAACmuB,UAAW,QACnB,kBAAC,GAAD,CAAgB5zB,QAAS,WACrBq6B,IACAC,UAMZ,2BAAO70B,MAAO,CAACouB,UAAW,SACzB7vC,EAAQe,KAAI,SAACC,EAAQC,GAAT,OAzCD,SAACD,EAAkBC,GACvC,OAAQ,wBAAIyD,IAAKzD,GACT,4BACI,+BAAQgsC,EAAcjsC,KAE1B,wBAAIygB,MAAO,CAACmuB,UAAW,QACnB,kBAAC,GAAD,CAAmB5zB,QAAS,WACxBjI,EAAa/S,GACbs1C,OAGJ,kBAAC,GAAD,CAAiBt6B,QAAS,kBAAMq6B,EAAgBr1C,MAChD,kBAAC,GAAD,CAAiBk2B,SAAUzc,eACVuB,QAAS,kBAAMu6B,EAAqBt1C,GAAO,MAE5D,kBAAC,GAAD,CAAiBi2B,SAAUvc,aACVqB,QAAS,kBAAMu6B,EAAqBt1C,GAAO,QAyBhCi2C,CAAgBl2C,EAAQC,QAyCVk2C,CAAiBn3C,IAE/D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUkL,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,yCAGJ,kBAAC,GAAD,CAAUlsC,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,CAAoB/e,SAAUmW,EACV7pC,MAAOghB,EAAOA,EAAKxd,KAAOhC,EAAUsI,UAK/DkX,EAAMxd,OAAShC,EAAUiC,MACtB,oCAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAU8C,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,KA5GI,qBA8GR,kBAAC,GAAD,CAAUlsC,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,CACI/e,SAAUsW,EACVhqC,OAAW,OAAJghB,QAAI,IAAJA,OAAA,EAAAA,EAAMxd,QAAShC,EAAUiC,KAAOud,EAAKzkB,GAAK,EACjD64B,QAASxqB,MAKrB,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUrE,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,KAxHI,qBA0HR,kBAAC,GAAD,CAAUlsC,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,CAAgBp7B,QAAS8yB,OAMxCnpB,EAAMxd,OAAShC,EAAUuM,KACtB,oCAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUxH,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,KAzIQ,yBA2IZ,kBAAC,GAAD,CAAUlsC,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,CACI/e,SAAUwW,EACVlqC,OAAW,OAAJghB,QAAI,IAAJA,OAAA,EAAAA,EAAMxd,QAAShC,EAAUuM,IAAMiT,EAAKzkB,GAAK,MAK5D,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUgK,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,KApJQ,yBAsJZ,kBAAC,GAAD,CAAUlsC,SAAUyrB,GAAiBygB,OACjC,kBAAC,GAAD,CAAgBp7B,QAASgzB,OAMzC,kBAAC,GAAD,OAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBhzB,QAASnJ,IAC5B,kBAAC,GAAD,CAAoBszB,eAAgBsF,EAChBrF,QAAS3jC,IAE7B,kBAAC,GAAD,CAAauZ,QAASlJ,EACTkkB,SAAUwZ,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiBx0B,QAAS3J,OE5N7BglC,GAAuD,WAEhE,OACI,kBAAC,GAAD,CAAqB1R,KAAM,kBAAC,GAAD,SCUtB2R,GAAiF,WAqC1F,OAjCsB,SAACC,GACnB,OAAQA,GACJ,KAAKjrB,GAAKyC,WACN,OAAO,kBAAC,GAAD,MACX,KAAKzC,GAAKsE,UACN,OAAO,kBAAC,GAAD,MACX,KAAKtE,GAAKkG,cACN,OAAO,kBAAC,GAAD,MACX,KAAKlG,GAAKwG,cACN,OAAO,kBAAC,GAAD,MACX,KAAKxG,GAAK4E,mBACN,OAAO,kBAAC,GAAD,MACX,KAAK5E,GAAKgI,qBACN,OAAO,kBAAC,GAAD,MACX,KAAKhI,GAAKsF,uBACN,OAAO,kBAAC,GAAD,MACX,KAAKtF,GAAKqH,0BACN,OAAO,kBAAC,GAAD,MACX,KAAKrH,GAAKgE,eACN,OAAO,kBAAC,GAAD,MACX,KAAKhE,GAAK0J,WACN,OAAO,kBAAC,GAAD,MACX,KAAK1J,GAAK4J,kBACN,OAAO,kBAAC,GAAD,MACX,KAAK5J,GAAKgD,gBACN,OAAO,kBAAC,GAAD,MACX,KAAKhD,GAAKwD,oBACN,OAAO,kBAAC,GAAD,MACX,QACI,OAAO,kBAAC,GAAD,OAIZ0nB,CAnCYl7B,YAAY+X,M,SCVtBojB,GAAiF,WAC1F,MAAgCjgB,oBAAkB,GAAlD,mBAAO6O,EAAP,KAAiBC,EAAjB,KACMoR,EAAeC,sBAkBf9+B,EAAW0D,cAOjB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAaqF,MAAM,UACf,6BACI,kBAAC,GAAD,CAAiBsV,SAAU0gB,oBACV57B,QA5BT,WACC,OAAjB07B,GAAkD,OAAzBA,EAAa7X,SACtC6X,EAAa7X,QAAQ75B,WA4Bb,2BACI6xC,QAAQ,EACR/X,IAAK4X,EACLvvC,KAAK,OACL6wB,SAAU,SAACiG,GACoB,OAAvBA,EAAMc,OAAO+X,OA7BhB,SAAC/8B,GACtB,IAAMg9B,EAAa,IAAIC,WACV,OAATj9B,IACAg9B,EAAWE,WAAWl9B,GACtBg9B,EAAWG,OAAS,SAACjZ,GACjBpmB,EAASF,GAAcC,cAAcqmB,EAAMc,OAAQ/Y,WAyBnCmxB,CAAiBlZ,EAAMc,OAAO+X,MAAM,SAMxD,kBAAC,GAAD,CAAal2B,MAAM,YACf,kBAAC,GAAD,CAAiB5F,QAAS,kBAAMsqB,GAAY,IAC3BpP,SAAUkhB,OAE1B/R,GAAY,kBAAC,GAAD,CAAoBjF,cAAe,kBAAMkF,GAAY,OAEtE,kBAAC,GAAD,CAAa1kB,MAAM,SACf,kBAAC,GAAD,CAAmB5F,QA/BJ,WACvBnD,EAASuZ,GAAYC,QAAQkE,QAC7B1d,EAASF,GAAcnB,0BC1BlB6gC,GAA+E,WAExF,MAAwEC,KAAjEC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,kBAAmBC,EAAvD,EAAuDA,cAEvD,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBxhB,SAAUyhB,KACV38B,QAASu8B,IAE1B,kBAAC,GAAD,CAAiBrhB,SAAUyhB,KACV38B,QAASw8B,IAE1B,kBAAC,GAAD,CAAiBthB,SAAUyhB,KACV38B,QAAS08B,IAE1B,kBAAC,GAAD,CAAiBxhB,SAAUyhB,KACV38B,QAASy8B,OAOpCH,GAAyB,WAc3B,MAAO,CAACC,cAbc,WAClBz/B,OAAO8/B,KAAKC,GAAahwC,MAAO,SAAU,4BAYvB2vC,aAVF,WACjB1/B,OAAO8/B,KAAKC,GAAav2C,KAAM,SAAU,4BASRo2C,cAPf,WAClB5/B,OAAO8/B,KAAKC,GAAaC,MAAO,SAAU,4BAMML,kBAJ1B,WACtB3/B,OAAO8/B,KAAKC,GAAaE,UAAW,SAAU,8B,oCC9BzCC,GAAuD,SAACt9B,GACjE,IAAOu9B,EAAuDv9B,EAAvDu9B,aAAcC,EAAyCx9B,EAAzCw9B,YAAaC,EAA4Bz9B,EAA5By9B,SAAUC,EAAkB19B,EAAlB09B,QAASn4C,EAASya,EAATza,MAErD,OACI,yBAAK8a,UAAU,QACX,kBAAC,GAAD,CACImb,SAAUmiB,kBACVr9B,QAASi9B,IAEb,kBAAC,GAAD,CAAaj9B,QAASm9B,GAClB,kBAAC,KAAD,CAAiBl9B,KAAMq9B,iBACtB,QAEL,yBAAKv9B,UAAW,qEACZ,+BAAQ9a,IAEZ,kBAAC,GAAD,CAAiB+a,QAASo9B,GACrB,OACD,kBAAC,KAAD,CAAiBn9B,KAAMs9B,mBAE3B,kBAAC,GAAD,CACIriB,SAAUsiB,iBACVx9B,QAASk9B,MCnBZO,GAAqE,WAE9E,MASIC,KARApjB,EADJ,EACIA,UACAqjB,EAFJ,EAEIA,UACA7b,EAHJ,EAGIA,eACAtC,EAJJ,EAIIA,gBACAiV,EALJ,EAKIA,iBACAjkB,EANJ,EAMIA,gBACAotB,EAPJ,EAOIA,aACApf,EARJ,EAQIA,YAGJ,E3E0DoC,WACpC,IAAMnO,EAAa/P,YAAY+X,IACzBllB,EAA+BmN,YAAY6P,IAC3CmK,EAA2Bha,YAAY6P,IACvCzC,EAAgCpN,YAAY6P,IAC5CwtB,EAA2Br9B,YAAY6P,IACvCtT,EAAW0D,cAEXs9B,EAAa,WACf,OAAOxtB,IAASC,GAAKC,MAGnByB,EAAW,YACR3nB,EAAUC,kBAAkB6I,IAAa0qC,KAC1ChhC,EAASwU,GAAqBW,SAASsI,KAIzCxI,EAAW,YACRznB,EAAUC,kBAAkB6I,IAAa0qC,KAC1ChhC,EAASwU,GAAqBS,SAASwI,KAIzCpI,EAAW,YACR7nB,EAAUC,kBAAkBojB,IAAkBmwB,KAC/ChhC,EAASwU,GAAqBa,SAASyrB,KAIzC1rB,EAAW,YACR5nB,EAAUC,kBAAkBojB,IAAkBmwB,KAC/ChhC,EAASwU,GAAqBY,SAAS0rB,KAIzCG,EAAsB,SAAC7a,GACP,cAAdA,EAAMv6B,KACNspB,IAEc,eAAdiR,EAAMv6B,KACNopB,IAEc,aAAdmR,EAAMv6B,MACNu6B,EAAM4E,iBACN3V,KAEc,WAAd+Q,EAAMv6B,MACNu6B,EAAM4E,iBACN5V,MAYR,OARA0J,qBAAU,WAGN,OAFA9xB,SAASq5B,iBAAiB,UAAW4a,GAE9B,WACHj0C,SAASs5B,oBAAoB,UAAW2a,OAIzC,CACHhsB,WACAE,WACAE,WACAD,Y2E3H6C8rB,GAA1C/rB,EAAP,EAAOA,SAAUF,EAAjB,EAAiBA,SAAUG,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAQrC,OACI,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAatM,MAAM,gBACf,kBAAC,GAAD,CACIyW,SAAUmD,EACVlD,YAAY,wBACZ3zB,MAAO8rC,KAIf,kBAAC,GAAD,CAAa7uB,MAAM,YACf,kBAAC,GAAD,CAAkByW,SAAUyF,EACVn5B,MAAO6nB,KAI7B,kBAAC,GAAD,CAAa5K,MAAM,QACNymB,SAAS,GAElB,kBAAC,GAAD,CAAehQ,SAAUmC,EACV71B,MAAOi1C,KAI1B,kBAAC,GAAD,CAAah4B,MAAM,OACNymB,SAAS,GAElB,kBAAC,GAAD,CAAe4Q,aAAchrB,EACdirB,YAAahrB,EACbirB,SAAUnrB,EACVorB,QAAStrB,EACT7sB,QArCD04C,EAAY,GAAGv0C,YAAc,KAErC,OADOkxB,EAAUlxB,YAAc,UA4C/Cs0C,GAAmC,WACrC,IAAMvqC,EAA+BmN,YAAY6P,IAC3CmK,EAA2Bha,YAAY6P,IACvC/C,EAAyC9M,YAAY6P,IACrDzC,EAAgCpN,YAAY6P,IAC5CwtB,EAA2Br9B,YAAY6P,IACvCtT,EAAW0D,cAsBXif,EAAkB,SAAC5sB,GACjBvI,EAAUC,kBAAkBsI,GAC5BiK,EAASwU,GAAqBG,uBAE9B3U,EAASwU,GAAqBE,oBAAoB3e,EAAW1N,MA+BrE,MAAO,CACH0gB,MAAO,QA3BHwH,EACO,MAAQoS,EAAgBr5B,KAExB,KAKPgN,EACO,MAAQA,EAASJ,WAAW5M,KAE5B,IAIK,WACY,IAAD,EAA3B,OAAIm0B,GAAannB,EAET,iBACAA,EAASH,iBAAiBhK,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOo1B,YADpE,aACA,EAAgFtkB,eAAe7P,MAG5F,GAK8C63C,GACzD7qC,WACAmnB,YACAqjB,YACA7b,eA5DmB,SAAC3uB,GACf9I,EAAUC,kBAAkB6I,IAC7B0J,EAASwU,GAAqBC,mBAAmBne,EAAUjO,UAE9CqC,IAAb4L,IACA0J,EAASwU,GAAqBI,uBAC9B5U,EAASwU,GAAqBK,wBAuDlC8N,kBACAiV,kBAAmC,OAAjBrnB,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBxa,UAAU1N,MAAO,EACtDsrB,iBAAyB,OAARrd,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,WAAW7N,MAAO,EAC7C04C,cAA2B,OAAblwB,QAAa,IAAbA,OAAA,EAAAA,EAAexoB,MAAO,EACpCs5B,YAvDgB,SAACvqB,GACZ5J,EAAUC,kBAAkB2J,IAC7B4I,EAASwU,GAAqBc,gBAAgBle,SAEpC1M,IAAV0M,IACA4I,EAASwU,GAAqBI,uBAC9B5U,EAASwU,GAAqBM,uBC5F7BssB,GAA+D,WACxE,IAAO5tB,EAAQ6tB,KAAR7tB,KAmBP,OACI,yBAAKtQ,UAAU,oBAlBM,SAACsQ,GACtB,IAAKhmB,EAAUC,kBAAkB+lB,GAAO,CACpC,GAAIA,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,MAEX,GAAIM,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,CAAsB8rB,QAASxrB,EAAKN,SAAS,UAExD,GAAIM,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,MAEX,GAAIM,EAAKN,SAAS,OACd,OAAO,kBAAC,GAAD,CAA2B8rB,QAASxrB,EAAKN,SAAS,UAO5DouB,CAAiB9tB,KAKxB6tB,GAA2B,WAC7B,IAAM7tB,EAAa/P,YAAY+X,IACzBxb,EAAW0D,cAkCjB,MAAO,CAAC8P,OAAM+tB,eAhCS,SAAC/tB,GACpB,OAAQA,GACJ,IAAK,OACDxT,EAASuZ,GAAYC,QAAQjG,QAC7B,MACJ,IAAK,OACDvT,EAASuZ,GAAYC,QAAQyC,YAC7B,MACJ,IAAK,YACDjc,EAASuZ,GAAYC,QAAQmD,iBAC7B,MACJ,IAAK,WACD3c,EAASuZ,GAAYC,QAAQiD,gBAC7B,MAQJ,IAAK,QACDzc,EAASuZ,GAAYC,QAAQ0D,iB,oBCpDhCskB,I,MAAyD,WAClE,MAA4DC,KAArDC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,cAAepuB,EAApD,EAAoDA,KAEpD,OACI,yBAAKtQ,UAAU,aACX,kBAAC,GAAD,CAAiBmb,SAAUrd,GAAWgB,OACrBsB,KAAM+W,GAAYwnB,MAClB3+B,UAAW,mBAAqBsQ,EAAKN,SAASO,GAAKgH,KAAKluB,YAAc,UAAY,IAClF4W,QAASu+B,IAE1B,kBAAC,GAAD,CAAiBrjB,SAAUrd,GAAWoB,IACrBc,UAAW,mBAAqBsQ,IAASC,GAAKC,KAAO,UAAY,IACjEvQ,QAASy+B,IAE1B,kBAAC,GAAD,CAAiBvjB,SAAUrd,GAAWkB,KACrBgB,UAAW,mBAAqBsQ,IAASC,GAAKkK,KAAO,UAAY,IACjExa,QAASw+B,IAK1B,yBAAK/4B,MAAO,CAACvW,SAAU,WAAYyvC,OAAQ,QACvC,yBAAKC,IAAKC,KACLC,IAAI,aAET,yBAAK/+B,UAAU,iBAAf,YACA,2BAAO0F,MAAO,CAACgN,MAAO,QAASvjB,SAAU,WAAYyvC,OAAQ,MAA7D,KtLhCqB,QsLwC/BL,GAAwB,WAC1B,IAAMzhC,EAAW0D,cAmBjB,MAAO,CACHg+B,cAjBkB,WAClB1hC,EAASuZ,GAAYC,QAAQjG,SAiB7BquB,cAdkB,WAClB5hC,EAASuZ,GAAYC,QAAQkE,SAc7BikB,cAXkB,WAClB3hC,EAASuZ,GAAYC,QAAQtX,SAW7BggC,aARiB,WACjBliC,EAASuZ,GAAYC,QAAQoE,QAQ7BpK,KAvBS/P,YAAY+X,MCtBhB2mB,GAAqE,WAE1E,MAQIC,KAPAxZ,EADJ,EACIA,iBACAyZ,EAFJ,EAEIA,UACAnY,EAHJ,EAGIA,cACAC,EAJJ,EAIIA,OACAC,EALJ,EAKIA,QACA3jC,EANJ,EAMIA,UACA67C,EAPJ,EAOIA,wBAGJ,OACI,oCAC8B,IAAzBpY,EAAcx6B,QACf,yBAAKwT,UAAU,cACX,wBAAIA,UAAW,0BAA2B,uBAE7CgnB,EAAcx6B,OAAS,GAAK,kBAAC,GAAD,CACzBk5B,iBAAkBA,EAClBsB,cAAeA,EACfG,YAAagY,IACblY,OAAQA,EACRC,QAASA,EACT53B,KAAM/L,EACN6I,KAAMm4B,GAAWz3B,MACjB84B,YAAawZ,MAO3BF,GAAe,WACb,IAAMpiC,EAAW0D,cAEX/c,EAAqB8c,YAAY8H,IACjClkB,EAAmBoc,YAAY8H,IAE/Bg3B,EAAkC9+B,YAAY+X,IAC9CkX,EAAqCjvB,YAAY+X,IACjDE,EAAgCjY,YAAY+X,IAC5CoV,EAAoCntB,YAAY+X,IAChDgnB,EAAsC/+B,YAAY+X,IAClDogB,EAAuCn4B,YAAY+X,IACnDinB,EAAoCh/B,YAAY+X,IAChDknB,EAA0Bj/B,YAAY+X,IACtCmnB,EAA0Bl/B,YAAY+X,IAEtC7I,EAAkBlP,YAAY6P,IAE9BsvB,EAAiCn/B,YAAY6P,IAC7ChU,EAAqBmE,YAAY6P,IAEjC7sB,EAAoBgd,YAAY5C,IAEtCgiC,IAAM/jB,WAAU,WACZ9e,EAAS0L,MACT1L,EAAS0L,QACV,CAAC1L,IAEJ,IAAM8iC,EAAgB,WAClB,IAAMl3B,EAAkC,GAGxC,OAFAA,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASm3B,MACnBn3B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASo3B,MACZp3B,GAGLm3B,EAAwB,WAC1B,IAAMn3B,EAAkC,GAElCq3B,EAA2C3jC,EAAOpX,IAAIg7C,GAC5Dt3B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASq3B,IAEnB,IAAME,EAAuDP,EACxD16C,IAAIk7C,GACJzoC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEtR,KAAK22B,cAAcplB,EAAEvR,SAO3C,OANAsiB,EAAW1iB,KAAX,MAAA0iB,EAAU,YACHu3B,EAAgChwC,QAC/B,SAACkwC,GAAD,OAA6Bz3B,EAAWzd,MAAK,SAAC8gB,GAAD,OAAQq0B,EAAgBr0B,EAAIo0B,WAI1Ez3B,GAGLo3B,EAAwB,WAC1B,IAAMp3B,EAAkC,GAClC23B,GACQ,OAAV7Q,QAAU,IAAVA,OAAA,EAAAA,EAAYvrC,QAAQe,KAAI,SAACC,GAAD,OAAaA,EAASq7C,EAAsBr7C,GAAU,MAAKwnB,KAAK,KAAM,GAC5F8zB,EAAiD/nB,EAAe8nB,EAAsB9nB,GAAgB,GACtGgoB,EAAmDC,EAAuB/S,GAC1EgT,EAAmDhI,EACnDA,EAAgBr0C,UAAUW,IAAI6rB,GAC9B,GACA8vB,EAAwDpB,EACxD1uB,EAAuB0uB,QACvB/3C,EAaN,OAZA64C,EAAyBv6C,SAAQ,SAACwF,GAC9BA,GAAaod,EAAW1iB,KAAKsF,MAEjCod,EAAW1iB,KAAX,MAAA0iB,EAAU,YAAS83B,IACnB93B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASg4B,IACnBh4B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAAS63B,IACfI,GACAj4B,EAAW1iB,KAAK26C,GAEhBrB,GACA52B,EAAW1iB,KAAK46C,EAAwBtB,IAErC52B,GAGL03B,EAAkB,SAACS,EAA4BC,GACjD,OAAOD,EAAQ7U,WAAa8U,EAAQ9U,UAAY6U,EAAQz6C,OAAS06C,EAAQ16C,MAGvEk6C,EAAwB,SAACS,GAC3B,IAAMC,EAAyC,GAE/C,GAAID,EAAW37C,aAAeoc,GAAWsO,QAAS,CAC9C,IAAMvb,EAAwB0sC,EAAiCF,EAAW37C,YACpE4mC,EAAWz3B,IAAUkS,GAAegD,KAAOs3B,EAAWv7C,eAAiBu7C,EAAWx7C,iBAExFy7C,EAAkBh7C,KAAK,CACnBI,KAAM86C,EAAgBH,EAAW17C,OAAQ07C,EAAWz7C,YACpDiP,MAAOA,EACPy3B,SAAUA,IAGV+U,EAAW37C,aAAeoc,GAAWkI,iBACrCs3B,EAAkBh7C,KAAK,CACnBI,KAAM86C,EAAgBH,EAAW17C,OAAQ07C,EAAWz7C,YACpDiP,MAAOkS,GAAe8C,QACtByiB,SAAU+U,EAAWv7C,iBAIjC,OAAOw7C,GAGLhB,EAAuB,SAACmB,GAC1B,IAAM5sC,EAAwB6sC,EAAgCD,EAAU/7C,YAElE4mC,EAAWz3B,IAAUkS,GAAe46B,WAAaF,EAAU37C,eAAiB27C,EAAU57C,iBAE5F,MAAO,CACHa,KAAM86C,EAAgBC,EAAU97C,OAAQ87C,EAAU77C,YAClDiP,MAAOA,EACPy3B,SAAUA,IAIZkU,EAA6B,SAAC50C,GAChC,MAAO,CACHlF,KAAM86C,EAAgB51C,EAAUjG,OAAQiG,EAAUhG,YAClD0mC,SAAU1gC,EAAUrF,QACpBsO,MAAOjJ,EAAUiJ,QAInBksC,EAAyB,SAAC96C,GAC5B,IAAIga,EAA6B,GAQjC,OAPIha,QAC4B6B,IAAxB7B,EAASoB,YAA4BpB,EAASoB,WAAWyF,OAAS,IAClEmT,EAAQha,EAASoB,WAAW/B,KAAI,SAACwG,GAC7B,OAAOo1C,EAAwBp1C,OAIpCmU,GAGLihC,EAA0B,SAACp1C,GAC7B,MAAO,CACHwgC,SAAUxgC,EAAUvF,QACpBG,KAAM86C,EAAgB11C,EAAUnG,OAAQmG,EAAUlG,YAClDiP,MAAOkS,GAAeqD,UAIxB+G,EAAyB,SAACllB,GAC5B,MAAO,CACHqgC,SAAUrgC,EAAS1F,QACnBG,KAAM86C,EAAgBv1C,EAAStG,OAAQsG,EAASrG,YAChDiP,MAAOkS,GAAe4C,MAIxB63B,EAAkB,SAACn2C,EAAgB7D,GACrC,IAIuD,EAJnDo6C,EAAmB,sBACjB/6C,EAA4BpC,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,KACpExE,IACA+6C,EAAW/6C,EAAKA,KAAKH,UACFoB,IAAfN,IAA4C,IAAhBA,IAC5Bo6C,EACIA,EACA,QACC,UAAA/6C,EAAKA,KAAKI,UAAUsC,MAAK,SAACqI,GAAD,OAAUA,EAAKnM,KAAO+B,YAA/C,eAA4Dd,OACzD,kCAGhB,OAAOk7C,GAGLL,EAAmC,SAAC77C,GACtC,IAAIm8C,EACJ,OAAQn8C,GACJ,KAAKoc,GAAWyH,IACZs4B,EAAU96B,GAAe4C,IACzB,MACJ,KAAK7H,GAAW8H,OACZi4B,EAAU96B,GAAe8C,QACzB,MACJ,KAAK/H,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZ63B,EAAU96B,GAAegD,KACzB,MACJ,KAAKjI,GAAWsO,QACZyxB,EAAU96B,GAAeoC,WAGjC,OAAO04B,GAGLH,EAAkC,SAACh8C,GACrC,IAAIm8C,EACJ,OAAQn8C,GACJ,KAAKoc,GAAWyH,IACZs4B,EAAU96B,GAAe+6B,UACzB,MACJ,KAAKhgC,GAAW8H,OACZi4B,EAAU96B,GAAeg7B,aACzB,MACJ,KAAKjgC,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZ63B,EAAU96B,GAAe46B,WACzB,MACJ,KAAK7/B,GAAWsO,QACZyxB,EAAU96B,GAAeoC,WAGjC,OAAO04B,GA+CLG,EAAc,SAAC50C,GACjB,MAAO,CACH3H,GAAI2H,EAAMA,MAAM3H,GAChB4lC,SAAUj+B,EAAMA,MAAM1G,KACtB4kC,UAAW,IACXC,WAAY,GACZC,cAAe0U,IAAgB3vC,QAC3B,SAAC6oB,GAAD,OACIA,EAAIkT,WAAal/B,EAAMA,MAAM3H,IAC5B2zB,EAAIkT,SAAoDjhC,SAAW+B,EAAMA,MAAM3H,MAExFgmC,WAAY5nC,EACZ6I,KAAM,UA6Cd,MAAO,CACHs5B,iBAtGqB,SAAChjB,EAAWC,EAAW3V,GAC5C,IAAMmD,EAAW1M,EAAOwF,MAAK,SAACkH,GAAD,OAAcA,EAASpB,gBAAgBI,SAAShK,KAAO6H,KACpF,GAAImD,EAAU,CACV,IAAMwxC,EAAyBr3C,EAAUG,SAAS0F,GAClDwxC,EAAa5yC,gBAAgBI,SAASuT,EAAIA,EAC1Ci/B,EAAa5yC,gBAAgBI,SAASwT,EAAIA,EAC1C7F,EAASqW,GAAewuB,MAiG5BxC,UA3Cc,WAAyB,IAAD,EAElCyC,EADEC,EAA+B,GA6BrC,OA1BAD,EAAenyB,EAEX+vB,GACAoC,EAAa57C,KAAKw5C,IAEtB,EAAAoC,GAAa57C,KAAb,oBAAqBy5C,IAErBmC,EAAa97C,SAAQ,SAACg8C,EAAa58C,GAC/B28C,EAAW77C,KAAK,CACZsc,KAAM1B,GAAc0D,MACpBnf,GAAID,EACJgd,OAAQ4/B,EAAYjyB,WACpBtN,SAAU5B,GAAemE,OACzBpD,QAASogC,EAAYpyB,sBAAsBvgB,SAASuT,EACpDf,QAASmgC,EAAYpyB,sBAAsBvgB,SAASwT,EACpDf,QAASkgC,EAAYnyB,sBAAsBxgB,SAASuT,EACpDb,QAASigC,EAAYnyB,sBAAsBxgB,SAASwT,EACpDZ,aAAc+/B,EAAYpyB,sBAAsB3gB,gBAAgBqU,OAChEtB,YAAaggC,EAAYpyB,sBAAsB3gB,gBAAgBoU,MAC/DnB,aAAc8/B,EAAYnyB,sBAAsB5gB,gBAAgBqU,OAChEnB,YAAa6/B,EAAYnyB,sBAAsB5gB,gBAAgBoU,MAC/Dd,QAASy/B,EAAY11C,OAASsU,GAAUoP,QAExCtN,UAAWs/B,EAAY11C,OAASsU,GAAU8I,KAAO,oBAAsB,0BAGxEq4B,GAcP7a,cAnFwB,SAACvjC,GACzB,IAAIs+C,EAmBJ,OAlBAA,EAAiBt+C,EACZwM,QAAO,SAACnD,GAAD,QAAauyC,GAAkBA,EAAevyC,MAAM3H,KAAO2H,EAAMA,MAAM3H,OAC9EH,KAAI,SAACg9C,GACF,MAAO,CACHrZ,QAAS,kBAAC,GAAc+Y,EAAYM,IACpC7yC,SAAU6yC,EAAOjzC,gBAAgBI,SACjCJ,gBAAiBizC,EAAOjzC,gBAAgBA,oBAG/CkB,QAAO,SAACslB,GAAD,YAAmB/tB,IAAT+tB,KAElB8pB,GACA0C,EAAe/7C,KAAK,CAChB2iC,QAAS,kBAAC,GAAc+Y,EAAYrC,IACpClwC,SAAUkwC,EAAetwC,gBAAgBI,SACzCJ,gBAAiBswC,EAAetwC,gBAAgBA,kBAGjDgzC,EA+DQE,CAAoBx+C,GACnCwjC,OARW,WACXnqB,EAASF,GAAcM,gBAQvBgqB,QAbY,WACZpqB,EAASF,GAAcU,iBAavB8hC,wBAjG4B,SAACj8B,EAAeC,EAAgByiB,GAC5D,IAAM+L,EAAkCtnC,EAAUG,SAC9ChH,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMiC,gBAAgBA,gBAAgB5J,KAAO0gC,MAEpE+L,IACAA,EAAU7iC,gBAAgBA,gBAAgBoU,MAAQA,EAClDyuB,EAAU7iC,gBAAgBA,gBAAgBqU,OAASA,EACnDtG,EAASqW,GAAeye,MA2F5BruC,cC/VC2+C,GAAmE,WAE5E,MAQIC,KAPAzc,EADJ,EACIA,iBACAsB,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,OACAC,EAJJ,EAIIA,QACAkb,EALJ,EAKIA,aACAhD,EANJ,EAMIA,wBACAiD,EAPJ,EAOIA,eAyBJ,OApBY,oCAC8B,IAAzBrb,EAAcx6B,QACf,yBAAKwT,UAAU,aACX,wBAAIA,UAAW,0BAA2B,6BAE7CgnB,EAAcx6B,OAAS,GAAK,kBAAC,GAAD,CACzBk5B,iBAAkBA,EAClBsB,cAAeA,EACfG,YAAaib,IACbnb,OAAQA,EACRC,QAASA,EACT53B,KAAM+yC,EACNj2C,KAAMm4B,GAAWh+B,KACjBq/B,YAAawZ,MAU/B+C,GAA4B,WAC1B,IAAMrlC,EAAW0D,cAEXrc,EAAmBoc,YAAY8H,IAC/Bi6B,EAAgC/hC,YAAY+X,IAC5CiqB,EAAkChiC,YAAY8H,IAC9C5kB,EAAqB8c,YAAY8H,IAEjCm6B,EAA4CjiC,YAAY+X,IACxDkX,EAAqCjvB,YAAY+X,IACjDE,EAAgCjY,YAAY+X,IAC5CoV,EAAoCntB,YAAY+X,IAChDgnB,EAAsC/+B,YAAY+X,IAClDogB,EAAuCn4B,YAAY+X,IACnDinB,EAAoCh/B,YAAY+X,IAEhDr0B,EAAsBsc,YAAY6P,IAElCsvB,EAAiCn/B,YAAY6P,IAC7ChU,EAAqBmE,YAAY6P,IAEjCiyB,EAAyB9hC,YAAY5C,IAE3CgiC,IAAM/jB,WAAU,WACZ9e,EAAS0L,MACT1L,EAAS0L,QACV,CAAC1L,IAEJ,IAAM2lC,EAAmB,SAAC52C,GAA6B,IAAD,EAClD,OAAO,UAAApI,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAO0G,YAA1C,eAAoDiB,MAAM1G,OAAQ,wBAGvEw5C,EAAgB,WAClB,IAAMl3B,EAAkC,GAGxC,OAFAA,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASm3B,MACnBn3B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASo3B,MACZp3B,GAGLm3B,EAAwB,WAC1B,IAAMn3B,EAAkC,GAElCq3B,EAA2C3jC,EAAOpX,IAAIg7C,GAC5Dt3B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASq3B,IAEnB,IAAM2C,EAA6Cz+C,EAAQe,IAAIs7C,GAC/D53B,EAAW1iB,KAAX,MAAA0iB,EAAU,YACHg6B,EAAsBzyC,QACrB,SAAC0yC,GAAD,OAA0Bj6B,EAAWzd,MAAK,SAAC8gB,GAAD,OAAQq0B,EAAgBr0B,EAAI42B,WAI9E,IAAM1C,EAAuDP,EAExDzvC,QAAO,SAAC2yC,GAAD,OAAYA,EAAOruC,QAAUkS,GAAe2C,gBACnDpkB,IAAIk7C,GACJzoC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEtR,KAAK22B,cAAcplB,EAAEvR,SAO3C,OANAsiB,EAAW1iB,KAAX,MAAA0iB,EAAU,YACHu3B,EAAgChwC,QAC/B,SAAC4yC,GAAD,OAAqCn6B,EAAWzd,MAAK,SAAC8gB,GAAD,OAAQq0B,EAAgBr0B,EAAI82B,WAIlFn6B,GAGLo3B,EAAwB,WAC1B,IAAMp3B,EAAkC,GAClC23B,GAA0D,OAAV7Q,QAAU,IAAVA,OAAA,EAAAA,EAAYvrC,QAAQe,IAAIs7C,KAA0B,GAClGC,EAA2D/nB,EAC3D8nB,EAAsB9nB,QACtBhxB,EACAs7C,EAA6DvD,EAC7D1uB,EAAuB0uB,QACvB/3C,EACAg5C,EAAmDC,EAAuB/S,GAC1EqV,EAA+CrK,EAC/CA,EAAgBr0C,UAAUW,IAAI6rB,GAC9B,GAaN,OAZAnI,EAAW1iB,KAAX,MAAA0iB,EAAU,YAAS23B,IACnB33B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAAS83B,IACnB93B,EAAW1iB,KAAX,MAAA0iB,EAAU,YAASq6B,IACfxC,GACA73B,EAAW1iB,KAAKu6C,GAEhBuC,GACAp6B,EAAW1iB,KAAK88C,GAEhBxD,GACA52B,EAAW1iB,KAAK46C,EAAwBtB,IAErC52B,GAGLs3B,EAAuB,SAACmB,GAC1B,IAAM5sC,EAAwB6sC,EAAgCD,EAAU/7C,YAElE4mC,EAAWz3B,IAAUkS,GAAe46B,WAAaF,EAAU37C,eAAiB27C,EAAU57C,iBAE5F,MAAO,CACHa,KAAM86C,EAAgBC,EAAU97C,OAAQ87C,EAAU77C,YAClDiP,MAAOA,EACPy3B,SAAUA,IAIlB,SAASsU,EAAsBS,GAC3B,IAAMxsC,EAAwB0sC,EAAiCF,EAAW37C,YAC1E,MAAO,CACHgB,KAAMq8C,EAAiB1B,EAAWx7C,kBAClCgP,MAAOA,EACPy3B,SAAU+U,EAAW17C,QAI7B,IAAM66C,EAA6B,SAAC50C,GAChC,MAAO,CACHlF,KAAMq8C,EAAiBn3C,EAAUrF,SACjC+lC,SAAU,CAACjhC,OAAQO,EAAUjG,OAAQ6B,WAAYoE,EAAUhG,YAC3DiP,MAAOkS,GAAeoC,aAIxB43B,EAAyB,SAAC96C,GAC5B,IAAIga,EAA6B,GAQjC,OAPIha,QAC4B6B,IAAxB7B,EAASoB,YAA4BpB,EAASoB,WAAWyF,OAAS,IAClEmT,EAAQha,EAASoB,WAAW/B,KAAI,SAACwG,GAC7B,OAAOo1C,EAAwBp1C,OAIpCmU,GAGLihC,EAA0B,SAACp1C,GAC7B,MAAO,CACHwgC,SAAU,CAACjhC,OAAQS,EAAUnG,OAAQ6B,WAAYsE,EAAUlG,YAC3Dc,KAAMq8C,EAAiBj3C,EAAUvF,SACjCsO,MAAOkS,GAAeqD,UAIxB+G,EAAyB,SAACllB,GAC5B,MAAO,CACHqgC,SACIrgC,EAASrG,YAAc,EACjB,CAACyF,OAAQY,EAAStG,OAAQ6B,WAAYyE,EAASrG,YAC/CqG,EAAStG,OACnBe,KAAMq8C,EAAiB92C,EAAS1F,SAChCsO,MAAOkS,GAAe4C,MAIxB+2B,EAAkB,SAACS,EAA4BC,GACjD,IAAMkC,EAAWnC,EAAQ7U,SAAoDjhC,QAAU81C,EAAQ7U,SACzFiX,EAAepC,EAAQ7U,SAG1B9kC,WACGg8C,EAAWpC,EAAQ9U,SAAoDjhC,QAAU+1C,EAAQ9U,SACzFmX,EAAerC,EAAQ9U,SAG1B9kC,WACH,OACK87C,IAAYE,GAAWrC,EAAQ7U,WAAa8U,EAAQ9U,WACrD6U,EAAQz6C,OAAS06C,EAAQ16C,SACtB68C,GAAeE,IAAgBF,IAAgBE,IAIpDlC,EAAmC,SAAC77C,GACtC,IAAIm8C,EACJ,OAAQn8C,GACJ,KAAKoc,GAAWyH,IACZs4B,EAAU96B,GAAe4C,IACzB,MACJ,KAAK7H,GAAW8H,OACZi4B,EAAU96B,GAAe8C,QACzB,MACJ,KAAK/H,GAAWgI,KAGhB,KAAKhI,GAAWkI,gBACZ63B,EAAU96B,GAAe4C,IACzB,MACJ,KAAK7H,GAAWsO,QACZyxB,EAAU96B,GAAeoC,WAGjC,OAAO04B,GAGLH,EAAkC,SAACh8C,GACrC,IAAIm8C,EACJ,OAAQn8C,GACJ,KAAKoc,GAAWyH,IACZs4B,EAAU96B,GAAe+6B,UACzB,MACJ,KAAKhgC,GAAW8H,OACZi4B,EAAU96B,GAAeg7B,aACzB,MACJ,KAAKjgC,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZ63B,EAAU96B,GAAe46B,WACzB,MACJ,KAAK7/B,GAAWsO,QACZyxB,EAAU96B,GAAeoC,WAGjC,OAAO04B,GAGLL,EAAkB,SAACn2C,EAAgB7D,GACrC,IAIuD,EAJnDo6C,EAAmB,sBACjB/6C,EAA4BpC,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,KACpExE,IACA+6C,EAAW/6C,EAAKA,KAAKH,UACFoB,IAAfN,IAA4C,IAAhBA,IAC5Bo6C,EACIA,EACA,QACC,UAAA/6C,EAAKA,KAAKI,UAAUsC,MAAK,SAACqI,GAAD,OAAUA,EAAKnM,KAAO+B,YAA/C,eAA4Dd,OACzD,kCAGhB,OAAOk7C,GAoCL8B,EAAa,SAAC78C,GAChB,MAAO,CACHpB,GAAIoB,EAAKA,KAAKpB,GACd4lC,SAAUxkC,EAAKA,KAAKH,KACpB4kC,UAAW,IACXC,WAAY,GACZC,cAAe0U,IAAgB3vC,QAC3B,SAAC6oB,GAAD,OACIA,EAAIkT,WAAazlC,EAAKA,KAAKpB,IAC1B2zB,EAAIkT,SAAoDjhC,SAAWxE,EAAKA,KAAKpB,MAEtFwB,UAAWJ,EAAKA,KAAKI,UACrBwkC,WAAYkX,EACZj2C,KAAM,SAYRi3C,EAAqB,SAACt4C,GAAoD,IAAD,EAC3E,OAAO,UAAA5G,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAO4F,YAAtC,eAA+CgE,uBAAmBvH,GAGvE87C,EAAsB,SAACp4C,EAA0B/F,EAAYo+C,GAC/D,IAAM7zB,EAAwD2zB,EAAmBn4C,EAASC,SACpFwkB,EAAwD0zB,EAAmBn4C,EAASE,SAE1F,MAAO,CACHjG,GAAIA,EACJ+c,OAAQ,GACRK,SAAU5B,GAAeoF,KACzBrE,SAA8B,OAArBgO,QAAqB,IAArBA,OAAA,EAAAA,EAAuBvgB,SAASuT,IAAK,EAC9Cf,SAA8B,OAArB+N,QAAqB,IAArBA,OAAA,EAAAA,EAAuBvgB,SAASwT,IAAK,EAC9Cf,SAA8B,OAArB+N,QAAqB,IAArBA,OAAA,EAAAA,EAAuBxgB,SAASuT,IAAK,EAC9Cb,SAA8B,OAArB8N,QAAqB,IAArBA,OAAA,EAAAA,EAAuBxgB,SAASwT,IAAK,EAC9CZ,cAAmC,OAArB2N,QAAqB,IAArBA,OAAA,EAAAA,EAAuB3gB,gBAAgBqU,SAAU,EAC/DtB,aAAkC,OAArB4N,QAAqB,IAArBA,OAAA,EAAAA,EAAuB3gB,gBAAgBoU,QAAS,EAC7DnB,cAAmC,OAArB2N,QAAqB,IAArBA,OAAA,EAAAA,EAAuB5gB,gBAAgBqU,SAAU,EAC/DnB,aAAkC,OAArB0N,QAAqB,IAArBA,OAAA,EAAAA,EAAuB5gB,gBAAgBoU,QAAS,EAC7Dd,QAASkhC,EACTphC,gBAAiBjX,EAAS8V,WAC1BoB,gBAAiBlX,EAASgW,aAoB5BsiC,EAAwB,SAAC9yC,GAC3B,OAAkC,IAA1BA,EAAavF,UAA4C,IAA1BuF,EAAatF,SAcxD,MAAO,CACHs6B,iBApHqB,SAAChjB,EAAWC,EAAW3V,GAC5C,IAAM6E,EAAU1N,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKwI,gBAAgBI,SAAShK,KAAO6H,KAC1E,GAAI6E,EAAS,CACT,IAAMC,EAAuBxH,EAAUG,SAASoH,GAChDC,EAAY/C,gBAAgBI,SAASuT,EAAIA,EACzC5Q,EAAY/C,gBAAgBI,SAASwT,EAAIA,EACzC7F,EAASiY,GAAcjjB,MA+G3Bk1B,cA3GsB,SAAC7iC,GACvB,IAAI49C,EAmBJ,OAlBAA,EAAiB59C,EACZ8L,QAAO,SAAC1J,GAAD,QAAY+7C,GAAiBA,EAAc/7C,KAAKpB,KAAOoB,EAAKA,KAAKpB,OACxEH,KAAI,SAACy+C,GACF,MAAO,CACH9a,QAAS,kBAAC,GAAcya,EAAWK,IACnCt0C,SAAUs0C,EAAM10C,gBAAgBI,SAChCJ,gBAAiB00C,EAAM10C,gBAAgBA,oBAG9CkB,QAAO,SAACslB,GAAD,YAAmB/tB,IAAT+tB,KAElB+sB,GACAP,EAAe/7C,KAAK,CAChB2iC,QAAS,kBAAC,GAAcya,EAAWd,IACnCnzC,SAAUmzC,EAAcvzC,gBAAgBI,SACxCJ,gBAAiBuzC,EAAcvzC,gBAAgBA,kBAGhDgzC,EAuFQ2B,CAAkBv/C,GACjC8iC,OAhEW,WACXnqB,EAASF,GAAcW,eAgEvB2pB,QArEY,WACZpqB,EAASF,GAAcY,gBAqEvB4kC,aApCiB,WACjB,IAAIuB,EAAuC,GAEvCC,EAAsCt5C,EAAUG,SAAS83C,GAU7D,OARIC,IACAoB,EAAoBA,EAAkB3zC,QAAO,SAAC/E,GAAD,OAAcA,EAAS/F,KAAOq9C,EAAmBr9C,MAC1Fq+C,EAAsBhB,IACtBmB,EAAmB39C,KAAKs9C,EAAoBd,EAAoBA,EAAmBr9C,IAAI,KAI/Fy+C,EAAkB99C,SAAQ,SAAC+9C,GAAD,OAASF,EAAmB39C,KAAKs9C,EAAoBO,EAAKA,EAAI1+C,QACjFw+C,GAwBPvE,wBAjB4B,SAACj8B,EAAeC,EAAgByiB,GAC5D,IAAM3M,EAAgC5uB,EAAUG,SAC5CtG,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKwI,gBAAgBA,gBAAgB5J,KAAO0gC,MAEjE3M,IACAA,EAASnqB,gBAAgBA,gBAAgBoU,MAAQA,EACjD+V,EAASnqB,gBAAgBA,gBAAgBqU,OAASA,EAClDtG,EAASiY,GAAcmE,MAW3BmpB,mB,SC1ZCyB,GAAmD,SAACnkC,GAC7D,IAAOkG,EAA4BlG,EAA5BkG,MAAOk+B,EAAqBpkC,EAArBokC,SAAU9jC,EAAWN,EAAXM,QACxB,OACI,yBAAKD,UAAW,mBAAqB+jC,EAAW,aAAe,OAC1D9jC,QAASA,GAET4F,ICPAm+B,GAA6D,SAACrkC,GACvE,IAAOkG,EAA0BlG,EAA1BkG,MAAOiV,EAAmBnb,EAAnBmb,SAAUpV,EAAS/F,EAAT+F,MACxB,OACI,yBAAK1F,UAAU,YACV0F,MAAOA,GAER,yBAAK1F,UAAU,kBAAkB6F,GACjC,yBAAKH,MAAO,CAACsuB,QAAS,SAAUlZ,KCN/BmpB,I,cAAyD,SAACtkC,GACnE,IAAOE,EAAeF,EAAfE,KAAMgG,EAASlG,EAATkG,MAEb,OACI,yBAAK7F,UAAU,kBACX,0BAAMA,UAAU,sBACZ,+BAAQ6F,IAEZ,0BAAM7F,UAAU,uBACZ,+BAAQH,OCKXqkC,GAAmE,WACxE,MAaIC,KAZAC,EADJ,EACIA,cACAC,EAFJ,EAEIA,UACAC,EAHJ,EAGIA,YACA9hC,EAJJ,EAIIA,UACA+hC,EALJ,EAKIA,cACAC,EANJ,EAMIA,mBACAC,EAPJ,EAOIA,cACAvwC,EARJ,EAQIA,MACAd,EATJ,EASIA,SACAsxC,EAVJ,EAUIA,UACAC,EAXJ,EAWIA,aACAC,EAZJ,EAYIA,eAGJ,EAAkCnpB,oBAAkB,GAApD,mBAAOopB,EAAP,KAAkBC,EAAlB,KACAlpB,qBAAU,WACNkpB,GAAcx6C,EAAUC,kBAAkB2J,MAC3C,CAACA,IACJ,IAAM6wC,EAAYlhB,iBAAuB,MACzC,EAAsCpI,mBAAiB,GAAvD,mBAAOupB,EAAP,KAAoBC,EAApB,KAGArpB,qBAAU,WACN,IAAMsN,EAAiB,WACf6b,GAAaA,EAAUjhB,SACvBmhB,EAAeF,EAAUjhB,QAAQqC,eAOzC,OAHA+C,IACAnsB,OAAOomB,iBAAiB,SAAU+F,GAE3B,WACHnsB,OAAOqmB,oBAAoB,SAAU8F,MAE1C,CAAC6b,IAEJ,IA2HMG,EAAkB,WACpB,SAAU9xC,IAAac,IAG3B,OACI,yBAAK8L,UAAU,iBACV+jB,IAAKghB,IAEJG,KACF,wBAAIllC,UAAW,0BAA2B,oDAGzCklC,KAAqB,oCAElB,yBAAKx/B,MAAO,CAACsuB,QAAS,OAAQ7kC,SAAU,WAAYg2C,OAAQ,GAAIhiC,MAAO,SAClEjP,GACG,kBAAC,GAAD,CAAkB2R,MAAM,OACNH,MAAO,CAACmlB,gBAAiB,mCAEvC,kBAAC,GAAD,CAAahlB,MAAM,QACNk+B,SAAUc,EACV5kC,QAAS,kBAAM6kC,GAAa,MAEzC,kBAAC,GAAD,CAAaj/B,MAAM,WACNk+B,UAAWc,EACX5kC,QAAS,kBAAM6kC,GAAa,OAIjD,yBAAKp/B,MAAO,CAAC0/B,WAAY,SACrB,kBAAC,GAAD,CAAgBv/B,MAAM,SACNhG,KAAM6kC,IAEtB,kBAAC,GAAD,CAAgB7+B,MAAM,SACNhG,KAAM8kC,MAK9B,yBAAK3kC,UAAU,0BACV0F,MAAO,CAACtC,OAAQ4hC,KAEfH,GAAazxC,GA5DvB,kBAAC,mBAAD,CAAiBiyC,UAAU,EACVC,YAAa,GA1GX,SAArBC,EAAsBC,GACxB,IAAM3B,EAAkB,GAoBxB,OAlBI2B,EAAKxZ,UACL6X,EAAI79C,KAAK,CACLy/C,SAAUD,EAAKxZ,SACf0Z,aAAc,SACdC,aAAc,MACdjgC,MAAO,CACHkgC,YACIvB,EAAUp7C,MAAK,SAACiD,GAAD,OAAUA,IAASs5C,EAAKxZ,aAAaqY,EAAUp7C,MAAK,SAACiD,GAAD,OAAUA,IAASs5C,EAAKrgD,MACrFqd,IACA,iCACVoC,YACIy/B,EAAUp7C,MAAK,SAACiD,GAAD,OAAUA,IAASs5C,EAAKxZ,aAAaqY,EAAUp7C,MAAK,SAACiD,GAAD,OAAUA,IAASs5C,EAAKrgD,MACrF,EACA,KAMlB,yBAAK6a,UAAU,gBACV0F,MAAO,CAACmgC,OAAoB,SAAZL,EAAKrgD,GAAgB,GAAK,UAC1CwD,IAAK68C,EAAKrgD,IAEX,kBAAC,iBAAD,CAAeA,GAAIqgD,EAAKrgD,GACTwhB,UAAWk9B,GAEtB,yBACI7jC,UAAuB,SAAZwlC,EAAKrgD,GAAgB,OAASqgD,EAAKM,SAC9C3gD,GAAIo/C,IAAkBiB,EAAKrgD,GAAK,uBAAyB,IAE5C,SAAZqgD,EAAKrgD,IAAiBqgD,EAAKM,WAAa17C,EAAUuM,IAAM,GAAK6uC,EAAK3/B,QAG1E2/B,EAAKM,WAAa17C,EAAUuM,KAAO,yBAAKqJ,UAAU,aAAawlC,EAAK3/B,OACrE,yBACIH,MAAO,CACHsuB,QAAS,OACT3C,eAAgB,eAChB2F,WAAY,QACZ7zB,MAAO,SAGVqiC,EAAKO,OAAO/gD,IAAIugD,KA+DpBA,CAAmBnB,IA0DfS,GAAa3wC,GAnDtB,kBAAC,mBAAD,CAAiBmxC,UAAU,EACVC,YAAa,GAjEd,SAAlBU,EAAmBR,GACrB,IAAM3B,EAAkB,GAsBxB,OApBI2B,EAAKxZ,UACL6X,EAAI79C,KAAK,CACLy/C,SAAUD,EAAKxZ,SACf0Z,aAAc,SACdC,aAAc,MACdjgC,MAAO,CACHkgC,aACe,OAAXtB,QAAW,IAAXA,OAAA,EAAAA,EAAar7C,MAAK,SAAC6K,GAAD,OAAUA,IAAS0xC,EAAKxZ,cAC1CsY,EAAYr7C,MAAK,SAAC6K,GAAD,OAAUA,IAAS0xC,EAAKrgD,MACnCy/C,IACA,iCACVhgC,aACe,OAAX0/B,QAAW,IAAXA,OAAA,EAAAA,EAAar7C,MAAK,SAAC6K,GAAD,OAAUA,IAAS0xC,EAAKxZ,cAC1CsY,EAAYr7C,MAAK,SAAC6K,GAAD,OAAUA,IAAS0xC,EAAKrgD,MACnC,EACA,KAMlB,yBAAK6a,UAAU,gBACV0F,MAAO,CAACmgC,OAAoB,SAAZL,EAAKrgD,GAAgB,GAAK,UAC1CwD,IAAK68C,EAAKrgD,IAEX,kBAAC,iBAAD,CAAeA,GAAIqgD,EAAKrgD,GACTwhB,UAAWk9B,GAEtB,yBAAK7jC,UAAWwlC,EAAKM,SAChB3gD,GAAIs/C,IAAkBe,EAAKrgD,GAAK,uBAAyB,IAEzDqgD,EAAKM,WAAal7C,EAAe+L,IAAM,GAAK6uC,EAAK3/B,QAGzD2/B,EAAKM,WAAal7C,EAAe+L,KAAO,yBAAKqJ,UAAU,aAAawlC,EAAK3/B,OAC1E,yBACIH,MAAO,CACHsuB,QAAS,OACT3C,eAAgB,eAChB2F,WAAY,QACZ7zB,MAAO,SAGVqiC,EAAKO,OAAO/gD,IAAIghD,KAqBpBA,CAAgBxB,QAwF/BL,GAAwB,WACtB,IAAM/wC,EAA+BmN,YAAY6P,IAC3C61B,EAAgC1lC,YAAY6P,IAC5C9F,EAAoB/J,YAAY6P,IAChClc,EAAyBqM,YAAY6P,IACrC9C,EAA8B/M,YAAY6P,IAC1Cm0B,EAAwBhkC,YAAY6P,IACpCq0B,EAAwBlkC,YAAY6P,IA0CpC81B,EAAgB,SAAhBA,EAAiB/5C,EAAY6/B,EAAkBma,GACjD,IAAMC,EAAuB,CACzBjhD,GAAI,GACJ0gB,MAAO,GACPigC,SAAU35C,EAAKC,KACf4/B,SAAUA,EACV+Z,OAAQ,IAEZ,IAAKz7C,EAAUC,kBAAkB6I,GAC7B,OAAQjH,EAAKC,MACT,KAAKhC,EAAUiC,KAEX,IAAMH,EACFkH,EAAUH,iBAAiBhK,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAOgH,EAAKhH,OAAO,KACrF,GAAI+G,EAAM,CACN,IAAMm6C,EAAiB,SAAWn6C,EAAK+J,eAAe9Q,GACtDihD,EAAUjhD,GAAK6mC,EAAWqa,EAC1BD,EAAUvgC,MAAQ3Z,EAAK+J,eAAe7P,KACjC4lC,EAAShc,SAASq2B,KACnBF,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUL,OAAO//C,KAAKkgD,EAAch6C,EAAK+J,eAAe9J,KAAMi6C,EAAUjhD,GAAIghD,KAGpF,MACJ,KAAK/7C,EAAUuM,IAEX,IAAM3B,EAA0B5B,EAAUlP,UAAU+E,MAAK,SAAC+L,GAAD,OAAUA,EAAK7P,KAAOgH,EAAKhH,OAAO,KAC3F,GAAI6P,EAAM,CACN,IAAMqxC,EAAiB,QAAUrxC,EAAK7P,GACtCihD,EAAUjhD,GAAK6mC,EAAWqa,EAC1BD,EAAUvgC,MAAQ7Q,EAAK5O,KAElB4lC,EAAShc,SAASq2B,KACnBF,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUL,OAAO//C,KAAKkgD,EAAclxC,EAAK7O,OAAQigD,EAAUjhD,GAAIghD,IAC/DC,EAAUL,OAAO//C,KAAKkgD,EAAclxC,EAAK9O,SAAUkgD,EAAUjhD,GAAIghD,KAErE,MAEJ,MACJ,KAAK/7C,EAAUsI,MACX0zC,EAAUjhD,GAAK6mC,EAAW,SAC1B,MACJ,KAAK5hC,EAAUuhB,IACXy6B,EAAUjhD,GAAK6mC,EAAW,OAC1B,MACJ,KAAK5hC,EAAUwhB,KACXw6B,EAAUjhD,GAAK6mC,EAAW,QAItC,OAAOoa,GAgJX,MAAO,CACHhC,cAtEuB,SAACoB,GACxB,IAAMW,EAAsB,GACtBC,EAAuB,CAACjhD,GAAI,OAAQ0gB,MAAO,GAAIigC,SAAUN,EAAKp5C,KAAM25C,OAAQ,IAClF,OAAQP,EAAKp5C,MACT,KAAKhC,EAAUiC,KACX85C,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUvgC,MAAS2/B,EAAK58C,MAA0BqN,eAAe7P,KACjEggD,EAAUL,OAAO//C,KACbkgD,EAAeV,EAAK58C,MAA0BqN,eAAe9J,KAAMi6C,EAAUjhD,GAAIghD,IAErF,MACJ,KAAK/7C,EAAUuM,IACXwvC,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUvgC,MAAS2/B,EAAK58C,MAAqBxC,KAC7CggD,EAAUL,OAAO//C,KAAKkgD,EAAeV,EAAK58C,MAAqBzC,OAAQigD,EAAUjhD,GAAIghD,IACrFC,EAAUL,OAAO//C,KAAKkgD,EAAeV,EAAK58C,MAAqB1C,SAAUkgD,EAAUjhD,GAAIghD,IAG/F,OAAOC,EAoDQE,CA3FE,WACjB,IAAM36C,EAAiB,CAAC46C,QAAQ,EAAOn6C,KAAMhC,EAAUiC,KAAMzD,MAAO,IAAIimC,IACxE,GAAIz7B,EAAU,CACV,IAAM/M,EApJE,SAAC+M,GACb,IAAM/M,EAAa,CACf+F,KAAMhC,EAAUsI,MAChB9J,MAAO,CAACwD,KAAMhC,EAAUsI,OACxB6zC,QAAQ,GAEZ,IAAKj8C,EAAUC,kBAAkB6I,GAAW,CACxC,IAAMozC,EAAwCpzC,EAAUH,iBAAiBhK,MACrE,SAACiD,GAAD,OAAUA,EAAK+J,eAAe5P,QAE5BogD,EAAmCrzC,EAAUlP,UAAU+E,MAAK,SAAC+L,GAAD,OAAUA,EAAK3O,QAE7EmgD,IAAaC,IACbpgD,EAAK+F,KAAOhC,EAAUiC,KACtBhG,EAAKuC,MAAQ49C,GAEbC,IAAaD,IACbngD,EAAK+F,KAAOhC,EAAUuM,IACtBtQ,EAAKuC,MAAQ69C,GAGrB,OAAOpgD,EA+HgBwkB,CAAQzX,GACtB/M,EAAKuC,MAA0B3E,UAC/B0H,EAAS/C,MAA0BqN,eAAe9J,KAAO,CACtDC,KAAMhC,EAAUiC,KAChBlH,GAAKkB,EAAKuC,MAA0BqN,eAAe9Q,KAGtDkB,EAAKuC,MAAqB1C,WAC1ByF,EAAS/C,MAA0BqN,eAAe9J,KAAO,CACtDC,KAAMhC,EAAUuM,IAChBxR,GAAKkB,EAAKuC,MAAqBzD,KAGvCwG,EAAS46C,QAAS,EAEtB,OAAO56C,EAyE2B+6C,IAClClC,mBAlD4B,SAACgB,GAC7B,IAAMW,EAAsB,GACtBC,EAA4B,CAACjhD,GAAI,GAAI0gB,MAAO,GAAIigC,SAAUN,EAAKp5C,KAAM25C,OAAQ,IASnF,OARAI,EAAUngD,KAAKogD,EAAUjhD,IACpBqgD,EAAK58C,MAAuBuK,YAC7BizC,EAAUjhD,GAAMqgD,EAAK58C,MAAuBuK,UAAUhO,GAAGkE,WACzD+8C,EAAUvgC,MAAS2/B,EAAK58C,MAAuBuK,UAAU/M,KACzDggD,EAAUL,OAAO//C,KApGE,SAArB2gD,EAAsBx6C,EAAiB6/B,EAAkBma,GAC3D,IAAMC,EAA4B,CAC9BjhD,GAAI,GACJ0gB,MAAO,GACPigC,SAAU35C,EAAKC,KACf4/B,SAAUA,EACV+Z,OAAQ,IAEZ,IAAKz7C,EAAUC,kBAAkB2J,GAC7B,OAAQ/H,EAAKC,MACT,KAAKxB,EAAe0hB,KAEhB,IAAMxY,EACFI,EAAOiH,MAAMlS,MAAK,SAAC6K,GAAD,OAAUA,EAAKX,UAAUhO,KAAOgH,EAAKhH,OAAO,KAClE,GAAI2O,EAAM,CACN,IAAMuyC,EAAiB,SAAWvyC,EAAKX,UAAUhO,GACjDihD,EAAUjhD,GAAK6mC,EAAWqa,EAC1BD,EAAUvgC,MAAQ/R,EAAKX,UAAU/M,KAC5B4lC,EAAShc,SAASq2B,KACnBF,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUL,OAAO//C,KAAK2gD,EAAmB7yC,EAAKX,UAAUhH,KAAMi6C,EAAUjhD,GAAIghD,KAGpF,MACJ,KAAKv7C,EAAe+L,IAEhB,IAAMhR,EAAmCuO,EAAOhQ,UAAU+E,MAAK,SAAC0D,GAAD,OAASA,EAAIxH,KAAOgH,EAAKhH,OAAO,KAC/F,GAAIQ,EAAU,CACV,IAAM0gD,EAAiB,QAAU1gD,EAASR,GAC1CihD,EAAUjhD,GAAK6mC,EAAWqa,EAC1BD,EAAUvgC,MAAQlgB,EAASS,KAEtB4lC,EAAShc,SAASq2B,KACnBF,EAAUngD,KAAKogD,EAAUjhD,IACzBihD,EAAUL,OAAO//C,KAAK2gD,EAAmBhhD,EAASQ,OAAQigD,EAAUjhD,GAAIghD,IACxEC,EAAUL,OAAO//C,KAAK2gD,EAAmBhhD,EAASO,SAAUkgD,EAAUjhD,GAAIghD,KAE9E,MAEJ,MACJ,KAAKv7C,EAAe8H,MAChB0zC,EAAUjhD,GAAK6mC,EAAW,SAC1B,MACJ,KAAKphC,EAAe+gB,IAChBy6B,EAAUjhD,GAAK6mC,EAAW,OAItC,OAAOoa,EAqDCO,CAAoBnB,EAAK58C,MAAuBuK,UAAUhH,KAAMi6C,EAAUjhD,GAAIghD,KAG/EC,EAuCaQ,CArNH,SAAC1yC,GAClB,IAAM7N,EAAkB,CACpB+F,KAAMxB,EAAe8H,MACrB9J,MAAO,CAACwD,KAAMxB,EAAe8H,OAC7B6zC,QAAQ,GAEZ,IAAKj8C,EAAUC,kBAAkB2J,GAAQ,CACrC,IAAMsyC,EAAqCtyC,EAAOiH,MAAMlS,MAAK,SAAC6K,GAAD,OAAUA,EAAKX,UAAU9M,QAClFmgD,IACAngD,EAAK+F,KAAOxB,EAAe0hB,KAC3BjmB,EAAKuC,MAAQ49C,GAGrB,OAAOngD,EAwMqCwgD,CAAa3yC,IACzDqwC,gBACAF,UArCO/5C,EAAUG,SAAS6f,GAsC1Bg6B,YAAW,OAAEh3B,QAAF,IAAEA,OAAF,EAAEA,EAAWjB,QACxB7J,UAnCiB,WACjB,IAAIyjC,EAUA,MAAO,UATP,OAAQA,EAAa75C,MACjB,KAAKhC,EAAUsI,MACX,MAAO,qBACX,KAAKtI,EAAUuhB,IACX,MAAO,qBACX,KAAKvhB,EAAUwhB,KACX,MAAO,sBA4BnBg5B,eApBsB,WACtB,IAAIt3B,EAQA,MAAO,UAPP,OAAQA,EAAU9C,SAASpe,MACvB,KAAKxB,EAAe8H,MAChB,MAAO,qBACX,KAAK9H,EAAe+gB,IAChB,MAAO,uBAenB84B,gBACArxC,WACAc,QACAwwC,WAAgB,OAALxwC,QAAK,IAALA,OAAA,EAAAA,EAAOA,MAAM9N,OAAQ,GAChCu+C,cAAsB,OAARvxC,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,WAAW5M,OAAQ,KChf1C0gD,I,OAAiD,SAACnnC,GAC3D,IAAOC,EAA8CD,EAA9CC,OAAQmnC,EAAsCpnC,EAAtConC,SAAUC,EAA4BrnC,EAA5BqnC,YAAahC,EAAerlC,EAAfqlC,YAEhCiC,EAAW,SAACr+C,EAA6B1D,GAC3C,OACI,wBAAIC,GAAID,EAAMmE,WACVV,IAAKzD,GAEJ0D,IAKPs+C,EAAe,SAACjiD,EAA0B0D,GAC5C,OAAO,kBAAC,GAAD,CAAiBwyB,SAAUl2B,EAAOib,KACjBE,KAAM+W,GAAY0U,MAClB7rB,UAAW,kBACXC,QAAShb,EAAO4W,SAChBlT,IAAKA,EACLsyB,SAAUh2B,EAAOkiD,WA4BvCC,EAAiB,SAACz+C,EAAa0+C,EAA0BrnC,GAC3D,OACI,wBAAIrX,IAAKA,EACLqX,UAAWA,GAEV,IAAIlX,MAAMu+C,GAAkBriD,KAAI,SAACsiD,EAAGpiD,GACjC,OAAO,wBAAIyD,IAAKzD,SAMhC,OACI,+BACI,+BACA,4BAAK0a,EAAO5a,IAAIiiD,KAEhB,2BAAOvhC,MAAO,CAACtC,OAAQ4hC,IACtB+B,EAAS/hD,KA1CA,SAACuB,EAAyBrB,GACxC,OACI,wBAAIyD,IAAKzD,EACL8a,UAAWzZ,EAAKghD,QAChBtnC,QAAS1Z,EAAK0Z,SAEb1Z,EAAKA,KAAKvB,IAAIiiD,GACd1gD,EAAKtC,QAAQuI,OAAS,GACvB,wBAAIwT,UAAW,iBAAkBzZ,EAAKtC,QAAQe,KAAI,SAACC,EAAQC,GAAT,OAAmBgiD,EAAajiD,EAAQC,WAmC7F8hD,GACG,4BACI,4BAAKE,EAAa,CAAChnC,KAAMpC,GAAWK,KAAMtC,SAAUmrC,GAAc,KAhCxD,WAAO,IAAD,EACxBQ,EAAaT,EAASv6C,OAC1Bw6C,GAAeQ,IAGf,IAFA,IAAMC,GAAkB,UAAAV,EAAS,UAAT,eAAaxgD,KAAKiG,SAAU,EAC9Ck7C,EAAY,GACTC,EAAIH,EAAYG,GAAK,GAAIA,IAC9BD,EAAU1hD,KAAKohD,EAAeO,EAAEt+C,WAAYo+C,EAAiB,YAEjE,OAAOC,EA2BFE,OCrEAC,GAA6C,SAACloC,GACvD,IACImoC,EAOAnoC,EAPAmoC,UACAC,EAMApoC,EANAooC,aACAC,EAKAroC,EALAqoC,iBACAC,EAIAtoC,EAJAsoC,oBACAC,EAGAvoC,EAHAuoC,kBACAC,EAEAxoC,EAFAwoC,sBACAC,EACAzoC,EADAyoC,aAGE93B,EAAa/P,YAAY+X,IA6BzB+vB,EAAuC,CACzC,CACIxiC,MAAO,aACPra,UAAWw8C,GAAoBC,EAC/BK,KAAM,CACF,CACIziC,MAAO,QACP0iC,WAAYC,GAAUt0C,MACtB1I,UAAWw8C,GAEf,CACIniC,MAAO,WACP0iC,WAAYC,GAAUp1C,SACtB5H,UAAWy8C,GAEf,CACIpiC,MAAO,SACP0iC,WAAYC,GAAUC,YACtBj9C,UAAW48C,KAIvB,CACIviC,MAAO,cACPra,UAAW08C,EACXI,KAAM,CACF,CACIziC,MAAO,WACP0iC,WAAYC,GAAU3hC,gBAE1B,CACIhB,MAAO,QACP0iC,WAAYC,GAAU5hC,cA3DK,WACvC,IAAM0hC,EAAwB,CAC1B,CACIziC,MAAO,WACP0iC,WAAYC,GAAU7iD,UAE1B,CACIkgB,MAAO,QACP0iC,WAAYC,GAAUt8C,OAY9B,OARIokB,IAASC,GAAK4E,oBAAsB7E,IAASC,GAAKqH,2BAClD0wB,EAAKtiD,KAAK,CAAC6f,MAAO,UAAW0iC,WAAYC,GAAUvjD,SAGnDqrB,IAASC,GAAKsF,wBAA0BvF,IAASC,GAAKuF,kCACtDwyB,EAAKtiD,KAAK,CAAC6f,MAAO,YAAa0iC,WAAYC,GAAUh9C,YAGlD,CACHqa,MAAO,iBACPra,UAAW28C,EACXG,KAAMA,GAwCVI,GACA,CACI7iC,MAAO,SACPyiC,KAAM,CACF,CACIziC,MAAO,QACP0iC,WAAYC,GAAUG,YAE1B,CACI9iC,MAAO,WACP0iC,WAAYC,GAAUI,gBAE1B,CACI/iC,MAAO,aACP0iC,WAAYC,GAAU31C,cAoCtC,OACI,yBAAKmN,UAAU,OACVrX,IAVU,WACf,IAAIA,EAAMq/C,EAAmB,QAAU,GAIvC,OAHAr/C,GAAOw/C,EAAwB,WAAa,GAC5Cx/C,GAAOu/C,EAAoB,aAAe,GAC1Cv/C,GAAOs/C,EAAsB,MAAQ,GAM3BY,IAELR,EAAerjD,KAlCH,SAAC8jD,EAA8B5jD,GAChD,YAC4BsC,IAAvBshD,EAASt9C,WAA2Bs9C,EAASt9C,YAC1C,kBAAC,GAAD,CAAkBqa,MAAOijC,EAASjjC,MAChBld,IAAKzD,GAElB4jD,EAASR,KAAKtjD,KACX,SAAC01B,EAAUx1B,GAAX,YACuBsC,IAAlBkzB,EAAIlvB,WAA2BkvB,EAAIlvB,YAChC,kBAAC,GAAD,CACIqa,MAAO6U,EAAI7U,MACXk+B,SAAU+D,IAAcptB,EAAI6tB,WAC5BtoC,QAAS,kBAAM8nC,EAAartB,EAAI6tB,aAChC5/C,IAAKzD,aC7GnC0a,GAAS,CAAC,OAAQ,OAAQ,SAAU,UAEpCmpC,GAA8B,SAChC3jD,EACAk8C,EACA0H,EACAC,GAIA,MAAO,CACH1iD,KAAM,CAACnB,EAAYk8C,EAAU0H,EAAaC,GAC1C1B,QAJY,UAKZtjD,QAAS,KAMX09B,GAAc,SAAC18B,EAAkBd,GACnC,IAGgE,EAH5DoC,EAA4BpC,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,UACzEi8C,EAAmB/6C,EAAOA,EAAKA,KAAKH,KAAO,4BAElCoB,IAATjB,GAAsBtB,EAAOG,aAAeoc,GAAWyH,MACvDq4B,EACIA,EAAW,MAAX,UAAkB/6C,EAAKA,KAAKI,UAAUsC,MAAK,SAACrC,GAAD,OAAcA,EAASzB,KAAOF,EAAOK,qBAAhF,aAAkB,EAA2Ec,OAC7F,4BAGR,OAAOk7C,GCpCL1hC,GAAS,CAAC,QAAS,OAAQ,WAAY,YAAa,YAEpDspC,GAAuB,SACzBp1C,EACA5O,EACA+a,EACAkpC,GACqB,IAAD,IACd/iD,EAAe0N,EAAK1N,MAAQ,uBAC5Bu+C,GAAuB,UAAA7wC,EAAKV,SAASiX,qBAAd,eAA6BrX,WAAW5M,OAAQ,2BACvEgjD,GAAwB,UAAAt1C,EAAKjB,UAAUA,iBAAf,eAA0BzM,OAAQ,6BAC5DmhD,EAAU,UAId,OAHIriD,IAAUikD,IACV5B,EAAU,iBAEP,CACHA,QAAS,aAAeA,EACxBhhD,KAAM,EAAErB,EAAQ,GAAGmE,WAAYjD,EAAMu+C,EAAcyE,EAAet1C,EAAKV,SAASoX,SAASpe,KAAK/C,YAC9FpF,QAAS,GACTgc,YCHFL,GAAS,CAAC,QAAS,OAAQ,OAAQ,gBAEnCypC,GAA+B,SACjCla,EACAjjC,EACAhH,EACAq1B,EACA+uB,EACAC,EACA/+B,GAEA,IAAI+8B,EAAkB+B,GAAsBA,GAAsBpkD,EAAQ,uBAAyB,UAEjF,aAAdgH,EAAKE,MAAuBoe,IAC5B+8B,EAAU,kBAAoB/8B,EAASpe,MAGvClH,IAAUq1B,IACQ,aAAdruB,EAAKE,KACLm7C,GAAoB,yBAEpBA,EAAU,iBAIlB,IAAMiC,EAAWt9C,EAAKkQ,OAAO5P,OAAS,EAEtC,MAAO,CACHvI,QAAS,GACTsC,KAAM,CACFrB,EAAMmE,WACNogD,GAAoBv9C,EAAMijC,EAAkB3kB,GAC5Cte,EAAKE,KACLo9C,EAAW,kBAAC,KAAD,CAAiBtpC,KAAMpC,GAAWsB,UAAc,IAE/DmoC,QAAS,aAAeA,EACxBtnC,QAASspC,IAIjB,SAASE,GAAoBv9C,EAAsB61B,EAAoCvX,GAA4B,IAAD,IAC9G,OAAQte,EAAKE,MACT,IAAK,OACD,OACkB,OAAd21B,QAAc,IAAdA,GAAA,UAAAA,EAAgB9uB,iBAAiBhK,MAAK,SAACssB,GAAD,OAAUA,EAAKtf,eAAe9Q,KAAO+G,EAAKkf,yBAAhF,eACMnV,eAAe7P,OAAQ,kBAErC,IAAK,WACD,OACkB,OAAd27B,QAAc,IAAdA,GAAA,UAAAA,EAAgB79B,UAAU+E,MAAK,SAACssB,GAAD,OAAUA,EAAKpwB,KAAO+G,EAAKkf,yBAA1D,eAA2EhlB,OAAQ,sBAE3F,IAAK,OACD,MAAO,eACX,IAAK,WACD,OAAe,OAARokB,QAAQ,IAARA,OAAA,EAAAA,EAAUpe,OAAV,2BACX,QACI,MAAM,8BAAN,OAAqCF,EAAKE,KAA1C,wBCvFL,IAmBDwT,GAAS,CAAC,OAAQ,WAElB8pC,GAAyB,SAC3Bx1C,EACAy1C,EACAC,GAOA,MAAO,CACHrC,QALY,UAMZhhD,KAAM,CAPG2N,EAAM9N,MAQfnC,QAAS,CANM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,GAClC,CAACzpC,KAAMpC,GAAWG,YAAapC,SAAU+tC,MChC3D,SAASC,GACZ19C,EACA29C,EACAC,GACD,IAAD,IACMC,EAAmB,sBACvB,OAAQ79C,EAAKC,MACT,KAAKxB,EAAe8H,MACpB,KAAK9H,EAAe+gB,IAChBq+B,EAAW79C,EAAKC,KAChB,MACJ,KAAKxB,EAAe0hB,KAChB09B,GACI,UAAAF,EAAmB7gD,MAAK,SAAC6K,GAAD,OAAUA,EAAKX,UAAUhO,KAAQgH,EAA2BhH,aAApF,eAAyFgO,UACpF/M,OAAQ4jD,EACjB,MACJ,KAAKp/C,EAAe+L,IAChBqzC,GACI,UAAAD,EAAuB9gD,MAAK,SAAC0D,GAAD,OAASA,EAAIxH,KAAQgH,EAA2BhH,aAA5E,eAAiFiB,OAAQ4jD,EAGrG,OAAOA,EChBJ,IAoBDpqC,GAAS,CAAC,OAAQ,UAAW,YAAa,WAE1CqqC,GAA4B,SAC9BtkD,EACAmkD,EACAC,EACAJ,GASA,MAAO,CACHpC,QALY,UAMZhhD,KAAM,CATWZ,EAASS,KACPyjD,GAAiBlkD,EAASQ,OAAQ2jD,EAAoBC,GACpDF,GAAiBlkD,EAASO,SAAU4jD,EAAoBC,IAQ7E9lD,QAAS,CALM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,MCjBrD/pC,GAAS,CAAC,OAAQ,WAAY,YAAa,OAAQ,UAAW,SAE9DsqC,GAAmB,SACrBp2C,EACAg2C,EACAC,EACAJ,GAUA,MAAO,CACHpC,QAJY,UAKZhhD,KAAM,CAVWuN,EAAKX,UAAU/M,KACP0N,EAAKV,SAASJ,WAAW5M,KACxB0N,EAAKjB,UAAUA,UAAUzM,KAC9ByjD,GAAiB/1C,EAAKX,UAAUhH,KAAM29C,EAAoBC,GAC9Dj2C,EAAKX,UAAU9M,KAAO,QAAU,IAOjDpC,QAAS,CALM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,MCfrD/pC,GAAS,CAAC,OAAQ,WAElBuqC,GAA6B,SAC/Bt3C,EACA82C,EACAC,GAOA,MAAO,CACHrC,QALY,UAMZhhD,KAAM,CAPWsM,EAAUzM,MAQ3BnC,QAAS,CANM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,GAClC,CAACzpC,KAAMpC,GAAWG,YAAapC,SAAU+tC,MCN5DhqC,GAAS,CAAC,OAAQ,WAElBwqC,GAA4B,SAC9Bh3C,EACAu2C,EACAC,GAOA,MAAO,CACHrjD,KAAM,CANG6M,EAAShN,MAOlBmhD,QANY,UAOZtjD,QAAS,CANwB,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,GAClC,CAACzpC,KAAMpC,GAAWG,YAAapC,SAAU+tC,MC2B9EhqC,GAAS,CAAC,QAAS,OAAQ,WAAY,WAEvCyqC,GAAwB,SAC1BC,EACAhJ,EACAxV,EACA6d,EACAY,GAKA,MAAO,CACHhD,QAJYgD,EAAS,gBAAkB,UAKvChkD,KAAM,CAAC+jD,EAAWhJ,EAAUxV,GAC5B7nC,QAAS,CALM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,MClDrD/pC,GAAS,CAAC,OAAQ,UAAW,YAAa,UAAW,SAErD4qC,GAAuB,SACzB7kD,EACAwpC,EACAwa,GAiBA,MAAO,CACHpC,QAJY,UAKZhhD,KAAM,CAjBGZ,EAASS,KACKqkD,GACvB9kD,EAASQ,QACO,OAAhBgpC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl8B,mBAAoB,IACtB,OAAhBk8B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjrC,YAAa,IAENumD,GACzB9kD,EAASO,UACO,OAAhBipC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl8B,mBAAoB,IACtB,OAAhBk8B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjrC,YAAa,IAEdyB,EAASU,KAAO,QAAU,IAO3CpC,QAAS,CALM,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,MAS3D,SAASc,GAAYt+C,EAAYnI,EAA0BE,GAA0B,IAAD,IAC5E8lD,EAAmB,sBACvB,OAAQ79C,EAAKC,MACT,KAAKhC,EAAUsI,MACf,KAAKtI,EAAUuhB,IACf,KAAKvhB,EAAUwhB,KACXo+B,EAAW79C,EAAKC,KAChB,MACJ,KAAKhC,EAAUiC,KACX29C,GACI,UAAAhmD,EAAMiF,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAQgH,EAAsBhH,aAAvE,eAA4E8Q,eAAe7P,OAC3F4jD,EACJ,MACJ,KAAK5/C,EAAUuM,IACXqzC,GAAW,UAAA9lD,EAAU+E,MAAK,SAAC0D,GAAD,OAASA,EAAIxH,KAAQgH,EAAsBhH,aAA1D,eAA+DiB,OAAQ4jD,EAG1F,OAAOA,EC9DJ,IAiBDpqC,GAAS,CAAC,OAAQ,OAAQ,QAAS,WAEnC8qC,GAAwB,SAC1Bx+C,EACAijC,EACAwa,GAYA,MAAO,CACHpjD,KAAM,CAXG2F,EAAK+J,eAAe7P,KAiBrC,SAAqB+F,EAAYnI,EAA0BE,GAA0B,IAAD,IAC5E8lD,EAAmB,sBACvB,OAAQ79C,EAAKC,MACT,KAAKhC,EAAUsI,MACf,KAAKtI,EAAUuhB,IACf,KAAKvhB,EAAUwhB,KACXo+B,EAAW79C,EAAKC,KAChB,MACJ,KAAKhC,EAAUiC,KACX29C,GACI,UAAAhmD,EAAMiF,MAAK,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,KAAQgH,EAAsBhH,aAAvE,eAA4E8Q,eAAe7P,OAC3F4jD,EACJ,MACJ,KAAK5/C,EAAUuM,IACXqzC,GAAW,UAAA9lD,EAAU+E,MAAK,SAAC0D,GAAD,OAASA,EAAIxH,KAAQgH,EAAsBhH,aAA1D,eAA+DiB,OAAQ4jD,EAG1F,OAAOA,EAjCkBS,CACrBv+C,EAAK+J,eAAe9J,MACJ,OAAhBgjC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl8B,mBAAoB,IACtB,OAAhBk8B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjrC,YAAa,IAEbgI,EAAK+J,eAAe5P,KAAO,QAAU,IAMvDkhD,QAJY,UAKZtjD,QAAS,CAAC,CAACic,KAAMpC,GAAWC,OAAQlC,SAAU8tC,MChC/C,ICuBKnB,GDsEN5oC,GAAS,CAAC,QAAS,OAAQ,OAAQ,SAAU,SAAU,WAEvD+qC,GAA0B,SAC5BC,EACAxlD,EACAk8C,EACA0H,EACAC,EACAU,EACAkB,EACAC,EACAC,EACAR,GAKA,MAAO,CACHhkD,KAAM,CAJkBqkD,EAAWvhD,WAIfjE,EAAYk8C,EAAU0H,EAAaC,GACvD1B,QAJYgD,EAAS,gBAAkB,UAKvCtmD,QAAS,CACL,CAACic,KAAMpC,GAAWa,QAAS9C,SAAUivC,EAAwB3D,QAAwB,IAAfyD,GACtE,CAAC1qC,KAAMpC,GAAWW,UAAW5C,SAAUgvC,EAAwB1D,QAASyD,GAAcG,EAAc,GACpG,CAAC7qC,KAAMpC,GAAWC,OAAQlC,SAAU8tC,O,SC7FpCnB,K,sBAAAA,E,gBAAAA,E,0BAAAA,E,YAAAA,E,oBAAAA,E,oBAAAA,E,cAAAA,E,wBAAAA,E,gCAAAA,E,gCAAAA,E,yBAAAA,E,uBAAAA,Q,KAeL,IAAMwC,GAAqE,WAC9E,MAWIC,KAVA/C,EADJ,EACIA,kBACAC,EAFJ,EAEIA,sBACAH,EAHJ,EAGIA,iBACAC,EAJJ,EAIIA,oBACAG,EALJ,EAKIA,aACAN,EANJ,EAMIA,UACAC,EAPJ,EAOIA,aACAmD,EARJ,EAQIA,gBACAlG,EATJ,EASIA,YACAD,EAVJ,EAUIA,UAGJ,OACI,yBAAK/kC,UAAW,6BACX+jB,IAAKghB,GAEN,yBAAK/kC,UAAU,eACX,kBAAC,GAAD,CACIkoC,kBAAmBA,EACnBC,sBAAuBA,EACvBH,iBAAkBA,EAClBC,oBAAqBA,EACrBH,UAAWA,EACXC,aAAcA,EACdK,aAAcA,IAElB,kBAAC,GAAD,iBAAgB8C,EAAhB,CAAiClG,YAAaA,QAMxDiG,GAA4B,WAC9B,IAAM36B,EAAa/P,YAAY+X,IACzB6W,EAAuC5uB,YAAY6P,IACnD+6B,EAAuC5qC,YAAY+X,IACnD+rB,EAA8B9jC,YAAY6P,IAC1C9C,EAA8B/M,YAAY6P,IAC1CrsB,EAA0Bwc,YAAY8H,IACtC/jB,EAA4Bic,YAAY8H,IACxCsF,EAAgCpN,YAAY6P,IAC5Cg7B,EAAyB7qC,YAAY8H,IACrCyhC,EAAqCvpC,YAAY6P,IACjD25B,EAA4CxpC,YAAY6P,IACxDi7B,EAAwC9qC,YAAY+X,IACpDgzB,EAA4C/qC,YAAY+X,IACxDizB,EAA8ChrC,YAAY+X,IAC1DkzB,EAA6BjrC,YAAY6P,IAE/C,EAAkCqL,mBAAoB+sB,GAAUp1C,UAAhE,mBAAO00C,EAAP,KAAkBC,EAAlB,KAEAnsB,qBAAU,WACN,IAAI6vB,OAAsCjkD,EAC1C,OAAQ8oB,GACJ,KAAKC,GAAKC,KAEFi7B,EADA99B,EACe66B,GAAUt0C,MAEVs0C,GAAUp1C,SAE7B,MACJ,KAAKmd,GAAK0J,WACNwxB,EAAejD,GAAUG,WACzB,MACJ,KAAKp4B,GAAKwD,oBACV,KAAKxD,GAAKyD,8BACNy3B,EAAejD,GAAU3hC,eACzB,MACJ,KAAK0J,GAAKwG,cACN00B,EAAejD,GAAUt8C,KACzB,MACJ,KAAKqkB,GAAKsF,uBACV,KAAKtF,GAAKuF,iCACN21B,EAAejD,GAAUh9C,UACzB,MACJ,KAAK+kB,GAAK4E,mBAGV,KAAK5E,GAAKqH,0BACN6zB,EAAejD,GAAUvjD,OAG7BwmD,GACA1D,EAAa0D,KAElB,CAACn7B,EAAM3C,IAEV,IAAM+9B,ENtI8B,SAACpnD,GACrC,IACIyiD,EADEjqC,EAAW0D,cAUjB,OARAumC,EAAWziD,EAAWU,KAAI,SAAC6N,GAMvB,OAAOs3C,GAA2Bt3C,GALd,kBAAMiK,EAASuZ,GAAYC,QAAQmD,cAAc5mB,EAAU1N,QACzD,WAClB2X,EAASwU,GAAqBE,oBAAoB3e,EAAU1N,KAC5D2X,EAASuZ,GAAYC,QAAQkE,cAI9B,CACH5a,UACAmnC,YMyHkB4E,CAAyBrnD,GACzCsnD,ELvImC,SAAC7nD,GAC1C,IAAM+Y,EAAW0D,cAEbumC,EAAgC,GAYpC,OAXIhjD,IACAgjD,EAAWhjD,EAAUiB,KAAI,SAACoO,GAOtB,OAAOg3C,GAA0Bh3C,GAFd,kBAAM0J,EAASuZ,GAAYC,QAAQiD,aAAanmB,EAASjO,QAJvD,WACjB2X,EAASwU,GAAqBC,mBAAmBne,EAASjO,KAC1D2X,EAASuZ,GAAYC,QAAQkE,eAOlC,CACH5a,UACAmnC,YKsHsB8E,CAA8B9nD,GAClD+nD,EHtI0C,SAAC3c,GACjD,IAAMryB,EAAW0D,cAEbumC,EAAgC,GAOpC,OANyB,OAArB5X,IACA4X,EAAW5X,EAAiBjrC,UAAUc,KAAI,SAAC2H,GAEvC,OAAO69C,GAAqB79C,EAAKwiC,GADb,kBAAMryB,EAASuZ,GAAYC,QAAQqD,aAAahtB,WAIrE,CACHiT,UACAmnC,YG0H8BgF,CAAqC5c,GACjE6c,EJrI2C,SACjDrmD,EACA6F,GAEA,IAAMsR,EAAW0D,cAEX8+B,EAAsC/+B,YAAY+X,IAEpD2zB,EAAoCtmD,EAElClC,EAAqB8c,YAAY8H,IACjClkB,EAAmBoc,YAAY8H,IAEjC0+B,EAAgC,GAmCpC,OAjCkB,OAAdv7C,IACAygD,EAAiBz2B,GAAavsB,KAAKuC,EAAUvE,aAG1B,OAAnBglD,IACAlF,EAAWkF,EAAellD,WAAW/B,KAAI,SAACwG,GAAe,IAAD,EASvC,EARP8+C,GACF,UAAA7mD,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOqG,EAAUvF,kBAApD,eAA8D6G,MAAM1G,OAAQ,uBAE1EyL,EAA+B1N,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOqG,EAAUnG,UAEjFi8C,EAAmB,sBACnBxV,EAAuB,sBAEvBj6B,IACAyvC,GAAkB,OAAPzvC,QAAO,IAAPA,OAAA,EAAAA,EAAStL,KAAKH,OAAQ,sBACjC0lC,GACW,OAAPj6B,QAAO,IAAPA,GAAA,UAAAA,EAAStL,KAAKI,UAAUsC,MAAK,SAACrC,GAAD,OAAcA,EAASzB,KAAOqG,EAAUlG,qBAArE,eAAkFc,OAClF,2BAKR,OAAOikD,GACHC,EACAhJ,EACAxV,GALgB,kBAAMhvB,EAASuZ,GAAYC,QAAQsD,cAAcqyB,EAAiBzgD,MAOlFA,EAAUrG,MAAV,OAAiBm6C,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAiBn6C,SAKvC,CACHya,UACAmnC,YImF+BmF,CAC/BZ,EACAC,GAEEY,EF3IyB,SAC/Bhd,GAEA,IAAMryB,EAAW0D,cACb4rC,EAA4B,GAOhC,OANyB,OAArBjd,IACAid,EAAOjd,EAAiBl8B,iBAAiBjO,KAAI,SAACkH,GAE1C,OAAOw+C,GAAsBx+C,EAAMijC,GADd,kBAAMryB,EAASuZ,GAAYC,QAAQoD,SAASxtB,WAIlE,CACH0T,UACAmnC,SAAUqF,GE8HgBC,CAAoBld,GAsB5Cmd,ED5J+B,SACrCnB,GAEA,IAAMhnD,EAAmBoc,YAAY8H,IAC/B5kB,EAAqB8c,YAAY8H,IACjCmQ,EAAgCjY,YAAY+X,IAC5ChI,EAAa/P,YAAY+X,IACzBxb,EAAW0D,cAEb4rC,EAA4B,GAE1B5R,EAAuB,SAACC,EAAuBvuC,EAAuBwuC,GACxE,IAAMC,EAAmBD,EAAYD,EAAgB,EAAIA,EAAgB,EACnEG,EAA4BtwC,EAAUG,SAASyB,GAE/C2uC,EAAoBD,EAAS32C,QAAQw2C,GAC3CI,EAAQ31C,MAAQy1C,EAChB,IAAMG,EAAoBF,EAAS32C,QAAQ02C,GAC3CG,EAAQ51C,MAAQu1C,EAChBG,EAAS32C,QAAQw2C,GAAiBK,EAClCF,EAAS32C,QAAQ02C,GAAYE,EAG7B/9B,EAASuY,GAAS/mB,KAAKssC,IAGvB99B,EAASwU,GAAqBC,mBAAmBqpB,EAAS3kC,eAAe3P,aAGrEgqB,IAASC,GAAK4E,oBACdrY,EAASuY,GAASnB,OAAO0mB,KAyDjC,OArDqB,OAAjBuQ,IACAiB,EAAOjB,EAAalnD,QAAQe,KAAI,SAACC,EAAQC,GAAW,IAAD,IAuBD,EANxCqB,EAA4BpC,EAAM8E,MAAK,SAAC1C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,UAE3Ei8C,EAAmB,2BAEnB/6C,IACA+6C,EAAW/6C,EAAKA,KAAKH,KACjBnB,EAAOG,aAAeoc,GAAWyH,MACjCq4B,EACIA,EACA,MADA,UAEA/6C,EAAKA,KAAKI,UAAUsC,MAAK,SAACrC,GAAD,OAAcA,EAASzB,KAAOF,EAAOK,qBAF9D,aAEA,EAA2Ec,OAC3E,iCAIZ,IAAM4iD,GACF,UAAAvlD,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOF,EAAOM,2BAAjD,eAAoEuH,MAAM1G,OAAQ,GAEhF6iD,GACF,UAAAxlD,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOF,EAAOO,yBAAjD,eAAkEsH,MAAM1G,OAAQ,GAEpF,OAAOukD,GACHzlD,EACAD,EAAOG,WACPk8C,EACA0H,EACAC,GA1CiB,WACjBnsC,EAASuZ,GAAYC,QAAQyD,WAAW90B,OAGb,WACvBC,EAAQimD,EAAalnD,QAAQuI,OAAS,GACtCguC,EAAqBt1C,EAAOimD,GAAc,MAInB,WACvBjmD,EAAQ,GACRs1C,EAAqBt1C,EAAOimD,GAAc,KAkC9CA,EAAalnD,QAAQuI,OACrBvH,EAAOE,MAAP,OAAcqzB,QAAd,IAAcA,OAAd,EAAcA,EAAcrzB,SAIjC,CACHya,UACAmnC,SAAUqF,GCmEcG,CApBZ,WACZ,IAAIC,EAAqC,KAIzC,GAAIl8B,IAASC,GAAKqH,2BACd,GAAIyzB,EAAsB,CACtB,IAAMn/C,EAAiC,OAAGijC,QAAH,IAAGA,OAAH,EAAGA,EAAkBl8B,iBAAiBhK,MACzE,SAACiD,GAAD,OAAUA,EAAK+J,eAAe9Q,MAApB,OAA2BkmD,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAsB5lD,mBAE3DyG,IACAsgD,EAAatgD,SAIrBsgD,EAAarB,EAEjB,OAAOqB,EAG2CC,IAEhDC,EVrKgC,SAACtB,GACvC,IAAMtuC,EAAW0D,cACbumC,EAAgC,GAWpC,OAVIqE,IACArE,EAAWqE,EAAYpmD,KAAI,SAACkP,GAMxB,OAAOw1C,GAAuBx1C,GALV,kBAAM4I,EAASuZ,GAAYC,QAAQ0D,UAAU9lB,OAC3C,WAClB4I,EAASwU,GAAqBc,gBAAgBle,IAC9C4I,EAASuZ,GAAYC,QAAQkE,eAKlC,CACHusB,WACAnnC,WUsJmB+sC,CAA2BvB,GAC5CwB,ERpKuC,SAC7Ct/B,EACAu/B,EACA9C,GAEA,IAAMjtC,EAAW0D,cAEbumC,EAAgC,GAOpC,OANkB,OAAdz5B,IACAy5B,EAAWgD,EAAuB/kD,KAAI,SAACW,GAEnC,OAAOskD,GAA0BtkD,EAAUknD,EAAoB9C,GAD3C,kBAAMjtC,EAASuZ,GAAYC,QAAQ+D,kBAAkB10B,WAI1E,CACHia,UACAmnC,YQoJ2B+F,CAC3Bx/B,EACAw8B,EACAC,GAEEgD,EP1KmC,SACzCjD,EACAC,GAEA,IAEIhD,EAFEjqC,EAAW0D,cAOjB,OAJAumC,EAAW+C,EAAmB9kD,KAAI,SAAC8O,GAE/B,OAAOo2C,GAAiBp2C,EAAMg2C,EAAoBC,GAD9B,kBAAMjtC,EAASuZ,GAAYC,QAAQ8D,cAActmB,EAAKX,kBAGvE,CACHyM,UACAmnC,YO6JuBiG,CAA8BlD,EAAoBC,GACvEkD,EXzKiC,SAAC5I,EAA6BlV,GACrE,IAAMryB,EAAW0D,cAEXylC,EAAgC1lC,YAAY6P,IAC5Ck5B,EAAoC/oC,YAAY6P,IAEhDmK,EAA2Bha,YAAY6P,IAEvC22B,EAAgC1C,EAAUr/C,KAAI,SAACkH,EAAMhH,GAGvD,OAAOmkD,GACHla,EACAjjC,EACAhH,EACAq1B,EACA+uB,GAPY,kBAAMxsC,EAASwU,GAAqB7C,oBAAoBvpB,MASpE+gD,MAIR,MAAO,CACHrmC,UACAmnC,YWiJqBmG,CAA4B7I,EAAWlV,GAC1Dge,EZ/K6B,SAAC7/B,GACpC,IAAMxQ,EAAW0D,cACX2oC,EAA4B5oC,YAAY6P,IAE1C22B,EAAgC,GAOpC,OANkB,OAAdz5B,IACAy5B,EAAWz5B,EAAUlB,UAAUpnB,KAAI,SAAC8O,EAAM5O,GAEtC,OAAOgkD,GAAqBp1C,EAAM5O,GADf,kBAAM4X,EAASwU,GAAqBtD,oBAAoB9oB,MACtBikD,OAGtD,CACHvpC,UACAmnC,YYkKiBqG,CAAwB9/B,GAEvC+/B,Eb9KqC,SAAC5/B,GAC5C,IAAMtpB,EAAmBoc,YAAY8H,IAC/B5kB,EAAqB8c,YAAY8H,IAEjC0+B,EAAgCt5B,EAAazoB,KAAI,SAACC,GAAY,IAAD,IACzDq8C,EAAmB3f,GAAY18B,EAAQd,GACvC6kD,GACF,UAAAvlD,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOF,EAAOM,2BAAjD,eAAoEuH,MAAM1G,OAAQ,GAEhF6iD,GACF,UAAAxlD,EAAOwF,MAAK,SAAC6D,GAAD,OAAWA,EAAMA,MAAM3H,KAAOF,EAAOO,yBAAjD,eAAkEsH,MAAM1G,OAAQ,GAEpF,OAAO2iD,GAA4B9jD,EAAOG,WAAYk8C,EAAU0H,EAAaC,MAGjF,MAAO,CACHrpC,UACAmnC,Ya6JoBuG,CAAgC9B,GAiClDzG,EAAYlhB,iBAAuB,MAEzC,EAAsCpI,mBAAiB,GAAvD,mBAAOupB,EAAP,KAAoBuI,EAApB,KAiBA,OAfA3xB,qBAAU,WACN,IAAMsN,EAAiB,WACf6b,GAAaA,EAAUjhB,SACvBypB,EAAexI,EAAUjhB,QAAQqC,aAAe,MAOxD,OAHA+C,IACAnsB,OAAOomB,iBAAiB,SAAU+F,GAE3B,WACHnsB,OAAOqmB,oBAAoB,SAAU8F,MAE1C,CAAC6b,IAEG,CACHmD,mBAAoB59C,EAAUC,kBAAkBojB,GAChDw6B,uBAAwB79C,EAAUC,kBAAkB4kC,GACpD6Y,kBAAmB19C,EAAUC,kBAAkB+iB,GAC/C26B,oBAAqB5D,EAAU73C,OAAS,EACxC47C,aAAcoD,EAAeh/C,OAAS,EACtCs7C,YACAC,eAEAmD,gBA3DuB,WACvB,OAAQpD,GACJ,KAAKU,GAAUt0C,MACX,OAAOi5C,EACX,KAAK3E,GAAU3hC,eACX,OAAO+lC,EACX,KAAKpE,GAAU5hC,WACX,OAAOmmC,EACX,KAAKvE,GAAUvjD,OACX,OAAOqnD,EACX,KAAK9D,GAAUt8C,KACX,OAAOigD,EACX,KAAK3D,GAAU7iD,SACX,OAAOmmD,EACX,KAAKtD,GAAUh9C,UACX,OAAOwgD,EACX,KAAKxD,GAAUp1C,SACX,OAAO65C,EACX,KAAKzE,GAAUI,eACX,OAAOgD,EACX,KAAKpD,GAAUG,WACX,OAAO+D,EACX,KAAKlE,GAAU31C,UACX,OAAO64C,EACX,KAAKlD,GAAUC,YACX,OAAO4E,EACX,QACI,MAAO,CAACztC,OAAQ,GAAImnC,SAAU,KAgCrByG,GACjBxI,cACAD,cCtOKjI,I,OAAe,CACxB2Q,KAAM,IACN3gD,MAAO,aACPvG,KAAM,QACNw2C,MAAO,SACPC,UAAW,eAIR,SAAS0Q,KACZ,IAAM5wC,EAAW0D,cAOjB,OANAob,qBAAU,WACN9e,EAAS0L,MACT1L,EAASF,GAAca,4BACvBX,EAASF,GAAcc,6BACxB,CAACZ,IAGA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6wC,OAAK,EACLC,KAAM9Q,GAAa2Q,MAEtB,yBAAKztC,UAAU,sBACX,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAO2tC,OAAK,EACLC,KAAM9Q,GAAahwC,OAEtB,yBAAKkT,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAO2tC,OAAK,EACLC,KAAM9Q,GAAav2C,MAEtB,yBAAKyZ,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAO2tC,OAAK,EACLC,KAAM9Q,GAAaC,OAEtB,yBAAK/8B,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAO2tC,OAAK,EACLC,KAAM9Q,GAAaE,WAEtB,yBAAKh9B,UAAU,iBACX,kBAAC,GAAD,UC7DJ6tC,QACa,cAA7B9wC,OAAOC,SAAS8wC,UAEa,UAA7B/wC,OAAOC,SAAS8wC,UAEhB/wC,OAAOC,SAAS8wC,SAASC,MAAM,2DCTnC,ICNsCC,GDMhCC,GAAaC,cAAuB78B,QELnC,WACH,OAAO,SAAC88B,GAAD,OAAe,SAAClpD,GACnB,IAAKA,EAAOmpD,OAAQ,CAChB,IAAMC,EAAgB5lD,OAAO6lD,OAAO,CAACF,OAAQ,eAAgBnpD,GAC7D+C,aAAaO,QAPS,uBAOWJ,KAAKG,UAAU+lD,GANzB,KAMwD,IAAIE,MAGvFJ,EAAKlpD,QFAA+oD,GAAQQ,YAAe,CAChC3wC,QAAS,CACLR,OAAQO,GACR0K,WAAYF,GACZiI,KAAMgI,GACNhO,cAAe8F,IAEnB89B,gBAGJlxC,OAAOomB,iBAAiB,WClBc6qB,GDkBmBA,GCjB9C,WACH,IAAMS,EAAmCzmD,aAAaC,QCJ5B,wBDK1B,GAAIwmD,EAAmB,CACnB,IAAMC,EAAuBD,EAAkBE,MCLxB,MDK2C,GAC5DN,EAAgBlmD,KAAKC,MAAMsmD,UAC1BL,EAAcD,OACrBJ,GAAMlxC,SAASuxC,O,OEA3BO,IAASC,OACL,kBAAC,IAAD,CAAUb,MAAOA,IACb,kBAAC,GAAD,KACI,kBAAC,GAAD,QAGRlkD,SAASglD,eAAe,SJkHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAAC7zC,GACJ1W,QAAQ0W,MAAMA,EAAMF,a,wCKvIpCg0C,EAAOC,QAAU,IAA0B,iD","file":"static/js/main.5d32316b.chunk.js","sourcesContent":["import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic/dropdowns/InstanceDropDown\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\nimport { StoreTO02 } from \"./to/StoreTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO02 {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO02 } from \"../davitVersion02/to/StoreTO02\";\n\nexport const DavitVersionMigrator03 = {\n    migrate(dataStoreObject: StoreTO02): StoreTO {\n        console.info(\"start migration to version 0.3\");\n        const actorZoom: number = dataStoreObject.actorZoom;\n        const dataZoom: number = dataStoreObject.dataZoom;\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: dataStoreObject.decisions as DecisionTO[],\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n            sequenceStates: [],\n            chainStates: [],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\nimport { DavitVersionMigrator03 } from \"./davitVersion03/DavitVersionMigrator03\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(\n                        DavitVersionMigrator01.migrate(dataStoreObject),\n                    )\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(dataStoreObject));\n                break;\n            case 0.2:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceMockConstraintCheck(sequenceMockId: number, dataStore: DataStoreCTO) {\n        // TODO: check if mock is part of an decision.\n    },\n\n    deleteChainMockConstraintCheck(sequenceMockId: number, dataStore: DataStoreCTO) {\n        // TODO: check if mock is part of an decision.\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainMockConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceMockConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        return DataSetupRepository.save(dataSetup);\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ----------------------------------------------- Init Data --------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        return InitDataRepository.save(initData);\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        }\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {stepId: \"root\", actorDatas: result.actorDatas, type: \"INIT\", errors: result.errors};\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[]): GoToChain => {\n    // const filteredCompData: ActorData[] = actorDatas.filter((actorData) => actorData.actorFk === chainDecision.actorFk);\n    let goTo: GoToChain | undefined;\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditInitData } from \"./thunks/InitDataThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set initData to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps extends DavitButtonProps {\n    show?: boolean\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show} = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if (show !== undefined) {\n            setShowMore(show);\n        }\n    }, [show]);\n\n    const onToggle = () => {\n        setShowMore(!showMore);\n        onClick();\n    };\n\n    return <DavitIconButton onClick={onToggle}\n                            size={ElementSize.tiny}\n                            iconName={showMore ? faAngleDown : faAngleRight}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveState = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createState = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveState(newChainState);\n        }\n    };\n\n    const deleteState = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        saveState,\n        editChain,\n        createState,\n        deleteState,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../../../../../../../dataAccess/access/to/GroupTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport { ActorDropDownLabel } from \"../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { ChainDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDropDown\";\nimport { DataLabelDropDown } from \"../../../../../../atomic/dropdowns/DataDropDown\";\nimport { DataSetupLabelDropDown } from \"../../../../../../atomic/dropdowns/DataSetupDropDown\";\nimport { RelationLabelDropDown } from \"../../../../../../atomic/dropdowns/RelationDropDown\";\nimport { SequenceLabelDropDown } from \"../../../../../../atomic/dropdowns/SequenceDropDown\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Data - Setup\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupLabelDropDown onSelect={editOrAddDataSetup}\n                                                             label=\"Data-Setup\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit) && text !== \"\") {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveState(newSequenceState);\n        }\n    };\n\n    const deleteState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveState,\n        deleteState,\n        createState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        // saveDecision,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*// TODO: Condition list*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport \"./StateTable.css\";\n\ninterface StateTableProps {\n    statesToEdit: StateTO[];\n    addStateCallback: () => void;\n    changeName: (name: string, stateId: number) => void;\n    removeStateCallback: (stateId: number) => void;\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateTable: FunctionComponent<StateTableProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback} = props;\n\n    const buildStateTableRow = (state: StateTO, index: number): JSX.Element => {\n\n        const inputClasses: string = state.label === \"\" ? \"border border-warning border-animation\" : \"\";\n\n        return (\n            <tr className=\"flex content-space-between fluid\"\n                key={index}\n            >\n                <td className={inputClasses}>\n                    <DavitTextInput\n                        onChangeCallback={(name) => changeName(name, state.id)}\n                        placeholder=\"State Name\"\n                        value={state.label}\n                        focus\n                    />\n                </td>\n                <td className=\"flex flex-center\">\n\n                    <DavitButton\n                        className={state.isState ? \" active\" : \"\"}\n                        onClick={() => setActiveCallback(state, true)}\n                    >TRUE</DavitButton>\n                    <DavitButton\n                        className={state.isState ? \"\" : \" active\"}\n                        onClick={() => setActiveCallback(state, false)}\n                    >FALSE</DavitButton>\n                </td>\n                <td className=\"flex flex-center\">\n                    <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                       noConfirm\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <table className={\"border table\"}>\n\n            <thead className=\"flex content-space-between padding-medium\">\n\n            <tr className=\"flex content-space-between fluid\">\n                <td className=\"flex flex-center\">Name</td>\n                <td className=\"flex flex-center\">Default</td>\n                <td className={\"flex flex-center\"}><DavitAddButton onClick={addStateCallback} /></td>\n            </tr>\n\n            </thead>\n\n            <tbody className=\"body\">\n            {statesToEdit.map((state, index) => buildStateTableRow(state, index))}\n            </tbody>\n\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {saveState, editChain, createState, deleteState, id} = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveState);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveState(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveState(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={chainStates}\n                            addStateCallback={createState}\n                            removeStateCallback={deleteState}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataSetupViewModel } from \"../viewmodels/DataSetupViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Data Setup Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataSetupCTO } from \"../../../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditDataSetup } from \"../../../../../../../../slices/thunks/DataSetupThunks\";\nimport { EditInitData } from \"../../../../../../../../slices/thunks/InitDataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit dataSetup without dataSetupToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== \"\") {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + \"-copy\";\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== \"\") {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataSetupToEdit?.dataSetup.name || \"\"),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : \"\",\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataSetupForm } from \"../forms/DataSetupForm\";\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n            </FormBody>\n            <FormDivider />\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {saveState, editSequence, createState, deleteState, id} = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={sequenceStates}\n                            addStateCallback={createState}\n                            removeStateCallback={deleteState}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitEditButton } from \"../../../../../../../atomic/buttons/DavitEditButton\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic/buttons/DavitShowMoreButton\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{textAlign: \"end\"}}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={\"border\"}\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr>\n                    <td style={{textAlign: \"center\"}}>Action</td>\n                    <td style={{textAlign: \"end\"}}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDataSetupModal } from \"./fragments/modals/EditDataSetupModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { ChainDropDown, DataSetupDropDown, SequenceDropDown } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Data - Setup\">\n                <DataSetupDropDown\n                    onSelect={selectDataSetup}\n                    placeholder=\"Select Data Setup ...\"\n                    value={currentDataSetup}\n                />\n            </OptionField>\n\n            <OptionField label=\"SEQUENCE\">\n                <SequenceDropDown onSelect={selectSequence}\n                                  value={currentSequence}\n                />\n            </OptionField>\n\n            <OptionField label=\"CHAIN\"\n                         divider={true}\n            >\n                <ChainDropDown onSelect={selectChain}\n                               value={currentChain}\n                />\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={true}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return \" * \" + sequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                \" * \" +\n                sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepIndex)?.sequenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{display: \"flex\"}}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\nimport { FlowChartlabel } from \"./fragments/FlowChartlabel\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() && <>\n                    {/*TODO: try to move this in to a css class.*/}\n                    <div style={{display: \"flex\", position: \"absolute\", zIndex: 99, width: \"47vw\"}}>\n                        {chain && (\n                            <TabGroupFragment label=\"Mode\"\n                                              style={{backgroundColor: \"var(--background-color-header)\"}}\n                            >\n                                <TabFragment label=\"Chain\"\n                                             isActive={showChain}\n                                             onClick={() => setShowChain(true)}\n                                />\n                                <TabFragment label=\"Sequence\"\n                                             isActive={!showChain}\n                                             onClick={() => setShowChain(false)}\n                                />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{marginLeft: \"auto\"}}>\n                            <FlowChartlabel label=\"CHAIN:\"\n                                            text={chainName}\n                            />\n                            <FlowChartlabel label=\"SEQU.:\"\n                                            text={sequenceName}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Errors\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ACTION-ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";"],"sourceRoot":""}