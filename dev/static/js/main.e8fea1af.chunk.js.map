{"version":3,"sources":["assets/exxcellent_logo_200.png","dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/davitVersion03/DavitVersionMigrator03.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/atomic/Table.tsx","components/molecules/ToggleButton.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateTable.tsx","components/organisms/configurationPanel/fragments/StateConfigurationView.tsx","components/organisms/configurationPanel/Configuration.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/atomic/dropdowns/ChainStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","components/atomic/dropdowns/SequenceStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","components/molecules/StateView.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx"],"names":["module","exports","DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","sequenceStates","chainStates","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","stateFkAndStateConditions","DavitVersionMigrator02","DavitVersionMigrator03","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","sequenceStateId","some","stateFkAndCondition","stateFk","chainStateId","dataId","dataRelationExists","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","play","faPlay","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","chainDecisions","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","falseStates","trueStates","states","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","stateFkAndStateCondition","stateToCheck","isState","stateCondition","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentSequenceById","setCurrentSequenceByIdWithStates","setCurrentDataSetupById","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","setDataSetupThunk","EDIT_CONFIGURATION","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","EDIT_GROUP","setConditionToEdit","setConfigurationToEdit","clearObjectToEdit","setMode","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","EDIT_DATASETUP","EDIT_DATASETUP_INITDATA","EditActions","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","editConfiguration","setDataSetupInConfiguration","copyConfig","stepIndex","view","FILE","tab","TAB","InitDataTO","FormLinePosition","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","tiny","faAngleRight","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDownButton","useChainDropDownViewModel","selectChain","chainToOption","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","Table","headers","tableRows","buildCell","jsx","row","cellElements","ToggleButton","toggleCallback","isLeft","leftLabel","rightLabel","StateTable","statesToEdit","addStateCallback","changeName","removeStateCallback","setActiveCallback","stateColumnName","buildTableRow","is","StateConfigurationView","setStateCallback","ConfigurationPanel","setStates","setDataSetup","selectedSequence","copyDataSetup","iData","iconLeft","copyStates","setSequence","stateToToggle","minHeight","textAlign","newInitData","maxHeight","copyInitData","dataAndInstance","initDataToDelete","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveStateFkAndStateCondition","stateToSave","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createStateFkAndStateCondition","newChainState","deleteStateFkAndStateCondition","stateToDeleteId","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddChain","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","saveNote","createSequenceState","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainStateDropDown","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","updateStateFkAndStateCondition","newState","stateFkToRemove","stateFkStateCondition","useChainDecisionViewModel","buildStateTableRow","selectChainState","copyStateFkAndStateCondition","setStateCondition","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","ChainStateForm","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","SequenceStateDropDown","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","selectedState","selectSequenceState","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","FlowChartlabel","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","selectedChainName","selectedSequenceName","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","marginLeft","getStepName","currentChain","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","dataSetupToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","StateView","showChain","showStates","setShowStates","buildStateRow","stateIsTrue","trueState","stateIsFalse","falseState","TabFragment","isActive","TabGroupFragment","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainLineColor","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","chainName","sequenceName","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,iD,2qBCoB9BC,EACT,aA8BG,IA7BQC,EA6BT,uDC1C8B,cDcrBC,EA4BT,uDC5C+B,GDiBtBC,EA2BT,uDCxC8B,EDcrBC,EA0BT,uDCxC8B,EDgBrBC,EAwBT,uDAxBkB,IAAIC,IACbC,EAuBT,uDAvBkB,IAAID,IAEbE,EAqBT,uDArBqB,IAAIF,IAChBG,EAoBT,uDApBmB,IAAIH,IACdI,EAmBT,uDAnB4B,IAAIJ,IAEvBK,EAiBT,uDAjBqB,IAAIL,IAChBM,EAgBT,0DAhBiB,IAAIN,IACZO,EAeT,0DAfmB,IAAIP,IACdQ,EAcT,0DAdqB,IAAIR,IAEhBS,EAYT,0DAZiB,IAAIT,IACZU,EAWT,0DAX2B,IAAIV,IAEtBW,EAST,0DATqB,IAAIX,IAChBY,EAQT,0DARsB,IAAIZ,IAEjBa,EAMT,0DANkB,IAAIb,IACbc,EAKT,0DALsB,IAAId,IACjBe,EAIT,0DAJ0B,IAAIf,IAErBgB,EAET,0DAF0B,IAAIhB,IACrBiB,EACT,0DADuB,IAAIjB,IAC3B,yBA7BSL,cA6BT,KA5BSC,UA4BT,KA3BSC,YA2BT,KA1BSC,WA0BT,KAxBSC,SAwBT,KAvBSE,SAuBT,KArBSC,YAqBT,KApBSC,UAoBT,KAnBSC,mBAmBT,KAjBSC,YAiBT,KAhBSC,QAgBT,KAfSC,UAeT,KAdSC,YAcT,KAZSC,QAYT,KAXSC,kBAWT,KATSC,YAST,KARSC,aAQT,KANSC,SAMT,KALSC,aAKT,KAJSC,iBAIT,KAFSC,iBAET,KADSC,eExBFC,EAAyB,SAC1BC,GACJC,QAAQC,KAAK,kCACb,IAGMd,EAAuBY,EAAgBZ,QAAyBe,KAAI,SAACC,EAAQC,GAC/E,MAAO,CACHC,GAAIF,EAAOE,GACXC,WAAYH,EAAOG,WACnBC,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBC,iBAAkBN,EAAOM,iBACzBC,eAAgBP,EAAOO,eACvBC,eAAgBR,EAAOQ,eACvBC,YAAa,GACbR,MAAOA,MAGThB,EAA6BW,EAAgBX,UAA6Bc,KAAI,SAACW,GACjF,IAAMC,EAAyC,GAK/C,OAJAD,EAASE,iBAAiBC,SAAQ,SAACC,GAC/BH,EAAkBI,KAAKD,MAGpB,CACHE,QAASN,EAASM,QAClBL,kBAAmBA,EACnBM,SAAUP,EAASO,SACnBf,GAAIQ,EAASR,GACbgB,OAAQR,EAASQ,OACjBC,KAAMT,EAASS,KACfC,KAAMV,EAASU,KACfC,WAAYX,EAASW,eAGvBnC,EAAmBU,EAAgBV,MAAqBa,KAAI,SAACuB,GAC/D,MAAO,CACHpB,GAAIoB,EAAKpB,GACTiB,KAAMG,EAAKH,KACXI,kBAAmBD,EAAKC,kBACxBC,kBAAmBF,EAAKE,kBACxBC,KAAM,GACNC,UAAWJ,EAAKI,UAAU3B,KAAI,SAAC4B,GAC3B,MAAO,CAACzB,GAAIyB,EAASzB,GAAIiB,KAAMQ,EAASR,aAe9C3B,EAAqCI,EAAgBJ,eAAuCO,KAC9F,SAAC6B,GACG,MAAO,CACH1B,GAAI0B,EAAc1B,GAClBiB,KAAMS,EAAcT,KACpBU,QAASD,EAAcC,QACvBC,WAAYF,EAAcjB,kBAAkBZ,KAAI,SAAAgC,GAAc,OAhBhC,SAACA,EAAmCf,EAAiBgB,GAC3F,MAAO,CACH9B,IAAK,EACLc,QAASA,EACTgB,WAAYA,EACZ5B,OAAQ2B,EAAe3B,OACvBC,WAAY0B,EAAeE,YAU2CC,CAAkCH,EAAgBH,EAAcZ,QAASY,EAAc1B,OACzJiC,0BAA2B,GAC3BjB,OAAQU,EAAcV,OACtBD,SAAUW,EAAcX,aAKpC,MAAO,CACH5C,QAvEoB,GAwEpBD,YD5FwB,cC8FxBI,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBI,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAE5BP,QAASA,EACTC,UAAWA,EACXC,MAAOA,EACPM,eAAgBA,IClGf4C,EAAyB,SAC1BxC,GACJC,QAAQC,KAAK,kCACb,IAGMb,EAA2BW,EAAgBX,UAA6Bc,KAAI,SAACW,GAC/E,IAAMoB,EAA4B,GAWlC,OAVApB,EAASC,kBAAkBE,SAAQ,SAACC,GAChCgB,EAAWf,KAAK,CACZiB,WAAYtB,EAASR,GACrBG,WAAYS,EAAiBmB,WAC7B7B,OAAQU,EAAiBV,OACzBY,QAASN,EAASM,QAClBd,IAAK,OAIN,CACHc,QAASN,EAASM,QAClBc,WAAYA,EACZb,SAAUP,EAASO,SACnBf,GAAIQ,EAASR,GACbgB,OAAQR,EAASQ,OACjBC,KAAMT,EAASS,KACfC,KAAMV,EAASU,KACfC,WAAYX,EAASW,WACrBI,KAAM,GACNU,0BAA2B,OAInC,MAAO,CACH9D,QF/CyB,GEgDzBD,YAAawB,EAAgBxB,YAC7BE,UF7CwB,EE8CxBC,SF9CwB,EEgDxBC,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBC,QAASY,EAAgBZ,QACzBC,UAAWA,EACXC,MAAOU,EAAgBV,MACvBC,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAC5BC,eAAgBI,EAAgBJ,iBCvD/B6C,EAAyB,SAC1BzC,GACJC,QAAQC,KAAK,kCACb,IAAMxB,EAAoBsB,EAAgBtB,UACpCC,EAAmBqB,EAAgBrB,SAEzC,MAAO,CACHF,QHnByB,GGoBzBD,YAAawB,EAAgBxB,YAC7BE,UAAWA,EACXC,SAAUA,EAEVC,OAAQoB,EAAgBpB,OACxBE,OAAQkB,EAAgBlB,OACxBG,iBAAkBe,EAAgBf,iBAClCF,UAAWiB,EAAgBjB,UAC3BC,QAASgB,EAAgBhB,QACzBE,UAAWc,EAAgBd,UAC3BC,MAAOa,EAAgBb,MACvBC,QAASY,EAAgBZ,QACzBC,UAAWW,EAAgBX,UAC3BC,MAAOU,EAAgBV,MACvBC,gBAAiBS,EAAgBT,gBACjCC,UAAWQ,EAAgBR,UAC3BC,WAAYO,EAAgBP,WAC5BC,OAAQM,EAAgBN,OACxBC,WAAYK,EAAgBL,WAC5BC,eAAgBI,EAAgBJ,eAChCC,eAAgB,GAChBC,YAAa,KC1CZ4C,EAAsB,SACjB1C,GACVC,QAAQC,KAAK,+BACb,IAAIyC,EAAmC,GAEvC,OAAQ3C,EAAgBvB,SACpB,UAAKmE,EACDD,EAA0BF,EACtBD,EACIzC,EAA+BC,KAGvC,MACJ,IAAK,GACD2C,EAA0BF,EACtBD,EAA+BxC,IACnC,MACJ,IAAK,GACD2C,EAA0BF,EAA+BzC,GAGjE,OAAO2C,GArBFD,EAAsB,SAwBGG,GAC9B,IAAIC,GAAyB,EAM7B,YALwBF,IAApBC,EAAQpE,SJzBiB,KIyBQoE,EAAQpE,QACzCqE,GAAgB,EAEhB7C,QAAQ8C,KAAR,6DAAmEF,EAAQpE,QAA3E,OAEGqE,GChCTE,E,WAIF,aAII,GAJkB,yBAFdtB,UAEa,EACZsB,EAAUjB,UAAaiB,EAAUjB,SAASL,MAC3CuB,KAAKC,sBAELF,EAAUjB,SACV,OAAOiB,EAAUjB,SAErBiB,EAAUjB,SAAWkB,K,uDAGzB,WACI,IAAME,EAAkCC,aAAaC,QLfrC,SKgBZC,EAAuB,CACvB7E,QLfyB,GKgBzBD,YLdwB,cKexBE,ULbwB,EKcxBC,SLdwB,EKexBC,OAAQ,GACRE,OAAQ,GACRG,iBAAkB,GAClBF,UAAW,GACXC,QAAS,GACTE,UAAW,GACXC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXC,MAAO,GACPC,gBAAiB,GACjBC,UAAW,GACXC,WAAY,GACZC,OAAQ,GACRC,WAAY,GACZC,eAAgB,GAChBC,eAAgB,GAChBC,YAAa,IAEZqD,GAGDG,EAAcC,KAAKC,MAAML,GACpBT,EAAsDY,KACvDA,EAAcZ,EAAkCY,GAChDL,KAAKQ,cAAcF,KAAKG,UAAUJ,MALtCF,aAAaO,QLzCD,QKyCmBJ,KAAKG,UAAUJ,IAQlDL,KAAKW,SAASN,K,sBAGlB,SAAiBA,GAAuB,IAAD,OACnCL,KAAKvB,KAAO,IAAInD,EACXmE,EAAsDY,KACvDA,EAAcZ,EAAkCY,IAEpDO,OAAOC,QAAQR,GAAarC,SAAQ,YAAmB,IAAD,mBAAhB8C,EAAgB,KAAXC,EAAW,KAClD,QAAcpB,IAAVoB,EAkBA,MAAM,IAAIC,MAAJ,iCAAoCF,IAjB1C,GAAIG,MAAMC,QAAQH,GAAQ,CACtB,IAAMI,EAAYP,OAAOC,QAAQ,EAAKpC,MAAO2C,MAAK,yCAA2BN,KAC7E,IAAIK,EAMA,MADAnE,QAAQ8C,KAAR,qCAA2CgB,EAA3C,mBAAyDC,IACnD,IAAIC,MAAJ,qCAAwCF,EAAxC,mBAAsDC,IAL5DA,EAAM/C,SAAQ,SAACqD,GACXF,EAAU,GAAGG,IAAID,EAAWhE,GAAIgE,MAO5C,EAAK5C,KAAMlD,YAAc8E,EAAY9E,YAGrC,EAAKkD,KAAMhD,UAAY4E,EAAY5E,UAAY4E,EAAY5E,UAAY,EACvE,EAAKgD,KAAM/C,SAAW2E,EAAY3E,SAAW2E,EAAY3E,SAAW,O,sBAOhF,WACIyE,aAAaO,QLlFG,QKkFeJ,KAAKG,UAAUT,KAAKuB,yB,gCAGvD,WACI,MAAO,CACHhG,YAAayE,KAAKvB,KAAMlD,YAAYiG,WACpChG,QLtFyB,GKuFzBC,UAAWgG,OAAOzB,KAAKvB,KAAMhD,WAC7BC,SAAU+F,OAAOzB,KAAKvB,KAAM/C,UAC5BC,OAAQsF,MAAMS,KAAK1B,KAAKvB,KAAM9C,OAAOgG,UACrC9F,OAAQoF,MAAMS,KAAK1B,KAAKvB,KAAM5C,OAAO8F,UACrC5F,QAASkF,MAAMS,KAAK1B,KAAKvB,KAAM1C,QAAQ4F,UACvC3F,iBAAkBiF,MAAMS,KAAK1B,KAAKvB,KAAMzC,iBAAiB2F,UACzD7F,UAAWmF,MAAMS,KAAK1B,KAAKvB,KAAM3C,UAAU6F,UAC3C1F,UAAWgF,MAAMS,KAAK1B,KAAKvB,KAAMxC,UAAU0F,UAC3CzF,MAAO+E,MAAMS,KAAK1B,KAAKvB,KAAMvC,MAAMyF,UACnCxF,QAAS8E,MAAMS,KAAK1B,KAAKvB,KAAMtC,QAAQwF,UACvCtF,MAAO4E,MAAMS,KAAK1B,KAAKvB,KAAMpC,MAAMsF,UACnCrF,gBAAiB2E,MAAMS,KAAK1B,KAAKvB,KAAMnC,gBAAgBqF,UACvDpF,UAAW0E,MAAMS,KAAK1B,KAAKvB,KAAMlC,UAAUoF,UAC3CnF,WAAYyE,MAAMS,KAAK1B,KAAKvB,KAAMjC,WAAWmF,UAC7CvF,UAAW6E,MAAMS,KAAK1B,KAAKvB,KAAMrC,UAAUuF,UAC3ClF,OAAQwE,MAAMS,KAAK1B,KAAKvB,KAAMhC,OAAOkF,UACrCjF,WAAYuE,MAAMS,KAAK1B,KAAKvB,KAAM/B,WAAWiF,UAC7ChF,eAAgBsE,MAAMS,KAAK1B,KAAKvB,KAAM9B,eAAegF,UACrD/E,eAAgBqE,MAAMS,KAAK1B,KAAKvB,KAAM7B,eAAe+E,UACrD9E,YAAaoE,MAAMS,KAAK1B,KAAKvB,KAAM5B,YAAY8E,a,2BAIvD,SAAqBC,GACjB,IAAMvB,EAAuBC,KAAKC,MAAMqB,GACxC5B,KAAKW,SAASN,GACdF,aAAaO,QLnHG,QKmHekB,K,0BAGnC,SAAoBrG,GAChB,IAAMsG,EAAUvB,KAAKG,UAAUT,KAAKuB,sBAC9BO,EAAU,uCAAyCC,mBAAmBF,GACtEG,EAAcC,SAASC,cAAc,KAC3CF,EAAYG,aAAa,OAAQL,GACjCE,EAAYG,aAAa,WAAY5G,EAAc,SACnDyG,EAAYI,U,8BAGhB,WACIjC,aAAakC,WLhIG,SKiIhBrC,KAAKC,wB,2BAGT,WACID,KAAKsC,WACLtC,KAAKC,wB,sBAGT,WACIjD,QAAQ8C,KAAK,0BACbE,KAAKC,wB,0BAGT,WAII,OAHKD,KAAKvB,MACNuB,KAAKC,sBAEFD,KAAKvB,S,KAlJdsB,EACKjB,c,EAqJX,ICvJYyD,EDyJGC,EAFG,IAAIzC,EE3JT0C,EAAY,CACrBC,kBADqB,SACHC,GACd,OAAkB,OAAXA,QAA8BhD,IAAXgD,GAG9BC,SALqB,SAKZD,GACL,OAAOF,EAAUC,kBAAkBC,GAAUA,EAASrC,KAAKC,MAAMD,KAAKG,UAAUkC,KAGpFE,YATqB,SASTvE,GACR,IAAIwE,GAAiB,EAKrB,OAJK9C,KAAK0C,kBAAkBpE,KAExBwE,EAAiB,KAATxE,GAELwE,K,SDXHP,K,UAAAA,E,cAAAA,E,YAAAA,E,YAAAA,E,WAAAA,M,KEEL,ICFKQ,EDECC,EAAoB,SAEMC,EAAyBT,GAGxD,GAF8CvB,MAAMS,KAAKc,EAAUpG,UAAUuF,UACxEuB,MAAK,SAAArF,GAAQ,OAAIA,EAASyB,0BAA0B4D,MAAK,SAAAC,GAAmB,OAAIA,EAAoBC,UAAYH,QAEjH,MAAM,IAAIjC,MAAJ,+CAAkDiC,EAAlD,0CANLD,EAAoB,SAUGK,EAAsBb,GAGlD,GAF2CvB,MAAMS,KAAKc,EAAU7F,eAAegF,UAC1EuB,MAAK,SAAArF,GAAQ,OAAIA,EAASyB,0BAA0B4D,MAAK,SAAAC,GAAmB,OAAIA,EAAoBC,UAAYC,QAEjH,MAAM,IAAIrC,MAAJ,+CAAkDqC,EAAlD,0CAdLL,EAAoB,SAkBHM,EAAgBd,GACtC,IAAMe,EAA8BtC,MAAMS,KAAKc,EAAUlG,gBAAgBqF,UAAUuB,MAC/E,SAACM,GAAD,OAAcA,EAASC,UAAYH,GAAUE,EAASE,UAAYJ,KAGhEK,EAAuB1C,MAAMS,KAAKc,EAAUrG,QAAQwF,UAAUuB,MAChE,SAACU,GAAD,OAAeA,EAAUrG,SAAW+F,KAGlCO,EAA0B5C,MAAMS,KAAKc,EAAUpG,UAAUuF,UAAUuB,MAAK,SAACrF,GAAD,OAC1EA,EAASoB,WAAWiE,MAAK,SAACY,GAAD,OAAeA,EAAUvG,SAAW+F,QAG3DS,EAA+B9C,MAAMS,KAAKc,EAAU7F,eAAegF,UAAUuB,MAAK,SAACnE,GAAD,OACpFA,EAAcE,WAAWiE,MAAK,SAACY,GAAD,OAAeA,EAAUvG,SAAW+F,QAGhEU,EAA0B/C,MAAMS,KAAKc,EAAUjG,UAAUoF,UAAUuB,MACrE,SAACe,GAAD,OAAcA,EAAS1G,SAAW+F,KAGtC,GAAIC,GAAsBI,GAAeE,GAAkBE,GAAuBC,EAC9E,MAAM,IAAIhD,MAAJ,sCAAyCsC,EAAzC,uCAxCLN,EAAoB,SA4CKM,EAAgBlE,EAAoBoD,GAClE,IAAM0B,EAAwBjD,MAAMS,KAAKc,EAAUrG,QAAQwF,UAAUuB,MACjE,SAAC/F,GAAD,OAAYA,EAAOI,SAAW+F,GAAUnG,EAAOK,aAAe4B,KAG5DyE,EAA0B5C,MAAMS,KAAKc,EAAUpG,UAAUuF,UAAUuB,MAAK,SAACrF,GAAD,OAC1EA,EAASoB,WAAWiE,MAAK,SAACY,GAAD,OAAeA,EAAUvG,SAAW+F,GAAUQ,EAAUtG,aAAe4B,QAG9F2E,EAA+B9C,MAAMS,KAAKc,EAAU7F,eAAegF,UAAUuB,MAAK,SAACnE,GAAD,OACpFA,EAAcE,WAAWiE,MACrB,SAACY,GAAD,OAAeA,EAAUvG,SAAW+F,GAAUQ,EAAUtG,aAAe4B,QAIzE4E,EAA0B/C,MAAMS,KAAKc,EAAUjG,UAAUoF,UAAUuB,MACrE,SAACe,GAAD,OAAcA,EAAS1G,SAAW+F,GAAUW,EAASzG,aAAe4B,KAGxE,GAAI8E,GAAgBL,GAAkBG,GAAkBD,EACpD,MAAM,IAAI/C,MAAJ,+CAAkD5B,EAAlD,uCAhEL4D,EAAoB,SAoEFmB,EAAiB3B,GACxC,IAAM0B,EAAwBjD,MAAMS,KAAKc,EAAUrG,QAAQwF,UAAUuB,MACjE,SAAC/F,GAAD,OAAYA,EAAOO,iBAAmByG,GAAWhH,EAAOM,mBAAqB0G,KAG3EN,EAA0B5C,MAAMS,KAAKc,EAAUpG,UAAUuF,UAAUuB,MAAK,SAACrF,GAAD,OAC1EA,EAASoB,WAAWiE,MAAK,SAACY,GAAD,OAAeA,EAAU3F,UAAYgG,QAG5DJ,EAA+B9C,MAAMS,KAAKc,EAAU7F,eAAegF,UAAUuB,MAC/E,SAACnE,GAAD,OAAmBA,EAAcE,WAAWiE,MAAK,SAAAY,GAAS,OAAIA,EAAU3F,UAAYgG,QAGlFH,EAA0B/C,MAAMS,KAAKc,EAAUjG,UAAUoF,UAAUuB,MACrE,SAACe,GAAD,OAAcA,EAAS9F,UAAYgG,KAGvC,GAAID,GAAgBL,GAAkBE,GAAuBC,EACzD,MAAM,IAAIhD,MAAJ,uCAA0CmD,EAA1C,uCAtFLnB,EAAoB,SA0FHoB,EAA8B5B,GACpD,IAAI6B,EAA0B,8BAA0BD,EAAa9F,KAAvC,qBAAwD8F,EAAa/G,GAArE,8BAC1BiH,EAA6B,GAE3BC,EAA6CtD,MAAMS,KAAKc,EAAUtG,MAAMyF,UAAUP,MACpF,SAACoD,GAAD,OAAUA,EAAKC,KAAKC,OAASnC,EAAUoC,MAAQH,EAAKC,KAAKpH,KAAO+G,EAAa/G,MAGjFiH,GAC0BC,EAAc,gBAAYA,EAAejG,KAA3B,qBAA4CiG,EAAelH,GAA3D,KAAmE,GAE3G,IAAMuH,EAAyC3D,MAAMS,KAAKc,EAAUrG,QAAQwF,UAAUP,MAClF,SAACjE,GAAD,OAAYA,EAAOQ,iBAAmByG,EAAa/G,MAGvDiH,GAEKM,EAAgB,qBAAiBA,EAAiBtH,WAAlC,qBAAyDsH,EAAiBvH,GAA1E,KAAkF,GAEvG,IAAMwH,EAA6C5D,MAAMS,KAAKc,EAAUpG,UAAUuF,UAAUP,MACxF,SAACvD,GAAD,OACKA,EAASQ,OAAOqG,OAASnC,EAAUoC,MAAQ9G,EAASQ,OAAOhB,KAAO+G,EAAa/G,IAC/EQ,EAASO,SAASsG,OAASnC,EAAUoC,MAAQ9G,EAASO,SAASf,KAAO+G,EAAa/G,MAO5F,IAJAiH,GAEKO,EAAkB,uBAAmBA,EAAmBvG,KAAtC,qBAAuDuG,EAAmBxH,GAA1E,KAAkF,IAElFyH,OAAS,EAC5B,MAAM,IAAI9D,MAAMqD,EAAqBC,IAxHpCtB,EAAoB,SA4HC+B,EAAoBvC,GAC9C,IAAMwC,EAAsB/D,MAAMS,KAAKc,EAAUtG,MAAMyF,UAAUuB,MAAK,SAACsB,GAAD,OAAUA,EAAKhG,aAAeuG,KAE9FlB,EAA0B5C,MAAMS,KAAKc,EAAUpG,UAAUuF,UAAUuB,MACrE,SAAC+B,GAAD,OAASA,EAAIzG,aAAeuG,KAEhC,GAAIC,GAAcnB,EACd,MAAM,IAAI7C,MAAJ,kCAAqC+D,EAArC,oDAnIL/B,EAAoB,SAqJQkC,EAAsB1C,GACvD,IAAM2C,EAAuBlE,MAAMS,KAAKc,EAAU7G,OAAOgG,UAAUuB,MAC/D,SAACkC,GAAD,OAAWA,EAAM1G,oBAAsBwG,KAErCG,EAAsBpE,MAAMS,KAAKc,EAAUnG,MAAMsF,UAAUuB,MAC7D,SAACzE,GAAD,OAAUA,EAAKC,oBAAsBwG,KAEzC,GAAIC,GAAeE,EACf,MAAM,IAAIrE,MAAJ,kDAAqDkE,EAArD,uCA7JLlC,EAAoB,SAiKCsC,EAAoB9C,GAI9C,GAHuCvB,MAAMS,KAAKc,EAAUxG,iBAAiB2F,UAAUuB,MACnF,SAACqC,GAAD,OAAaA,EAAQC,aAAeF,KAGpC,MAAM,IAAItE,MAAJ,0CAA6CsE,EAA7C,gDAtKLtC,EAAoB,SA0KDyC,EAAkBjD,GAE1C,GAD6BvB,MAAMS,KAAKc,EAAU7G,OAAOgG,UAAUuB,MAAK,SAACkC,GAAD,OAAWA,EAAMM,WAAaD,KAElG,MAAM,IAAIzE,MAAJ,wCAA2CyE,EAA3C,sCA7KLzC,EAAoB,SAiLF2C,EAAiBnD,GAExC,GAD6BvB,MAAMS,KAAKc,EAAU7G,OAAOgG,UAAUuB,MAAK,SAACkC,GAAD,OAAWA,EAAMQ,WAAaD,KAElG,MAAM,IAAI3E,MAAJ,uCAA0C2E,EAA1C,sCExLLE,EAAc,SACblD,EAAarE,GACnB,GAAImE,EAAUC,kBAAkBC,GAE5B,MADA3F,QAAQ8C,KAAR,UAAgBxB,EAAhB,mCACM,IAAI0C,MAAJ,sBAAyB1C,EAAzB,oC,QCJLwH,EAAiB,CAC1BC,eAD0B,SACXC,GACX,IAAI3I,EAAK4I,KAAKC,IAAL,MAAAD,KAAI,YAAQD,EAAY9I,KAAI,SAACiJ,GAAD,OAAcA,EAAS9I,QAAO,EAInE,OAHIA,KAAQ+I,MACR/I,EAAK,GAEFA,GAGXgJ,cAT0B,SASZhJ,EAAY2I,GACtB,IAAIM,EAAoBjJ,EAMxB,OAJmB,IAAfiJ,IACAA,EAAYtG,KAAK+F,eAAeC,IAG7BM,ICZFC,EAAkB,CAC3BnF,KAD2B,SACtB/D,GACD,OAAOmF,EAAUgE,eAAe7K,OAAO8K,IAAIpJ,IAG/CqJ,QAL2B,WAMvB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe7K,OAAOgG,WAGtDgF,OAT2B,SASpBvB,GAGH,GAFApC,EAA6CoC,EAAM/H,GAAImF,EAAUgE,iBACjDhE,EAAUgE,eAAe7K,OAAOgL,OAAOvB,EAAM/H,IAEzD,MAAM,IAAI2D,MAAM,yCAEpB,OAAOoE,GAGXwB,KAlB2B,SAkBtBxB,GAED,IAAIyB,EAUJ,OAXAhB,EAAsBT,EAAO,SAGzByB,GADc,IAAdzB,EAAM/H,GACC,2BACA+H,GADA,IAEH/H,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGpC,eAAOtB,GAElB5C,EAAUgE,eAAe7K,OAAO2F,IAAIuF,EAAQxJ,GAAKwJ,GAC1CA,IC9BFC,EAAkB,CAC3B1F,KAD2B,SACtB/D,GACD,OAAOmF,EAAUgE,eAAe3K,OAAO4K,IAAIpJ,IAG/CqJ,QAL2B,WAMvB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe3K,OAAO8F,WAGtDgF,OAT2B,SASpBI,GAGH,GAFA/D,EAA6C+D,EAAM1J,GAAImF,EAAUgE,iBACjDhE,EAAUgE,eAAe3K,OAAO8K,OAAOI,EAAM1J,IAEzD,MAAM,IAAI2D,MAAM,yCAEpB,OAAO+F,GAGXH,KAlB2B,SAkBtBG,GAED,IAAIC,EAWJ,OAZAnB,EAAsBkB,EAAO,UAEX,IAAdA,EAAM1J,IACN2J,EAAO,2BACAD,GADA,IAEH1J,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAE3C1J,QAAQC,KAAK,qBAAuB+J,EAAQ3J,KAE5C2J,EAAO,eAAOD,GAElBvE,EAAUgE,eAAe3K,OAAOyF,IAAI0F,EAAQ3J,GAAK2J,GAC1CA,IChCFC,EAAmB,CAC5B7F,KAD4B,SACvB/D,GACD,OAAOmF,EAAUgE,eAAezK,QAAQ0K,IAAIpJ,IAGhDqJ,QAL4B,WAMxB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAezK,QAAQ4F,WAGvDgF,OAT4B,SASrBO,GAGH,GAFAlE,EAA8CkE,EAAO7J,GAAImF,EAAUgE,iBACnDhE,EAAUgE,eAAezK,QAAQ4K,OAAOO,EAAO7J,IAE3D,MAAM,IAAI2D,MAAM,yCAEpB,OAAOkG,GAGXN,KAlB4B,SAkBvBM,GACD,IAAIC,EAUJ,OARIA,GADe,IAAfD,EAAO7J,GACC,2BACD6J,GADC,IAEJ7J,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGnC,eAAOQ,GAEnB1E,EAAUgE,eAAezK,QAAQuF,IAAI6F,EAAS9J,GAAK8J,GAC5CA,IC7BFC,EAA4B,CACrChG,KADqC,SAChC/D,GACD,OAAOmF,EAAUgE,eAAexK,iBAAiByK,IAAIpJ,IAGzDqJ,QALqC,WAMjC,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAexK,iBAAiB2F,WAGhEgF,OATqC,SAS9BU,GACHrE,EAAuDqE,EAAgBhK,GAAImF,EAAUgE,gBACrF,IAAMc,EAAU9E,EAAUgE,eAAexK,iBAAiB2K,OAAOU,EAAgBhK,IACjF,IAAKiK,EACD,MAAM,IAAItG,MAAM,yCAEpB,OAAOsG,GAGXV,KAlBqC,SAkBhCS,GACD,IAAIE,EAUJ,OARIA,GADwB,IAAxBF,EAAgBhK,GACC,2BACVgK,GADU,IAEbhK,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAG1B,eAAOW,GAE5B7E,EAAUgE,eAAexK,iBAAiBsF,IAAIiG,EAAkBlK,GAAKkK,GAC9DA,IC7BFC,EAAqB,CAC9BpG,KAD8B,SACzB/D,GACD,OAAOmF,EAAUgE,eAAe1K,UAAU2K,IAAIpJ,IAGlDqJ,QAL8B,WAM1B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe1K,UAAU6F,WAGzDgF,OAT8B,SASvBc,GACHzE,EAAgDyE,EAASpK,GAAImF,EAAUgE,gBACvE,IAAMc,EAAU9E,EAAUgE,eAAe1K,UAAU6K,OAAOc,EAASpK,IACnE,IAAKiK,EACD,MAAM,IAAItG,MAAM,yCAEpB,OAAOsG,GAGXV,KAlB8B,SAkBzBa,GACD,IAAIC,EAUJ,OARIA,GADiB,IAAjBD,EAASpK,GACC,2BACHoK,GADG,IAENpK,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGjC,eAAOe,GAErBjF,EAAUgE,eAAe1K,UAAUwF,IAAIoG,EAAWrK,GAAKqK,GAChDA,IChCFC,EAAoB,SACbrJ,GAEZ,OADAkE,EAAUgE,eAAejL,YAAc+C,EAChCA,GAHFqJ,EAAoB,SAMdC,GAEX,OADApF,EAAUgE,eAAe/K,UAAYmM,EAC9BA,GARFD,EAAoB,SAWhBC,GAET,OADApF,EAAUgE,eAAe9K,SAAWkM,EAC7BA,GAbFD,EAAoB,WAiBzB,OAAOnF,EAAUgE,eAAe/K,WAjB3BkM,EAAoB,WAqBzB,OAAOnF,EAAUgE,eAAe9K,UCZ3BmM,EAA6B,SAKfxK,GACnB,IAAMgK,EAAkBD,EAA0BhG,KAAK/D,GACvDwI,EAAsBwB,EAAiB,mBACvC,IAAMI,EAAWD,EAAmBpG,KAAKiG,EAAiB7B,YAE1D,OADAK,EAAsB4B,EAAU,YACzB,CAACJ,gBAAiBA,EAAkBI,SAAUA,IAVhDI,GAA6B,SAiB3BxK,GACP,OAAO4J,EAAiB7F,KAAK/D,IAlBxBwK,GAA6B,SAqBlBC,GAChBjC,EAAsBiC,EAAoB,sBAC1CjC,EAAsBiC,EAAmBL,SAAU,YACnD,IAAMM,EAAgBP,EAAmBZ,KAAKkB,EAAmBL,UAC3DO,EAA6CvF,EAAUG,SAASkF,GAGtE,OAFAE,EAAuBX,gBAAgB7B,WAAauC,EAAc1K,GAE3D,CACHoK,SAAUM,EACVV,gBAHyBD,EAA0BR,KAAKoB,EAAuBX,mBA3B9EQ,GAA6B,SAkC3BX,GAEP,OADArB,EAAsBqB,EAAQ,UACvBD,EAAiBL,KAAKM,IApCxBW,GAA6B,SAuCbC,GACrBjC,EAAsBiC,EAAoB,sBAC1C,IAAMG,EAAmBb,EAA0BT,OAAOmB,EAAmBT,iBAE7E,IAD0BG,EAAmBb,OAAOmB,EAAmBL,YAC5CQ,EACvB,MAAM,IAAIjH,MAAM,mBAEpB,OAAO8G,GA9CFD,GAA6B,SAiDzBX,GAET,IADkBD,EAAiBN,OAAOO,GAEtC,MAAM,IAAIlG,MAAM,mBAEpB,OAAOkG,GAtDFW,GAA6B,SAyDxBD,GACV,OAAOD,EAAiCC,IA1DnCC,GAA6B,SA6DzBD,GACT,OAAOD,EAA+BC,IA9DjCC,GAA6B,SAiEtBtM,GACZ,OAAOoM,EAAkCpM,IAlEpCsM,GAA6B,WAsElC,OAAOF,KAtEFE,GAA6B,WA0ElC,OAAOF,KC1EFO,GAAyB,CAClCxB,QADkC,WAE9B,OAAOH,EAAgBG,UAAUxJ,KAAI,SAACkI,GAAD,OAAW+C,GAAe/C,OAGnEgD,QALkC,SAK1B/K,GACJ,OAAO8K,GAAe5B,EAAgBnF,KAAK/D,KAG/C+D,KATkC,SAS7B/D,GACD,OAAOkJ,EAAgBnF,KAAK/D,IAGhCgL,cAbkC,WAc9B,OAAOvB,EAAgBJ,WAG3BC,OAjBkC,SAiB3BvB,GAOH,OANAS,EAAsBT,EAAMiC,gBAAiB,sBAC7CxB,EAAsBT,EAAM8B,OAAQ,YACpCrB,EAAsBT,EAAMA,MAAO,WACnCmB,EAAgBI,OAAOvB,EAAMA,OAC7ByC,GAAoDzC,EAAMiC,iBAC1DQ,GAAwCzC,EAAM8B,QACvC9B,GAGXkD,YA3BkC,SA2BtBvB,GAA0B,IAAD,OAQjC,OAPAlB,EAAsBkB,EAAO,SACK/G,KAAK0G,UAAU6B,QAAO,SAACnD,GAAD,OAAWA,EAAMA,MAAMQ,WAAamB,EAAM1J,MACpFW,SAAQ,SAACoH,GACnBA,EAAMA,MAAMQ,UAAY,EACxB,EAAK4C,QAAQpD,MAEjB0B,EAAgBH,OAAOI,GAChBA,GAGXyB,QAtCkC,SAsC1BC,GACJ5C,EAAsB4C,EAAU,YAChC,IAAMC,EAAiBjG,EAAUG,SAAS6F,GACpCE,EAAcd,GAAsCa,EAAKxB,QAC/DwB,EAAKtD,MAAMM,SAAWiD,EAAYtL,GAClC,IAAMuL,EAAuBf,GAA+Ca,EAAKrB,iBAGjF,OAFAqB,EAAKtD,MAAM1G,kBAAoBkK,EAAqBvB,gBAAgBhK,GAE7D,CACH+H,MAFemB,EAAgBK,KAAK8B,EAAKtD,OAGzCiC,gBAAiBuB,EACjB1B,OAAQyB,IAIhBE,UArDkC,SAqDxB9B,GAEN,OADAlB,EAAsBkB,EAAO,SACtBD,EAAgBF,KAAKG,KAI9BoB,GAAiB,SAAC/C,GACpBS,EAAsBT,EAAO,SAC7B,IAAM8B,EAA+BW,GAAsCzC,EAAOM,UAClFG,EAAsBqB,EAAQ,UAC9B,IAAMG,EAAkDQ,EACpDzC,EAAO1G,mBAGX,OADAmH,EAAsBwB,EAAiB,mBAChC,CACHjC,MAAOA,EACPiC,gBAAiBA,EACjBH,OAAQA,IC5EH4B,GAA2B,CACpC1H,KADoC,SAC/B2H,GACD,OAAOvG,EAAUgE,eAAelK,gBAAgBmK,IAAIsC,IAExDrC,QAJoC,WAKhC,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAelK,gBAAgBqF,WAE/DiF,KAPoC,SAO/BoC,GAED,IAAIC,EAWJ,OAZApD,EAAsBmD,EAAc,mBAEX,IAArBA,EAAa3L,IACb4L,EAAc,2BACPD,GADO,IAEV3L,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAE3C1J,QAAQC,KAAK,qBAAuBgM,EAAe5L,KAEnD4L,EAAc,eAAOD,GAEzBxG,EAAUgE,eAAelK,gBAAgBgF,IAAI2H,EAAe5L,GAAK4L,GAC1DA,GAGXtC,OAvBoC,SAuB7BqC,GAGH,GAFAnD,EAAsBmD,EAAc,mBACpBxG,EAAUgE,eAAelK,gBAAgBqK,OAAOqC,EAAa3L,IAEzE,MAAM,IAAI2D,MAAM,yCAEpB,OAAOgI,ICzBFE,GAAiB,CAC1B9H,KAD0B,SACrBkC,GACD,OAAOd,EAAUgE,eAAenK,MAAMoK,IAAInD,IAG9CoD,QAL0B,WAMtB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAenK,MAAMsF,WAGrDiF,KAT0B,SASrBnI,GAGD,GAFAoH,EAAsBpH,EAAM,QAExBA,EAAKI,UAAUiG,QAAU,EACzB,MAAM,IAAI9D,MAAJ,0BAA6BvC,EAAKpB,GAAlC,uBAGV8L,GAA+B1K,EAAMuB,KAAK0G,UAAWlE,EAAUgE,gBAE/D,IAAI4C,EAAc,eAAO3K,GAMzB,OAJA2K,EAASC,GAAoBrJ,KAAK0G,UAAW0C,IACtCvK,UAAYJ,EAAKI,UAAU3B,KAAI,SAAC4B,GAAD,OAAcwK,GAAwB7K,EAAKI,UAAWC,MAE5F0D,EAAUgE,eAAenK,MAAMiF,IAAI8H,EAAO/L,GAAK+L,GACxCA,GAGXzC,OA3B0B,SA2BnByC,GAMH,GALApG,EAA4CoG,EAAO/L,GAAImF,EAAUgE,gBACjE4C,EAAOvK,UAAUb,SAAQ,SAACc,GAAD,OACrBkE,EAAoDoG,EAAO/L,GAAIyB,EAASzB,GAAImF,EAAUgE,oBAE1EhE,EAAUgE,eAAenK,MAAMsK,OAAOyC,EAAO/L,IAEzD,MAAM,IAAI2D,MAAM,yCAEpB,OAAOoI,IAITE,GAA0B,SAACzK,EAA6BC,GAC1D,IAAMyK,EAA+B9G,EAAUG,SAAS9D,GAIxD,OAHqB,IAAjBA,EAASzB,KACTkM,EAAalM,GAAKyI,EAAeC,eAAelH,IAE7C0K,GAGLF,GAAsB,SAACG,EAAmBJ,GAC5C,IAAMK,EAAqBhH,EAAUG,SAASwG,GAI9C,OAHuB,IAAnBK,EAAWpM,KACXoM,EAAWpM,GAAKyI,EAAeC,eAAeyD,IAE3CC,GAGLN,GAAiC,SAAC1K,EAAcpC,EAAiBmG,GACnE,IAAiB,IAAb/D,EAAKpB,GAAW,CAChB,IAAMqM,EAAmCrN,EAAM+E,MAAK,SAACuI,GAAD,OAAQA,EAAGtM,KAAOoB,EAAKpB,MAC3E,GAAIqM,EAC2CA,EAAa7K,UAAU0J,QAC9D,SAACzJ,GAAD,OAAeL,EAAKI,UAAUqE,MAAK,SAAC0G,GAAD,OAAUA,EAAKvM,KAAOyB,EAASzB,SAErDW,SAAQ,SAACc,GAAD,OACrBkE,EAAoDvE,EAAKpB,GAAIyB,EAASzB,GAAImF,QC/D7EqH,GAAwB,CAGjCC,SAHiC,SAGxBzM,GACL,OAAO6L,GAAe9H,KAAK/D,IAG/B0M,YAPiC,SAOrB1M,GACR,OAAO2M,GAAcd,GAAe9H,KAAK/D,KAG7C4M,aAXiC,WAY7B,OAAOf,GAAexC,UAAUxJ,KAAI,SAACuB,GAAD,OAAUuL,GAAcvL,OAGhEyL,YAfiC,SAerBC,GACRtE,EAAsBsE,EAAS,WAC/B,IAAMC,EAAuB3H,EAAUG,SAASuH,GAC1CvB,EAAuBf,GAA+CsC,EAAQ9C,iBAGpF,OAFA+C,EAAY3L,KAAKC,kBAAoBkK,EAAqBvB,gBAAgBhK,GAEnE,CACHoB,KAFgByK,GAAetC,KAAKwD,EAAY3L,MAGhD4I,gBAAiBuB,IAIzByB,cA3BiC,SA2BnBF,GAA4B,IAAD,OAUrC,OATAtE,EAAsBsE,EAAQ9C,gBAAiB,sBAC/CxB,EAAsBsE,EAAQ1L,KAAM,UACAuB,KAAKsK,0BACyB/B,QAC9D,SAAC/E,GAAD,OAAcA,EAASC,UAAY0G,EAAQ1L,KAAKpB,IAAMmG,EAASE,UAAYyG,EAAQ1L,KAAKpB,MAE1EW,SAAQ,SAACwF,GAAD,OAAc,EAAK+G,sBAAsB/G,MACnE0F,GAAevC,OAAOwD,EAAQ1L,MAC9BoJ,GAAoDsC,EAAQ9C,iBACrD8C,GAKXK,uBA1CiC,WA2C7B,OAAO1B,GAAyBpC,WAGpC4D,wBA9CiC,WA+C7B,OAAOT,GAAsBW,yBAAyBtN,IAAIuN,KAG9DC,iBAlDiC,SAkDhB1B,GAGb,OAFAnD,EAAsBmD,EAAc,gBACTF,GAAyBlC,KAAKoC,IAI7DuB,sBAxDiC,SAwDXtB,GAGlB,OAFApD,EAAsBoD,EAAgB,mBACtCH,GAAyBnC,OAAOsC,GACzBA,IAMTwB,GAAwB,SAACxB,GAC3BpD,EAAsBoD,EAAgB,kBACtC,IAAM0B,EAAgCX,GAAcH,GAAsBC,SAASb,EAAexF,UAClGoC,EAAsB8E,EAAU,WAChC,IAAMC,EAAgCZ,GAAcH,GAAsBC,SAASb,EAAevF,UAElG,OADAmC,EAAsB+E,EAAU,WACzB3B,GAGLe,GAAgB,SAACvL,GACnBoH,EAAsBpH,EAAM,QAC5B,IAAM4I,EAAkDQ,EACpDpJ,EAAMC,mBAGV,OADAmH,EAAsBwB,EAAiB,mBAChC,CACH5I,KAAMA,EACN4I,gBAAiBA,I,0BbxFbtE,K,UAAAA,E,cAAAA,E,YAAAA,E,WAAAA,M,KcJL,IAAM8H,GACT,aAAqC,IAAlBxN,EAAiB,wDAAH,EAAG,yBAAjBA,MCEVyN,GAAb,oDACI,aAOG,IAAD,EANSxM,EAMT,uDANwB,GACfE,EAKT,wDAL+B,EACtBuM,EAIT,wDAJgC,EACvBtG,EAGT,uDAH2B,CAACC,KAAM3B,EAAeiI,OACxCzM,EAET,wDADSS,EACT,wDAD4B,EAC5B,4BACE,gBAPOV,OAMT,EALSE,aAKT,EAJSuM,cAIT,EAHStG,OAGT,EAFSlG,OAET,EADSS,UACT,EARN,UAAiC6L,ICDpBI,GAAb,oDACI,aAAyD,IAAD,EAArC3M,EAAqC,uDAA9B,GAAWM,EAAmB,uDAAJ,GAAI,4BACpD,gBADeN,OAAqC,EAAnBM,OAAmB,EAD5D,UAAiCiM,ICCpBK,GACT,aAAqG,IAAlFC,EAAiF,uDAAxD,IAAIF,GAAsB1O,EAA8B,uDAAJ,GAAI,yBAAjF4O,YAAiF,KAA9B5O,aCF7D6O,GAAb,oDACI,aAAiE,IAAD,EAA7C9M,EAA6C,uDAA9B,GAAWM,EAAmB,uDAAJ,GAAI,4BAC5D,gBADeN,OAA6C,EAAnBM,OAAmB,EADpE,UAAgCiM,ICGnBQ,GACT,aAKG,IAJQC,EAIT,uDAJkC,IAAIF,GAC7BG,EAGT,uDAH+C,GACtCnP,EAET,uDAFmC,GAC1BQ,EACT,uDAD6C,GAC7C,yBAJS0O,aAIT,KAHSC,mBAGT,KAFSnP,YAET,KADSQ,kBCNF4O,GACT,aAIG,IAHQC,EAGT,uDAHkC,IAAIX,GAC7BY,EAET,uDAFiC,IAAIL,GAC5BF,EACT,uDADmC,IAAID,GACvC,yBAHSO,YAGT,KAFSC,WAET,KADSP,aCHFQ,GAAmB,CAC5BvK,KAD4B,SACvBwK,GACD,OAAOpJ,EAAUgE,eAAerK,QAAQsK,IAAImF,IAGhDlF,QAL4B,WAMxB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAerK,QAAQwF,WAGvDkK,eAT4B,SASbC,GACX,OAAO9L,KAAK0G,UAAU6B,QAAO,SAACpL,GAAD,OAAYA,EAAOQ,iBAAmBmO,MAGvElF,KAb4B,SAavBzJ,GAED,IAAI4O,EAUJ,OAXAlG,EAAsB1I,EAAQ,aAG1B4O,GADe,IAAf5O,EAAOE,GACC,2BACDF,GADC,IAEJE,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGnC,eAAOvJ,GAEnBqF,EAAUgE,eAAerK,QAAQmF,IAAIyK,EAAS1O,GAAI0O,GAC3CA,GAGXpF,OA5B4B,SA4BrBtJ,GAEH,IADwBmF,EAAUgE,eAAerK,QAAQwK,OAAOtJ,GAE5D,MAAM2D,MAAM,oCAAsC3D,KC/BjD2O,GAA0B,CACnC5K,KADmC,SAC9B/D,GACD,OAAOmF,EAAUgE,eAAe7J,eAAe8J,IAAIpJ,IAGvDqJ,QALmC,WAM/B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe7J,eAAegF,WAG9DsK,gBATmC,SASnB5O,GAEZ,OAD+B2C,KAAK0G,UACzB6B,QAAO,SAACtD,GAAD,OAASA,EAAIjG,UAAY3B,MAG/CsJ,OAdmC,SAc5B9I,GAEH,IADgB2E,EAAUgE,eAAe7J,eAAegK,OAAO9I,EAASR,IAEpE,MAAM,IAAI2D,MAAM,yCAEpB,OAAOnD,GAGX+I,KAtBmC,SAsB9B/I,GAED,IAAIqO,EAUJ,OAXArG,EAAsBhI,EAAU,YAG5BqO,GADiB,IAAjBrO,EAASR,GACM,2BACRQ,GADQ,IAEXR,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAG5B,eAAO7I,GAE1B2E,EAAUgE,eAAe7J,eAAe2E,IAAI4K,EAAgB7O,GAAK6O,GAC1DA,IClCFC,GAAsB,CAC/B/K,KAD+B,SAC1B/D,GACD,OAAOmF,EAAUgE,eAAe9J,WAAW+J,IAAIpJ,IAGnDqJ,QAL+B,WAM3B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe9J,WAAWiF,WAG1DsK,gBAT+B,SASf5O,GAGZ,OAF2B2C,KAAK0G,UACI6B,QAAO,SAAC6D,GAAD,OAAUA,EAAKpN,UAAY3B,MAI1EsJ,OAf+B,SAexBnC,GAGH,IADgBhC,EAAUgE,eAAe9J,WAAWiK,OAAOnC,EAAKnH,IAE5D,MAAM,IAAI2D,MAAM,yCAEpB,OAAOwD,GAGXoC,KAxB+B,SAwB1B6E,GAED,IAAIY,EAUJ,OAXAxG,EAAsB4F,EAAW,aAG7BY,GADkB,IAAlBZ,EAAUpO,GACC,2BACJoO,GADI,IAEPpO,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGhC,eAAO+E,GAEtBjJ,EAAUgE,eAAe9J,WAAW4E,IAAI+K,EAAYhP,GAAKgP,GAClDA,ICpCFC,GAAkB,CAC3BlL,KAD2B,SACtB/D,GACD,OAAOmF,EAAUgE,eAAe/J,OAAOgK,IAAIpJ,IAG/CqJ,QAL2B,WAMvB,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe/J,OAAOkF,WAGtD4K,OAT2B,SASpBC,GAEH,IAAIC,EAUJ,OAXA5G,EAAsB2G,EAAO,SAGzBC,GADc,IAAdD,EAAMnP,GACC,2BACAmP,GADA,IAEHnP,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGpC,eAAO8F,GAElBhK,EAAUgE,eAAe/J,OAAO6E,IAAImL,EAAQpP,GAAKoP,GAC1CA,GAGX9F,OAxB2B,SAwBpB6F,GAGH,IADgBhK,EAAUgE,eAAe/J,OAAOkK,OAAO6F,EAAMnP,IAEzD,MAAM,IAAI2D,MAAM,yCAEpB,OAAOwL,IC7BFE,GAAuB,CAChChG,QADgC,WAE5B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe3J,YAAY8E,WAG3DgL,iBALgC,SAKfC,GACb,OAAO5M,KAAK0G,UAAU6B,QAAO,SAAAsE,GAAK,OAAIA,EAAM7N,UAAY4N,MAG5DxL,KATgC,SAS3B/D,GACD,OAAOmF,EAAUgE,eAAe3J,YAAY4J,IAAIpJ,IAGpDuJ,KAbgC,SAa3BkG,GAED,IAAIC,EADJlH,EAAsBiH,EAAY,cAElC,IAAIE,EAAsBF,EAAWzP,GAWrC,OATA2P,EAAclH,EAAeO,cAAc2G,EAAahN,KAAK0G,WAE7DqG,EAAgB,2BACTD,GADS,IAEZzP,GAAI2P,IAGRxK,EAAUgE,eAAe3J,YAAYyE,IAAI0L,EAAaD,GAE/CA,GAGXpG,OA9BgC,SA8BzBmG,GAKH,GAJA9J,EAAkD8J,EAAWzP,GAAImF,EAAUgE,iBAE3DhE,EAAUgE,eAAe3J,YAAY8J,OAAOmG,EAAWzP,IAGnE,MAAM,IAAI2D,MAAJ,0DAA6D8L,EAAWzP,GAAxE,mCAGV,OAAOyP,ICxCFG,GAAsB,CAC/B7L,KAD+B,SAC1B8L,GACD,OAAO1K,EAAUgE,eAAehK,WAAWiK,IAAIyG,IAEnDxG,QAJ+B,WAK3B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAehK,WAAWmF,WAG1DiF,KAR+B,SAQ1BuE,GAED,IAAIgC,EAUJ,OAXAtH,EAAsBsF,EAAW,aAG7BgC,GADkB,IAAlBhC,EAAU9N,GACC,2BACJ8N,GADI,IAEP9N,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGhC,eAAOyE,GAEtB3I,EAAUgE,eAAehK,WAAW8E,IAAI6L,EAAY9P,GAAK8P,GAClDA,GAGXxG,OAvB+B,SAuBxBwE,GAGH,IADgB3I,EAAUgE,eAAehK,WAAWmK,OAAOwE,EAAU9N,IAEjE,MAAM,IAAI2D,MAAM,yCAEpB,OAAOmK,IC5BFiC,GAAqB,CAC9BhM,KAD8B,SACzB/D,GACD,OAAOmF,EAAUgE,eAAepK,UAAUqK,IAAIpJ,IAGlDqJ,QAL8B,WAM1B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAepK,UAAUuF,WAGzD0L,mBAT8B,SASXhQ,GACf,OAAO2C,KAAK0G,UAAU6B,QAAO,SAAC+E,GAAD,OAAUA,EAAK9O,aAAenB,MAG/DuJ,KAb8B,SAazB/I,GAED,IAAI0P,EADJ1H,EAAsBhI,EAAU,YAIhC,IAAM2P,EAAiC/K,EAAUG,SAAS/E,GAiB1D,OAhBA2P,EAAmBvO,WAAW/B,KAAI,SAAC4G,GAI/B,OAHsB,IAAlBA,EAAUzG,KACVyG,EAAUzG,GAAKyI,EAAeC,eAAelI,EAASoB,aAEnD6E,KAIPyJ,GAD2B,IAA3BC,EAAmBnQ,GACT,2BACHmQ,GADG,IAENnQ,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGjC,eAAO8G,GAErBhL,EAAUgE,eAAepK,UAAUkF,IAAIiM,EAAWlQ,GAAIkQ,GAC/CA,GAGX5G,OAtC8B,SAsCvB9I,GAEH,GADyB2E,EAAUgE,eAAepK,UAAUuK,OAAO9I,EAASR,IAIxE,OAAOQ,EAFP,MAAMmD,MAAM,sCAAwCnD,EAASR,MCzC5DoQ,GAAqB,CAC9BrM,KAD8B,SACzBsM,GACD,OAAOlL,EAAUgE,eAAejK,UAAUkK,IAAIiH,IAGlDhH,QAL8B,WAM1B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAejK,UAAUoF,WAGzDgM,gBAT8B,SASdT,GAEZ,OADuCzK,EAAUG,SAAS5C,KAAK0G,WACvC6B,QAAO,SAACtE,GAAD,OAAcA,EAAS8G,cAAgBmC,MAG1EtG,KAd8B,SAczB3C,GAED,IAAI2J,EAUJ,OAXA/H,EAAsB5B,EAAU,YAG5B2J,GADiB,IAAjB3J,EAAS5G,GACC,2BACH4G,GADG,IAEN5G,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGjC,eAAOzC,GAErBzB,EAAUgE,eAAejK,UAAU+E,IAAIsM,EAAWvQ,GAAKuQ,GAChDA,GAGXjH,OA7B8B,SA6BvBtJ,GACH,IAAMwQ,EAA0C7N,KAAKoB,KAAK/D,GAC1D,GAAKwQ,EAEE,CAEH,IADgBrL,EAAUgE,eAAejK,UAAUoK,OAAOtJ,GAEtD,MAAM,IAAI2D,MAAM,yCAEpB,OAAO6M,EANP,MAAM,IAAI7M,MAAM,sDAAwD3D,KChCvEyQ,GAAqB,CAC9B1M,KAD8B,SACzB2D,GACD,OAAOvC,EAAUgE,eAAevK,UAAUwK,IAAI1B,IAGlD2B,QAL8B,WAM1B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAevK,UAAU0F,WAGzDiF,KAT8B,SASzB8E,GAED,IAAIJ,EAUJ,OAXAzF,EAAsB6F,EAAU,YAG5BJ,GADiB,IAAjBI,EAASrO,GACC,2BACHqO,GADG,IAENrO,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAGjC,eAAOgF,GAErBlJ,EAAUgE,eAAevK,UAAUqF,IAAIgK,EAAWjO,GAAKiO,GAChDA,GAGX3E,OAxB8B,SAwBvB+E,GAGH,GAFA1I,EAAgD0I,EAASrO,GAAImF,EAAUgE,iBACvDhE,EAAUgE,eAAevK,UAAU0K,OAAO+E,EAASrO,IAE/D,MAAM,IAAI2D,MAAM,yCAEpB,OAAO0K,IC9BFqC,GAA0B,CACnCrH,QADmC,WAE/B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAe5J,eAAe+E,WAG9D0L,mBALmC,SAKhBtI,GACf,OAAO/E,KAAK0G,UAAU6B,QAAO,SAAAsE,GAAK,OAAIA,EAAMrO,aAAeuG,MAG/D3D,KATmC,SAS9B/D,GACD,OAAOmF,EAAUgE,eAAe5J,eAAe6J,IAAIpJ,IAGvDuJ,KAbmC,SAa9BoH,GAED,IAAIC,EADJpI,EAAsBmI,EAAe,iBAErC,IAAI/K,EAA0B+K,EAAc3Q,GAW5C,OATA4F,EAAkB6C,EAAeO,cAAcpD,EAAiBjD,KAAK0G,WAErEuH,EAAqB,2BACdD,GADc,IAEjB3Q,GAAI4F,IAGRT,EAAUgE,eAAe5J,eAAe0E,IAAI2B,EAAiBgL,GAEtDA,GAGXtH,OA9BmC,SA8B5BuH,GAKH,GAJAlL,EAAqDkL,EAAa7Q,GAAImF,EAAUgE,iBAEhEhE,EAAUgE,eAAe5J,eAAe+J,OAAOuH,EAAa7Q,IAGxE,MAAM,IAAI2D,MAAJ,gEAAmEkN,EAAa7Q,GAAhF,mCAGV,OAAO6Q,ICvCFC,GAAyB,CAClC/M,KADkC,SAC7B0K,GACD,OAAOtJ,EAAUgE,eAAetK,MAAMuK,IAAIqF,IAG9CpF,QALkC,WAM9B,OAAOzF,MAAMS,KAAKc,EAAUgE,eAAetK,MAAMyF,WAGrD0L,mBATkC,SASfe,GACf,OAAOpO,KAAK0G,UAAU6B,QAAO,SAAC/D,GAAD,OAAUA,EAAKhG,aAAe4P,MAG/DzH,OAbkC,SAa3BnC,GAGH,GAFAxB,EAA4CwB,EAAMhC,EAAUgE,iBAC5ChE,EAAUgE,eAAetK,MAAMyK,OAAOnC,EAAKnH,IAEvD,MAAM,IAAI2D,MAAM,yCAEpB,OAAOwD,GAGXoC,KAtBkC,SAsB7ByH,GAED,IAAIC,EAUJ,OAXAzI,EAAsBwI,EAAc,gBAGhCC,GADqB,IAArBD,EAAahR,GACC,2BACPgR,GADO,IAEVhR,GAAIyI,EAAeC,eAAe/F,KAAK0G,aAG7B,eAAO2H,GAEzB7L,EAAUgE,eAAetK,MAAMoF,IAAIgN,EAAejR,GAAKiR,GAChDA,ICTFC,GAA4B,CAGrCC,gBAHqC,SAGrBzJ,GACZ,OAAO0J,GAAkBX,GAAmB1M,KAAK2D,KAGrD2B,QAPqC,WAQjC,OAAOoH,GAAmBpH,WAG9BgI,gBAXqC,SAWrBhD,GAAqC,IAAD,OAChD7F,EAAsB6F,EAAU,eAChC,IAAMJ,EAAyBwC,GAAmBlH,KAAK8E,EAASJ,YAOhE,OANAI,EAASH,iBAAiBvN,SAAQ,SAACwG,IACS,IAApCA,EAAK8J,eAAe9P,aACpBgG,EAAK8J,eAAe9P,WAAa8M,EAAWjO,IAEhD,EAAKsR,iBAAiBnK,MAEnBiK,GAAkBnD,IAG7BsD,eAvBqC,SAuBtBtD,GAEX,OADAzF,EAAsByF,EAAY,cAC3BwC,GAAmBlH,KAAK0E,IAGnCuD,iBA5BqC,SA4BpBvD,GACbzF,EAAsByF,EAAY,cAClC,IAAMwD,EAAuBL,GAAkBnD,GAG/C,OAFAwD,EAAQvD,iBAAiBvN,SAAQ,SAACwG,GAAD,OAAU2J,GAAuBxH,OAAOnC,EAAK8J,mBAC9EQ,EAAQ1S,UAAU4B,SAAQ,SAACsP,GAAD,OAAUF,GAAmBzG,OAAO2G,MACvDQ,GAAmBnH,OAAO2E,IAGrCyD,kBApCqC,SAoCnBrD,GAAqC,IAAD,OA2BlD,OA1BA7F,EAAsB6F,EAASJ,WAAY,cAG3CI,EAAStP,UAAU4B,SAAQ,SAACH,GACpBA,EAASQ,OAAOqG,OAASnC,EAAUoC,MAAQ9G,EAASQ,OAAOqG,OAASnC,EAAUyM,MAC9EnR,EAASQ,OAAOhB,IAAM,EACtB,EAAK4R,aAAapR,IAElBA,EAASO,SAASsG,OAASnC,EAAUoC,MAAQ9G,EAASO,SAASsG,OAASnC,EAAUyM,MAClFnR,EAASO,SAASf,IAAM,EACxB,EAAK4R,aAAapR,OAI1B6N,EAASH,iBAAiBvN,SAAQ,SAACwG,GAC3BA,EAAK8J,eAAe7J,KAAKC,OAASnC,EAAUoC,MAAQH,EAAK8J,eAAe7J,KAAKC,OAASnC,EAAUyM,MAChGxK,EAAK8J,eAAe7J,KAAKpH,IAAM,EAC/B,EAAKsR,iBAAiBnK,OAK9BkH,EAAStP,UAAU4B,QAAQgC,KAAKkP,gBAChCxD,EAASH,iBAAiBvN,QAAQgC,KAAKmP,oBAEvCnP,KAAK6O,iBAAiBnD,EAASJ,YACxBI,GAKX0D,QApEqC,SAoE7BrK,EAAoB1H,EAAYgS,GACpC,IAAI9Q,EAA2C,KACzC+Q,EAA8BlC,GAAmBC,mBAAmBtI,GACpEwK,EAA8BpB,GAAuBd,mBAAmBtI,GAwB9E,GAtBAuK,EAActR,SAAQ,SAACH,GACnBA,EAASU,MAAO,EACZ8Q,GACIxR,EAASR,KAAOA,IAChBQ,EAASU,MAAO,EAChBA,EAAOV,MAInB0R,EAAUvR,SAAQ,SAACwG,GACfA,EAAKjG,MAAO,EACP8Q,GACG7K,EAAKnH,KAAOA,IACZmH,EAAKjG,MAAO,EACZA,EAAOiG,MAKnB8K,EAActR,SAAQ,SAACH,GAAD,OAAcuP,GAAmBxG,KAAK/I,MAC5D0R,EAAUvR,SAAQ,SAACwG,GAAD,OAAU2J,GAAuBvH,KAAKpC,MAE3C,OAATjG,EACA,MAAMyC,MAAM,mBAEZ,OAAOzC,GAIfiR,aAtGqC,SAsGxB5C,EAAiBvP,EAAYgS,GACtC,IAAI9Q,EAA6C,KAC3C+Q,EAAmCtD,GAAwBC,gBAAgBW,GAC3E2C,EAA2BpD,GAAoBF,gBAAgBW,GAsBrE,GApBA0C,EAActR,SAAQ,SAACH,GACfwR,GACIxR,EAASR,KAAOA,IAChBkB,EAAOV,MAInB0R,EAAUvR,SAAQ,SAACwG,GACfA,EAAKjG,MAAO,EACP8Q,GACG7K,EAAKnH,KAAOA,IACZmH,EAAKjG,MAAO,EACZA,EAAOiG,MAKnB8K,EAActR,SAAQ,SAACH,GAAD,OAAcmO,GAAwBpF,KAAK/I,MACjE0R,EAAUvR,SAAQ,SAACwG,GAAD,OAAU2H,GAAoBvF,KAAKpC,MAExC,OAATjG,EACA,MAAMyC,MAAM,mBAEZ,OAAOzC,GAMfoQ,iBAxIqC,SAwIpBN,GAGb,GAFAxI,EAAsBwI,EAAc,iBAEY,IAA5CA,EAAaC,eAAe9P,WAC5B,MAAM,IAAIwC,MAAM,qCAEiB2K,GAAiBE,eAAewC,EAAaC,eAAejR,IAC5CkL,QACjD,SAACpL,GAAD,OAAakR,EAAalS,QAAQ+G,MAAK,SAACuM,GAAD,OAAWA,EAAMpS,KAAOF,EAAOE,SAE1DH,KAAI,SAACwS,GAAD,OAAUA,EAAKrS,MAAIW,QAAQ2N,GAAiBhF,QAEhE,IAAMgJ,EAA4BxB,GAAuBvH,KAAKyH,EAAaC,gBAM3E,OAJAD,EAAalS,QAAQ6B,SAAQ,SAACb,GAE1BwO,GAAiB/E,KAAKzJ,MAEnByS,GAAsBD,IAGjCR,mBA7JqC,SA6JlBd,GACfxI,EAAsBwI,EAAc,QACpCA,EAAalS,QAAQe,KAAI,SAACC,GAAD,OAAYwO,GAAiBhF,OAAOxJ,EAAOE,OACpE8Q,GAAuBxH,OAAO0H,EAAaC,gBAC3C,IAAMuB,EAA6BpN,EAAUG,SACzCuL,GAAuBd,mBAAmBgB,EAAaC,eAAe9P,aAK1E,OAHAqR,EAASC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3S,MAAQ4S,EAAE5S,SACpCyS,EAAS7R,SAAQ,SAACwG,EAAMpH,GAAP,OAAkBoH,EAAKpH,MAAQA,EAAQ,KACxDyS,EAAS7R,QAAQmQ,GAAuBvH,MACjCyH,GAGX4B,oBA1KqC,SA0KjB5S,GAChB,IAAMmH,EAAmC2J,GAAuB/M,KAAK/D,GACrE,OAAOuS,GAAsBpL,IAKjCyK,aAjLqC,SAiLxBpR,GACT,OAAOuP,GAAmBxG,KAAK/I,IAGnCqR,eArLqC,SAqLtBrR,GACX,OAAOuP,GAAmBzG,OAAO9I,IAGrCqS,aAzLqC,SAyLxB7S,GACT,IAAMQ,EAAmCuP,GAAmBhM,KAAK/D,GACjE,QAAiBsC,IAAb9B,EACA,MAAMmD,MAAM,qBAAuB3D,EAAK,oBAE5C,OAAOQ,GAKXsS,aAnMqC,SAmMxBhT,GACT0I,EAAsB1I,EAAQ,YAC9B,IAAMiT,EAAuB3N,EAAUG,SAASzF,GAChD,OAAOwO,GAAiB/E,KAAKwJ,IAGjCC,aAzMqC,SAyMxBlT,GAGT,OAFA0I,EAAsB1I,EAAQ,UAC9BwO,GAAiBhF,OAAOxJ,EAAOE,IACxBF,GAKXmT,iBAjNqC,WAkNjC,OAAOrD,GAAoBvG,WAG/B6J,gBArNqC,SAqNrBjN,GACZ,OAAOkN,GAAmBvD,GAAoB7L,KAAKkC,KAGvDmN,cAzNqC,SAyNvBtF,GAEV,OADAtF,EAAsBsF,EAAW,aAC1B8B,GAAoBrG,KAAKuE,IAGpCuF,iBA9NqC,SA8NpBC,GACb9K,EAAsB8K,EAAc,gBACpC,IAAMC,EAAiCnO,EAAUG,SAAS+N,GACpDE,EAAgC5D,GAAoBrG,KAAK+J,EAAaxF,WAE5EsC,GAAmBE,gBAAgBgD,EAAaxF,UAAU9N,IAAIW,SAAQ,SAACiG,GAAD,OAClEwJ,GAAmB9G,OAAO1C,EAAS5G,OAGvCuT,EAAiBrU,UAAUyB,SAAQ,SAACiG,GAChCA,EAAS8G,YAAc8F,EAAiBxT,GACxCoQ,GAAmB7G,KAAK3C,MAE5B,IAAM6M,EAA+BrD,GAAmBE,gBAAgBkD,EAAiBxT,IACzF,MAAO,CAAC8N,UAAW0F,EAAkBtU,UAAWuU,IAGpDC,gBA/OqC,SA+OrB5F,GAIZ,OAHAtF,EAAsBsF,EAAW,aACjCA,EAAU5O,UAAUyB,SAAQ,SAACiG,GAAD,OAAcwJ,GAAmB9G,OAAO1C,EAAS5G,OAC7E4P,GAAoBtG,OAAOwE,EAAUA,WAC9BA,GAIX6F,iBAvPqC,WAwPjC,OAAOvD,GAAmB/G,WAG9BuK,aA3PqC,SA2PxB5T,GACT,IAAM4G,EAAmCwJ,GAAmBrM,KAAK/D,GACjE,GAAK4G,EAGD,OAAOA,EAFP,MAAM,IAAIjD,MAAM,qCAAuC3D,IAM/D6T,aApQqC,SAoQxBjN,GAET,OADA4B,EAAsB5B,EAAU,YACzBwJ,GAAmB7G,KAAK3C,IAGnCkN,eAzQqC,SAyQtB9T,GACX,OAAOoQ,GAAmB9G,OAAOtJ,IAKrC+T,sBA/QqC,WAgRjC,OAAOrD,GAAwBrH,WAGnC2K,kCAnRqC,SAmRH7S,GAC9B,OAAOuP,GAAwBV,mBAAmB7O,IAGtD8S,kBAvRqC,SAuRnBtD,GAEd,OADAnI,EAAsBmI,EAAe,iBAC9BD,GAAwBnH,KAAKoH,IAGxCuD,oBA5RqC,SA4RjBtO,GAChB4C,EAAsB5C,EAAiB,mBACvC,IAAMuO,EAAyCxR,KAAKyR,kBAAkBxO,GACtE,OAAO8K,GAAwBpH,OAAO6K,IAG1CC,kBAlSqC,SAkSnBpU,GACd,IAAM2Q,EAA6CD,GAAwB3M,KAAK/D,GAEhF,GAAK2Q,EAGD,OAAOA,EAFP,MAAM,IAAIhN,MAAM,0CAA4C3D,IAQpEqU,mBA9SqC,WA+SjC,OAAOhF,GAAqBhG,WAGhCiL,4BAlTqC,SAkTT3S,GACxB,OAAO0N,GAAqBC,iBAAiB3N,IAGjD4S,eAtTqC,SAsTtB9E,GAEX,OADAjH,EAAsBiH,EAAY,cAC3BJ,GAAqB9F,KAAKkG,IAGrC+E,iBA3TqC,SA2TpBxO,GACbwC,EAAsBxC,EAAc,gBACpC,IAAMyO,EAAmC9R,KAAK+R,eAAe1O,GAC7D,OAAOqJ,GAAqB/F,OAAOmL,IAGvCC,eAjUqC,SAiUtB1U,GACX,IAAMyP,EAAuCJ,GAAqBtL,KAAK/D,GAEvE,GAAKyP,EAGD,OAAOA,EAFP,MAAM,IAAI9L,MAAM,uCAAyC3D,IAOjE2U,cA5UqC,WA6UjC,OAAO1F,GAAgB5F,WAG3BuL,YAhVqC,SAgVzBzF,GACR,OAAO0F,GAAc1F,IAGzB2F,YApVqC,SAoVzB3F,GACR,OAAOF,GAAgBC,OAAOC,IAGlC4F,YAxVqC,SAwVzB5F,GACR,IAAM6F,EAA+BlG,GAAoBF,gBAAgBO,EAAMnP,IACzEiV,EAAuCtG,GAAwBC,gBAAgBO,EAAMnP,IAG3F,OAFAgV,EAAcrU,SAAQ,SAACoO,GAAD,OAAUD,GAAoBxF,OAAOyF,MAC3DkG,EAAkBtU,SAAQ,SAACiH,GAAD,OAAS+G,GAAwBrF,OAAO1B,MAC3DqH,GAAgB3F,OAAO6F,IAGlC+F,cAhWqC,SAgWvBnG,GACV,OAAOD,GAAoBvF,KAAKwF,IAGpCoG,kBApWqC,WAqWjC,OAAOrG,GAAoBzF,WAG/B+L,cAxWqC,SAwWvBhH,GACV,OAAOU,GAAoBxF,OAAO8E,IAGtCiH,kBA5WqC,SA4WnB7U,GACd,OAAOmO,GAAwBpF,KAAK/I,IAGxC8U,sBAhXqC,WAiXjC,OAAO3G,GAAwBtF,WAGnCkM,oBApXqC,SAoXjB/U,GAChB,OAAOmO,GAAwBrF,OAAO9I,IAG1CgV,cAxXqC,SAwXvBxV,GACV,IAAM+O,EAAgCD,GAAoB/K,KAAK/D,GAC/D,GAAI+O,EACA,OAAOA,EAEP,MAAMpL,MAAM,8DAAgE3D,IAIpFyV,kBAjYqC,SAiYnBzV,GACd,IAAMQ,EAAwCmO,GAAwB5K,KAAK/D,GAC3E,GAAIQ,EACA,OAAOA,EAEP,MAAMmD,MAAM,sEAAwE3D,KAM1FoR,GAAoB,SAAC/C,GACvB7F,EAAsB6F,EAAU,YAEhC,IAAMH,EAAsC4C,GAAuBd,mBAAmB3B,EAAUrO,IAAIH,IAAI0S,IAQxG,OANArE,EAAiBuE,MAAK,SAACiD,EAAOC,GAAR,OAAkBD,EAAMzE,eAAelR,MAAQ4V,EAAM1E,eAAelR,SAMnF,CACHkO,WAAYI,EACZH,iBAAkBA,EAClBnP,UAP4BgR,GAAmBC,mBAAmB3B,EAAUrO,IAQ5ET,eANsCmR,GAAwBV,mBAAmB3B,EAAUrO,MAU7FuS,GAAwB,SAACtB,GAM3B,OALAzI,EAAsByI,EAAgB,kBAK/B,CACHA,eAAgBA,EAChBnS,QAN0BwP,GAAiBE,eAAeyC,EAAgBjR,IAC7ByS,MAAK,SAAUC,EAAGC,GAC/D,OAAOD,EAAE3S,MAAQ4S,EAAE5S,WAQrBoT,GAAqB,SAACrD,GAGxB,OAFAtH,EAAsBsH,EAAa,eAE5B,CACHhC,UAAWgC,EACX5Q,UAH4BkR,GAAmBE,gBAAgBR,EAAa9P,MAsB9E6U,GAAgB,SAAC1F,GACnB3G,EAAsB2G,EAAO,WAE7B,IAAMyG,EAAqBxQ,EAAUG,SAAS4J,GAExC0G,EAA0C/G,GAAoBF,gBAAgBgH,EAAU5V,IAE1F8V,EAAgC,GAUpC,OARID,IACAC,EAAgBD,EAAahW,KAAI,SAACkP,GAAD,OAzBd,SAACA,GACxBvG,EAAsBuG,EAAM,aAC5B,IAAMgH,EAA6B,IAAI5H,GACvC4H,EAAa3H,UAAYW,EACzB,IAAMe,EAAuCF,GAAoB7L,KAAKgL,EAAMrB,aACtEO,EAAqCwC,GAAmB1M,KAAKgL,EAAM5N,YACzE,GAAI2O,GAAe7B,EAAY,CAC3B,IAAMqF,EAA6BH,GAAmBrD,GAChDkG,EAA2B5E,GAAkBnD,GACnD8H,EAAajI,UAAYwF,EACzByC,EAAa1H,SAAW2H,EAE5B,OAAOD,EAawCE,CAAmBlH,OAO3D,CAACI,MAAOyG,EAAWM,MAAOJ,EAAe/W,UAJN4P,GAAwBC,gBAAgBgH,EAAU5V,IAIjBR,YAFvC6P,GAAqBC,iBAAiBH,EAAOnP,MCvdxEmW,GAAa,SAGR5R,GACV,IAAM6R,EAAqC,CACvC9Q,YAAQhD,EACR+T,QAAS,GACTC,KAAM,KAEV,IAEI,OADAnR,EAAUhC,cAAcoB,GACjB,2BAAI6R,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YAbnCF,GAAa,WAkBlB,IAAMC,EAAqC,CACvC9Q,YAAQhD,EACR+T,QAAS,GACTC,KAAM,KAEV,IAEI,OADAnR,EAAUqR,mBACH,2BAAIJ,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YA3BnCF,GAAa,SA+BTjY,GACT,IAAMkY,EAAqC,CACvC9Q,YAAQhD,EACR+T,QAAS,GACTC,KAAM,KAEVG,IAAkB,kBAAMjM,GAA2CtM,MACnE,IAEI,OADAiH,EAAUuR,aAAaxY,GAChB,2BAAIkY,GAAX,IAAqBE,KAAM,MAC7B,MAAOC,GACL,OAAO,2BAAIH,GAAX,IAAqBC,QAASE,EAAMF,YA1CnCF,GAAa,SAgDT5L,GACT,OAAOkM,IAAkB,kBAAMjM,GAAyCD,OAjDnE4L,GAAa,SAoDV5L,GACR,OAAOkM,IAAkB,kBAAMjM,GAAwCD,OArDlE4L,GAAa,WAyDlB,OAAOM,GAAkBjM,KAzDpB2L,GAAa,WA6DlB,OAAOM,GAAkBjM,KA7DpB2L,GAAa,WAmElB,OAAOM,GAAkB5L,GAAuBxB,UAnE3C8M,GAAa,SAsETpO,GACT,OAAO0O,IAAkB,kBAAM5L,GAAuBM,QAAQpD,OAvEzDoO,GAAa,SA0EPpO,GACX,OAAO0O,IAAkB,kBAAM5L,GAAuBvB,OAAOvB,OA3ExDoO,GAAa,SAgFJ9H,GACd,OAAOoI,IAAkB,kBAAMvF,GAA0BQ,kBAAkBrD,OAjFtE8H,GAAa,WAyFlB,OAAOM,GAAkBvF,GAA0B7H,UAzF9C8M,GAAa,SA4FNzO,GACZ,OAAO+O,IAAkB,kBAAMvF,GAA0BC,gBAAgBzJ,OA7FpEyO,GAAa,SAoGP9H,GACX,OAAOoI,IAAkB,kBAAMvF,GAA0BK,eAAelD,OArGnE8H,GAAa,SAwGdzO,EAAoB1H,EAAYgS,GACpC,OAAOyE,IAAkB,kBAAMvF,GAA0Ba,QAAQrK,EAAY1H,EAAIgS,OAzG5EmE,GAAa,SA8GFnF,GAChB,OAAOyF,IAAkB,kBAAMvF,GAA0BI,iBAAiBN,OA/GrEmF,GAAa,SAkHAnF,GAClB,OAAOyF,IAAkB,kBAAMvF,GAA0BY,mBAAmBd,OAnHvEmF,GAAa,SAsHFnW,GAChB,OAAOyW,IAAkB,kBAAMvF,GAA0B0B,oBAAoB5S,OAvHxEmW,GAAa,WA6HlB,OAAOM,GAAkBvF,GAA0B+B,mBA7H9CkD,GAAa,SAgILtG,GACb,OAAO4G,IAAkB,kBAAMvF,GAA0BgC,gBAAgBrD,OAjIpEsG,GAAa,SA4ILrI,GACb,OAAO2I,IAAkB,kBAAMvF,GAA0BmC,iBAAiBvF,OA7IrEqI,GAAa,WAoKlB,OAAOM,GAAkBjK,GAAsBI,eApK1CuJ,GAAa,SAuKVrJ,GACR,OAAO2J,IAAkB,kBAAMjK,GAAsBK,YAAYC,OAxK5DqJ,GAAa,SA2KRrJ,GACV,OAAO2J,IAAkB,kBAAMjK,GAAsBQ,cAAcF,OA5K9DqJ,GAAa,SAiLHQ,GACf,OAAOF,IAAkB,kBAAMjK,GAAsBU,sBAAsByJ,OAlLtER,GAAa,WAsLlB,OAAOM,GAAkBjK,GAAsBW,yBAtL1CgJ,GAAa,SAyLFxK,GAChB,OAAO8K,IAAkB,kBAAMjK,GAAsBa,iBAAiB1B,OA1LjEwK,GAAa,WAgMlB,OAAOM,GAAkB5L,GAAuBG,gBAhM3CmL,GAAa,SAmMZzM,GACN,OAAO+M,IAAkB,kBAAM5L,GAAuBW,UAAU9B,OApM3DyM,GAAa,SA6MPrW,GACX,OAAO2W,IAAkB,kBAAMvF,GAA0B8B,aAAalT,OA9MjEqW,GAAa,SAiNTrW,GACT,OAAO2W,IAAkB,kBAAMvF,GAA0B4B,aAAahT,OAlNjEqW,GAAa,SAuNT3V,GACT,OAAOiW,IAAkB,kBAAMvF,GAA0BU,aAAapR,OAxNjE2V,GAAa,SA2NP3V,GACX,OAAOiW,IAAkB,kBAAMvF,GAA0BW,eAAerR,OA5NnE2V,GAAa,SA+NTnW,GACT,OAAOyW,IAAkB,kBAAMvF,GAA0B2B,aAAa7S,OAhOjEmW,GAAa,WAsOlB,OAAOM,GAAkBvF,GAA0ByD,gBAtO9CwB,GAAa,SAyOVhH,GACR,OAAOsH,IAAkB,kBAAMvF,GAA0B0D,YAAYzF,OA1OhEgH,GAAa,SA6OVhH,GACR,OAAOsH,IAAkB,kBAAMvF,GAA0B4D,YAAY3F,OA9OhEgH,GAAa,SAiPVhH,GACR,OAAOsH,IAAkB,kBAAMvF,GAA0B6D,YAAY5F,OAlPhEgH,GAAa,SAqPRpH,GACV,OAAO0H,IAAkB,kBAAMvF,GAA0BgE,cAAcnG,OAtPlEoH,GAAa,WA0PlB,OAAOM,GAAkBvF,GAA0BiE,oBA1P9CgB,GAAa,SA6PNhP,GACZ,OAAOsP,IAAkB,kBAAMvF,GAA0BkE,cAAcjO,OA9PlEgP,GAAa,SAiQJ3V,GACd,OAAOiW,IAAkB,kBAAMvF,GAA0BmE,kBAAkB7U,OAlQtE2V,GAAa,WAsQlB,OAAOM,GAAkBvF,GAA0BoE,wBAtQ9Ca,GAAa,SAyQF3V,GAChB,OAAOiW,IAAkB,kBAAMvF,GAA0BqE,oBAAoB/U,OA1QxE2V,GAAa,SA6QT5G,EAAiBvP,EAAYgS,GACtC,OAAOyE,IAAkB,kBAAMvF,GAA0BiB,aAAa5C,EAASvP,EAAIgS,OA9Q9EmE,GAAa,SAiRJnW,GACd,OAAOyW,IAAkB,kBAAMvF,GAA0BuE,kBAAkBzV,OAlRtEmW,GAAa,SAqRRnW,GACV,OAAOyW,IAAkB,kBAAMvF,GAA0BsE,cAAcxV,OAtRlEmW,GAAa,WA4RlB,OAAOM,GAAkBvF,GAA0B6C,wBA5R9CoC,GAAa,SAuSJxF,GACd,OAAO8F,IAAkB,kBAAMvF,GAA0B+C,kBAAkBtD,OAxStEwF,GAAa,SA2SFvQ,GAChB,OAAO6Q,IAAkB,kBAAMvF,GAA0BgD,oBAAoBtO,OA5SxEuQ,GAAa,WAkTlB,OAAOM,GAAkBvF,GAA0BmD,qBAlT9C8B,GAAa,SAyTP1G,GACX,OAAOgH,IAAkB,kBAAMvF,GAA0BqD,eAAe9E,OA1TnE0G,GAAa,SA6TLnQ,GACb,OAAOyQ,IAAkB,kBAAMvF,GAA0BsD,iBAAiBxO,OAWlF,SAASyQ,GAAqBG,GAC1B,IAAMR,EAAkC,CACpC9Q,OAAQ,GACR+Q,QAAS,GACTC,KAAM,KAEV,IACI,IAAMhR,EAASsR,IACfR,EAAS9Q,OAA2B,qBAAXA,OAAyBhD,EAAYW,KAAKC,MAAMD,KAAKG,UAAUkC,IACxF8Q,EAASE,KAAO,IAChBnR,EAAU0R,gBACZ,MAAON,GACL5W,QAAQ8C,KAAK8T,GACbH,EAASC,QAAUE,EAAMF,QACzBlR,EAAU2R,WAEd,OAAOV,ECxWX,ICJYW,GDcCC,GAAcC,YAAY,CACnChW,KAAM,SACNiW,aAXO,CACHC,OAAQ,GACR/Y,UAAW,EACXC,SAAU,GASd+Y,SAAU,CACNC,YAAa,SAAC7H,EAAO1P,GACjB0P,EAAM2H,OAAOtW,KAAKf,EAAOwX,UAE7BC,YAAa,SAAC/H,GACVA,EAAM2H,OAAS,IAEnBK,mBAAoB,SAAChI,EAAO1P,GACpBA,EAAOwX,SAAW,GAAKxX,EAAOwX,QAAU9H,EAAM2H,OAAO1P,SACrD+H,EAAM2H,OAAS3H,EAAM2H,OAAOjM,QAAO,SAACqL,EAAOxW,GAAR,OAAkBA,IAAUD,EAAOwX,aAG9EG,aAAc,SAACjI,EAAO1P,GAClB0P,EAAMpR,UAAY0B,EAAOwX,SAE7BI,YAAa,SAAClI,EAAO1P,GACjB0P,EAAMnR,SAAWyB,EAAOwX,YA4FvBK,GAAgB,CACzBC,cAtFkB,SAACrT,GAAD,8CAAgC,WAAOsT,GAAP,eAAAnF,EAAA,sEACDyD,GAAyB5R,GADxB,OAE5B,OADhB6R,EAD4C,QAErCE,KACTwB,OAAOC,SAASC,SAEhBH,EAASb,GAAYlY,QAAQuY,YAAYjB,EAASC,UALJ,2CAAhC,uDAuFlBG,iBA9EqB,kBAAgB,SAACqB,GACtC,IAAMzB,EAAqCD,KACrB,MAAlBC,EAASE,KACTwB,OAAOC,SAASC,SAEhBH,EAASb,GAAYlY,QAAQuY,YAAYjB,EAASC,YA0EtDK,aAtEiB,SAACxY,GAAD,OAAmC,SAAC2Z,GACrD,IAAMzB,EAAqCD,GAAwBjY,GAC7C,MAAlBkY,EAASE,MACTuB,EAASb,GAAYlY,QAAQuY,YAAYjB,EAASC,YAoEtD4B,YAhE2B,kBAAgB,SAACJ,EAAUK,GACtD,IAAMC,EAAkBD,IAAWE,OAAOha,UAtDlB,GAwDF,MADuB+X,GAAwBgC,GACxD7B,KACTuB,EAASb,GAAYlY,QAAQ2Y,aAAaU,IAE1CN,EAASb,GAAYlY,QAAQuY,YAAY,2BA2D7CgB,aAvD4B,kBAAgB,SAACR,EAAUK,GACvD,IAAMC,EAAkBD,IAAWE,OAAOha,UAhElB,GAkEF,MADuB+X,GAAwBgC,GACxD7B,KACTuB,EAASb,GAAYlY,QAAQ2Y,aAAaU,IAE1CN,EAASb,GAAYlY,QAAQuY,YAAY,2BAkD7CiB,WA9C0B,kBAAgB,SAACT,EAAUK,GACrD,IAAMC,EAAkBD,IAAWE,OAAO/Z,SA1ElB,GA4EF,MADuB8X,GAAuBgC,GACvD7B,KACTuB,EAASb,GAAYlY,QAAQ4Y,YAAYS,IAEzCN,EAASb,GAAYlY,QAAQuY,YAAY,2BAyC7CkB,YArC2B,kBAAgB,SAACV,EAAUK,GACtD,IAAMC,EAAkBD,IAAWE,OAAO/Z,SApFlB,GAsFF,MADuB8X,GAAuBgC,GACvD7B,KACTuB,EAASb,GAAYlY,QAAQ4Y,YAAYS,IAEzCN,EAASb,GAAYlY,QAAQuY,YAAY,2BAgC7CmB,yBA5B6B,kBAAgB,SAACX,GAC9C,IAAMzB,EAAuCD,KACvB,MAAlBC,EAASE,KACTuB,EAASb,GAAYlY,QAAQ2Y,aAAarB,EAAS9Q,SAEnDuS,EAASb,GAAYlY,QAAQuY,YAAY,2BAwB7CoB,wBApB4B,kBAAgB,SAACZ,GAC7C,IAAMzB,EAAuCD,KACvB,MAAlBC,EAASE,KACTuB,EAASb,GAAYlY,QAAQ4Y,YAAYtB,EAAS9Q,SAElDuS,EAASb,GAAYlY,QAAQuY,YAAY,2BAgB7CA,YAAaL,GAAYlY,QAAQuY,aAKxBqB,GACe,SAAClJ,GACrB,OAAOA,EAAM4I,OAAOjB,QAFfuB,GAKc,SAAClJ,GACpB,OAAOA,EAAM4I,OAAOha,WANfsa,GAQa,SAAClJ,GACnB,OAAOA,EAAM4I,OAAO/Z,UAIfsa,GAAgB3B,GAAY4B,Q,qHEnJ5BC,GAAa,CACtBC,OAAQC,YACRC,YAAaC,iBACbC,KAAMC,KACNC,KAAMC,KACNC,MAAOC,cACPC,UAAWC,eACXC,QAASC,aACTzO,OAAQ0O,YACRC,OAAQC,KACRC,KAAMC,UACNC,IAAKC,SACLC,QAASC,yBACT7D,MAAO8D,iBACPza,KAAM0a,gBACNC,KAAMC,M,gBDrBEzD,K,YAAAA,E,kBAAAA,E,eAAAA,Q,KAaL,IElBK0D,GAOAC,GFWCC,GAA+D,SAACC,GACzE,IAAOC,EAAwCD,EAAxCC,OAAQC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,MAAOC,EAAmBJ,EAAnBI,gBAe5B,OACI,yBAAKC,UAAW,oBAAsBF,GAElC,4BAAQE,UAAWF,EAAQ,iBACnBG,QAAS,kBAAMF,MAEnB,kBAAC,KAAD,CAAiBG,KAnBD,WACxB,OAAQJ,GACJ,IAAK,OACD,OAAOlC,GAAWjZ,KACtB,IAAK,UACD,OAAOiZ,GAAWsB,QACtB,IAAK,QACD,OAAOtB,GAAWtC,MACtB,QACI,OAAO+D,MAUgBc,GACNC,KAAM,KACNJ,UAAWF,KAGhC,6BACI,wBAAIE,UAAWF,GAAQF,GACvB,+BAAQC,MGzCXQ,GAA+D,WACpE,IAAMC,EAA0BC,YAAY9C,IACtCb,EAAW4D,cAWjB,OACI,oCAEQF,EAAc9T,OAAS,GACvB8T,EAAc1b,KAAI,SAAC0W,EAAOxW,GAAR,OAbT,SAACsW,EAAiBtW,GACnC,OAAO,kBAAC,GAAD,CAAmB0D,IAAK1D,EACL8a,OAAQ,QACRC,KAAMzE,EACN0E,MAAOhE,GAAkBR,MACzByE,gBAAiB,kBAAMnD,EAASb,GAAYlY,QAAQ0Y,mBAAmBzX,OAQrD2b,CAAanF,EAAOxW,Q,mBDvBhE0a,K,YAAAA,E,cAAAA,E,UAAAA,E,iBAAAA,Q,cAOAC,K,QAAAA,E,WAAAA,Q,KAKL,IEDKiB,GAKAC,GAKAC,GFTCC,GAAb,oDACI,aAUG,IAAD,EATS1V,EAST,wDAT4B,EACnBC,EAQT,wDAR4B,EACnB0V,EAOT,uDAP0B,GACjBC,EAMT,uDAN0B,GACjBC,EAKT,uDALiCxB,GAAUyB,MAClCC,EAIT,uDAJiC1B,GAAU2B,KAClCC,EAGT,uDAH+B3B,GAAa4B,IACnCC,EAET,uDAF+B7B,GAAa8B,GACnCjb,EACT,uDADwB,GACxB,4BACE,gBAVO6E,UAST,EARSC,UAQT,EAPS0V,SAOT,EANSC,SAMT,EALSC,aAKT,EAJSE,aAIT,EAHSE,QAGT,EAFSE,QAET,EADShb,OACT,EAXN,UAAoCiM,I,gBEDxBmO,K,YAAAA,E,mBAAAA,Q,cAKAC,K,gBAAAA,E,aAAAA,Q,cAKAC,K,eAAAA,Q,KAwBL,IC/CKY,GD+CCC,GAA+C,SAAC9B,GACzD,IACI+B,EAgBA/B,EAhBA+B,QACAC,EAeAhC,EAfAgC,QACAC,EAcAjC,EAdAiC,QACAC,EAaAlC,EAbAkC,QACAC,EAYAnC,EAZAmC,YACAC,EAWApC,EAXAoC,aACAC,EAUArC,EAVAqC,aACAC,EASAtC,EATAsC,YACAld,EAQA4a,EARA5a,GACAmd,EAOAvC,EAPAuC,OACAC,EAMAxC,EANAwC,gBACAC,EAKAzC,EALAyC,gBACAC,EAIA1C,EAJA0C,QACAC,EAGA3C,EAHA2C,KACAC,EAEA5C,EAFA4C,SACAC,EACA7C,EADA6C,UAGEC,EAAyB,CAACC,EAAG,EAAGC,EAAGX,EAAe,GAClDY,EAA0B,CAACF,EAAG,EAAGC,EAAGZ,EAAe,GAuGnDc,EAAqB,SAACC,GAExB,OAAQA,GACJ,KAAKtD,GAAUuD,IACX,MAAO,CAACL,EAAG,EAAGC,GAHP,IAIX,KAAKnD,GAAU2B,KACX,MAAO,CAACuB,GALD,GAKaC,EAAG,GAC3B,KAAKnD,GAAUyB,MACX,MAAO,CAACyB,EAPD,GAOYC,EAAG,GAC1B,KAAKnD,GAAUwD,OACX,MAAO,CAACN,EAAG,EAAGC,EATP,IAUX,UAAKtb,EACD,MAAO,CAACqb,EAAG,EAAGC,EAAG,KAIvBM,EAAoB,SAACC,EAAcC,EAAeC,EAAgBN,GACpE,OAAQA,GACJ,KAAKtD,GAAUuD,IACXG,EAAMR,EAAIQ,EAAMR,EAAIS,EAAQ,EAC5B,MACJ,KAAK3D,GAAU2B,KACX+B,EAAMP,EAAIO,EAAMP,EAAIS,EAAS,EAC7B,MACJ,KAAK5D,GAAUyB,MACXiC,EAAMR,EAAIQ,EAAMR,EAAIS,EACpBD,EAAMP,EAAIO,EAAMP,EAAIS,EAAS,EAC7B,MACJ,KAAK5D,GAAUwD,OACXE,EAAMR,EAAIQ,EAAMR,EAAIS,EAAQ,EAC5BD,EAAMP,EAAIO,EAAMP,EAAIS,EAG5B,OAAOF,GAGLG,EAAiB,SAACC,EAAcC,GAClC,OAAQA,EAAOD,GAAQ,EAAIA,GAGzBE,EAAkB,SAACN,EAAcO,EAAgBC,GACnD,MAAoB,SAAbA,EAAsB,CAAChB,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,GAAK,CAACD,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,IAG9FgB,EAAoB,SAACT,EAAcO,GACrC,MAAO,CAACf,EAAGQ,EAAMR,EAAIe,EAAQd,EAAGO,EAAMP,IAGpCiB,EAAY,SAACC,EAAeC,GAC9B,MAAO,CAACpB,EAAGmB,EAAOnB,EAAIoB,EAAOpB,EAAGC,EAAGkB,EAAOlB,EAAImB,EAAOnB,IAGnDoB,EAAiB,SAACC,EAAmBC,GACvC,MAAO,CACHvB,EAAGW,EAAeW,EAAWtB,EAAGuB,EAASvB,GACzCC,EAAGU,EAAeW,EAAWrB,EAAGsB,EAAStB,KAI3CuB,EAAkB,SAACC,EAAwBC,GAC7C,MAAO,CACH1B,EAAGW,EAAec,EAAgBzB,EAAG0B,EAAc1B,GACnDC,EAAGwB,EAAgBxB,IAa3B,OACI,kBAAC,KAAO0B,IAAR,CAAYrE,UAAU,oBACjBsC,IAAS1B,GAAc0D,OACpB,8BACI,4BACIvf,GAAG,QACHwf,YAAY,KACZC,aAAa,KACbC,KAAK,IACLC,KAAK,IACLC,OAAO,OACPC,YAAY,KAEZ,0BAAMC,EAAE,mBACF7E,UAAU,sBAvBjB,SAAC5T,GAChB,OAAQA,GACJ,KAAKuU,GAAemE,OAChB,OAvKa,SAACC,EAAYC,EAAYC,EAAYC,GAC1D,IAAMxB,EAA8BuB,EAAKF,EAAKjD,EAAc,EAAI,OAAS,SACnEqD,EAA4BJ,EAAKE,EAAKnD,EAAc,EAAI,OAAS,SAGnEkC,EAAoB,CAACtB,EAFG,SAAbgB,EAAsBqB,EAAKA,EAAKjD,EAEXa,EAAGqC,GACnCf,EAAkB,CAACvB,EAFC,SAAXyC,EAAoBF,EAAKA,EAAKhD,EARxB,GACM,GASOU,EAAGuC,GAEnClB,EAAaJ,EAAUI,EAAYpB,GACnCqB,EAAWL,EAAUK,EAAUxB,GAE/B,IAAM2C,EAAmB5B,EAAgBQ,EAftB,GAe0CN,GAC7DO,EAAWN,EAAkBM,EAhBV,IAkBnB,IAAMoB,EAActB,EAAeqB,EAAkBnB,GAC/CqB,EAAgBpB,EAAgBkB,EAAkBC,GAClDE,EAA+B,SAAb7B,EAAsB,IAAM,GAC9C8B,EAA2B,SAAXL,EAAoB,GAAK,IAE/C,OACI,oCACI,0BACIN,EAAC,YAAOb,EAAWtB,EAAlB,YAAuBsB,EAAWrB,EAAlC,wBACT4C,EADS,2BAETD,EAAc5C,EAFL,uBAGX4C,EAAc3C,EAHH,sBAIX0C,EAAY3C,EAJD,uBAKX2C,EAAY1C,EALD,uBAMTsB,EAASvB,EANA,aAMMuB,EAAStB,EANf,uBAOT6C,EAPS,kBASDxF,UAAW,YACXyF,UAAU,cACVC,MAAO,CAACC,OAAQnD,GAAwB,QAASoD,gBAAiBvD,EAAU,IAAM,MAErFH,EAAOtd,KAAI,SAACihB,EAAO/gB,GAChB,OACI,oCACI,0BACI4d,EAAG2C,EAAY3C,EAzCf,GA0CAC,EAAG0C,EAAY1C,EAAY,GAAR7d,EACnBkb,UAAU,oBAET6F,GAEL,0BACInD,EAAG2C,EAAY3C,EAhDf,GAiDAC,EAAG0C,EAAY1C,EAAY,GAAR7d,EACnBkb,UAAU,kBAET6F,QAqHVC,CAAiBpE,EAASC,EAASC,EAASC,GACvD,KAAKlB,GAAeoF,KAChB,OA9GW,WACnB,IAAM/B,EAAoBf,EACtB,CAACP,EAAGhB,EAASiB,EAAGhB,GAChBG,EACAC,EACAI,GAEE8B,EAAkBhB,EACpB,CAACP,EAAGd,EAASe,EAAGd,GAChBI,EACAD,EACAI,GAIE4D,EAAUnD,EAAmBV,GAC7B8D,EAAUpD,EAAmBT,GAE7B8D,EAAetC,EAAUI,EAAYgC,GACrCG,EAAevC,EAAUK,EAAUgC,GAEzC,OACI,0BACIpB,EAAC,YAAOb,EAAWtB,EAAlB,YAAuBsB,EAAWrB,EAAlC,wBACLuD,EAAaxD,EADR,YACawD,EAAavD,EAD1B,uBAELwD,EAAazD,EAFR,YAEayD,EAAaxD,EAF1B,uBAGLsB,EAASvB,EAHJ,YAGSuB,EAAStB,EAHlB,cAKD+C,MAAO,CACHE,gBAAiBvD,EAAU,MAAQ,EACnCuC,YAAa,MACbwB,KAAM,cACNT,OAAQ,SAEZ5gB,GAAIA,EAAGmE,aA4EAmd,IAuBVC,CAAW/D,KEvQXgE,GAAb,oDACI,aAKG,IAAD,EAJS1f,EAIT,wDAJ+B,EACtBhB,EAGT,wDAH4B,EACnBZ,EAET,wDAF2B,EAClBC,EACT,wDAD+B,EAC/B,4BACE,gBALO2B,aAIT,EAHShB,UAGT,EAFSZ,SAET,EADSC,aACT,EANN,UAAiCqN,ICApBiU,GAAb,oDACI,aAAuC,IAAD,EAAnBxgB,EAAmB,uDAAJ,GAAI,4BAClC,gBADeA,OAAmB,EAD1C,UAAoCuM,K,SFFxBiP,K,UAAAA,E,gBAAAA,E,YAAAA,E,kCAAAA,E,mBAAAA,Q,KGiCZ,ICjCYiF,GD+CNC,GAAkB1K,YAAY,CAChChW,KAAM,aACNiW,aAhBqC,CACrC5Y,OAAQ,GACRE,OAAQ,GACRQ,MAAO,GACP4iB,UAAW,GACXhjB,UAAW,GACXO,WAAY,GACZC,OAAQ,GACRyiB,WAAY,GACZC,eAAgB,GAChBnR,cAAe,GACflB,WAAY,IAMZ2H,SAAU,CACN2K,UAAW,SAACvS,EAAO1P,GACf0P,EAAMlR,OAASwB,EAAOwX,SAE1B0K,UAAW,SAACxS,EAAO1P,GACf0P,EAAMhR,OAASsB,EAAOwX,SAE1B2K,SAAU,SAACzS,EAAO1P,GACd0P,EAAMxQ,MAAQc,EAAOwX,SAEzB4K,aAAc,SAAC1S,EAAO1P,GAClB0P,EAAMoS,UAAY9hB,EAAOwX,SAE7B6K,aAAc,SAAC3S,EAAO1P,GAClB0P,EAAM5Q,UAAYkB,EAAOwX,SAE7B8K,cAAe,SAAC5S,EAAO1P,GACnB0P,EAAMrQ,WAAaW,EAAOwX,SAE9B+K,UAAW,SAAC7S,EAAO1P,GACf0P,EAAMpQ,OAASU,EAAOwX,SAE1BgL,cAAe,SAAC9S,EAAO1P,GACnB0P,EAAMqS,WAAa/hB,EAAOwX,SAE9BiL,kBAAmB,SAAC/S,EAAO1P,GACvB0P,EAAMsS,eAAiBhiB,EAAOwX,SAElCkL,kBAAmB,SAAChT,EAAO1P,GACvB0P,EAAMmB,cAAgB7Q,EAAOwX,SAEjCmL,eAAgB,SAACjT,EAAO1P,GACpB0P,EAAMC,WAAa3P,EAAOwX,YAOhCoL,GAAwB,yDAAgB,WAAO7K,GAAP,eAAAnF,EAAA,sEACYyD,KADZ,OAEpB,OADhBC,EADoC,QAE7BE,KACTuB,EAAS8J,GAAgB7iB,QAAQkjB,UAAU5L,EAAS9Q,SAEpDuS,EAASF,GAAcN,YAAYjB,EAASC,UALN,2CAAhB,uDASxBsM,GAAwB,yDAAgB,WAAO9K,GAAP,eAAAnF,EAAA,sEACayD,KADb,OAEpB,OADhBC,EADoC,QAE7BE,KACTuB,EAAS8J,GAAgB7iB,QAAQijB,UAAU3L,EAAS9Q,SAEpDuS,EAASF,GAAcN,YAAYjB,EAASC,UALN,2CAAhB,uDASxBuM,GAAuB,kBAAgB,SAAC/K,GAC1C,IAAMzB,EAA0CD,KAC1B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQmjB,SAAS7L,EAAS9Q,SAEnDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CwM,GAA2B,kBAAgB,SAAChL,GAC9C,IAAMzB,EAAiDD,KACjC,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQojB,aAAa9L,EAAS9Q,SAEvDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9CyM,GAA2B,kBAAgB,SAACjL,GAC9C,IAAMzB,EAA6CD,KAC7B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQqjB,aAAa/L,EAAS9Q,SAEvDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C0M,GAA4B,kBAAgB,SAAClL,GAC/C,IAAMzB,EAA8CD,KAC9B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQsjB,cAAchM,EAAS9Q,SAExDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C2M,GAAwB,kBAAgB,SAACnL,GAC3C,IAAMzB,EAA0CD,KAC1B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQujB,UAAUjM,EAAS9Q,SAEpDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C4M,GAA4B,kBAAgB,SAACpL,GAC/C,IAAMzB,EAA8CD,KAC9B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQwjB,cAAclM,EAAS9Q,SAExDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C6M,GAAgC,kBAAgB,SAACrL,GACnD,IAAMzB,EAAkDD,KAClC,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQyjB,kBAAkBnM,EAAS9Q,SAE5DuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C8M,GAA6B,kBAAgB,SAACtL,GAChD,IAAMzB,EAA+CD,KAC/B,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQ2jB,eAAerM,EAAS9Q,SAEzDuS,EAASF,GAAcN,YAAYjB,EAASC,YAI9C+M,GAAgC,kBAAgB,SAACvL,GACnD,IAAMzB,EAAkDD,KAClC,MAAlBC,EAASE,KACTuB,EAAS8J,GAAgB7iB,QAAQ0jB,kBAAkBpM,EAAS9Q,SAE5DuS,EAASF,GAAcN,YAAYjB,EAASC,YA6BvCgN,GAAoB1B,GAAgB/I,QAEpC0K,GACK,SAAC9T,GAAD,OAAkCA,EAAM+T,WAAWjlB,QADxDglB,GAGI,SAAC9T,GAAD,OAAiCA,EAAM+T,WAAWvkB,OAHtDskB,GAIQ,SAAC9T,GAAD,OAAwCA,EAAM+T,WAAW3B,WAJjE0B,GAKQ,SAAC9T,GAAD,OAAoCA,EAAM+T,WAAW3kB,WAL7D0kB,GAMK,SAAC9T,GAAD,OAAiCA,EAAM+T,WAAWnkB,QANvDkkB,GAOS,SAAC9T,GAAD,OAAqCA,EAAM+T,WAAW1B,YAP/DyB,GAQa,SAAC9T,GAAD,OAAyCA,EAAM+T,WAAWzB,gBARvEwB,GASS,SAAC9T,GAAD,OAAqCA,EAAM+T,WAAWpkB,YAT/DmkB,GAqBwB,SAAC5b,GAC9B,OAAO,SAAC8H,GACJ,OAAOA,EAAM+T,WAAW5S,cAAczF,QAAO,SAAAsE,GAAK,OAAIA,EAAMrO,aAAeuG,OAvB1E4b,GA2BkB,SAAC/T,GACxB,OAAO,SAACC,GACJ,OAAOA,EAAM+T,WAAW9T,WAAWvE,QAAO,SAAAsE,GAAK,OAAIA,EAAM7N,UAAY4N,OA7BpE+T,GAiCU,SAACtjB,GAChB,OAAO,SAACwP,GACJ,OAAOA,EAAM+T,WAAWvkB,MAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOA,MAAO,OAnCpEsjB,GA4CY,SAACtjB,GAClB,OAAO,SAACwP,GACJ,IAAIgU,GAAmB,EAOvB,OANIhU,EAAM+T,WAAW1B,WAAWhc,MAAK,SAACkJ,GAAD,OAAUA,EAAKpN,UAAY3B,OAC5DwjB,GAAU,GAEVhU,EAAM+T,WAAWzB,eAAejc,MAAK,SAAC+B,GAAD,OAASA,EAAIjG,UAAY3B,OAC9DwjB,GAAU,GAEPA,IAONC,GACTT,GADSS,GAETR,GAFSQ,GAGTP,GAHSO,GAITN,GAJSM,GAKTf,GALSe,GAMTd,GANSc,GAOTV,GAPSU,GAQTZ,GARSY,GASTX,GATSW,GAUTL,GAVSK,GAWTb,GAXSa,GA9EG,kBAAgB,SAAC5L,GAC7BA,EAAS6K,MACT7K,EAAS8K,MACT9K,EAASkL,MACTlL,EAASgL,MACThL,EAASiL,MACTjL,EAAS+K,MACT/K,EAASmL,MACTnL,EAASoL,MACTpL,EAASqL,MACTrL,EAASsL,MACTtL,EAASuL,QAmEAK,GAaH,CACF7Q,oBArGoB,SAAC5S,GACzB,IAAImH,EACEiP,EAAgDD,GAA+BnW,GAIrF,OAHsB,MAAlBoW,EAASE,OACTnP,EAAO/B,EAAUG,SAAS6Q,EAAS9Q,SAEhC6B,K,SClMCua,K,UAAAA,E,wBAAAA,E,4BAAAA,E,YAAAA,E,wBAAAA,E,kBAAAA,E,kBAAAA,E,4BAAAA,E,sBAAAA,E,0BAAAA,E,wBAAAA,E,6BAAAA,Q,KC0BL,IAAMgC,GAAwB,SACN5kB,EAAqB6kB,GAE5C,IAAMC,EAA6BD,EAC9BzY,QAAO,SAAC3E,GAAD,OAAgBsd,GAAiBtd,EAAUiJ,UAClD3P,KAAI,SAAC0G,GACF,OAAO,2BAAIA,GAAX,IAAsBiJ,MAAOkS,GAAeoC,gBAE9C3M,EAAqB,GAwF3B,OAtFArY,EAAQ6B,SAAQ,SAACb,GACb,IAAMikB,EAAkCC,GACpClkB,EAAOM,iBACPN,EAAOI,OACP0jB,GAGEK,EAAgCD,GAClClkB,EAAOO,eACPP,EAAOI,OACP0jB,GAGJ,OAAQ9jB,EAAOG,YACX,KAAKwc,GAAWyH,IACPC,GAAmBJ,GAObH,EAAcG,GAAyB5jB,aAAeL,EAAOK,YACpEyjB,EAAc/iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBqP,MAAOkS,GAAe0C,aAE1BR,EAAcG,GAAd,2BACOH,EAAcG,IADrB,IAEIvU,MAAOkS,GAAe2C,gBAG1BlN,EAAOtW,KAAKf,GAlBZ8jB,EAAc/iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYL,EAAOK,WACnBqP,MAAOkS,GAAe4C,MAgB9B,MACJ,KAAK7H,GAAW8H,OACZJ,GAAmBJ,GACZH,EAAcG,GAAyBvU,MAAQkS,GAAe8C,QAC/DrN,EAAOtW,KAAKf,GAClB,MACJ,KAAK2c,GAAWgI,KACZ,GAAIN,GAAmBF,GAAwB,CAC3C,IAAM1d,EAAuB,CACzBzF,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYyjB,EAAcK,GAAuB9jB,WACjDqP,MAAOkS,GAAegD,MAE1Bd,EAAcK,GAAuBzU,MAAQkS,GAAegD,KACxDP,GAAmBJ,IACnBH,EAAc/iB,KAAK,CACfC,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYyjB,EAAcG,GAAyB5jB,WACnDqP,MAAOkS,GAAe2C,eAE1BT,EAAcG,GAAd,2BAA6Cxd,GAA7C,IAAwDiJ,MAAOkS,GAAe0C,cAE9ER,EAAc/iB,KAAK0F,QAGvB4Q,EAAOtW,KAAKf,GAEhB,MACJ,KAAK2c,GAAWkI,gBACZ,GAAIR,GAAmBF,GAAwB,CAC3C,IAAM1d,EAAuB,CACzBzF,QAAShB,EAAOM,iBAChBF,OAAQJ,EAAOI,OACfC,WAAYyjB,EAAcK,GAAuB9jB,WACjDqP,MAAOkS,GAAegD,MAE1Bd,EAAcK,GAAuBzU,MAAQkS,GAAe8C,QACxDL,GAAmBJ,GACnBH,EAAcG,GAAd,2BAA6Cxd,GAA7C,IAAwDiJ,MAAOkS,GAAe0C,aAE9ER,EAAc/iB,KAAK0F,QAGvB4Q,EAAOtW,KAAKf,OAKrB,CAAC6jB,WAAYC,EAAezM,OAAQA,EAAQyN,YAAa,GAAIC,WAAY,KAhG3EnB,GAAwB,SAmGZljB,EAAsBmjB,EAAyBmB,GAKhE,IAAIC,EAAiCpB,EAChCzY,QAAO,SAAC3E,GAAD,OAAgBsd,GAAiBtd,EAAUiJ,UAClD3P,KAAI,SAAC0G,GACF,OAAO,2BAAIA,GAAX,IAAsBiJ,MAAOkS,GAAeoC,gBAGhDkB,EAAOxkB,EAASQ,OAEpBR,EAASoB,WAAWjB,SAAQ,SAAC8F,GACzB,IAAMwe,EAA0CF,EAAkBhhB,MAC9D,SAACwC,GAAD,OAAeA,EAAUzF,UAAY2F,EAAU3F,SAAWyF,EAAUrG,SAAWuG,EAAUvG,QAAUqG,EAAUpG,aAAesG,EAAUtG,cAGtI8kB,EACAA,EAAiBzV,MAAQkS,GAAewD,SAExCH,EAAkBlkB,KAAK,CACnBC,QAAS2F,EAAU3F,QACnBZ,OAAQuG,EAAUvG,OAClBC,WAAYsG,EAAUtG,WACtBqP,MAAOkS,GAAeyD,eAE1BH,EAAOxkB,EAASO,aAIxB,IAAM6jB,EAAiC,GACjCC,EAAgC,GActC,OAZArkB,EAASyB,0BAA0BtB,SAAQ,SAAAykB,GACvC,IAAMC,EAA4CP,EAAO/gB,MAAK,SAAAyL,GAAK,OAAIA,EAAMxP,KAAOolB,EAAyBrf,WACzGsf,IACIA,EAAaC,UAAYF,EAAyBG,gBAClDX,EAAY/jB,KAAKwkB,GACjBL,EAAOxkB,EAASO,UAEhB8jB,EAAWhkB,KAAKwkB,OAKrB,CAAC1B,WAAYoB,EAAmB3d,KAAM4d,EAAMJ,YAAaA,EAAaC,WAAYA,IAM3Fb,GAAqB,SAACld,EAAiBb,EAAgB0d,GACzD,OAAOA,EAAW6B,WACd,SAACjf,GAAD,OACIA,EAAUzF,UAAYgG,GAAWP,EAAUrG,SAAW+F,IAAW4d,GAAiBtd,EAAUiJ,WAIlGqU,GAAmB,SAACrU,GACtB,OACIA,IAAUkS,GAAe8C,SACzBhV,IAAUkS,GAAe2C,cACzB7U,IAAUkS,GAAeyD,cAIjC,SAAShB,GAAmBsB,GACxB,OAAiC,IAA1BA,EChKJ,IAAMC,GACU,SACfrX,EACAP,EACA6X,GAEA,IAAMC,EAA6B,CAC/BC,cAAexX,EACfyX,QAAS,GACTC,gBAAiB,GACjBC,SAAU,CAAC3e,KAAMnC,EAAUyI,QAEzBmY,EAAoB,GACtBG,GAA4B,EAGhC,GAAI5X,GAAYP,EAAW,CAEvB,IAAMoY,EAA+BpY,EAAU5O,UAAUW,KAAI,SAACuB,EAAMrB,GAChE,MAAO,CACHE,WAAYwc,GAAWyH,IACvB9jB,iBAAkBgB,EAAKN,QACvBZ,OAAQkB,EAAKlB,OACbC,WAAYiB,EAAKjB,WACjBH,IAAK,EACLM,gBAAiB,EACjBD,gBAAiB,EACjBE,YAAa,GACbR,MAAOA,MAITomB,EAAwCzC,GAC1CwC,EACAP,GAAmB,IAGvBC,EAAaG,gBAAgBllB,KAAKulB,GAAYD,IAC9C,IAAIxC,EAA0Bve,EAAUG,SAAS4gB,EAAgBxC,YAG3DziB,EAAiDmlB,GAAQhY,GAE/D,QAAa/L,IAATpB,EAAoB,CAMpB,IALA,IAAIolB,EAA0DplB,EAC1DmG,EAAOkf,GAAQD,GACf7X,EAAiB,QAGb+X,GAAUP,KAAsB5e,IAASnC,EAAUoC,MAAQD,IAASnC,EAAUyM,MAAM,CAExF,GAAItK,IAASnC,EAAUoC,KAAM,CACzB,IAAMH,EAAwBmf,EACxBG,EAA+BC,GAAcvf,EAAMwc,GACzDA,EAAa8C,EAAO9C,WAEpBsC,EAAmBU,GAAaf,EAAcze,EAAMsf,GAGpDhY,GADkB,SAAWtH,EAAK8J,eAAejR,GAEjD8lB,EAAQjlB,KAAK4N,GAEbmX,EAAaG,gBAAgBllB,KAAK,CAC9B4N,OAAQA,EACRkV,WAAYA,EACZxM,OAAQsP,EAAOtP,OACfyP,eAAgBzf,EAAK8J,eAAejR,GACpCqH,KAAM,OACNud,YAAa6B,EAAO7B,YACpBC,WAAY4B,EAAO5B,aAGlB2B,GAAUP,KAEXK,EAAiBO,GAASP,EAAmCrV,eAAe7J,KAAMiH,GAClFhH,EAAOkf,GAAQD,IAKvB,GAAIjf,IAASnC,EAAUyM,IAAK,CACxB,IAAMnR,EAAuB8lB,EAEvBG,EAAiC/C,GACnCljB,EACAmjB,EACAtV,EAAS9O,gBAEbokB,EAAa8C,EAAO9C,WAEpB2C,EAAiBO,GAAQJ,EAAOrf,KAAMiH,GACtChH,EAAOkf,GAAQD,GAGf7X,GADkB,QAAUjO,EAASR,GAErC8lB,EAAQjlB,KAAK4N,GAEbmX,EAAaG,gBAAgBllB,KAAK,CAC9B4N,OAAQA,EACRkV,WAAYA,EACZxM,OAAQ,GACRyP,eAAgBpmB,EAASR,GACzBqH,KAAM,WACNud,YAAa6B,EAAO7B,YACpBC,WAAY4B,EAAO5B,cAI/B,IAAK2B,GAAUP,GAAmB,CAC9BL,EAAaI,SAAWM,EACxB,IAAMQ,EAAuCpD,GACzC,GACAC,GAEJiC,EAAaG,gBAAgBllB,KAAK,CAC9B4N,OAAQA,EAAS,IAAO6X,EAA4Bjf,KACpDsc,WAAYmD,EAAenD,WAC3Btc,KAAM,WACN8P,OAAQ2P,EAAe3P,OACvByN,YAAakC,EAAelC,YAC5BC,WAAYiC,EAAejC,aAG/BiB,EAAQjlB,KAAK4N,EAAS,IAAO6X,EAA4Bjf,QAIrE,OAAO,2BACAue,GADP,IAEIE,QAASA,EACTiB,sBAAuBP,GAAUP,GAAoBA,OAAmB3jB,KAO9E8jB,GAAc,SAACK,GACjB,MAAO,CACHhY,OAAQ,OACRkV,WAAY8C,EAAO9C,WACnBtc,KAAM,OACN8P,OAAQsP,EAAOtP,OACfyN,YAAa6B,EAAO7B,YACpBC,WAAY4B,EAAO5B,aAYrBwB,GAAU,SAAChY,GACb,IAAMlH,EAAoCkH,EAASH,iBAAiBnK,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAe/P,QACjG+O,EAA+B5B,EAAStP,UAAUgF,MAAK,SAACkM,GAAD,OAAUA,EAAK/O,QAC5E,OAAOiG,IAAc8I,QAAc3N,IAGjCukB,GAAU,SAAC7B,EAAY3W,GACzB,IAAI2Y,EACJ,OAAQhC,EAAK3d,MACT,KAAKnC,EAAUoC,KACX0f,EAlBgB,SAACvY,EAAgBJ,GACzC,OAAOA,EAASH,iBAAiBnK,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOyO,KAiBpCwY,CAAoBjC,EAAKhlB,GAAIqO,IAAa,CAAChH,KAAMnC,EAAUyI,OAC1F,MACJ,KAAKzI,EAAUyM,IACXqV,EAjBoB,SAAChnB,EAAYqO,GACzC,OAAOA,EAAStP,UAAUgF,MAAK,SAACkM,GAAD,OAAUA,EAAKjQ,KAAOA,KAgBdknB,CAAwBlC,EAAKhlB,GAAIqO,IAAa,CAAChH,KAAMnC,EAAUyI,OAC9F,MACJ,KAAKzI,EAAUiiB,IACXH,EAA+B,CAAC3f,KAAMnC,EAAUiiB,KAChD,MACJ,KAAKjiB,EAAUkiB,KACXJ,EAA+B,CAAC3f,KAAMnC,EAAUkiB,MAChD,MACJ,QACIJ,EAA+B,CAAC3f,KAAMnC,EAAUyI,OAExD,OAAOqZ,GAGLN,GAAgB,SAACvf,EAAuBwc,GAC1C,OAAOD,GAAiDvc,EAAKrI,QAAS6kB,IAGpE4C,GAAU,SAACc,GACb,GAAKA,EAA6CpW,eAC9C,OAAO/L,EAAUoC,KACd,GAAK+f,EAAwCtmB,SAChD,OAAOmE,EAAUyM,IACd,GAAK0V,EAAsChgB,KAC9C,OAAQggB,EAAsChgB,KAE9C,MAAM1D,MAAM,6BAIdgjB,GAAe,SAACf,EAA4Bze,EAAuBsf,GACrE,OAAOb,EAAaG,gBAAgBP,WAChC,SAAC8B,GAAD,OACIA,EAASV,iBAAmBzf,EAAK8J,eAAejR,IAChDsnB,EAAS3D,WAAWlc,SAAWgf,EAAO9C,WAAWlc,SAChD6f,EAAS3D,WAAW9d,MACjB,SAAC0hB,GAAD,OAASd,EAAO9C,WAAW9d,MAAK,SAAC2hB,GAAD,OAASA,EAAI1mB,UAAYymB,EAAGzmB,SAAW0mB,EAAItnB,SAAWqnB,EAAGrnB,iBAKnGsmB,GAAY,SAACP,GACf,OAAOA,GAAoB,GCzNlBwB,GACO,SAACC,GACb,IAAMC,EAA+B,CAACC,UAAW,GAAIC,QAAS,GAAI7B,SAAU,CAAC3e,KAAM3B,EAAeiI,QAC9FsY,GAA4B,EAC5BtC,EAA0B,GAE9B,GAAI+D,EAAe,CACf,IAAMxmB,EAA4BmlB,GAAQqB,GAE1C,GAAIxmB,EAAM,CAKN,IAJA,IAAIiG,EAAuDjG,EACvDmG,EAAOkf,GAAQpf,GACfsH,EAAiB,IAEb+X,GAAUP,KAAsB5e,IAAS3B,EAAeoiB,MAAQzgB,IAAS3B,EAAeiM,MAAM,CAClG,GAAItK,IAAS3B,EAAeoiB,KAAM,CAC9B,IAAM/Y,EAAqB5H,EAE3B8e,EAAmBU,GAAagB,EAAmB5Y,EAAM4U,GAEzD,IAAM8C,EAAuBf,GACzB3W,EAAKV,SACLU,EAAKjB,UACL6V,GAGJA,EACI8C,EAAOV,gBAAgBte,OAAS,EAC1Bgf,EAAOV,gBAAgBU,EAAOV,gBAAgBte,OAAS,GAAGkc,WAC1D,GAGV,IAAMoE,EAAY,SAAWhZ,EAAKX,UAAUpO,GAC5CyO,EAAoB,KAAXA,EAAgBM,EAAKX,UAAUpO,GAAGmE,WAAasK,EAASsZ,EACjEJ,EAAkBE,QAAQhnB,KAAK4N,GAE/BkZ,EAAkBC,UAAU/mB,KAAK,CAC7BI,KAAM8N,EAAKX,UAAUnN,KACrB+mB,YAAajZ,EAAKX,UAAUpO,GAC5ByO,OAAQA,EACRJ,SAAUoY,EACV3Y,UAAWiB,EAAKjB,UAChBqJ,OAAQsP,EAAOV,gBAAgBlmB,KAAI,SAACsH,GAAD,OAAUA,EAAKgQ,UAAQ8Q,KAAK,KAG9DzB,GAAUP,KAEX9e,EAAO0f,GAAS1f,EAAsBiH,UAAUhH,KAAMsgB,GACtDrgB,EAAOkf,GAAQpf,IAIvB,GAAIE,IAAS3B,EAAeiM,IAAK,CAC7B,IAAMnR,EAA4B2G,EAE5B6d,EAAkBkD,GAA0B1nB,EAAUmjB,EAAY+D,EAAcloB,aACtF2H,EAAO0f,GAAQ7B,EAAM0C,GACrBrgB,EAAOkf,GAAQpf,GAEf,IAAMghB,EAAY,QAAU3nB,EAASR,GACrCyO,EAAoB,KAAXA,EAAgB,OAASA,EAAS0Z,EAC3CR,EAAkBE,QAAQhnB,KAAK4N,IAGlC+X,GAAUP,KACX0B,EAAkB3B,SAAW7e,EAC7BwgB,EAAkBE,QAAQhnB,KAAK4N,EAAS,IAAOtH,EAAuBE,QAIlF,OAAO,2BAAIsgB,GAAX,IAA8BS,kBAAmB5B,GAAUP,GAAoBA,OAAmB3jB,KAIpG4lB,GAA4B,SAACxmB,EAAgCiiB,EAAyBnkB,GACxF,IAAIwlB,EAuBJ,OArBItjB,EAAcE,aAAe,IAC7BF,EAAcE,WAAWjB,SAAQ,SAAC8F,GACFkd,EAAW9d,MACnC,SAACwiB,GAAD,OAAQA,EAAGnoB,SAAWuG,EAAUvG,QAAUmoB,EAAGloB,aAAesG,EAAUtG,YAAckoB,EAAGvnB,UAAY2F,EAAU3F,aAG7GkkB,EAAOtjB,EAAcX,aAMjCW,EAAcO,0BAA0BtB,SAAQ,SAAAykB,GAC5C,IAAMC,EAAyC7lB,EAAYuE,MAAK,SAAAyL,GAAK,OAAIA,EAAMxP,KAAOolB,EAAyBrf,WAC3Gsf,GACIA,EAAaC,UAAYF,EAAyBG,iBAClDP,EAAOtjB,EAAcX,aAK1BikB,GAAQtjB,EAAcV,QAWpBqlB,GAAU,SAAClX,GACpB,IAAImZ,EAAgC,KAIpC,OAHKljB,EAAUC,kBAAkB8J,KAC7BmZ,EAAWnZ,EAAO+G,MAAMnS,MAAK,SAACgL,GAAD,OAAUA,EAAKX,UAAUlN,SAAS,MAE5DonB,GAGLzB,GAAU,SAAC7B,EAAiB7V,GAC9B,IAAI6X,EAA+E,CAAC3f,KAAM3B,EAAeiI,OACzG,OAAQqX,EAAK3d,MACT,KAAK3B,EAAeoiB,KAChBd,EApBa,SAACuB,EAAgBpZ,GACtC,OAAOA,EAAM+G,MAAMnS,MAAK,SAACgL,GAAD,OAAUA,EAAKX,UAAUpO,KAAOuoB,KAmBjBC,CAAiBxD,EAAKhlB,GAAImP,IAAU,CAAC9H,KAAM3B,EAAeiI,OACzF,MACJ,KAAKjI,EAAeiM,IAChBqV,EAnBiB,SAAChnB,EAAYmP,GACtC,OAAOA,EAAMpQ,UAAUgF,MAAK,SAACvD,GAAD,OAAcA,EAASR,KAAOA,KAkBnByoB,CAAqBzD,EAAKhlB,GAAImP,IAAU,CAAC9H,KAAM3B,EAAeiI,OAC7F,MACJ,KAAKjI,EAAeyhB,IAChBH,EAA+B,CAAC3f,KAAM3B,EAAeyhB,KAE7D,OAAOH,GAGLT,GAAU,SAACpf,GACb,GAAKA,EAAsBiH,UACvB,OAAO1I,EAAeoiB,KACnB,GAAK3gB,EAAyBpG,SACjC,OAAO2E,EAAeiM,IACnB,GAAKxK,EAAuBE,KAC/B,OAAQF,EAAuBE,KAE/B,MAAM1D,MAAM,6BAIdgjB,GAAe,SAACgB,EAA8BxgB,EAAoBwc,GACpE,OAAOgE,EAAkBC,UAAUpC,WAC/B,SAACkD,GAAD,OACIA,EAASV,cAAgB7gB,EAAKiH,UAAUpO,IACxC0oB,EAASra,SAAS0X,gBAAgB,GAAGpC,WAAWlc,SAAWkc,EAAWlc,SACrEihB,EAASra,SAAS0X,gBAAgB,GAAGpC,WAAW9d,MAC7C,SAAC0hB,GAAD,OAAS5D,EAAW9d,MAAK,SAAC2hB,GAAD,OAASA,EAAI1mB,UAAYymB,EAAGzmB,SAAW0mB,EAAItnB,SAAWqnB,EAAGrnB,iBAK5FsmB,GAAY,SAACP,GACf,OAAOA,GAAoB,GC7HzB0C,GAAqB1R,YAAY,CACnChW,KAAM,gBACNiW,aAhBwC,CACxC0R,sBAAuB,KACvBC,kBAAmB,KACnBjD,aAAc,KACdkD,UAAW,KACXC,iBAAkB,EAClBC,iBAAkB,EAClBC,aAAc,GACdnqB,QAAS,GACT6kB,WAAY,GACZuF,aAAc,GACdC,cAAe,MAMf/R,SAAU,CACNgS,oBAAqB,SAAC5Z,EAAO1P,GACzB0P,EAAMoZ,sBAAwB9oB,EAAOwX,QAErC9H,EAAM2Z,cAAgB,KACtB3Z,EAAMsZ,UAAY,KAClBtZ,EAAMwZ,iBAAmB,EACzBxZ,EAAMuZ,iBAAmB,EACrBjpB,EAAOwX,SAAW9H,EAAMqZ,kBACxBQ,GAAwBvpB,EAAOwX,QAAS9H,EAAMqZ,kBAAmBrZ,GAEjE8Z,GAAW9Z,IAGnB+Z,eAAgB,SAAC/Z,GACTA,EAAMoZ,uBAAyBpZ,EAAMqZ,mBACrCQ,GAAwB7Z,EAAMoZ,sBAAuBpZ,EAAMqZ,kBAAmBrZ,IAGtFga,oBAAqB,SAACha,EAAO1P,GACzB0P,EAAMuZ,iBAAmB,EAErBvZ,EAAMsZ,WAAatZ,EAAMsZ,UAAUlB,UAAUngB,OAAS3H,EAAOwX,SAAWxX,EAAOwX,SAAW,EAC1F9H,EAAMwZ,iBAAmBlpB,EAAOwX,QACzB9H,EAAMsZ,WAAahpB,EAAOwX,QAAU,EAC3C9H,EAAMwZ,iBAAmBxZ,EAAMsZ,UAAUlB,UAAUngB,OAAS,EAE5D+H,EAAMwZ,iBAAmB,GAGjCS,iBAAkB,SAACja,EAAO1P,GACtB0P,EAAM2Z,cAAgBrpB,EAAOwX,QAC7BgS,GAAW9Z,GACXA,EAAMoZ,sBAAwB,KAC9BpZ,EAAMqZ,kBAAoB,KAC1BrZ,EAAMwZ,iBAAmB,EACzBxZ,EAAMuZ,iBAAmB,GAE7BW,aAAc,SAACla,EAAO1P,GAClB0P,EAAMsZ,UAAYhpB,EAAOwX,SAE7BqS,qBAAsB,SAACna,EAAO1P,GAC1B0P,EAAMqZ,kBAAoB/oB,EAAOwX,QAEjC9H,EAAM2Z,cAAgB,KACtB3Z,EAAMsZ,UAAY,KAClBtZ,EAAMwZ,iBAAmB,EACrBlpB,EAAOwX,SAAW9H,EAAMoZ,sBACxBS,GAAwB7Z,EAAMoZ,sBAAuB9oB,EAAOwX,QAAS9H,GAErE8Z,GAAW9Z,IAGnBoa,cAAe,SAACpa,EAAO1P,GACnB0P,EAAM0Z,aAAN,sBAAyB1Z,EAAM0Z,cAA/B,CAA6C,CAAC7hB,KAAM,OAAQrH,GAAIF,EAAOwX,WACvE9H,EAAMuZ,iBAAmB,GAE7Bc,iBAAkB,SAACra,EAAO1P,GACtB0P,EAAM0Z,aAAe1Z,EAAM0Z,aAAahe,QACpC,SAAC4e,GAAD,QAA0B,SAAdA,EAAKziB,MAAmByiB,EAAK9pB,KAAOF,EAAOwX,YAE3D9H,EAAMuZ,iBAAmB,GAE7BgB,gBAAiB,SAACva,EAAO1P,GACrB0P,EAAM0Z,aAAN,sBAAyB1Z,EAAM0Z,cAA/B,CAA6C,CAAC7hB,KAAM,QAASrH,GAAIF,EAAOwX,WACxE9H,EAAMuZ,iBAAmB,GAE7BiB,kBAAmB,SAACxa,EAAO1P,GACvB0P,EAAM0Z,aAAe1Z,EAAM0Z,aAAahe,QACpC,SAAC4e,GAAD,QAA0B,UAAdA,EAAKziB,MAAoByiB,EAAK9pB,KAAOF,EAAOwX,YAE5D9H,EAAMuZ,iBAAmB,GAE7BkB,oBAAqB,SAACza,EAAO1P,GACzB,IACmC,IAD/BoqB,EAAkC,GAClCC,GAAuB3a,KACvB0a,EAAgBE,IACZ,UAAAD,GAAuB3a,UAAvB,eAA+BuW,kBAAmB,GAClDvW,EAAM0Z,cACN,UAAAmB,GAAwB7a,UAAxB,eAAgCtB,mBAAoB,KAG5D,IAAMoc,EAAexqB,EAAOwX,QAC5B,GAAI6S,GAAuB3a,IAAU8a,GAAgB,GAAKA,EAAeJ,EAAcziB,OACnF+H,EAAMuZ,iBAAmBjpB,EAAOwX,aAC7B,GAAI9H,EAAMsZ,WAAawB,IAAiBJ,EAAcziB,OACrD+H,EAAMwZ,iBAAmBxZ,EAAMsZ,UAAUlB,UAAUngB,OAAS,GAC5D+H,EAAMwZ,iBAAmBxZ,EAAMwZ,iBAAmB,EAClDxZ,EAAMuZ,iBAAmB,IAEzBvZ,EAAMwZ,iBAAmB,EACzBxZ,EAAMuZ,iBAAmB,QAE1B,GAAIvZ,EAAMsZ,YAA+B,IAAlBwB,EAAqB,CAAC,IAAD,EACzCC,EACF/a,EAAMwZ,iBAAmB,EAAIxZ,EAAMwZ,iBAAmB,EAAIxZ,EAAMsZ,UAAUlB,UAAUngB,OAAS,EAC3F+iB,EAAmBJ,GACrB5a,EAAMsZ,UAAUlB,UAAU2C,GAAclc,SAAS0X,iBAAmB,GACpEvW,EAAM0Z,cACN,UAAA1Z,EAAMsZ,UAAUlB,UAAU2C,GAAclc,SAASwX,qBAAjD,eAAgE3X,mBAAoB,IAExFsB,EAAMuZ,iBAAmByB,EAAiB/iB,OAAS,EACnD+H,EAAMwZ,iBAAmBuB,OAEzB/a,EAAMuZ,iBAAmB,GAGjC0B,gBAAiB,SAACjb,EAAO1P,GACrB0P,EAAMyZ,aAAenpB,EAAOwX,SAEhCoT,WAAY,SAAClb,EAAO1P,GAChB0P,EAAM1Q,QAAUgB,EAAOwX,SAE3BqT,cAAe,SAACnb,EAAO1P,GACnB0P,EAAMmU,WAAa7jB,EAAOwX,SAE9BsT,UAAW,SAACpb,EAAO1P,GACf0P,EAAM0Z,aAAeppB,EAAOwX,QAC5B9H,EAAMuZ,iBAAmB,MAKrC,SAASM,GAAwBxD,EAA4B/X,EAAyB0B,GAA4B,IAAD,IACvGiX,EAAuBf,GAAkCG,EAAe/X,GAC9E0B,EAAMuZ,iBAAmB,EACzBvZ,EAAMyZ,cAAe,UAAAxC,EAAOV,gBAAgBvW,EAAMuZ,yBAA7B,eAAgD5R,SAAU,GAC/E3H,EAAMmU,YAAa,UAAA8C,EAAOV,gBAAgBvW,EAAMuZ,yBAA7B,eAAgDpF,aAAc,GACjFnU,EAAMoW,aAAea,EAGzB,SAAS6C,GAAW9Z,GAChBA,EAAMyZ,aAAe,GACrBzZ,EAAMmU,WAAa,GACnBnU,EAAMoW,aAAe,KACrBpW,EAAM0Z,aAAe,GAKzB,IA6EMkB,GAAc,SAACvrB,EAAyBqM,EAAkB2f,GAC5D,OAAsB,IAAlB3f,EAAOzD,OACA5I,EAEJA,EAAMqM,QAAO,SAAC/D,GAAD,OAChB+D,EAAOrF,MAAK,SAACilB,GAAmB,IAAD,EACrBhsB,GACF,UAAA+rB,EAAW9mB,MAAK,SAACgnB,GAAD,OAAeA,EAAU9Z,eAAejR,KAAOmH,EAAKyf,yBAApE,eAAqF9nB,UAAW,GACpG,OAAQgsB,EAAczjB,MAClB,IAAK,QACD,OAAOvI,EAAQ+G,MAAK,SAAC/F,GAAD,OAAYA,EAAOM,mBAAqB0qB,EAAc9qB,MAC9E,IAAK,OACD,OAAOlB,EAAQ+G,MAAK,SAAC/F,GAAD,OAAYA,EAAOI,SAAW4qB,EAAc9qB,MACpE,QACI,OAAO,UAkBrBgrB,GAAqB,SAAClsB,EAAqB0Q,GAC7C,IAAMyb,EAAkB,GA4CxB,OA1CAnsB,EAAQ6B,SAAQ,SAACb,GAAY,IAAD,IAClBorB,EAAqD,UAAG1b,EAAM+T,WAAWjlB,OAAOyF,MAClF,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOF,EAAOO,yBADkB,aAAG,EAE3D2J,gBAEGmhB,EAAqD,UAAG3b,EAAM+T,WAAWjlB,OAAOyF,MAClF,SAACqnB,GAAD,OAAUA,EAAKrjB,MAAM/H,KAAOF,EAAOM,2BADoB,aAAG,EAE3D4J,gBAEGqhB,EAAuB,GAE7B,GAAIvrB,EAAOG,aAAewc,GAAW6O,QACjCD,EAAWxqB,KAAKf,EAAOS,iBACpB,CAAC,IAAD,EACGgrB,EAA6B,UAAG/b,EAAM+T,WAAWvkB,MAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,iBAAjE,aAAG,EAChCkB,KAAKH,KACPsqB,GACAF,EAAWxqB,KAAK0qB,GAIxB,IAAMlkB,EAAkBvH,EAAOG,WAAWurB,SAAS,QAAU7P,GAAU8I,KAAO9I,GAAU2P,QAExF,GAAIJ,GAAyBC,EAAuB,CAChD,IAMmB,EANbM,EAAmCR,EAAOlnB,MAC5C,SAAC2nB,GAAD,OACIA,EAAMR,sBAAsBlhB,gBAAgBhK,KAAOkrB,EAAsBlhB,gBAAgBhK,IACzF0rB,EAAMP,sBAAsBnhB,gBAAgBhK,KAAOmrB,EAAsBnhB,gBAAgBhK,MAGjG,GAAIyrB,GACA,EAAAA,EAAcJ,YAAWxqB,KAAzB,QAAiCwqB,QAEjCJ,EAAOpqB,KAAK,CACRqqB,wBACAC,wBACAE,aACAhkB,aAKT4jB,GAKEU,GAAuBhD,GAAmB/P,QAC1CgT,GACM,SAACpc,GAAD,OAAgCA,EAAMqW,cAAcqD,cAD1D0C,GAEO,SAACpc,GAAD,OAA0C6a,GAAwB7a,EAAMqW,gBAF/E+F,GAGI,SAACpc,GAAD,aAAsC,UAAAA,EAAMqW,cAAcsD,qBAApB,eAAmCha,QAAS,MAHtFyc,GAIO,SAACpc,GAAD,OAAuCA,EAAMqW,cAAcsD,eAAiB,MAJnFyC,GAKgB,SAACpc,GAAD,aAAsC,UAAAA,EAAMqW,cAAcsD,qBAApB,eAAmCjT,QAAS,IALlG0V,GAMoB,SAACpc,GAAD,aACzB,UAAAA,EAAMqW,cAAcsD,qBAApB,eAAmCpqB,YAAa,IAP3C6sB,GAQQ,SAACpc,GAAD,OAAwCA,EAAMqW,cAAciD,WAAa,MARjF8C,GASQ,SAACpc,GACd,GAAIA,EAAMqc,KAAKC,OAASC,GAAKC,KAAM,CAC/B,IAAMC,EAAsC5B,GAAwB7a,EAAMqW,eACpED,EAAoCuE,GAAuB3a,EAAMqW,eACvE,OAAOuE,IACS,OAAZxE,QAAY,IAAZA,OAAA,EAAAA,EAAcG,kBAAmB,GACjCvW,EAAMqW,cAAcqD,cACL,OAAf+C,QAAe,IAAfA,OAAA,EAAAA,EAAiB/d,mBAAoB,IAGzC,MAAO,IAnBN0d,GAsBU,SAACpc,GAAD,aACfA,EAAMqc,KAAKC,OAASC,GAAKC,OAAO,UAAA7B,GAAuB3a,EAAMqW,sBAA7B,eAA6CC,UAAgB,IAvBxF8F,GAwBW,SAACpc,GAAD,aAChBA,EAAMqc,KAAKC,OAASC,GAAKC,OAAO,UAAA7B,GAAuB3a,EAAMqW,sBAA7B,eAA6CG,WAAmB,MAzB3F4F,GA0BQ,SAACpc,GACd,OAAIA,EAAMqc,KAAKC,OAASC,GAAKC,KA4GrC,SAA6Bxc,GAAiD,IAAD,EACzE,OAAOA,EAAM2Z,eACP,UAAA3Z,EAAMsZ,iBAAN,eAAiBlB,UAAUpY,EAAMwZ,kBAAkBlb,YAAa,KAChE0B,EAAMqZ,kBA9GGqD,CAAoB1c,EAAMqW,eAE1B,MA9BN+F,GAiCQ,SAACpc,GACd,IAAImU,EAA0B,GAE9B,GAAInU,EAAMqW,cAAcD,cAAgBpW,EAAMqW,cAAciD,UAAW,CAAC,IAAD,EAC7DoB,EAAgBiC,GAAiB3c,GACvCmU,EAAW9iB,KAAX,MAAA8iB,EAAU,aAAS,UAAAuG,EAAc1a,EAAMqW,cAAckD,yBAAlC,eAAqDpF,aAAc,KAG1F,GAAInU,EAAMqW,cAAcgD,oBAAsBrZ,EAAMqW,cAAcD,eAAiBpW,EAAMqW,cAAciD,UAAW,CAAC,IAAD,EACxGsD,GAAyB,UAAA5c,EAAMqW,cAAcgD,yBAApB,eAAuC3pB,YAAa,GACnFykB,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASyI,EAAuBvsB,IAAIwsB,MAGlD,OAAO1I,GA9CFiI,GAgDK,SAACpc,GAAkC,IAAD,EAE5C,OAAO,UADe2c,GAAiB3c,GAClBA,EAAMqW,cAAckD,yBAAlC,eAAqD5R,SAAU,IAlDjEyU,GAqDU,SAACpc,GAAyC,IAAD,EAExD,OAAO,UADe2c,GAAiB3c,GAClBA,EAAMqW,cAAckD,yBAAlC,eAAqDnE,cAAe,IAvDtEgH,GA0DS,SAACpc,GAAyC,IAAD,EAEvD,OAAO,UADe2c,GAAiB3c,GAClBA,EAAMqW,cAAckD,yBAAlC,eAAqDlE,aAAc,IA5DrE+G,GA+DM,SAACpc,GAAkC,IAAD,MAEvCf,EAA0B,UADV0d,GAAiB3c,GACUA,EAAMqW,cAAckD,yBAArC,aAAG,EAAqDnC,eACxF,OAAOnY,IACD,UAAA4b,GAAwB7a,EAAMqW,sBAA9B,mBAA8C3X,iBAAiBnK,MACjE,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOyO,YADnC,eAEH3P,UACG,IAtED8sB,GAwEe,SAACpc,GAAD,OAA8BA,EAAMqW,cAAckD,kBAxEjE6C,GAyEY,SAACpc,GAA8B,IAAD,IAC/C,OACI,UAAA2a,GAAuB3a,EAAMqW,sBAA7B,mBAA6CE,gBAAgBvW,EAAMqW,cAAckD,yBAAjF,eACMta,SAAU,IA5Efmd,GA+Ee,SAACpc,GAAD,OAA8BA,EAAMqW,cAAcmD,kBA/EjE4C,GAgFY,SAACpc,GAAD,eACjB,UAAAA,EAAMqW,cAAciD,iBAApB,mBAA+BlB,UAAUpY,EAAMqW,cAAcmD,yBAA7D,eAAgFva,SAAU,IAjFrFmd,GAkFY,SAACpc,GAA+B,IAAD,IAC1Cyb,EAAkB,GAClBf,EAAgBiC,GAAiB3c,GACjC8c,EAAoB,GAEpBC,EAC4D,UAA9D,UAAArC,EAAc1a,EAAMqW,cAAckD,yBAAlC,eAAqD1hB,MAArD,UACM6iB,EAAc1a,EAAMqW,cAAckD,yBADxC,aACM,EAAqDnC,oBACrDtkB,EACNiqB,GACAD,EAAQzrB,KAAK0rB,GAEjB,IAAIC,EAAqB,GAYzB,OAXAF,EAAQ3rB,SAAQ,SAAC4rB,GAAY,IAAD,EAClBE,EA/JS,SAACF,EAAgBre,EAAqCwe,GAC7E,IACIvlB,EADA8jB,EAAkB,GAQtB,OANIsB,GAAUre,IACV/G,EAAO+G,EAAiBnK,MAAK,SAAC4oB,GAAD,OAASA,EAAI1b,eAAejR,KAAOusB,MAEhEplB,IACA8jB,EAASD,GAAmB7jB,EAAKrI,QAAS4tB,IAEvCzB,EAsJsB2B,CACjBL,GACA,UAAAlC,GAAwB7a,EAAMqW,sBAA9B,eAA8C3X,mBAAoB,GAClEsB,GAEJgd,EAAYA,EAAUK,OAAOJ,MAEjCD,EAAU7rB,SAAQ,SAAC+qB,GACXA,GAAOT,EAAOpqB,KAAK6qB,MAEpBT,GA1GFW,GA4GiB,SAACpc,GAAD,aACtB,UAAA2a,GAAuB3a,EAAMqW,sBAA7B,eAA6CkB,wBAAyB,MAI9E,SAASoF,GAAiB3c,GAAqC,IAAD,IAC1D,OAAOA,EAAMqc,KAAKC,OAASC,GAAKC,KAC1B5B,IACE,UAAAD,GAAuB3a,EAAMqW,sBAA7B,eAA6CE,kBAAmB,GAChEvW,EAAMqW,cAAcqD,cACpB,UAAAmB,GAAwB7a,EAAMqW,sBAA9B,eAA8C3X,mBAAoB,IAEpE,GAGV,SAASic,GAAuB3a,GAAiD,IAAD,EAC5E,OAAOA,EAAM2Z,eACP,UAAA3Z,EAAMsZ,iBAAN,eAAiBlB,UAAUpY,EAAMwZ,kBAAkB3a,WAAY,KAC/DmB,EAAMoW,aAGhB,SAASyE,GAAwB7a,GAAgD,IAAD,EAC5E,OAAOA,EAAM2Z,eACP,UAAA3Z,EAAMsZ,iBAAN,eAAiBlB,UAAUpY,EAAMwZ,kBAAkB3a,SAASwX,gBAAiB,KAC7ErW,EAAMoZ,sBAShB,IC/cYmD,GD+cNM,GAAyB,SAACzlB,GAC5B,MAAO,CACH4I,MAAOkS,GAAeoC,WACtBhjB,QAAS8F,EAAS9F,QAClBZ,OAAQ0G,EAAS1G,OACjBC,WAAYyG,EAASzG,aAKhB2sB,GAAuB,CAChCC,mBAAoBpE,GAAmB7pB,QAAQsqB,oBAC/C4D,uBAtRiC,SAACtlB,GAAD,OAAkC,SAACmQ,GACpE,IAAMzB,EAA4CD,GAA2BzO,GACvD,MAAlB0O,EAASE,KACT3W,QAAQ8C,KAAK2T,EAASC,SAEtBwB,EAAS8Q,GAAmB7pB,QAAQsqB,oBAAoBhT,EAAS9Q,WAkRrE2nB,iCA9Q2C,SAACvlB,EAAoBod,GAArB,OAA6D,SAACjN,GACzG,IAAMzB,EAA4CD,GAA2BzO,GAC7E,GAAsB,MAAlB0O,EAASE,KACT3W,QAAQ8C,KAAK2T,EAASC,aACnB,CAEH,IAAMhI,EAAwB+H,EAAS9Q,OACvC+I,EAAS9O,eAAiBulB,EAC1BjN,EAAS8Q,GAAmB7pB,QAAQsqB,oBAAoB/a,OAuQ5D6e,wBAnQ+B,SAACrd,GAAD,OAAmC,SAACgI,GACnE,IAAMzB,EAA6CD,GAA4BtG,GACzD,MAAlBuG,EAASE,KACTuB,EAAS8Q,GAAmB7pB,QAAQ6qB,qBAAqBvT,EAAS9Q,SAElEuS,EAASF,GAAcN,YAAYjB,EAASC,YA+PhD8W,oBAAqBxE,GAAmB7pB,QAAQ6qB,qBAChDyD,sBAAuBzE,GAAmB7pB,QAAQ6qB,qBAAqB,MACvE0D,sBAAuB1E,GAAmB7pB,QAAQmrB,qBAAqB,GACvEqD,qBAAsB3E,GAAmB7pB,QAAQsqB,oBAAoB,MACrEmE,kBAAmB5E,GAAmB7pB,QAAQ2qB,iBAAiB,MAC/DQ,oBAAqBtB,GAAmB7pB,QAAQmrB,oBAChDT,oBAAqBb,GAAmB7pB,QAAQ0qB,oBAChDgE,sBAlQ0B,SAAC1mB,GAAD,OAA+B,SAAC+Q,GAC1D,IAAM3M,EAAmB,GACzBA,EAAOrK,KAAK,CAACwG,KAAM,QAASrH,GAAI8G,IAChC+Q,EAAS8Q,GAAmB7pB,QAAQ8rB,UAAU1f,MAgQ9CuiB,qBA7PyB,SAACxnB,GAAD,OAA8B,SAAC4R,GACxD,IAAM3M,EAAmB,GACzBA,EAAOrK,KAAK,CAACwG,KAAM,OAAQrH,GAAIiG,IAC/B4R,EAAS8Q,GAAmB7pB,QAAQ8rB,UAAU1f,MA2P9CwiB,SArUa,SAACC,GAAD,OAAoC,SAAC9V,GAClDA,EAASiV,GAAqB7C,oBAAoB0D,EAAe,MAqUjEC,SAlUa,SAACD,GAAD,OAAoC,SAAC9V,GAClDA,EAASiV,GAAqB7C,oBAAoB0D,EAAe,MAkUjEE,SA3Ta,SAACF,GAAD,OAAoC,SAAC9V,EAAUK,GAGxDL,EAFsBK,IAAW2N,cAAckD,iBACnC,EACHJ,GAAmB7pB,QAAQmrB,oBAAoB,GAE/C6C,GAAqBtD,oBAAoBmE,EAAe,MAuTrEG,SAhUa,SAACH,GAAD,OAAoC,SAAC9V,GAClDA,EAASiV,GAAqBtD,oBAAoBmE,EAAe,MAgUjEI,gBApT0B,SAAC5e,GAAD,OAA8B,SAAC0I,EAAUK,GACnE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC7B1V,EAAyCD,GAAuBhH,GACtE,GAAsB,MAAlBiH,EAASE,KACT3W,QAAQ8C,KAAK2T,EAASC,aACnB,CACH,IAAM2X,EAAqB5X,EAAS9Q,OACpCuS,EAAS8Q,GAAmB7pB,QAAQ2qB,iBAAiBuE,IACjDA,GAAYlC,IAASC,GAAKC,MAAQ3F,GAAQ2H,IAC1CnW,EAAS8Q,GAAmB7pB,QAAQ4qB,aAAajC,GAAoCuG,QA4S7FC,eAAgBtF,GAAmB7pB,QAAQ8qB,cAC3CsE,kBAAmBvF,GAAmB7pB,QAAQ+qB,iBAC9CE,gBAAiBpB,GAAmB7pB,QAAQirB,gBAC5CC,kBAAmBrB,GAAmB7pB,QAAQkrB,mBEphBrCmE,GAAb,oDACI,aAMG,IAAD,EALSltB,EAKT,uDALwB,GACfI,EAIT,wDAJsC,EAC7BgH,EAGT,wDAH6B,EACpBE,EAET,wDAF6B,EACpBhH,EACT,uDADwB,GACxB,4BACE,gBANON,OAKT,EAJSI,oBAIT,EAHSgH,WAGT,EAFSE,WAET,EADShH,OACT,EAPN,UAA6BiM,ICAhB4gB,GAAb,oDACI,aAA+C,IAAD,EAA3BC,EAA2B,uDAAX,UAAW,4BAC1C,gBADeA,QAA2B,EADlD,UAA8B7gB,ICAjB8gB,GAAb,oDACI,aAAqG,IAAD,EAAjFlQ,EAAiF,uDAAjE,IAAYC,EAAqD,uDAApC,GAAWlW,EAAyB,wDAAH,EAAG,4BAChG,gBADeiW,QAAiF,EAArDC,SAAqD,EAAzBlW,aAAyB,EADxG,UAAuCqF,ICA1B+gB,GAAb,oDACI,aAA2D,IAAD,EAAvC5Q,EAAuC,uDAA3B,GAAWC,EAAgB,uDAAJ,GAAI,4BACtD,gBADeD,IAAuC,EAAhBC,IAAgB,EAD9D,UAAgCpQ,ICCnBghB,GACT,aAGG,IAFQpkB,EAET,uDAFgC,IAAImkB,GAC3BvkB,EACT,uDAD8C,IAAIskB,GAClD,yBAFSlkB,WAET,KADSJ,mBCFFykB,GACT,aAIG,IAHQ1mB,EAGT,uDAH0B,IAAIomB,GACrBnkB,EAET,uDAF+C,IAAIwkB,GAC1C3kB,EACT,uDAD4B,IAAIukB,GAChC,yBAHSrmB,QAGT,KAFSiC,kBAET,KADSH,UC6BT6kB,GAAsB,SAAC3mB,GAAD,OAA+B,SAAC8P,EAAUK,GAClE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC/BA,IAASC,GAAK4C,WACd9W,EAAS+W,GAAYC,eAAe9mB,IAEpC8P,EAASF,GAAcN,YAAY,qCAAuCyU,MAIrEgD,GA3BU,SAAC/mB,GAAD,OAA+B,SAAC8P,GACnD,IAAMzB,EAAyCD,GAAwBpO,GACjD,MAAlBqO,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,QAqBAqL,GAlBY,SAAC/mB,GAAD,8CAA+B,WAAO8P,GAAP,eAAAnF,EAAA,sEACCyD,GAA0BpO,GAD3B,OAE9B,OADhBqO,EAD8C,QAEvCE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MAN2C,2CAA/B,uDAkBZqL,GAtCY,kBAAgB,SAACjX,GACtC,IAAM9P,EAAkB,IAAI0mB,GACtBrY,EAAyCD,GAAwBpO,GACjD,MAAlBqO,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MACT5L,EAAS6W,GAAoBtY,EAAS9Q,WCoBpC0pB,GAAqB,SAACjgB,GAAD,OAAiC,SAAC8I,GACzD,IAAMzB,EAA4CD,GAAyBpH,GACrD,MAAlBqH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAoBPwL,GAA0B,SAAClgB,GAAD,OAAiC,SAAC8I,EAAUK,GACxE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,IAASC,GAAKmD,gBACdrX,EAAS+W,GAAYO,mBAAmBpgB,IAExCpP,QAAQ8C,KAAK,0CAA4CqpB,KAIpDsD,GAAgB,CACzBC,OA7DyB,SAACtgB,EAAmB1K,EAAsCirB,GAA1D,OAAyF,SAClHzX,GAEA,IAAMzB,EAA4CD,GAAyBpH,GACrD,MAAlBqH,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B/T,IAAT+B,SAC0C/B,IAArC+B,EAAqBqJ,cACrBrJ,EAAqB+C,KAAO,CAACC,KAAM3B,EAAeoiB,KAAM9nB,GAAIoW,EAAS9Q,OAAOtF,IAC7E6X,EAASmX,GAAmB3qB,UAES/B,IAApC+B,EAAyBrD,SACtBsuB,EACCjrB,EAAyBrD,OAAS,CAACqG,KAAM3B,EAAeoiB,KAAM9nB,GAAIoW,EAAS9Q,OAAOtF,IAElFqE,EAAyBtD,SAAW,CAACsG,KAAM3B,EAAeoiB,KAAM9nB,GAAIoW,EAAS9Q,OAAOtF,IAEzF6X,EAAS0X,GAAkBhmB,KAAKlF,MAGxCwT,EAASoX,GAAwB7Y,EAAS9Q,YAyC9CiE,KAAMylB,GACN1lB,OA9ByB,SAACyF,GAAD,OAAiC,SAAC8I,GAC3D,IAAMzB,EAA4CD,GAA2BpH,GACvD,MAAlBqH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QA0BT1f,KAvBuB,SAAC/D,GACxB,IAAMoW,EAA4CD,GAAyBnW,GAK3E,OAJsB,MAAlBoW,EAASE,MAET3W,QAAQ8C,KAAK2T,EAASC,SAEnBD,EAAS9Q,SCpBdkqB,GAAyB,SAAChvB,GAAD,OAAyC,SAACqX,GACrE,IAAMzB,EAAgDD,GAA6B3V,GAC7D,MAAlB4V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAoBPgM,GAA8B,SAACjvB,GAAD,OAAyC,SAACqX,EAAUK,GACpF,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,IAASC,GAAK2D,qBAAuB5D,IAASC,GAAK4D,8BACnD9X,EAAS+W,GAAYgB,uBAAuBpvB,IAE5CqX,EAASF,GAAcN,YAAY,0CAA4CyU,MAI1EyD,GAAoB,CAC7BF,OA/D6B,SAC7B7uB,EACA6D,EACAirB,GAH6B,OAIlB,SAACzX,GACZ,IAAMzB,EAAgDD,GAA6B3V,GAC7D,MAAlB4V,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B/T,IAAT+B,SAC0C/B,IAArC+B,EAAqBqJ,cACrBrJ,EAAqB+C,KAAO,CAACC,KAAM3B,EAAeiM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAC5E6X,EAASuX,GAAc7lB,KAAKlF,UAEW/B,IAAtC+B,EAAyBtD,WACtBuuB,EACCjrB,EAAyBrD,OAAS,CAACqG,KAAM3B,EAAeiM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAEjFqE,EAAyBtD,SAAW,CAACsG,KAAM3B,EAAeiM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAExF6X,EAAS2X,GAAuBnrB,MAGxCwT,EAAS4X,GAA4BrZ,EAAS9Q,YAyClDiE,KAAMimB,GACNlmB,OA9B6B,SAAC9I,GAAD,OAAyC,SAACqX,GACvE,IAAMzB,EAAgDD,GAA+B3V,GAC/D,MAAlB4V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QA0BT1f,KAvB2B,SAAC/D,GAC5B,IAAMoW,EAAgDD,GAA6BnW,GAKnF,OAJsB,MAAlBoW,EAASE,MAET3W,QAAQ8C,KAAK2T,EAASC,SAEnBD,EAAS9Q,QAkBhBuqB,OAAQJ,IC5ECK,GAAb,oDACI,aAAuC,IAAD,EAAnB7uB,EAAmB,uDAAJ,GAAI,4BAClC,gBADeA,OAAmB,EAD1C,UAA6BuM,IC+DhBuiB,GApDY,kBAAgB,SAAClY,GACtC,IAAM1I,EAAiB,IAAI2gB,GACrB1Z,EAAwCD,GAAuBhH,GAC/C,MAAlBiH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAASiV,GAAqBiB,gBAAgB3X,EAAS9Q,WA6C9CyqB,GAjCU,SAAC5gB,GAAD,OAA8B,SAAC0I,GAClD,IAAMzB,EAAwCD,GAAuBhH,GAC/C,MAAlBiH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAASiV,GAAqBiB,gBAAgB3X,EAAS9Q,WA2B9CyqB,GAxBY,SAAC5gB,GAAD,OAA8B,SAAC0I,GACpD,IAAMzB,EAAwCD,GAAuBhH,GAC/C,MAAlBiH,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAAS4L,MACT5L,EAAS4L,QAiBAsM,GAda,SAACxgB,EAAiBygB,EAAgBhe,GAAlC,OAAoE,SAAC6F,GAC3F,IAAMzB,EAA8DD,GAChE5G,EACAygB,EACAhe,GAEkB,MAAlBoE,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAAS4L,MACT5L,EAAS4L,QC5BPwM,GAAoB,SAACniB,GAAD,OAAuC,SAAC+J,EAAUK,GACxE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,IAASC,GAAKmE,mBACdrY,EAAS+W,GAAYuB,mBAAmBriB,IAExC+J,EAASF,GAAcN,YAAY,yCAA2CyU,MAIzEsE,GApCgB,kBAAgB,SAACvY,GAC1C,IAAM/J,EAA0B,IAAID,GAC9BuI,EAA6CD,GAA4BrI,GACzD,MAAlBsI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAASoY,GAAkB7Z,EAAS9Q,WCZ3B+qB,GAAb,oDACI,aAMG,IAAD,EALSpvB,EAKT,uDALwB,GACfI,EAIT,wDAJsC,EAC7BC,EAGT,uDAHuC,GAC9BE,EAET,uDAFuC,CAAC,CAACxB,IAAK,EAAGiB,KAAM,YAC9CM,EACT,uDADwB,GACxB,4BACE,gBANON,OAKT,EAJSI,oBAIT,EAHSC,oBAGT,EAFSE,YAET,EADSD,OACT,EAPN,UAA4BiM,ICAf8iB,GACT,aAGG,IAFQlvB,EAET,uDAFwB,IAAIivB,GACnBrmB,EACT,uDAD+C,IAAIwkB,GACnD,yBAFSptB,OAET,KADS4I,mBCgCTumB,GAAgB,SAACnvB,GAAD,OAA6B,SAACyW,EAAUK,GAC1D,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC/BA,IAASC,GAAKyE,WAAa1E,IAASC,GAAK0E,mBACzC5Y,EAAS+W,GAAY2B,cAAcnvB,IAEnCyW,EAASF,GAAcN,YAAY,oCAAsCyU,MAIpE4E,GA5BS,SAACtvB,GAAD,OAA6B,SAACyW,GAChD,IAAMzB,EAAwCD,GAAuB/U,GAC/C,MAAlBgV,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,QAsBAiN,GAnBW,SAACtvB,GAAD,OAA6B,SAACyW,GAClD,IAAMzB,EAAwCD,GAAyB/U,GACjD,MAAlBgV,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MACT5L,EAAS4L,QAYAiN,GAvCW,kBAAgB,SAAC7Y,GACrC,IAAMzW,EAAgB,IAAIkvB,GACpBla,EAAwCD,GAAuB/U,GAC/C,MAAlBgV,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MACT5L,EAAS0Y,GAAcna,EAAS9Q,WC6D9BqrB,GAAwB,SAACxpB,GAAD,OAAqC,SAAC0Q,GAChE,IAAMzB,EAAgDD,GAA+BhP,GAC/D,MAAlBiP,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAGPmN,GAAqB,SAACzpB,GAAD,OAAqC,SAAC0Q,EAAUK,GACvE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,EAAK+E,WAAW9E,GAAK+E,oBACrBjZ,EAAS+W,GAAYmC,cAAc5pB,IAEnC0Q,EAASF,GAAcN,YAAY,oCAAsCyU,MAIpEkF,GAAW,CACpBznB,KAAMonB,GACNrnB,OAtD4B,SAACnC,EAAuB6O,GAAxB,OAAgE,SAAC6B,GAE7F,GAAI7B,EAAa,CACb,IAAMib,EAA4B7rB,EAAUG,SAASyQ,GAErDib,EAAa/iB,iBAAiBvN,SAAQ,SAACuwB,GAE/BA,EAAKjgB,eAAe7J,KAAKC,OAASnC,EAAUoC,MAC5C4pB,EAAKjgB,eAAe7J,KAAKpH,KAAOmH,EAAK8J,eAAejR,KAEpDkxB,EAAKjgB,eAAe7J,KAAO,CAACC,KAAMnC,EAAUyI,OAC5CkK,EAAS8Y,GAAsBO,QAIvCD,EAAalyB,UAAU4B,SAAQ,SAACsP,GACxBA,EAAKjP,OAAOqG,OAASnC,EAAUoC,MAAQ2I,EAAKjP,OAAOhB,KAAOmH,EAAK8J,eAAejR,KAC9EiQ,EAAKjP,OAAS,CAACqG,KAAMnC,EAAUyI,OAC/BkK,EAASsZ,GAAa5nB,KAAK0G,KAE3BA,EAAKlP,SAASsG,OAASnC,EAAUoC,MAAQ2I,EAAKlP,SAASf,KAAOmH,EAAK8J,eAAejR,KAClFiQ,EAAKlP,SAAW,CAACsG,KAAMnC,EAAUyI,OACjCkK,EAASsZ,GAAa5nB,KAAK0G,QAKvC,IAAMmG,EAAgDD,GAAiChP,GACjE,MAAlBiP,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAwBToM,OAAQe,GACRvB,OAtF4B,SAC5BloB,EACA9C,EACAirB,GAH4B,OAIjB,SAACzX,GACZ,IAAMzB,EAAgDD,GAA+BhP,GAC/D,MAAlBiP,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,gBAE/B/T,IAAT+B,SACiD/B,IAA5C+B,EAAyB4M,iBACzB5M,EAAyB4M,eAAe7J,KAAO,CAC5CC,KAAMnC,EAAUoC,KAChBtH,GAAIoW,EAAS9Q,OAAO2L,eAAejR,IAEvC6X,EAAS8Y,GAAsBtsB,UAEG/B,IAAjC+B,EAAoBtD,WACjBuuB,EACCjrB,EAAoBrD,OAAS,CAACqG,KAAMnC,EAAUoC,KAAMtH,GAAIoW,EAAS9Q,OAAO2L,eAAejR,IAEvFqE,EAAoBtD,SAAW,CAACsG,KAAMnC,EAAUoC,KAAMtH,GAAIoW,EAAS9Q,OAAO2L,eAAejR,IAE9F6X,EAASsZ,GAAa5nB,KAAKlF,MAGnCwT,EAAS+Y,GAAmBxa,EAAS9Q,aCDvC8rB,GAAoB,SAAC5wB,GAAD,OAAoC,SAACqX,GAC3D,IAAMzB,EAA2CD,GAAwB3V,GACnD,MAAlB4V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,YAmC9Cgb,GAAsB,SAACC,GACzB,IAAMlb,EAA2CD,GAAwBmb,GAKzE,OAJsB,MAAlBlb,EAASE,MAET3W,QAAQ8C,KAAK2T,EAASC,SAEnBjR,EAAUG,SAAS6Q,EAAS9Q,SAGjCisB,GAAyB,SAAC/wB,GAAD,OAAoC,SAACqX,EAAUK,GAC1E,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,IAASC,GAAKyF,wBAA0BzF,GAAK0F,iCAC7C5Z,EAAS+W,GAAY8C,kBAAkBL,GAAoB7wB,EAASR,MAEpE6X,EAASF,GAAcN,YAAY,wCAA0CyU,MAIxEqF,GAAe,CACxB9B,OAnFwB,SAAC7uB,EAAsB6D,EAAqCrD,GAA5D,OAA2F,SACnH6W,GAEA,IAAMzB,EAA2CD,GAAwB3V,GACnD,MAAlB4V,EAASE,KACTuB,EAASF,GAAcN,YAAYjB,EAASC,WAExChS,SACiD/B,IAA5C+B,EAAyB4M,iBACzB5M,EAAyB4M,eAAe7J,KAAO,CAACC,KAAMnC,EAAUyM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAC1F6X,EAASmZ,GAASznB,KAAKlF,UAEW/B,IAAjC+B,EAAoBtD,WACjBC,EACCqD,EAAoBrD,OAAS,CAACqG,KAAMnC,EAAUyM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAEvEqE,EAAoBtD,SAAW,CAACsG,KAAMnC,EAAUyM,IAAK3R,GAAIoW,EAAS9Q,OAAOtF,IAE9E6X,EAASuZ,GAAkB/sB,MAGnCwT,EAAS0Z,GAAuBnb,EAAS9Q,YA+D7CuqB,OAAQ0B,GACRhoB,KAAM6nB,GACN9nB,OAtDwB,SAAC9I,EAAsBwV,GAAvB,OAA+D,SAAC6B,GAExF,GAAI7B,EAAa,CACb,IAAMib,EAA4B7rB,EAAUG,SAASyQ,GAErDib,EAAa/iB,iBAAiBvN,SAAQ,SAACwG,GAC/BA,EAAK8J,eAAe7J,KAAKC,OAASnC,EAAUyM,KAAOxK,EAAK8J,eAAe7J,KAAKpH,KAAOQ,EAASR,KAC5FmH,EAAK8J,eAAe7J,KAAO,CAACC,KAAMnC,EAAUyI,OAC5CkK,EAASmZ,GAASznB,KAAKpC,QAI/B8pB,EAAalyB,UAAU4B,SAAQ,SAACsP,GACxBA,EAAKjP,OAAOqG,OAASnC,EAAUyM,KAAO1B,EAAKjP,OAAOhB,KAAOQ,EAASR,KAClEiQ,EAAKjP,OAAS,CAACqG,KAAMnC,EAAUyI,OAC/BkK,EAASuZ,GAAkBnhB,KAE3BA,EAAKlP,SAASsG,OAASnC,EAAUyM,KAAO1B,EAAKlP,SAASf,KAAOQ,EAASR,KACtEiQ,EAAKlP,SAAW,CAACsG,KAAMnC,EAAUyI,OACjCkK,EAASuZ,GAAkBnhB,QAKvC,IAAMmG,EAA2CD,GAA0B3V,GACrD,MAAlB4V,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QA2BT1f,KAAMstB,IClGGM,GAAb,oDACI,aAAqE,IAAD,EAAjD1wB,EAAiD,uDAAlC,GAAWotB,EAAuB,uDAAP,MAAO,4BAChE,gBADeptB,OAAiD,EAAvBotB,QAAuB,EADxE,UAA6B7gB,ICoCvBokB,GAAsB,SAACloB,GAAD,OAA8B,SAACmO,EAAUK,GACjE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC/BA,IAASC,GAAKyE,WAAa1E,IAASC,GAAK0E,mBACzC5Y,EAAS+W,GAAYiD,eAAenoB,IAEpCmO,EAASF,GAAcN,YAAY,oCAAsCyU,MAIpEgG,GAvCY,kBAAgB,SAACja,GACtC,IAAMnO,EAAiB,IAAIioB,GACrBvb,EAAwCD,GAAqBzM,GAC7C,MAAlB0M,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MACT5L,EAAS+Z,GAAoBxb,EAAS9Q,WCqBpCysB,GAAyB,SAAC5rB,GAAD,OAAwC,SAAC0R,EAAUK,GAC9E,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC/BA,IAASC,GAAKiG,cACdna,EAAS+W,GAAYqD,kBAAkB9rB,IAEvC0R,EAASF,GAAcN,YAAY,wCAA0CyU,MAIxEoG,GA3Ba,SAAC/rB,GAAD,8CAAwC,WAAO0R,GAAP,eAAAnF,EAAA,sEACHyD,GAA+BhQ,GAD5B,OAExC,OADhBiQ,EADwD,QAEjDE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MANqD,2CAAxC,uDA2BbyO,GAlBe,SAAC/rB,GAAD,8CAAwC,WAAO0R,GAAP,eAAAnF,EAAA,sEACLyD,GAA8BhQ,GADzB,OAE1C,OADhBiQ,EAD0D,QAEnDE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MANuD,2CAAxC,uDAkBfyO,GAtCe,kBAAgB,SAACra,GACzC,IAAM1R,EAA2B,IAAI2V,GAC/B1F,EAA+CD,GAA+BhQ,GAC9D,MAAlBiQ,EAASE,OACT3W,QAAQovB,IAAI3Y,GACZyB,EAASF,GAAcN,YAAYjB,EAASC,WAEhDwB,EAAS4L,MACT5L,EAASka,GAAuB3b,EAAS9Q,WCCvC6sB,GAAoB,SAAC9jB,GAAD,OAAoC,SAACwJ,GAC3D,IAAMzB,EAA2CD,GAA0B9H,GACrD,MAAlB+H,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT5L,EAASua,GAAuBhc,EAAS9Q,SACzCuS,EAASiV,GAAqBE,uBAAuB5W,EAAS9Q,OAAOtF,OAqBnEqyB,GAAqB,SAAC3qB,GACxB,IAAM0O,EAA4CD,GAA2BzO,GAC7E,OAAsB,MAAlB0O,EAASE,KACF,KAEJF,EAAS9Q,QAed8sB,GAAyB,SAAC/jB,GAAD,OAAoC,SAACwJ,EAAUK,GAC1E,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAE/BA,IAASC,GAAKuG,cACdza,EAAS+W,GAAY2D,kBAAkBlkB,IAEvCwJ,EAASF,GAAcN,YAAY,wCAA0CyU,MAIxE0G,GAAe,CACxBjpB,KAAM4oB,GACN7oB,OAlDwB,SAAC+E,GAAD,OAAoC,SAACwJ,EAAUK,GACvE,IAAMua,EAA0CJ,GAAmBhkB,EAASrO,IAE5E,GAA4B,OAAxByyB,EAA8B,CAAC,IAAD,IACxBrc,EAA4CD,GAA6Bsc,GAEzD,MAAlBrc,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,WAG5C,UAAA6B,IAAW2N,cAAc+C,6BAAzB,mBAAgD3a,kBAAhD,eAA4DjO,MAAOqO,EAASrO,IAC5E6X,EAASiV,GAAqBQ,sBAGlCzV,EAAS4L,SAqCboM,OAAQuC,GACRrnB,QAASsnB,GACThD,OApEwB,kBAAgB,SAACxX,GACzC,IAAMxJ,EAAuB,IAAIN,GACjC8J,EAASsa,GAAkB9jB,MAmE3B0D,QA5BiB,SAACrK,EAAoBsoB,EAAgBhe,GAArC,OAAuE,SAAC6F,GACzF,IAAMzB,EAA4DD,GAC9DzO,EACAsoB,EACAhe,GAEkB,MAAlBoE,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,U,SrBvBDsI,K,UAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,wBAAAA,E,wBAAAA,E,sBAAAA,E,wCAAAA,E,8BAAAA,E,gCAAAA,E,mDAAAA,E,wBAAAA,E,sCAAAA,E,0CAAAA,E,8DAAAA,E,kCAAAA,E,8BAAAA,E,4CAAAA,E,gDAAAA,E,oEAAAA,E,wCAAAA,E,sDAAAA,E,yCAAAA,Q,KA0BZ,IsB/DY2G,GAIAC,GtBgGNC,GAA6B,CAC/BC,aAAc,GACd/G,KAAMC,GAAK+G,KACX/wB,YAAa,GAGXgxB,GAAY9b,YAAY,CAC1BhW,KAAM,OACNiW,aAAc0b,GACdxb,SAAU,CACN+X,mBAAoB,SAAC3f,EAAO1P,GACpB0P,EAAMsc,OAASC,GAAKmD,gBACpB1f,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,0CAA4C+M,EAAMsc,OAGvEkH,cAAe,SAACxjB,EAAO1P,GACnB0P,EAAMzN,WAAajC,EAAOwX,SAE9BsY,uBAAwB,SAACpgB,EAAO1P,GACxB0P,EAAMsc,OAASC,GAAK2D,qBAAuBlgB,EAAMsc,OAASC,GAAK4D,8BAC/DngB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,0CAA4C+M,EAAMsc,OAGvE+C,eAAgB,SAACrf,EAAO1P,GAChB0P,EAAMsc,OAASC,GAAK4C,WACpBnf,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,qCAAuC+M,EAAMsc,OAGlEyE,cAAe,SAAC/gB,EAAO1P,GACf0P,EAAMsc,OAASC,GAAKyE,WAAahhB,EAAMsc,OAASC,GAAK0E,mBACrDjhB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,oCAAsC+M,EAAMsc,OAGjEmH,kBAAmB,SAACzjB,EAAO1P,GACnB0P,EAAMsc,OAASC,GAAK0E,mBACpBjhB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,oCAAsC+M,EAAMsc,OAGjEmG,kBAAmB,SAACziB,EAAO1P,GACnB0P,EAAMsc,OAASC,GAAKiG,cACpBxiB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,wCAA0C+M,EAAMsc,OAGrEyG,kBAAmB,SAAC/iB,EAAO1P,GACnB0P,EAAMsc,OAASC,GAAKuG,cACpB9iB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,wCAA0C+M,EAAMsc,OAGrEiF,cAAe,SAACvhB,EAAO1P,GACf0P,EAAMsc,KAAK+E,WAAW9E,GAAK+E,oBAC3BthB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,oCAAsC+M,EAAMsc,OAGjEoH,gBAAiB,SAAC1jB,EAAO1P,GACjB0P,EAAMsc,OAASC,GAAKoH,0BACpB3jB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,sCAAwC+M,EAAMsc,OAGnEqE,mBAAoB,SAAC3gB,EAAO1P,GACpB0P,EAAMsc,OAASC,GAAKmE,mBACnB1gB,EAAMqjB,aAA+B/kB,UAAYhO,EAAOwX,QAEzD3X,QAAQ8C,KAAK,yCAA2C+M,EAAMsc,OAGtE+F,eAAgB,SAACriB,EAAO1P,GAChB0P,EAAMsc,OAASC,GAAKqH,WACpB5jB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,qCAAuC+M,EAAMsc,OAGlE4F,kBAAmB,SAACliB,EAAO1P,GACnB0P,EAAMsc,OAASC,GAAKyF,wBAA0BzF,GAAK0F,iCACnDjiB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,wCAA0C+M,EAAMsc,OAGrEuH,mBAAoB,SAAC7jB,EAAO1P,GACpB0P,EAAMsc,OAASC,GAAK0F,iCACpBjiB,EAAMqjB,aAAe/yB,EAAOwX,QAE5B3X,QAAQ8C,KAAK,wCAA0C+M,EAAMsc,OAGrEwH,uBAAwB,SAAC9jB,EAAO1P,GACxB0P,EAAMsc,OAASC,GAAKmE,qBACpB1gB,EAAMqjB,aAAe/yB,EAAOwX,UAGpCic,kBAAmB,SAAC/jB,GAChBA,EAAMqjB,aAAe,IAEzBW,QAAS,SAAChkB,EAAO1P,GACb0P,EAAMsc,KAAOhsB,EAAOwX,YAKnBsX,GAAcmE,GAAUj0B,QAK/B20B,GAA0B,SAAC3H,GAAD,OAA0B,SAACjU,EAAUK,GAC7D4T,IAAS5T,IAAW2T,KAAKC,OACzBhpB,aAAaO,QAlKM,OAkKsByoB,GACzCjU,EAASkb,GAAUj0B,QAAQ00B,QAAQ1H,OA2KrC4H,GAAyB,SAC3BC,EACAtvB,EACArD,GAH2B,OAIhB,SAAC6W,GACZA,EAAS4b,GAAwB1H,GAAK+E,qBACtCjZ,EAASmZ,GAAS3B,OAAOsE,EAAStvB,EAAMrD,MAsGtCgqB,GAAqB,SAAClsB,EAAqB0Q,GAC7C,IAAMyb,EAAkB,GA2CxB,OAzCAnsB,EAAQ6B,SAAQ,SAACb,GAAY,IAAD,IAClBorB,EAAqD,UAAG1b,EAAM+T,WAAWjlB,OAAOyF,MAClF,SAACqnB,GAAD,OAAUA,EAAKrjB,MAAM/H,KAAOF,EAAOO,yBADoB,aAAG,EAE3D2J,gBAEGmhB,EAAqD,UAAG3b,EAAM+T,WAAWjlB,OAAOyF,MAClF,SAACqnB,GAAD,OAAUA,EAAKrjB,MAAM/H,KAAOF,EAAOM,2BADoB,aAAG,EAE3D4J,gBAEGqhB,EAAuB,GAC7B,GAAIvrB,EAAOG,aAAewc,GAAW6O,QACjCD,EAAWxqB,KAAKf,EAAOS,iBACpB,CAAC,IAAD,EACGgrB,EAA6B,UAAG/b,EAAM+T,WAAWvkB,MAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,iBAAjE,aAAG,EAChCkB,KAAKH,KACPsqB,GACAF,EAAWxqB,KAAK0qB,GAIxB,IAAMlkB,EAAkBvH,EAAOG,WAAWurB,SAAS,QAAU7P,GAAU8I,KAAO9I,GAAU2P,QAExF,GAAIJ,GAAyBC,EAAuB,CAChD,IAMmB,EANbM,EAAmCR,EAAOlnB,MAC5C,SAAC2nB,GAAD,OACIA,EAAMR,sBAAsBlhB,gBAAgBhK,KAAOkrB,EAAsBlhB,gBAAgBhK,IACzF0rB,EAAMP,sBAAsBnhB,gBAAgBhK,KAAOmrB,EAAsBnhB,gBAAgBhK,MAGjG,GAAIyrB,GACA,EAAAA,EAAcJ,YAAWxqB,KAAzB,QAAiCwqB,QAEjCJ,EAAOpqB,KAAK,CACRqqB,wBACAC,wBACAE,aACAhkB,aAKT4jB,GAIE2I,GAAcb,GAAUna,QAKxBib,GACG,SAACrkB,GAAD,OAA4BA,EAAMqc,KAAKC,MAD1C+H,GAEU,SAACrkB,GAChB,OAAOA,EAAMqc,KAAKC,OAASC,GAAK4C,YAAenf,EAAMqc,KAAKgH,aAA0B9qB,MAC7EyH,EAAMqc,KAAKgH,aACZ,MALDgB,GAOc,SAACrkB,GACpB,OAAOA,EAAMqc,KAAKC,OAASC,GAAKmD,iBAAoB1f,EAAMqc,KAAKgH,aAA6BnlB,YACrF8B,EAAMqc,KAAKgH,aACZ,MAVDgB,GAYkB,SAACrkB,GACxB,OAAOA,EAAMqc,KAAKC,OAASC,GAAK2D,qBAC/BlgB,EAAMqc,KAAKC,OAASC,GAAK4D,+BACrBngB,EAAMqc,KAAKgH,aAAiC9xB,SAC1CyO,EAAMqc,KAAKgH,aACZ,MAjBDgB,GAmBS,SAACrkB,GACf,OAAOA,EAAMqc,KAAKC,OAASC,GAAKyE,WAC/BzE,GAAK0E,oBAAuBjhB,EAAMqc,KAAKgH,aAAyBzxB,KAC1DoO,EAAMqc,KAAKgH,aACZ,MAvBDgB,GA8Ba,SAACrkB,GACnB,OAAOA,EAAMqc,KAAKC,OAASC,GAAKiG,eAAkBxiB,EAAMqc,KAAKgH,aAAgC5W,WACtFzM,EAAMqc,KAAKgH,aACZ,MAjCDgB,GAmCa,SAACrkB,GACnB,OAAKA,EAAMqc,KAAKC,OAASC,GAAKuG,eAAiB9iB,EAAMqc,KAAKC,OAASC,GAAK+H,uBAA0BtkB,EAAMqc,KAAKgH,aAIxGrjB,EAAMqc,KAAKC,OAASC,GAAKmE,oBAAuB1gB,EAAMqc,KAAKgH,aACpDrjB,EAAMqc,KAAKgH,aAA+BxkB,SAG/C,KAPKmB,EAAMqc,KAAKgH,cArClBgB,GA8Cc,SAACrkB,GACpB,GACIA,EAAMqc,KAAKC,OAASC,GAAKoH,2BACxB3jB,EAAMqc,KAAKgH,aAA0BzyB,iBACxC,CAAC,IAAD,EACQ2zB,EAAyBvkB,EAAMqc,KAAKgH,aAEpCmB,EAAmCxkB,EAAM+T,WAAWjlB,OAAOyF,MAC7D,SAACqnB,GAAD,OAAUA,EAAKrjB,MAAM/H,KAAO+zB,EAAa1zB,kBAGvC4zB,EAAmCzkB,EAAM+T,WAAWjlB,OAAOyF,MAC7D,SAACqnB,GAAD,OAAUA,EAAKrjB,MAAM/H,KAAO+zB,EAAa3zB,oBAGvCmrB,EACFwI,EAAa9zB,aAAewc,GAAW6O,QACjCyI,EAAaxzB,aACb,UAAA+iB,GAAsCyQ,EAAa7zB,OAAnDojB,CAA2D9T,UAA3D,eAAmEpO,KAAKH,OAC1E,sBAEFoG,EAAkB0sB,EAAa9zB,WAAWurB,SAAS,QAAU7P,GAAU8I,KAAO9I,GAAU2P,QAE9F,OAAI0I,GAAcC,EACP,CACH/I,sBAAuB8I,EAAWhqB,gBAClCmhB,sBAAuB8I,EAAWjqB,gBAClCqhB,WAAY,CAACE,GACblkB,KAAMA,GAGH,KAGX,OAAO,MAhFNwsB,GAmFa,SAACrkB,GACnB,IAhJoB0kB,EAAkCxH,EAgJlDzB,EAAkB,GAKtB,OAHIzb,EAAMqc,KAAKC,OAASC,GAAK+E,oBAAuBthB,EAAMqc,KAAKgH,aAAiC5hB,iBAlJ5EijB,EAmJY1kB,EAAMqc,KAAKgH,aAnJWnG,EAmJsBld,EAAxEyb,EAjJCD,GAAmBkJ,EAAgBp1B,QAAS4tB,IAmJ1CzB,GAzFF4I,GA2Fc,SAACrkB,GAEpB,OAAIA,EAAMqc,KAAKC,OAASC,GAAKoI,gBAAmB3kB,EAAMqc,KAAKgH,aAA8B/kB,UAC7E0B,EAAMqc,KAAKgH,aAGnBrjB,EAAMqc,KAAKC,OAASC,GAAKmE,oBAAuB1gB,EAAMqc,KAAKgH,aAA+B/kB,UAClF0B,EAAMqc,KAAKgH,aAA+B/kB,UAG/C,MArGF+lB,GAuGa,SAACrkB,GACnB,OAAOA,EAAMqc,KAAKC,OAASC,GAAKqI,yBAA4B5kB,EAAMqc,KAAKgH,aAA4BnlB,YAC5F8B,EAAMqc,KAAKgH,aACZ,MA1GDgB,GA4GS,SAACrkB,GACf,OAAQA,EAAMqc,KAAKC,MACf,KAAKC,GAAK+E,mBACN,OAAQthB,EAAMqc,KAAKgH,aAAiC5hB,eAC7CzB,EAAMqc,KAAKgH,aACZ,KACV,KAAK9G,GAAKoH,0BACN,OAAQ3jB,EAAMqc,KAAKgH,aAA4B1rB,KACxCqI,EAAMqc,KAAKgH,aAA4B1rB,KACxC,KACV,QACI,OAAO,OAvHV0sB,GA0HW,SAACrkB,GACjB,OAAOA,EAAMqc,KAAKC,OAASC,GAAKoH,2BAA8B3jB,EAAMqc,KAAKgH,aAA0B5yB,WAC5FuP,EAAMqc,KAAKgH,aACZ,MA7HDgB,GA+Ha,SAACrkB,GACnB,OAAQA,EAAMqc,KAAKC,OAASC,GAAKyF,wBAA0BzF,GAAK0F,mCAC/DjiB,EAAMqc,KAAKgH,aAA4BjxB,WACjC4N,EAAMqc,KAAKgH,aACZ,MAnIDgB,GAqIc,SAACrkB,GACpB,OAAOA,EAAMqc,KAAKC,OAASC,GAAK0F,kCAC/BjiB,EAAMqc,KAAKgH,aAA6B/wB,WAClC0N,EAAMqc,KAAKgH,aACZ,MAcDwB,GAAc,CACvBb,QAAS,CACLc,UA3bwB,SAACvsB,GAAD,OAAgC,SAAC8P,GAC7DA,EAAS4b,GAAwB1H,GAAK4C,aAElC9W,OADUvV,IAAVyF,EACS+mB,KAEAiE,GAAUj0B,QAAQ+vB,eAAe9mB,MAub1CwsB,cA9a4B,SAACv0B,GAAD,OAA0B,SAAC6X,EAAUK,GACrE,IAAMnQ,EAA8BmQ,IAAWqL,WAAWjlB,OAAOyF,MAAK,SAACywB,GAAD,OAASA,EAAIzsB,MAAM/H,KAAOA,KAC5F+H,IACA8P,EAAS4b,GAAwB1H,GAAK4C,aACtC9W,EAASkb,GAAUj0B,QAAQ+vB,eAAe9mB,OA2a1C0sB,SAvZuB,SAACrzB,GAAD,OAA8B,SAACyW,GAC1DA,EAAS4b,GAAwB1H,GAAKyE,YAElC3Y,OADSvV,IAATlB,EACSsvB,KAEAqC,GAAUj0B,QAAQyxB,cAAcnvB,MAmZzCszB,aAza2B,SAAC10B,GAAD,OAA0B,SAAC6X,EAAUK,GACpE,IAAM9W,EAA4B8W,IAAWqL,WAAWvkB,MAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOA,KAC1FoB,IACAyW,EAAS4b,GAAwB1H,GAAKyE,YACtC3Y,EAASkb,GAAUj0B,QAAQyxB,cAAcnvB,OAsazCuzB,iBAhZ+B,SAAC30B,GAAD,OAA2B,SAAC6X,EAAUK,GACzE,GAAKA,IAAW2T,KAAKgH,aAAyBzxB,KAAM,CAChD,QAAWkB,IAAPtC,EAAkB,CAClB,IAAM40B,EAAoBxvB,EAAUG,SAAS2S,IAAW2T,KAAKgH,cACvDgC,EAA8B,IAAIpT,GACxCoT,EAAY70B,GAAK40B,EAASxzB,KAAKI,UAAUiG,OACzCmtB,EAASxzB,KAAKI,UAAUX,KAAKg0B,GAC7Bhd,EAASkb,GAAUj0B,QAAQyxB,cAAcqE,IACzC50B,EAAK60B,EAAY70B,GAErB6X,EAASkb,GAAUj0B,QAAQk0B,cAAchzB,IACzC6X,EAAS4b,GAAwB1H,GAAK0E,wBAsYtCqE,iBAna0B,SAAC90B,GAAD,OAA0B,SAAC6X,EAAUK,GAC9DA,IAAW2T,KAAKgH,aAAyBzxB,MAC1CyW,EAAS4b,GAAwB1H,GAAK0E,qBACtC5Y,EAASkb,GAAUj0B,QAAQk0B,cAAchzB,KAEzC6X,EAAS4b,GAAwB1H,GAAK+G,SA+ZtCiC,UAlTwB,SAACrrB,GAAD,OAA+B,SAACmO,GAC5DA,EAAS4b,GAAwB1H,GAAKqH,aAElCvb,OADUvV,IAAVoH,EACSooB,KAEAiB,GAAUj0B,QAAQ+yB,eAAenoB,MA8S1CsrB,aApY2B,SAAC7uB,GAAD,OAAyC,SAAC0R,GACzEA,EAAS4b,GAAwB1H,GAAKiG,gBAElCna,OADavV,IAAb6D,EACS+rB,KAEAa,GAAUj0B,QAAQmzB,kBAAkB9rB,MAgY7C8uB,aAxX2B,SAACvtB,GAAD,OAAmC,SAACmQ,GAEnE,GADAA,EAAS4b,GAAwB1H,GAAKuG,gBAClC5qB,EAAY,CACZ,IAAM0O,EAA4CD,GAA2BzO,GACvD,MAAlB0O,EAASE,MACTuB,EAASkb,GAAUj0B,QAAQyzB,kBAAkBntB,EAAUG,SAAS6Q,EAAS9Q,OAAO2I,cAChF4J,EAASiV,GAAqBC,mBAAmB3W,EAAS9Q,UAE1DuS,EAASF,GAAcN,YAAYjB,EAASC,eAGhDwB,EAAS2a,GAAanD,YA8WtB6F,mBA7XiC,kBAAgB,SAACrd,GACtDA,EAAS4b,GAAwB1H,GAAK+H,yBA6XlCqB,cA7S4B,SAACn1B,GAAD,OAA2B,SAAC6X,GAE5D,GADAA,EAAS4b,GAAwB1H,GAAKmE,qBAClClwB,EAAI,CACJ,IAAMoW,EAA6CD,GAA4BnW,GACzD,MAAlBoW,EAASE,KACTuB,EAASkb,GAAUj0B,QAAQqxB,mBAAmB/qB,EAAUG,SAAS6Q,EAAS9Q,UAE1EuS,EAASF,GAAcN,YAAYjB,EAASC,eAGhDwB,EAASuY,QAoSTgF,SAAU1B,GACV2B,aAzQ2B,SAC/B70B,EACA6D,EACArD,GAH+B,OAIpB,SAAC6W,GACZA,EAAS4b,GAAwB1H,GAAKyF,yBACtC3Z,EAASsZ,GAAa9B,OAAO7uB,EAAU6D,EAAMrD,MAoQzCs0B,cAjQ4B,SAAC90B,EAAsBiG,GAAvB,OAA6D,SAACoR,GAC9F,GAAKzS,EAAUC,kBAAkB7E,GAyB7BqX,EAASF,GAAcN,YAAY,0DAvBnC,GADAQ,EAAS4b,GAAwB1H,GAAK0F,mCAClChrB,EACAoR,EAAS+W,GAAYyE,mBAAmB5sB,QACrC,CACH,IAAM8uB,EAA2BnwB,EAAUG,SAAS/E,GAEhDg1B,EAAwC,IAAIhU,GAChDgU,EAAa1zB,WAAatB,EAASR,GACnCu1B,EAAa3zB,WAAWf,KAAK20B,GAE7B3d,EAASsZ,GAAa5nB,KAAKgsB,KAK3BC,EAHoCrE,GAAaptB,KAAKwxB,EAAav1B,IAGpC4B,WAAWmC,MACtC,SAAC0C,GAAD,OAAsC,IAAvBA,EAAU3F,UAAwC,IAAtB2F,EAAUvG,YAIrD2X,EAAS+W,GAAYyE,mBAAmBmC,OA4OhDC,WA/TyB,SAAC31B,GAAD,OAAgC,SAAC+X,GAC9DA,EAAS4b,GAAwB1H,GAAKoH,4BACtCtb,EAASkb,GAAUj0B,QAAQo0B,gBAAgBpzB,MA8TvC41B,UAhXwB,SAACvmB,GAAD,OAA+B,SAAC0I,GAIxDA,EAHC1I,EAGQ2d,GAAqBiB,gBAAgB5e,GAFrC4gB,MAIblY,EAAS4b,GAAwB1H,GAAK4J,eA2WlCC,gBA9U8B,kBAAgB,SAAC/d,GACnDA,EAAS4b,GAAwB1H,GAAK8J,sBA8UlCC,cAzW4B,SAChC1nB,EACA/J,EACArD,GAHgC,OAIrB,SAAC6W,GACZA,EAAS4b,GAAwB1H,GAAKmD,kBACtCrX,EAASuX,GAAcC,OAAOjhB,EAAW/J,EAAMrD,MAoW3C+0B,kBAjW8B,SAClCr0B,EACA2C,EACAirB,GAHkC,OAIvB,SAACzX,GACZA,EAAS4b,GAAwB1H,GAAK2D,sBACtC7X,EAAS0X,GAAkBF,OAAO3tB,EAAe2C,EAAMirB,MA4VnD0G,mBAzViC,SAACx1B,GAAD,OAAyC,SAACqX,GAE3EA,EADa,OAAbrX,QAAkC8B,IAAb9B,EACZizB,GAAwB1H,GAAK4D,+BAE7BhY,GAAcN,YAAY,uDAsVnC4e,kBAtcgC,kBAAgB,SAACpe,GACrDA,EAAS4b,GAAwB1H,GAAKmE,qBACtCrY,EAASkb,GAAUj0B,QAAQw0B,uBAAuB,CAACjlB,SAAU,IAAIN,GAAcD,UAAW,IAAID,QAqc1FqoB,4BA1SiC,SAACl2B,GAAD,OAA2B,SAAC6X,EAAUK,GAC3E,GAAIlY,EAAI,CACJ,IAAMoW,EAA6CD,GAA4BnW,GAC/E,GAAsB,MAAlBoW,EAASE,KAAc,CACvB,IAAM6f,EAA4B/wB,EAAUG,SAAU2S,IAAW2T,KAAKgH,cACtEsD,EAAWroB,UAAY1I,EAAUG,SAAS6Q,EAAS9Q,QACnDuS,EAASkb,GAAUj0B,QAAQw0B,uBAAuB6C,SAElDte,EAASF,GAAcN,YAAYjB,EAASC,cAE7C,CAEH,IAAMvI,EAA0B,IAAID,GAC9BuI,EAA6CD,GAA4BrI,GACzD,MAAlBsI,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,MACT,IAAM0S,EAA4B/wB,EAAUG,SAAU2S,IAAW2T,KAAKgH,cACtEsD,EAAWroB,UAAYsI,EAAS9Q,OAChCuS,EAASkb,GAAUj0B,QAAQw0B,uBAAuB6C,OAuRlDtK,KAxemB,kBAAgB,SAAChU,EAAUK,GAElD,GADAL,EAASkb,GAAUj0B,QAAQy0B,qBACvBrb,IAAW2T,KAAKC,OAASC,GAAKC,KAC9BnU,EAAS4b,GAAwB1H,GAAK+G,WACnC,CACH,IAAMsD,EAA2Ble,IAAW2N,cAAckD,iBAC1D,GAAkB,OAAdqN,GAAsBA,EAAY,EAAG,CAAC,IAAD,EAC/BjvB,EAES,UAAG+Q,IAAW2N,cAAc+C,6BAA5B,aAAG,EAAgD1a,iBAAiBnK,MAC/E,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOo2B,KAGrCve,EADA1Q,EACSusB,GAAuBvsB,GAEvBssB,GAAwB1H,GAAK+G,YAG1Cjb,EAAS4b,GAAwB1H,GAAK+G,UAud1CuD,KA9emB,kBAAgB,SAACxe,GACxCA,EAASkb,GAAUj0B,QAAQy0B,qBAC3B1b,EAAS4b,GAAwB1H,GAAKC,SA6elCjS,KAzfmB,kBAAgB,SAAClC,GACxCA,EAASkb,GAAUj0B,QAAQy0B,qBAC3B1b,EAAS4b,GAAwB1H,GAAKuK,SAwflCC,IArfkB,kBAAgB,SAAC1e,GACvCA,EAASkb,GAAUj0B,QAAQy0B,qBAC3B1b,EAAS4b,GAAwB1H,GAAKyK,UuB7O7BC,GAAb,oDACI,aAAuG,IAAD,EAAnF31B,EAAmF,wDAAxE,EAAUZ,EAA8D,wDAApD,EAAUC,EAA0C,wDAA5B,EAAUuN,EAAkB,wDAAH,EAAG,4BAClG,gBADe5M,UAAmF,EAA9DZ,SAA8D,EAA1CC,aAA0C,EAAlBuN,cAAkB,EAD1G,UAAgCF,K,SDApBklB,O,iBAAAA,I,mBAAAA,I,iBAAAA,I,gBAAAA,Q,cAIAC,O,iBAAAA,I,uBAAAA,I,kBAAAA,Q,KAOL,IEXK+D,GFWCC,GAAuC,SAAC/b,GACjD,IAAOgc,EAAYhc,EAAZgc,SAEP,OACI,yBAAK3b,UAAU,QACV2b,IGPAC,I,MAAmD,SAACjc,GAC7D,IAAOM,EAAqEN,EAArEM,QAAP,EAA4EN,EAA5DS,YAAhB,MAAuBqX,GAAYoE,OAAnC,EAA2C7b,EAAiCL,EAAjCK,UAAW2b,EAAsBhc,EAAtBgc,SAAUG,EAAYnc,EAAZmc,SAEhE,OACI,4BAAQ7b,QAASA,EACTD,UAAWyX,GAAYrX,GAAQ,IAAMJ,EACrC8b,SAAUA,GAEbH,KCLAI,I,MAA2D,SAACpc,GACrE,IAAOM,EAAqDN,EAArDM,QAASG,EAA4CT,EAA5CS,KAAhB,EAA4DT,EAAtCK,iBAAtB,MAAkC,GAAlC,EAAsCgc,EAAsBrc,EAAtBqc,SAAUL,EAAYhc,EAAZgc,SAEhD,OACI,kBAAC,GAAD,CAAa1b,QAASA,EACTG,KAAMA,EACNJ,UAAWA,GAEnBgc,GAAY,kBAAC,KAAD,CAAiBhc,UAAW2b,EAAW,iBAAmB,GAAIzb,KAAM8b,IAChFL,KCfAM,GAAyD,SAACtc,GACnE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACT+b,SAAUpe,GAAWK,QCJpCie,GAA2D,SAACvc,GACrE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACT+b,SAAUpe,GAAWO,QCJpCge,GAA2D,SAACxc,GACrE,IAAOM,EAAWN,EAAXM,QAEP,OAAO,kBAAC,GAAD,CAAiBA,QAASA,EACT+b,SAAUle,e,SCAzBse,GAA+D,SAACzc,GACzE,IAAOM,EAA4BN,EAA5BM,QAASoc,EAAmB1c,EAAnB0c,KAAMrc,EAAaL,EAAbK,UAEtB,OAAO,kBAAC,GAAD,CAAiBC,QAAS,kBAAMA,GAASoc,IACxBjc,KAAMqX,GAAY6E,KAClBN,SAAUK,EAAO7d,eAAc+d,gBAC/Bvc,UAAWA,KCR1Bwc,I,MAA+D,SAAC7c,GACzE,IAAOM,EAAgCN,EAAhCM,QAAS6b,EAAuBnc,EAAvBmc,SAAUW,EAAa9c,EAAb8c,UAI1B,EAA0BC,oBAAkB,GAA5C,mBAAOC,EAAP,KAAcC,EAAd,KAGAC,qBAAU,WACFF,GAAOG,YAAW,kBAAMF,GAAS,KANZ,OAO1B,CAACD,IAUJ,OACI,kBAAC,GAAD,CACIX,SAAUW,OAAQt1B,EAAYuW,GAAWS,MACzC4B,QAXkB,WAClB0c,GAASF,EACTxc,IAEA2c,GAAS,IAQT5c,UAAW2c,EAAQ,6EAA+E,eAClGb,SAAUA,GAETa,EAAQ,YAASt1B,K,SCJjB01B,I,MAAuD,SAACpd,GACjE,IAAOqd,EAAkFrd,EAAlFqd,cAAeC,EAAmEtd,EAAnEsd,SAAUC,EAAyDvd,EAAzDud,YAAaz0B,EAA4CkX,EAA5ClX,MAAO00B,EAAqCxd,EAArCwd,UAAWC,EAA0Bzd,EAA1Byd,YAAapd,EAAaL,EAAbK,UAG5E,OACI,kBAAC,KAAD,CACIqd,gBAAiBD,GAA4B,eAC7Cpd,UAAWA,GAAwB,yBACnCsd,YAAaH,EACbD,YAAaA,EACbz0B,MAAO80B,GAAiB90B,EAAOu0B,GAC/BQ,QAASR,EAAcxlB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEoI,KAAK4d,cAAcC,cAAchmB,EAAEmI,KAAK4d,kBAAgB74B,IAAI+4B,IACpGC,SAAU,SAACn1B,GAAD,OAAWo1B,GAAep1B,EAAOw0B,QAK1Ca,GAAiE,SAACne,GACvE,IAAOqd,EAA0Drd,EAA1Dqd,cAAeC,EAA2Ctd,EAA3Csd,SAAUpX,EAAiClG,EAAjCkG,MAAO7F,EAA0BL,EAA1BK,UAAWod,EAAezd,EAAfyd,YAElD,OACI,kBAAC,KAAD,CACIC,gBAAiBD,GAA4B,qBAC7Cpd,UAAWA,GAAwB,+BACnCvX,MAAO,CAACA,MAAOod,EAAOA,MAAOA,GAC7B2X,QAASR,EAAcxlB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEoI,KAAK4d,cAAcC,cAAchmB,EAAEmI,KAAK4d,kBAAgB74B,IAAI+4B,IACpGC,SAAU,SAACn1B,GAAD,OAAWo1B,GAAep1B,EAAOw0B,IAC3Cc,cAAc,KAcxBJ,GAAuB,SAACK,GAC1B,MAAO,CAACv1B,MAAOu1B,EAAav1B,MAAOod,MAAOmY,EAAane,OAGrDge,GAAiB,SAACp1B,EAAYw0B,GAE5B,IAdkC92B,EAaxB,OAAVsC,EAEAw0B,EAdG,CACHz0B,KAAM,EACNqX,MAHkC1Z,EAcsCsC,GAX7Dod,MAAQ1f,EAAK0f,MAAQ,GAChCpd,MAAOtC,EAAKsC,MAAQtC,EAAKsC,MAAQ,KAajCw0B,EAAS,CAACz0B,KAAM,EAAGC,MAAO,GAAIoX,KAAM,MAItC0d,GAAmB,SAAC90B,EAA2Bu0B,GACjD,IAAIiB,EAAmC,CAACx1B,MAAO,GAAIod,MAAO,IAE1D,GAAIpd,EAAO,CAEP,IAAMy1B,EAA6ClB,EAAcl0B,MAAK,SAAAo1B,GAAM,OAAIA,EAAOz1B,QAAUA,KAE7Fy1B,IACAD,EAAcx1B,MAAQy1B,EAAOz1B,MAC7Bw1B,EAAcpY,MAAQqY,EAAOre,MAGrC,OAAOoe,GCzFEE,GAAkE,SAACxe,GAC5E,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MACxB5E,EAAwByE,OAAOe,OAAOmY,IAEtC4c,EAAqB,SAAChyB,GACxB,IAAIyZ,EAAgB,GACpB,OAAQzZ,GACJ,KAAKoV,GAAWyH,IACZpD,EAAQ,gBACR,MACJ,KAAKrE,GAAW8H,OACZzD,EAAQ,SACR,MACJ,KAAKrE,GAAWgI,KACZ3D,EAAQ,OACR,MACJ,KAAKrE,GAAWkI,gBACZ7D,EAAQ,kBACR,MACJ,KAAKrE,GAAW6O,QACZxK,EAAQ,UAGhB,OAAOA,GAWX,OACI,kBAAC,GAAD,CACImX,cAAen5B,EAAQe,KAAI,SAACC,EAAQC,GAAT,MATxB,CACH0D,IAQyE1D,EAPzE2D,MAHoBzD,EAU6CH,EANjEgb,KAAMue,EAAmBp5B,IAJN,IAACA,KAWpBi4B,SAAU,SAAChH,GAAD,OAAUgH,EAAShH,EAAKxtB,QAClCy0B,YAAaA,EACbz0B,MAAOA,KC/BN41B,GAAuD,SAAC1e,GACjE,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MAC9B,EAA6C61B,KAAtCj7B,EAAP,EAAOA,OAAQk7B,EAAf,EAAeA,cAAeC,EAA9B,EAA8BA,YAE9B,OACI,kBAAC,GAAD,CACIxB,cAAe35B,EAAOuB,KAAI,SAACkI,GAAD,OAAWyxB,EAAczxB,MACnDmwB,SAAU,SAAChH,GAAD,OAAUgH,EAASuB,EAAYr1B,OAAO8sB,EAAKxtB,OAAQpF,KAC7D65B,YAAaA,EACbz0B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKbu1B,GAAiE,SAAC9e,GAC3E,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAA6CyY,KAAtCC,EAAP,EAAOA,cAAel7B,EAAtB,EAAsBA,OAAQm7B,EAA9B,EAA8BA,YAE9B,OACI,kBAAC,GAAD,CACIxB,cAAe35B,EAAOuB,KAAI,SAACkI,GAAD,OAAWyxB,EAAczxB,MACnDmwB,SAAU,SAAChH,GAAD,OAAUgH,EAASuB,EAAYr1B,OAAO8sB,EAAKxtB,OAAQpF,KAC7DwiB,MAAOA,KAKbyY,GAA4B,WAkB9B,MAAO,CAACj7B,OAjBmBkd,YAAY8H,IAiBvBkW,cAfM,SAACzxB,GACnB,MAAO,CACHtE,IAAKsE,EAAMA,MAAM/H,GACjB0D,MAAOqE,EAAMA,MAAM/H,GAAGmE,WACtB2W,KAAM/S,EAAMA,MAAM9G,OAWKw4B,YAPX,SAAC3yB,EAAiBxI,GAClC,IAAK8G,EAAUC,kBAAkB/G,KAAY8G,EAAUC,kBAAkByB,GACrE,OAAOxI,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAO8G,QCpChD6yB,GAAkF,SAAC/e,GAC5F,IAAOsd,EAAqCtd,EAArCsd,SAAUpX,EAA2BlG,EAA3BkG,MAAOvR,EAAoBqL,EAApBrL,QAASqqB,EAAWhf,EAAXgf,QACjC,EAAqDC,GAAkCtqB,EAASqqB,GAAzFE,EAAP,EAAOA,sBAAuBC,EAA9B,EAA8BA,oBAE9B,OACI,kBAAC,GAAD,CACI9B,cAAe6B,IACfhZ,MAAOA,EACPoX,SAAU,SAAChH,GAAD,OAAUgH,EAAS6B,EAAoB31B,OAAO8sB,EAAKxtB,aAK5Ds2B,GAAuE,SAACpf,GACjF,IAAOsd,EAAkDtd,EAAlDsd,SAAUC,EAAwCvd,EAAxCud,YAAaz0B,EAA2BkX,EAA3BlX,MAAO6L,EAAoBqL,EAApBrL,QAASqqB,EAAWhf,EAAXgf,QAC9C,EAAqDC,GAAkCtqB,EAASqqB,GAAzFE,EAAP,EAAOA,sBAAuBC,EAA9B,EAA8BA,oBAE9B,OACI,kBAAC,GAAD,CACI9B,cAAe6B,IACf5B,SAAU,SAAChH,GAAD,OAAUgH,EAAS6B,EAAoB31B,OAAO8sB,EAAKxtB,UAC7Dy0B,YAAaA,EACbz0B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKpB01B,GAAoC,SAACtqB,EAAiBqqB,GACxD,IAAM9X,EAAoCtG,YAAY8H,IAEhD2W,EAAwB,SAACz5B,GAC3B,MAAO,CACHiD,IAAKjD,EAASR,GACd0D,MAAOlD,EAASR,GAAGmE,WACnB2W,KAAMta,EAASS,OAuBvB,MAAO,CAAC64B,sBAnBsB,WAC1B,IAAK10B,EAAUC,kBAAkByc,GAAiB,CAC9C,IAAIyT,EAAkCnwB,EAAUG,SAASuc,GAKzD,OAJAyT,EAAeA,EAAarqB,QAAO,SAACtD,GAAD,OAASA,EAAIjG,UAAY4N,KACxDqqB,IACArE,EAAeA,EAAarqB,QAAO,SAACtD,GAAD,OAASA,EAAI5H,KAAO45B,MAEpDrE,EAAa11B,IAAIo6B,GAE5B,MAAO,IAUoBF,oBAPH,SAAC/5B,GACzB,IAAKoF,EAAUC,kBAAkByc,KAAoB1c,EAAUC,kBAAkBrF,GAC7E,OAAO8hB,EAAe/d,MAAK,SAACoD,GAAD,OAAUA,EAAKnH,KAAOA,QCzChDk6B,GAAkE,SAACtf,GAC5E,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAA6CqZ,KAAtCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,cAAej7B,EAAnC,EAAmCA,OAEnC,OACI,kBAAC,GAAD,CACI64B,cAAe74B,EAAOS,IAAIw6B,GAC1BnC,SAAU,SAAC/oB,GAAD,OAAW+oB,EAASkC,EAAYh2B,OAAO+K,EAAMzL,UACvDod,MAAOA,KAKbqZ,GAA4B,WAC9B,IAAM/6B,EAAoBoc,YAAY8H,IAiBtC,MAAO,CAAC+W,cARc,SAAClrB,GACnB,MAAO,CACH1L,IAAK0L,EAAMnP,GACX0D,MAAOyL,EAAMnP,GAAGmE,WAChB2W,KAAM3L,EAAMlO,OAIGm5B,YAfH,SAACp6B,GACjB,IAAKoF,EAAUC,kBAAkBrF,KAAQoF,EAAUC,kBAAkBjG,GACjE,OAAOA,EAAO2E,MAAK,SAACoL,GAAD,OAAWA,EAAMnP,KAAOA,MAafZ,WC1C3Bk7B,GAA+D,SAAC1f,GACzE,IAAOsd,EAAkDtd,EAAlDsd,SAAUC,EAAwCvd,EAAxCud,YAAaz0B,EAA2BkX,EAA3BlX,MAAO6L,EAAoBqL,EAApBrL,QAASqqB,EAAWhf,EAAXgf,QAC9C,EAAuCW,GAA8BhrB,EAASqqB,GAAvEY,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,gBAMpB,OACI,kBAAC,GAAD,CACIxC,cAAeuC,IACf92B,MANGA,GAAoB,IAAXA,OAAepB,EAAYoB,EAAMS,gBAAc7B,EAO3D61B,YAAaA,EACbD,SAAU,SAAC9pB,GAAD,OAAe8pB,EAASuC,EAAgBr2B,OAAOgK,EAAU1K,aAKlEg3B,GAA0E,SAAC9f,GACpF,IAAOsd,EAAqCtd,EAArCsd,SAAUpX,EAA2BlG,EAA3BkG,MAAOvR,EAAoBqL,EAApBrL,QAASqqB,EAAWhf,EAAXgf,QACjC,EAAuCW,GAA8BhrB,EAASqqB,GAAvEa,EAAP,EAAOA,gBAAiBD,EAAxB,EAAwBA,YAExB,OACI,kBAAC,GAAD,CACIvC,cAAeuC,IACftC,SAAU,SAACnpB,GAAD,OAAUmpB,EAASuC,EAAgBr2B,OAAO2K,EAAKrL,UACzDod,MAAOA,KAKbyZ,GAAgC,SAAChrB,EAAiBqqB,GACpD,IAAMv6B,EAA4Bmc,YAAY8H,IAExCqX,EAAoB,SAAC5rB,GACvB,MAAO,CACHtL,IAAKsL,EAAK/O,GACV0D,MAAOqL,EAAK/O,GAAGmE,WACf2W,KAAM/L,EAAK9N,OAuBnB,MAAO,CAACu5B,YAnBY,WAChB,IAAKp1B,EAAUC,kBAAkBhG,GAAa,CAC1C,IAAIu7B,EAA2Bx1B,EAAUG,SAASlG,GAKlD,OAJAu7B,EAAYA,EAAU1vB,QAAO,SAAC6D,GAAD,OAAUA,EAAKpN,UAAY4N,KACpDqqB,IACAgB,EAAYA,EAAU1vB,QAAO,SAAC6D,GAAD,OAAUA,EAAK/O,KAAO45B,MAEhDgB,EAAU/6B,IAAI86B,GAEzB,MAAO,IAUUF,gBAPG,SAACz6B,GACrB,IAAKoF,EAAUC,kBAAkBhG,KAAgB+F,EAAUC,kBAAkBrF,GACzE,OAAOX,EAAW0E,MAAK,SAACoD,GAAD,OAAUA,EAAKnH,KAAOA,QC5D5C66B,GAAqD,SAACjgB,GAC/D,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MAC9B,EAA0Co3B,KAAnC97B,EAAP,EAAOA,MAAO+7B,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,aAE1B,OACI,kBAAC,GAAD,CACI/C,cAAej5B,EAAMa,IAAIm7B,GACzB7C,YAAaA,EACbz0B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACd+zB,SAAU,SAAC92B,GAAD,OAAU82B,EAAS6C,EAAW32B,OAAOhD,EAAKsC,OAAQ1E,QAK3Di8B,GAA+D,SAACrgB,GACzE,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAA0Cga,KAAnC97B,EAAP,EAAOA,MAAO+7B,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,aAE1B,OACI,kBAAC,GAAD,CACI/C,cAAej5B,EAAMa,IAAIm7B,GACzB9C,SAAU,SAAC92B,GAAD,OAAU82B,EAAS6C,EAAW32B,OAAOhD,EAAKsC,OAAQ1E,KAC5D8hB,MAAOA,KAKbga,GAA2B,WAkB7B,MAAO,CAAC97B,MAjBiBwc,YAAY8H,IAiBtByX,WAfI,SAAC90B,EAAgBjH,GAChC,IAAKoG,EAAUC,kBAAkBY,KAAYb,EAAUC,kBAAkBrG,GACrE,OAAOA,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,MAa1B+0B,aARN,SAAC55B,GAClB,MAAO,CACHqC,IAAKrC,EAAKA,KAAKpB,GACf0D,MAAOtC,EAAKA,KAAKpB,GAAGmE,WACpB2W,KAAM1Z,EAAKA,KAAKH,SCzCfi6B,GAA+D,SAACtgB,GACzE,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MAC9B,EAAyDy3B,KAAlDh8B,EAAP,EAAOA,WAAYi8B,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,kBAEpC,OACI,kBAAC,GAAD,CACIpD,cAAe94B,EAAWU,IAAIw7B,GAC9B33B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACdi0B,WAAW,EACXF,SAAU,SAACoD,GAAD,OAAWpD,EAASkD,EAAgBh3B,OAAOk3B,EAAM53B,OAAQvE,KACnEg5B,YAAaA,KAkBnBgD,GAAgC,WAkBlC,MAAO,CAACh8B,WAjB0Bqc,YAAY8H,IAiB1B+X,kBAfM,SAACvtB,GACvB,MAAO,CACHrK,IAAKqK,EAAU9N,GACf0D,MAAOoK,EAAU9N,GAAGmE,WACpB2W,KAAMhN,EAAU7M,OAWem6B,gBAPf,SAACvrB,EAAqB1Q,GAC1C,IAAKiG,EAAUC,kBAAkBlG,KAAgBiG,EAAUC,kBAAkBwK,GACzE,OAAO1Q,EAAW4E,MAAK,SAAC+J,GAAD,OAAeA,EAAU9N,KAAO6P,QCvCtD0rB,GAAuE,SAAC3gB,GACjF,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAA0D0a,KAAnDC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,gBAAiBC,EAAxC,EAAwCA,eAExC,OACI,kBAAC,GAAD,CACI1D,cAAeyD,IACfxD,SAAU,SAAC13B,GAAD,OAAc03B,EAASyD,EAAev3B,OAAO5D,EAASkD,OAAQ+3B,KACxE3a,MAAOA,KAKN8a,GAA6D,SAAChhB,GACvE,IAAOsd,EAAyCtd,EAAzCsd,SAAUC,EAA+Bvd,EAA/Bud,YAAaz0B,EAAkBkX,EAAlBlX,MAAOk2B,EAAWhf,EAAXgf,QACrC,EAA0D4B,GAA6B5B,GAAhF6B,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,gBAAiBC,EAAxC,EAAwCA,eAExC,OACI,kBAAC,GAAD,CACI1D,cAAeyD,IACfvD,YAAaA,EACbD,SAAU,SAAC13B,GAAD,OAAc03B,EAASyD,EAAev3B,OAAO5D,EAASkD,OAAQ+3B,KACxE/3B,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,cAKpBq3B,GAA+B,SAAC5B,GAClC,IAAM6B,EAAqCjgB,YAAYoQ,IAEjDiQ,EAAmB,SAACr7B,GACtB,MAAO,CACHiD,IAAKjD,EAASR,GACd0D,MAAOlD,EAASR,GAAGmE,WACnB2W,KAAMta,EAASS,OAsBvB,MAAO,CAACw6B,iBAAgBC,gBAlBA,WACpB,IAAKt2B,EAAUC,kBAAkBo2B,GAAiB,CAC9C,IAAIK,EAAwB12B,EAAUG,SAASk2B,EAAgB18B,WAI/D,OAHI66B,IACAkC,EAAUA,EAAQ5wB,QAAO,SAACtD,GAAD,OAASA,EAAI5H,KAAO45B,MAE1CkC,EAAQj8B,IAAIg8B,GAEvB,MAAO,IAU8BF,eAPlB,SAACrK,EAAoBjjB,GACxC,IAAKjJ,EAAUC,kBAAkBgJ,KAAcjJ,EAAUC,kBAAkBisB,GACvE,OAAOjjB,EAAUtP,UAAUgF,MAAK,SAACvD,GAAD,OAAcA,EAASR,KAAOsxB,QC7D7DyK,GAA2E,SAACnhB,GACrF,IAAOsd,EAAmBtd,EAAnBsd,SAAUx0B,EAASkX,EAATlX,MAMXs4B,EAAe,SAAChX,EAAsBvhB,GACxC,MAAO,CACHA,IAAKA,EACLC,MAAOshB,EACPlK,KAAMkK,IAQd,OACI,kBAAC,GAAD,CACIiT,cAjBG10B,OAAOe,OAAOoB,GAAgB7F,KAAI,SAACuH,EAAMrH,GAAP,OAAiBi8B,EAAa50B,EAAMrH,MAkBzEm4B,SAAU,SAAC9wB,GAAD,OAAU8wB,GAPJ+D,EAO4B70B,EAAK1D,OANlCgC,EAAuBu2B,QAAY35B,GADnC,IAAC25B,GAQhBv4B,MAAOA,GAAgBwB,EAAUyI,SCxBhCuuB,GAAiE,SAACthB,GAC3E,IAAOsd,EAAmBtd,EAAnBsd,SAAUx0B,EAASkX,EAATlX,MAMXs4B,EAAe,SAAChX,EAAiBvhB,GACnC,MAAO,CACHA,IAAKA,EACLC,MAAOshB,EACPlK,KAAMkK,IAQd,OACI,kBAAC,GAAD,CACIiT,cAjBG10B,OAAOe,OAAOY,GAAWrF,KAAI,SAACuH,EAAMrH,GAAP,OAAiBi8B,EAAa50B,EAAMrH,MAkBpEm4B,SAAU,SAAC92B,GAAD,OAAU82B,GAPJ+D,EAO4B76B,EAAKsC,OANlCwB,EAAkB+2B,QAAY35B,GAD9B,IAAC25B,GAQhBv4B,MAAOA,GAAgBwB,EAAUyI,SCdhCwuB,GAA6D,SAACvhB,GACvE,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MAC9B,EAAwC04B,KAAjCC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,cAEvB,OACI,kBAAC,GAAD,CACIrE,cAAeqE,IACfnE,YAAaA,EACbD,SAAU,SAACz2B,GAAD,OAAcy2B,EAASmE,EAAe56B,EAASiC,SACzDA,MAAiB,KAAVA,EAAeA,OAAQpB,KAMpC85B,GAA+B,WACjC,IAAMp9B,EAAmBwc,YAAY8H,IAE/B+Y,EAAiB,SAACE,GACpB,GAAyB,OAArBA,GAAuC,OAAVv9B,EAC7B,OAAOiE,KAAKC,MAAMq5B,IA8BpBC,EAAmB,SAAC/6B,EAA0BL,EAAeqC,GAC/D,IAAMg5B,EAAgC,CAACv8B,OAAQkB,EAAKA,KAAKpB,GAAI+B,WAAYN,EAASzB,IAC5Eu8B,EAA2Bt5B,KAAKG,UAAUq5B,GAC5CC,EAAsBt7B,EAAKA,KAAKH,KAIpC,OAHqB,IAAjBQ,EAASzB,KACT08B,EAAcA,EAAc,MAAQj7B,EAASR,MAE1C,CACHwC,IAAKA,EACLC,MAAO64B,EACPzhB,KAAM4hB,IAId,MAAO,CAACL,iBAAgBM,gBAvCA,SAACC,GACrB,IAAMC,EAA0C,GAShD,OARID,GACAA,EAAkBj8B,SAAQ,SAACm8B,GACvB,IAAMC,EAA0CV,EAAeS,GAC3DC,GACAF,EAAmBh8B,KAAKk8B,MAI7BF,GA6B8BP,cA1BnB,WAClB,IAAMU,EAA2C,GAQjD,OAPIh+B,GACAA,EAAM2B,SAAQ,SAACS,GACXA,EAAKA,KAAKI,UAAUb,SAAQ,SAAC4L,GACzBywB,EAAen8B,KAAK27B,EAAiBjwB,EAAMnL,EAAqB,IAAfA,EAAKA,KAAKpB,GAAWuM,EAAKvM,WAIhFg9B,KClCFC,GAAuE,SAACriB,GACjF,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAA0Doc,KAAnDtb,EAAP,EAAOA,UAAWub,EAAlB,EAAkBA,mBAAoBC,EAAtC,EAAsCA,iBAEtC,OACI,kBAAC,GAAD,CACInF,cAAerW,EAAU/hB,IAAIu9B,GAC7Btc,MAAOA,EACPoX,SAAU,SAAC/xB,GAAD,OAAc+xB,EAASiF,EAAmB/4B,OAAO+B,EAASzC,OAAQke,QAKlFsb,GAA+B,WACjC,IAAMtb,EAA8BpG,YAAY8H,IAC1CtkB,EAAmBwc,YAAY8H,IAE/B+Z,EAAc,SAACp3B,EAAgBjH,GAA8B,IAAD,EAC9D,OAAO,UAAAA,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,YAAtC,eAA+C7E,KAAKH,OAAQ,IAmBvE,MAAO,CAAC2gB,YAAWub,mBAhBQ,SAACG,EAAoB1b,GAC5C,IAAKxc,EAAUC,kBAAkBi4B,KAAgBl4B,EAAUC,kBAAkBuc,GACzE,OAAOA,EAAU7d,MAAK,SAACoC,GAAD,OAAcA,EAASnG,KAAOs9B,MAcrBF,iBATd,SAACj3B,GACtB,IAAM2U,EAAeuiB,EAAYl3B,EAASC,QAASpH,GAAS,MAAQq+B,EAAYl3B,EAASE,QAASrH,GAClG,MAAO,CACHyE,IAAK0C,EAASnG,GACd0D,MAAOyC,EAASnG,GAAGmE,WACnB2W,KAAMA,MC9CLyiB,GAA6D,SAAC3iB,GACvE,IAAOsd,EAAgCtd,EAAhCsd,SAAUC,EAAsBvd,EAAtBud,YAAaz0B,EAASkX,EAATlX,MAC9B,EAAsD85B,KAA/C5+B,EAAP,EAAOA,UAAW6+B,EAAlB,EAAkBA,eAAgBC,EAAlC,EAAkCA,iBAElC,OACI,kBAAC,GAAD,CACIzF,cAAer5B,EAAUiB,IAAI69B,GAC7BvF,YAAaA,EACbD,SAAU,SAAC7pB,GAAD,OAAc6pB,EAASuF,EAAer5B,OAAOiK,EAAS3K,OAAQ9E,KACxE8E,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOS,WACdi0B,WAAW,KAKVuF,GAAuE,SAAC/iB,GACjF,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAAsD0c,KAA/C5+B,EAAP,EAAOA,UAAW6+B,EAAlB,EAAkBA,eAAgBC,EAAlC,EAAkCA,iBAElC,OACI,kBAAC,GAAD,CACIzF,cAAer5B,EAAUiB,IAAI69B,GAC7B5c,MAAOA,EACPoX,SAAU,SAAC7pB,GAAD,OAAc6pB,EAASuF,EAAer5B,OAAOiK,EAAS3K,OAAQ9E,QAK9E4+B,GAA+B,WAkBjC,MAAO,CAAC5+B,UAjBwB4c,YAAY8H,IAiBzBma,eAfI,SAAC/1B,EAAoB9I,GACxC,IAAKwG,EAAUC,kBAAkBqC,KAAgBtC,EAAUC,kBAAkBzG,GACzE,OAAOA,EAAUmF,MAAK,SAACsK,GAAD,OAAcA,EAASrO,KAAO0H,MAazBg2B,iBARV,SAACrvB,GACtB,MAAO,CACH5K,IAAK4K,EAASrO,GACd0D,MAAO2K,EAASrO,GAAGmE,WACnB2W,KAAMzM,EAASpN,SCxCd28B,GAA+D,SAAChjB,GACzE,IAAOsd,EAAmBtd,EAAnBsd,SAAUpX,EAASlG,EAATkG,MACjB,EAAoD+c,KAA7CxvB,EAAP,EAAOA,SAAUyvB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,mBAE9B,OACI,kBAAC,GAAD,CACI9F,cAAe6F,IACfhd,MAAOA,EACPoX,SAAU,SAAC/wB,GAAD,OAAU+wB,EAAS6F,EAAmB35B,OAAO+C,EAAKzD,OAAQ2K,QAKnE2vB,GAAqD,SAACpjB,GAC/D,IAAOsd,EAAyCtd,EAAzCsd,SAAUC,EAA+Bvd,EAA/Bud,YAAaz0B,EAAkBkX,EAAlBlX,MAAOk2B,EAAWhf,EAAXgf,QACrC,EAAoDiE,GAAyBjE,GAAtEvrB,EAAP,EAAOA,SAAUyvB,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,mBAE9B,OACI,kBAAC,GAAD,CACI9F,cAAe6F,IACf3F,YAAaA,EACbD,SAAU,SAAC/wB,GAAD,OAAU+wB,EAAS6F,EAAmB35B,OAAO+C,EAAKzD,OAAQ2K,KACpE3K,OAAkB,IAAXA,GAAA,OAA2BA,QAA3B,IAA2BA,OAAZpB,EAAYoB,EAAOS,cAK/C05B,GAA2B,SAACjE,GAC9B,IAAM6B,EAAqCjgB,YAAYoQ,IAEjDqS,EAAe,SAAC92B,GAClB,MAAO,CACH1D,IAAK0D,EAAK8J,eAAejR,GACzB0D,MAAOyD,EAAK8J,eAAejR,GAAGmE,WAC9B2W,KAAM3T,EAAK8J,eAAehQ,OAsBlC,MAAO,CAACoN,SAAUotB,EAAgBqC,YAlBd,WAChB,IAAK14B,EAAUC,kBAAkBo2B,GAAiB,CAC9C,IAAIvpB,EAA+B9M,EAAUG,SAASk2B,EAAgBvtB,kBAItE,OAHI0rB,IACA1nB,EAAYA,EAAUhH,QAAO,SAAC/D,GAAD,OAAUA,EAAK8J,eAAejR,KAAO45B,MAE/D1nB,EAAUrS,IAAIo+B,GAEzB,MAAO,IAUoCF,mBAPpB,SAACtvB,EAAgBJ,GACxC,IAAKjJ,EAAUC,kBAAkBgJ,KAAcjJ,EAAUC,kBAAkBoJ,GACvE,OAAOJ,EAAUH,iBAAiBnK,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOyO,QC/DlFyvB,GAAW,kBAAMpmB,OAAOqmB,YAAcv5B,SAASw5B,gBAAgBC,aAAez5B,SAAS05B,KAAKD,aAC5FE,GAAY,kBAAMzmB,OAAO0mB,aAAe55B,SAASw5B,gBAAgBK,cAAgB75B,SAAS05B,KAAKG,cA0JxFC,GAAa,SAAC9nB,GAEvBkhB,qBAAU,WACN,IAAM6G,EAAgB,SAACC,GACD,WAAdA,EAAMn7B,KACNmT,KAMR,OAFAhS,SAASi6B,iBAAiB,UAAWF,GAAe,GAE7C,WACH/5B,SAASk6B,oBAAoB,UAAWH,GAAe,MAE5D,CAAC/nB,KAOKmoB,GAAe,SAACnoB,GAEzBkhB,qBAAU,WACN,IAAM6G,EAAgB,SAACC,GACD,UAAdA,EAAMn7B,KACNmT,KAMR,OAFAhS,SAASi6B,iBAAiB,UAAWF,GAAe,GAE7C,WACH/5B,SAASk6B,oBAAoB,UAAWH,GAAe,MAE5D,CAAC/nB,KC1LKooB,I,MAAyD,SAACpkB,GACnE,IAAOkG,EAA8DlG,EAA9DkG,MAAOqX,EAAuDvd,EAAvDud,YAAaz0B,EAA0CkX,EAA1ClX,MAAOu7B,EAAmCrkB,EAAnCqkB,iBAAkBC,EAAiBtkB,EAAjBskB,OAAQC,EAASvkB,EAATukB,MAE5D,EAAoCxH,mBAAiB,IAArD,mBAAOyH,EAAP,KAAmBC,EAAnB,KAEAvH,qBAAU,WACNuH,EAAc37B,GAAgB,MAC/B,CAACA,IAEJ,IAAM47B,EAAkCC,iBAAyB,MASjE,OANAzH,qBAAU,WACW,OAAbwH,GAA0C,OAArBA,EAASE,SAAoBL,GAClDG,EAASE,QAAQL,UAEtB,CAACA,EAAOG,IAGP,yBAAKrkB,UAAU,QACV6F,GAAS,2BAAO7F,UAAW,6CAA8C6F,GAC1E,2BACI7F,UAAW6F,EAAQ,4BAA8B,gBACjDzZ,KAAM,OACN8wB,YAAaA,EACbz0B,MAAO07B,EACPK,IAAKH,EACLzG,SAAU,SAAC+F,GACPS,EAAcT,EAAMc,OAAOh8B,OAC3Bu7B,EAAiBL,EAAMc,OAAOh8B,QAElCw7B,OAAQA,OCrCXS,I,MAAiD,SAAC/kB,GAC3D,IAAOgc,EAAYhc,EAAZgc,SAEP,OACI,yBAAK3b,UAAW,iEACX2b,KCNAgJ,GAAiD,SAAChlB,GAC3D,IAAOgc,EAAYhc,EAAZgc,SAEP,OACI,yBAAK3b,UAAW,iEACX2b,ICIAiJ,GAA+D,SAACjlB,GACzE,IAAOI,EAAmBJ,EAAnBI,gBACDnD,EAAW4D,cACjB,EAAsCkc,mBAAiB,IAAvD,mBAAOz5B,EAAP,KAAoB4hC,EAApB,KAEMC,EAAW,WACbloB,EAASF,GAAcjB,aAA6B,KAAhBxY,EAAqBA,EAAc,YACvE8c,KAQJ,OAJA0jB,GAAW1jB,GAEX+jB,GAAagB,GAGT,yBAAK9kB,UAAU,+BACX,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI6F,MAAM,aACNqX,YAAY,kBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkB6+B,EAAe7+B,IACnDyC,MAAOxF,KAGf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAagd,QAAS,kBAAMF,MACvB,UAEL,kBAAC,GAAD,CAAaE,QAAS,kBAAM6kB,MACvB,eCtCRC,GAAmD,WAE5D,OACI,yBAAK/kB,UAAW,gD,S5BPZyb,K,cAAAA,E,gBAAAA,E,WAAAA,Q,KAUL,I6BgBKuJ,G7BhBCC,GAA6C,SAACtlB,GACvD,IAAOgc,EAAsBhc,EAAtBgc,SAAUxsB,EAAYwQ,EAAZxQ,SAEjB,OACI,yBAAK6Q,UAAW,cAAgB7Q,GAAsBssB,GAAiByJ,QAAU,gEAC5EvJ,I8BXAwJ,I,MAA6C,SAACxlB,GACvD,IAAOgc,EAAmBhc,EAAnBgc,SAAUjW,EAAS/F,EAAT+F,MAEjB,OACI,yBAAK1F,UAAU,0BACV0F,MAAOA,GAEPiW,KCIAyJ,GAAuD,SAACzlB,GACjE,IAAO0lB,EAAuC1lB,EAAvC0lB,UAAWC,EAA4B3lB,EAA5B2lB,SAAUR,EAAkBnlB,EAAlBmlB,SAAUjlB,EAAQF,EAARE,KAChC0lB,EAAajB,iBAA4B,MAC/C,EAAgC5H,mBAAiB,IAAjD,mBAAO8I,EAAP,KAAiBC,EAAjB,KAaA,OAXA5I,qBAAU,WACN4I,EAAY5lB,GAAc,IAC1B0lB,EAAWhB,QAASL,UACrB,CAACrkB,IAGJ4jB,GAAW6B,GAGXxB,IAAa,kBAAMgB,EAASU,MAGxB,yBAAKxlB,UAAU,2BACX,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,MAECqlB,GAAa,kBAAC,GAAD,KAAU,4BAAKA,IAE7B,kBAAC,GAAD,KACI,8BACIrlB,UAAW,qCACX4d,SAAU,SAAC8H,GAAD,OAAOD,EAAYC,EAAEjB,OAAOh8B,QACtCA,MAAO+8B,EACPhB,IAAKe,KAIb,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAatlB,QAAS,kBAAMqlB,MACvB,UAEL,kBAAC,GAAD,CAAarlB,QAAS,kBAAM6kB,EAASU,KAChC,WCrDRG,I,MAAqC,SAAChmB,GAC/C,IAAOgc,EAAYhc,EAAZgc,SAEP,OACI,yBAAK3b,UAAW,6EACX2b,KCLAiK,I,WAAiD,SAACjmB,GAC3D,IAAOgc,EAAYhc,EAAZgc,SAEP,OAAO,yBAAK3b,UAAU,cAAc2b,KCD3BkK,GAAiE,SAAClmB,GAC3E,IAAOmmB,EAAiBnmB,EAAjBmmB,cAEP,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB/lB,gBAAiB+lB,MCInCC,I,YAAiD,SAACpmB,GAAW,IAAD,IAC9DqmB,EAA8FrmB,EAA9FqmB,mBAAoBC,EAA0EtmB,EAA1EsmB,MAAOC,EAAmEvmB,EAAnEumB,MAAOC,EAA4DxmB,EAA5DwmB,iBAAkBn5B,EAA0C2S,EAA1C3S,WAAYo5B,EAA8BzmB,EAA9BymB,OAAQC,EAAsB1mB,EAAtB0mB,YAAaC,EAAS3mB,EAAT2mB,MAEtF5jB,EAAI6jB,aAAeN,GACnBtjB,EAAI4jB,aAAeL,GACzB,EAAyBM,eAAlBC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,OAEf7J,qBAAU,WACNna,EAAE1Z,IAAIi9B,GAASD,EAAmBzB,QAAQoC,YAAc,MACxDhkB,EAAE3Z,IAAIk9B,GAASF,EAAmBzB,QAAQqC,aAAe,QAC1D,CAAClkB,EAAGujB,EAAOtjB,EAAGujB,EAAOF,IAExB,IAAMxB,EAAMF,iBAAuB,MASnC,OAPAzH,qBAAU,WACF2H,GAAOA,EAAID,SAAW8B,GAAeC,GACrCD,EAAY7B,EAAID,QAAQsC,wBAAwB1jB,MAAOqhB,EAAID,QAAQsC,wBAAwBzjB,OAAQkjB,KAGxG,QAAC9B,QAAD,IAACA,GAAD,UAACA,EAAKD,eAAN,aAAC,EAAcsC,wBAAwB1jB,MAAvC,OAA8CqhB,QAA9C,IAA8CA,GAA9C,UAA8CA,EAAKD,eAAnD,aAA8C,EAAcsC,wBAAwBzjB,SAGnF,kBAAC,KAAO0jB,IAAR,CACIC,MAAM,EACNC,gBAAiBhB,EACjBiB,cAAc,EACdC,YAAa,EACbC,UAAW,SAACxD,EAAOh/B,GACfwhC,EAKIh9B,OAAOxE,EAAKue,MAAMR,EAAE0kB,QAAQ,KAAOpB,EAAmBzB,QAAQoC,YrHjD7C,KqHkDjBx9B,OAAOxE,EAAKue,MAAMP,EAAEykB,QAAQ,KAAOpB,EAAmBzB,QAAQqC,arHlD7C,KqHmDjB55B,IAGRgT,UAAU,aACV0F,MAAO,CACH2hB,UAAWjB,EAAS,eAAiBA,EAAS,GAC9C1jB,IACAC,IACA8jB,SACAC,UAEJlC,IAAKA,GAEJ7kB,EAAMgc,a,SNrCPqJ,K,mBAAAA,E,iBAAAA,E,yBAAAA,Q,KAML,IOhCKsC,GPgCCC,GAAoC,SAAC5nB,GAC9C,IACI6nB,EASA7nB,EATA6nB,WACAC,EAQA9nB,EARA8nB,cACAtB,EAOAxmB,EAPAwmB,iBACAuB,EAMA/nB,EANA+nB,OACAC,EAKAhoB,EALAgoB,QACAr4B,EAIAqQ,EAJArQ,KACAlD,EAGAuT,EAHAvT,KACAw7B,EAEAjoB,EAFAioB,YACAvB,EACA1mB,EADA0mB,YAGJ,EAAoDwB,GAAmBD,GAAhEp/B,EAAP,EAAOA,IAAKs/B,EAAZ,EAAYA,eAAgB1kB,EAA5B,EAA4BA,OAAQD,EAApC,EAAoCA,MAAO4kB,EAA3C,EAA2CA,MAE3C,EAAkCrL,oBAAkB,GAApD,mBAAOsL,EAAP,KAAkBC,EAAlB,MNQ8B,SAC9BC,EACAC,GAEA,IAAMC,EAAgB,SAACC,GACfA,EAAWC,UACXD,EAAWE,iBACPL,GAAiBC,IACjBE,EAAWG,OAAS,GAAKN,EAAcO,iBACvCJ,EAAWG,OAAS,GAAKN,EAAcQ,qBAK7CC,EAAY,SAAChF,GACXA,EAAM2E,UACY,MAAd3E,EAAMn7B,KAA6B,MAAdm7B,EAAMn7B,KAC3Bm7B,EAAM4E,mBAKlB1L,qBAAU,WAIN,OAHAlzB,SAASi6B,iBAAiB,QAASwE,EAAe,CAACQ,SAAS,IAC5Dj/B,SAASi6B,iBAAiB,UAAW+E,GAE9B,WACHh/B,SAASk6B,oBAAoB,QAASuE,GACtCz+B,SAASk6B,oBAAoB,UAAW8E,OMlChDE,CAAmB,CAACJ,eAAgBf,EAAQgB,gBAAiBf,GAAUK,GAoBvE,OACI,kBAAC,KAAOlB,IAAR,CACIgC,aAAc,kBAAMb,GAAa,IACjCc,aAAc,kBAAMd,GAAa,IACjCzD,IAAKsD,EACLpiB,MAAO8hB,EAAa,CAACpkB,OAAQA,EAAQ4lB,SAAU7lB,GAAS,GACxDnD,UAAW5T,EAAKlD,WAChBV,IAAKA,GAEJi/B,EAAc7iC,KArBN,SAACqkC,GAA8C,IAAD,EMY/D95B,EACA+5B,EACAlD,EACArK,EACAyK,EACAE,EACA6C,ENjBI,OMWJh6B,ENVQ85B,EAAa95B,SMWrB+5B,ENVQ/C,EMWRH,ENVQ8B,EMWRnM,ENVQsN,EAAaG,QMWrBhD,ONVQ/+B,EMWRi/B,GNVQ,UAAA2C,EAAal6B,uBAAb,eAA8BhK,UAAMsC,EMW5C8hC,ENVQ9C,EMaJ,kBAAC,GAAD,CACI79B,IAAK2G,EAASpK,GACdohC,iBAAkB+C,EAClBl8B,WAAYmC,EAASpK,GACrBkhC,MAAO92B,EAASuT,EAChBwjB,MAAO/2B,EAASwT,EAChBqjB,mBAAoBA,EACpBI,OAAQA,EACRC,YAAa8C,EACb7C,MAAOA,GAEN3K,MNVD,kBAAC,KAAO9V,MAAR,CAAc7F,UAAU,YACVxX,IAAK8G,GAAc,IAE5BA,EAAO3B,KAAK07B,MAAa,IAAP/5B,GAAc,IAAM,IAE3C,kBAAC,KAAO+U,IAAR,CAAYrE,UAAU,SAjCN,SAAC+nB,GACrB,OAAOA,EAAMnjC,KAAI,SAACyf,EAAKvf,GACnB,OAAO,kBAAC,GAAD,iBAAeuf,EAAf,CAAoB7b,IAAK1D,QA+BDwkC,CAAgBvB,MAKrDF,GAAqB,SAACD,GACxB,MAAsBlL,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KACMzB,EAAiBxD,iBAAyB,MAEhD,EAA0B5H,mBAA2B,IAArD,mBAAOqL,EAAP,KAAcyB,EAAd,KAIMC,ENxFqB,WAE3B,MAA0B/M,mBAASuG,MAAnC,mBAAO9f,EAAP,KAAcumB,EAAd,KAkBA,OAdA7M,qBAAU,WACN,IAAM8M,EAAiB,WACnB7M,YAAW,kBAAM4M,EAASzG,QAAa,MAM3C,OAHApmB,OAAO+mB,iBAAiB,SAAU+F,GAG3B,WAEH9sB,OAAOgnB,oBAAoB,SAAU8F,MAE1C,IAEIxmB,EMkE4BymB,G/GhGF,IAED,M+GiG1BC,ENlEsB,WAE5B,MAA4BnN,mBAAS4G,MAArC,mBAAOlgB,EAAP,KAAe0mB,EAAf,KAkBA,OAdAjN,qBAAU,WACN,IAAM8M,EAAiB,WACnB7M,YAAW,kBAAMgN,EAAUxG,QAAc,MAM7C,OAHAzmB,OAAO+mB,iBAAiB,SAAU+F,GAG3B,WAEH9sB,OAAOgnB,oBAAoB,SAAU8F,MAE1C,IAEIvmB,EM4C6B2mB,G/G/FJ,MAFC,I+G6HjC,OAxBAlN,qBAAU,WACN,IAAMmN,EAAe,kBAAMT,GAAO,SAACU,GAAD,OAAeA,EAAY,MAG7D,OAFAptB,OAAO+mB,iBAAiB,SAAUoG,GAE3B,WACHntB,OAAOgnB,oBAAoB,SAAUmG,MAE1C,IAEHnN,qBAAU,WACN,GAAuB,OAAnBiL,GAAsD,OAA3BA,EAAevD,QAAkB,CAC5D,IAAI2F,EAA6B,GACjCtC,EAAYliC,SAAQ,SAAC2e,GACjB,IAAI8lB,EAA6B9lB,EACjC8lB,EAAWzoB,QAAU2C,EAAI3C,SAAWomB,EAAevD,QAASoC,YAAc,KAC1EwD,EAAWxoB,QAAU0C,EAAI1C,SAAWmmB,EAAevD,QAASqC,aAAe,KAC3EuD,EAAWvoB,QAAUyC,EAAIzC,SAAWkmB,EAAevD,QAASoC,YAAc,KAC1EwD,EAAWtoB,QAAUwC,EAAIxC,SAAWimB,EAAevD,QAASqC,aAAe,KAC3EsD,EAAStkC,KAAKukC,MAElBX,EAASU,MAEd,CAACpC,EAAgBF,IAEb,CACHE,iBACA1kB,OAAQqmB,EACRtmB,MAAO0mB,EACPrhC,MACAu/B,UQ1HKqC,GAAmE,SAACzqB,GAC7E,IAAO0qB,EAAQ1qB,EAAR0qB,KAEP,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIlE,iBAAkB,aAElBsB,cAAe,CACX,CACI2B,QAASiB,EACTl7B,SAAU,IAAImkB,GAAW,GAAI,MAGrCsU,YAAa,GACbF,OAAQ,aAERC,QAAS,aAETv7B,KAAM44B,GAAWsF,eClBpBC,GAAyD,SAAC5qB,GACnE,IAAOE,EAAyCF,EAAzCE,KAAMimB,EAAmCnmB,EAAnCmmB,cAAe0E,EAAoB7qB,EAApB6qB,iBAE5B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI3qB,KAAMA,EACNilB,SAAU,SAACjlB,GACPimB,IACA0E,EAAiB3qB,IAErBylB,SAAU,kBAAMQ,SCTnB2E,I,YAAuC,SAAC9qB,GACjD,IAAO+qB,EAAsB/qB,EAAtB+qB,QAASC,EAAahrB,EAAbgrB,UAMVC,EAAY,SAACC,EAAkB/lC,GACjC,OAAO,wBAAI0D,IAAK1D,GAAQ+lC,IAW5B,OACI,2BAAO7qB,UAAU,eACZ0qB,GAAW,2BAAO1qB,UAAU,WAC7B,4BACK0qB,EAAQ9lC,KApBD,SAACgb,EAAqB9a,GACtC,OAAO,wBAAI0D,IAAK1D,GAAO,yBAAKkb,UAAU,0DAA0DJ,cAuB7EvY,IAAdsjC,GAA2BA,EAAUn+B,OAAS,GAAK,+BACnDm+B,EAAU/lC,KAjBG,SAACkmC,EAAehmC,GAClC,OACI,wBAAI0D,IAAK1D,GACJgmC,EAAIC,aAAanmC,IAAIgmC,WChBzBI,GAAqD,SAACrrB,GAC/D,IAAOsrB,EAAiDtrB,EAAjDsrB,eAAgBC,EAAiCvrB,EAAjCurB,OAAQC,EAAyBxrB,EAAzBwrB,UAAWC,EAAczrB,EAAdyrB,WAE1C,OACI,yBAAKprB,UAAU,oBACX,kBAAC,GAAD,CACIA,UAAWkrB,EAAS,UAAY,GAChCjrB,QAAS,kBAAMgrB,GAAe,KAChCE,GACF,kBAAC,GAAD,CACInrB,UAAWkrB,EAAS,GAAK,UACzBjrB,QAAS,kBAAMgrB,GAAe,KAChCG,KCPDC,GAAiD,SAAC1rB,GAC3D,IAAO2rB,EAAuG3rB,EAAvG2rB,aAAcC,EAAyF5rB,EAAzF4rB,iBAAkBC,EAAuE7rB,EAAvE6rB,WAAYC,EAA2D9rB,EAA3D8rB,oBAAqBC,EAAsC/rB,EAAtC+rB,kBAAmBC,EAAmBhsB,EAAnBgsB,gBAKrFC,EAAgB,SAACr3B,EAAgBzP,GAuCnC,MAAO,CACHimC,aAAc,CArCPS,EAEH,yBAAKxrB,UAAU,iCACX,kBAAC,GAAD,CACIxX,IAAK1D,EACLk/B,iBAAkB,SAACh+B,GAAD,OAAUwlC,EAAaA,EAAWxlC,EAAMuO,EAAMxP,IAAM,IACtEm4B,YAAY,aACZz0B,MAAO8L,EAAMsR,MACbqe,OAAK,KAGX,2BAAO17B,IAAK1D,EACLkb,UAAU,iBACjBzL,EAAMsR,OAIJ,kBAAC,GAAD,CACJrd,IAAK1D,EACLmmC,eAAgB,SAACY,GAAD,OAAQH,EAAkBn3B,EAAOs3B,IACjDX,OAAQ32B,EAAM8V,QACd8gB,UA3Bc,OA4BdC,WA3Be,UAgCZK,EACD,yBAAKzrB,UAAU,0DACb,kBAAC,GAAD,CAAmBC,QAAS,kBAAMwrB,EAAoBl3B,EAAMxP,KACzC03B,WAAS,KAG9B,iCA8Bd,OACI,kBAAC,GAAD,CAAOiO,QAtBAa,EACD,CAAC,yBAAK/iC,IAAK,EACLwX,UAAU,iBACjB,wCAEoB,2BAAOxX,IAAK,EACLwX,UAAU,iBACpC2rB,GAA0B,kBAAC,GAAD,CAAgBnjC,IAAK,EACLyX,QAASsrB,KAEnD,CAAC,2BAAO/iC,IAAK,EACLwX,UAAU,iBADjB,QAEY,2BAAOxX,IAAK,EACLwX,UAAU,iBAC9B2rB,IASChB,UALAW,EAAa1mC,IAAIgnC,MC3EnBE,GAAyE,SAACnsB,GAEnF,IAAOkK,EAA4BlK,EAA5BkK,OAAQkiB,EAAoBpsB,EAApBosB,iBAIf,OACI,kBAAC,GAAD,CACIT,aAAczhB,EACd8hB,gBALe,QAMfD,kBAAmBK,KCSlBC,GAAiE,WAE1E,IAAMpvB,EAAW4D,cAEjB,EAA4Bkc,mBAAoB,IAAhD,mBAAO7S,EAAP,KAAeoiB,EAAf,KACA,EAAkCvP,mBAAuB,IAAI9pB,IAA7D,mBAAOC,EAAP,KAAkBq5B,EAAlB,KAEMvoC,EAA0B4c,YAAY8H,IACtC8jB,EAAuC5rB,YAAYoQ,IAsCnD/X,EAAe,SAACjN,GAClB,IAAMygC,EAA8BjiC,EAAUG,SAASuI,GACvDu5B,EAAcnoC,UAAUW,KAAI,SAAAynC,GAMxB,OALIA,EAAMtnC,KAAO4G,EAAS5G,KACtBsnC,EAAMxmC,QAAU8F,EAAS9F,QACzBwmC,EAAMpnC,OAAS0G,EAAS1G,OACxBonC,EAAMnnC,WAAayG,EAASzG,YAEzBmnC,KAEXH,EAAaE,IA0DjB,OACI,yBAAKpsB,UAAU,iFAEX,yBAAKA,UAAU,kHAEX,6CAEA,kBAAC,GAAD,CAAaC,QAAS,WAClBrD,EAASwc,GAAYb,QAAQ6C,QAC7Bxe,EAASiV,GAAqBQ,sBAC9BzV,EAASiV,GAAqBM,yBAHlC,UAOA,kBAAC,GAAD,CAAiBlS,QA3Gb,WACZ,GAAwB,OAArBksB,EAA0B,CACzB,IAAMnW,EAA4B7rB,EAAUG,SAAS6hC,GACrDvvB,EAASiV,GAAqBG,iCAAiCgE,EAAahjB,WAAWjO,GAAK8kB,IAC5FjN,EAASiV,GAAqBK,oBAAoBrf,IAClD+J,EAASwc,GAAYb,QAAQ6C,UAuGRkR,UAAU,EACVtQ,SAAUpe,GAAW0B,MAElC,8CAMR,yBAAKU,UAAU,0BAGX,yBAAKA,UAAU,qDAOVrc,EAAU6I,OAAS,GACpB,yBAAKwT,UAAU,gEACX,0CAGHrc,EAAU6I,OAAS,GAAK7I,EAAUiB,KAnHvB,SAACwO,GACzB,OACI,kBAAC,GAAD,CAAa5K,IAAK4K,EAASrO,GACdkb,QAAS,kBAXV,SAACxT,GAEjB,GADAmQ,EAASiV,GAAqBE,uBAAuBtlB,IACjD0/B,EAAkB,CAClB,IAAMI,EAAwBpiC,EAAUG,SAAS6hC,EAAiB7nC,gBAClE2nC,EAAUM,IAOkBC,CAAYp5B,EAASrO,MAC/CqO,EAASpN,UAmHP,yBAAKga,UAAU,kEACX,6BAEI,kBAAC,GAAD,CAAwB6J,OAAQA,EACRkiB,iBAvJzB,SAACU,EAAwBZ,GACxC,IAAMU,EAAwBpiC,EAAUG,SAASuf,GACjD0iB,EAAW3nC,KAAI,SAAA2P,GAIX,OAHIA,EAAMxP,KAAO0nC,EAAc1nC,KAC3BwP,EAAM8V,QAAUwhB,GAEbt3B,KAEX03B,EAAUM,OAkJE,6BAEI,yBAAKvsB,UAAU,6DACX,2CAGJ,2BAAOA,UAAU,SACV0F,MAAO,CAACvC,MAAO,OAAQupB,UAAW,SAErC,+BACA,4BACI,wBAAIhnB,MAAO,CAACinB,UAAW,WAAvB,SACA,wBAAIjnB,MAAO,CAACinB,UAAW,WAAvB,iBACA,wBAAI3sB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAtHrD,WACnB,IAAMmsB,EAA8BjiC,EAAUG,SAASuI,GACjD+5B,EAA0B,IAAIpR,GACpCoR,EAAY7nC,GAAKqnC,EAAcnoC,UAAUuI,OACzC4/B,EAAcnoC,UAAU2B,KAAKgnC,GAC7BV,EAAaE,SAoHO,2BAAO1mB,MAAO,CAACmnB,UAAW,SACzBh6B,EAAU5O,UAAUW,KA5Gd,SAAC+G,GAC5B,IAAImhC,EAA2B3iC,EAAUG,SAASqB,GAElD,OACI,wBAAInD,IAAKskC,EAAa/nC,IAClB,4BACI,yBAAKib,UAAU,8BACX,kBAAC,GAAD,CACIid,SAAU,SAACnwB,GACPggC,EAAajnC,QAAUiH,EAAQA,EAAMA,MAAM/H,IAAM,EACjD6T,EAAak0B,IAEjB5P,YAAa,kBACbz0B,MAAOqkC,EAAajnC,UAExB,kBAAC,GAAD,CACIo3B,SAAU,SAAC8P,GACF5iC,EAAUC,kBAAkB2iC,KAC7BD,EAAa7nC,OAAS8nC,EAAiB9nC,OACvC6nC,EAAa5nC,WAAa6nC,EAAiBjmC,WAC3C8R,EAAak0B,KAGrB5P,YAAa,0BACbz0B,MAAOT,KAAKG,UAAU,CAClBlD,OAAQ6nC,EAAc7nC,OACtB6B,WAAYgmC,EAAc5nC,gBAIZ,IAArB4nC,EAAa/nC,IAAa,kBAAC,GAAD,CAAmBkb,QAAS,YApCpD,SAAC+sB,GACpB,IAAMZ,EAA8BjiC,EAAUG,SAASuI,GACvDu5B,EAAcnoC,UAAUgM,QAAO,SAAAo8B,GAAK,OAAIA,EAAMtnC,KAAOioC,EAAiBjoC,MACtEmnC,EAAaE,GAkCOvzB,CAAei0B,IAE2BrQ,WAAS,iBC7HlEwQ,GAA+C,SAACttB,GACzD,IAAOutB,EAAyBvtB,EAAzButB,YAAaC,EAAYxtB,EAAZwtB,SAEpB,OACI,yBAAKntB,UAAU,QACX,kBAAC,GAAD,CAAgBC,QAAS,kBAAMitB,KACf9sB,KAAMqX,GAAYoE,SAEjCsR,ICPAC,GAAiE,SAACztB,GAC3E,IAAO0tB,EAA2B1tB,EAA3B0tB,eAAgBC,EAAW3tB,EAAX2tB,QAEvB,EAAgC5Q,oBAAkB,GAAlD,mBAAO6Q,EAAP,KAAiBC,EAAjB,KAEA,OACI,oCACI,kBAAC,GAAD,CAAiBvtB,QAAS,kBAAMutB,GAAY,IAC3BxR,SAAsB,KAAZsR,EAAiBG,KAAYC,OAEvDH,GACD,kBAAC,GAAD,CAAgB1tB,KAAMytB,EACNxH,cAAe,kBAAM0H,GAAY,IACjChD,iBAAkB6C,MCTjCM,I,MAAqB,SAACC,EAA2CplC,GAC1E,IALsC+L,EAKhCs5B,EAAgB,SAACt5B,GACnB,OAAIA,IAAUkS,GAAewD,QAErB,yBACIjK,UAAW,aAEX0F,MAAO,CAAC0N,MAAO,QAAS0a,gBAAiB,kCAKjDv5B,IAAUkS,GAAeyD,aAErB,yBACIlK,UAAW,aAEX0F,MAAO,CAAC0N,MAAO,MAAO0a,gBAAiB,kCAK5C,MAGX,OACI,yBAAK9tB,UAAU,4CACVxX,IAAKA,GAEN,yBAAKwX,WAjCyBzL,EAiCmBq5B,EAAuBr5B,MAhC1E,aAAN,OAAoBA,EAApB,sBAiCa/L,IAAKA,GAELolC,EAAuB5nC,MAE3B6nC,EAAcD,EAAuBr5B,QAAUs5B,EAAcD,EAAuBr5B,UCpBpFw5B,I,MAA+C,SAA/CA,EAAgDpuB,GACzD,IAAO5a,EAAmF4a,EAAnF5a,GAAIipC,EAA+EruB,EAA/EquB,SAAUC,EAAqEtuB,EAArEsuB,UAAWC,EAA0DvuB,EAA1DuuB,WAAYC,EAA8CxuB,EAA9CwuB,cAAe5nC,EAA+BoZ,EAA/BpZ,UAAW6nC,EAAoBzuB,EAApByuB,WAAYhiC,EAAQuT,EAARvT,KAElF,EAA4EiiC,GAAsBjiC,EAAMrH,GAAjGupC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,SAAUC,EAA7C,EAA6CA,YAAaC,EAA1D,EAA0DA,eA8C1D,OACI,yBACI1uB,UAAW0uB,EAAiB,oBAAsB,OAClDhpB,MAAO,CACHipB,SAAUV,EAAYG,EACtB1B,UAAWwB,EAAaE,EACxBQ,SAAS,GAAD,OAAKR,EAAL,OAEZnuB,QAASN,EAAMM,QAAU,kBAAMN,EAAMM,QAASN,EAAM5a,UAAMsC,EAC1DmB,IAAKzD,GAEL,yBAAKib,UAAU,cAEWwuB,EAvCtB,yBAAKxuB,UAAU,gCACD,aAAT5T,GACD,yBAAK4T,UAAU,eACX,kBAAC,GAAD,CACII,KAAMqX,GAAYoX,MAClB5uB,QAAS,kBAAMquB,EAAYvpC,EAAIqH,IAC/B4T,UAAS,sBACTgc,SAAUpe,GAAWC,UAG7B,yBAAKmC,UAAU,eACX,kBAAC,GAAD,CACII,KAAMqX,GAAYoX,MAClB5uB,QAAS,kBAAMsuB,EAAcxpC,EAAIqH,IACjC4T,UAAS,8BAAyB0uB,EAAiB,eAAiB,IACpE1S,SAAUpe,GAAW3N,WAK7B,yBAAK+P,UAAU,kCACnB,+BAAQguB,IAoBR,yBAAKhuB,UAAU,eACX,kBAAC,GAAD,CAAqBA,UAAW,kCACXC,QAAS,WACLwuB,GAAaD,IAEjBnS,KAAMmS,MAKlCjoC,GACG,yBAAKyZ,UAAU,uBACVzZ,EAAU3B,KAAI,SAAC4B,EAAU1B,GAAX,OAvEP,SAACC,EAAY+pC,EAAsBzrC,GACvD,OACI,kBAAC0qC,EAAD,CACIhpC,GAAIA,EACJipC,SAAUc,EACVX,cAAe9qC,EACf4qC,UAAWA,EACXC,WAAYA,EACZE,WAAYA,EACZ5lC,IAAKzD,EACLqH,KAAK,aA8DG2iC,CACIjqC,EACA0B,EAASR,KACTmoC,EAAcl+B,QACV,SAACnD,GAAD,OACKA,EAAMkiC,SAGJloC,aAAeN,EAASzB,iBAOnCsC,IAAdd,GAAiD,KAAb,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWiG,UAAiB2hC,EAAcvpC,IAAI+oC,OAMjFU,GAAwB,SAACjiC,EAAqCrH,GAChE,IAAMkqC,EAA0B1uB,YAAYoQ,IAC5C,EAAgC+L,oBAAkB,GAAlD,mBAAO8R,EAAP,KAAiBC,EAAjB,KACM7xB,EAAW4D,cAqCXkuB,EAAiBO,EAAcrkC,MACjC,SAACqF,GAAD,OAAaA,EAAO7D,OAASA,GAAyB,SAAhB6D,EAAO7D,MAA4B,aAATA,IAAyB6D,EAAOlL,KAAOA,KAG3G,MAAO,CACHupC,YAxCgB,SAACY,EAAmBC,GACpC,OAAQA,GACJ,IAAK,QACDvyB,EAASwc,GAAYb,QAAQe,cAAc4V,IAC3C,MACJ,IAAK,OACDtyB,EAASwc,GAAYb,QAAQkB,aAAayV,IAC1C,MACJ,IAAK,WACDtyB,EAASwc,GAAYb,QAAQsB,iBAAiBqV,IAEtDT,GAAY,IA8BZF,cA5BkB,SAACW,EAAmBC,GACtC,OAAQA,GACJ,IAAK,QACGT,GACA9xB,EAASiV,GAAqB9C,kBAAkBmgB,IAChDT,GAAY,IAEZ7xB,EAASiV,GAAqB/C,gBAAgBogB,IAElD,MACJ,IAAK,OACL,IAAK,WACGR,GACA9xB,EAASiV,GAAqBoB,kBAAkBic,IAChDT,GAAY,IAEZ7xB,EAASiV,GAAqBmB,eAAekc,MAazDV,WACAC,cACAC,eAAgBA,ICzKXU,I,MAAqD,SAACzvB,GAC/D,IAAOgc,EAAYhc,EAAZgc,SAEP,OACI,yBAAK3b,UAAW,cAAe2b,KCF1B0T,I,OAAmD,SAAC1vB,GAC7D,IAAOkG,EAA4BlG,EAA5BkG,MAAO8V,EAAqBhc,EAArBgc,SAAU2T,EAAW3vB,EAAX2vB,QAExB,OACI,yBAAKtvB,UAAW,eAAiBsvB,EAAU,iBAAmB,KAC1D,yBAAKtvB,UAAW,wBAAyB2b,GAD7C,OAEK9V,QAFL,IAEKA,OAFL,EAEKA,EAAO0pB,iBCTPC,GAAb,oDACI,aAOG,IAAD,EANSxpC,EAMT,uDANwB,GACfU,EAKT,wDAL4B,EACnBC,EAIT,uDAJqC,GAC5BK,EAGT,uDAHiE,GACxDjB,EAET,uDAF6B,CAACqG,KAAM3B,EAAeyhB,KAC1CpmB,EACT,uDAD+B,CAACsG,KAAM3B,EAAeiI,OACrD,4BACE,gBAPO1M,OAMT,EALSU,UAKT,EAJSC,aAIT,EAHSK,4BAGT,EAFSjB,SAET,EADSD,WACT,EARN,UAAqCyM,ICHxBk9B,GAAb,oDACI,aAC8C,IAAD,EAD1B5pB,EAC0B,uDADV,GAChBwE,IAA0B,qFACzC,gBAFexE,QAC0B,EAA1BwE,UAA0B,EAFjD,UAA6B9X,ICAhBm9B,GAAb,oDACI,aAEG,IAAD,EADShpC,EACT,wDAD4B,EAC5B,4BACE,gBAFOA,UACT,EAHN,UAAkC+oC,ICqBrBE,GAhBe,SAACn7B,GAAD,OAAwC,SAACoI,GACjE,IAAMzB,EAA6CD,GAA0B1G,GACvD,MAAlB2G,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAWAmnB,GARiB,SAAC5kC,GAAD,OAAoC,SAAC6R,GAC/D,IAAMzB,EAA6CD,GAA4BnQ,GACzD,MAAlBoQ,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QCLAonB,GAAoB,WAC7B,IAAM1hB,EAAgC3N,YAAYoQ,IAC5C/T,EAAW4D,cACjB,EAA8Ckc,oBAAkB,GAAhE,mBAAOmT,EAAP,KAAwBC,EAAxB,KACMvnB,EAAmBhI,YAAY8H,IAAqD,OAAb6F,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,MAAO,IAEnG83B,qBAAU,WAEF1yB,EAAUC,kBAAkB8jB,KAC5BxpB,QAAQ8C,KAAK,uDAAyD0mB,GACtEtR,EAASwc,GAAYb,QAAQ3H,UAEN,KAAV,OAAb1C,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,KACf+qC,GAAmB,KAExB,CAAC5hB,EAAetR,IAEnB,IAoEMmzB,EAA+B,SAACC,GAClCpzB,EAAS+yB,GAAoBK,KA2BjC,MAAO,CACHnqB,MAAO,YAA0B,OAAbqI,QAAa,IAAbA,OAAA,EAAAA,EAAeloB,OAAQ,IAC3CA,KAAI,OAAEkoB,QAAF,IAAEA,OAAF,EAAEA,EAAeloB,KACrBjB,IAAiB,OAAbmpB,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,IAAKmpB,EAAcnpB,IAAM,EAC5CymC,WApGe,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkB8jB,GAAgB,CAC7C,IAAM+hB,EAA2B9lC,EAAUG,SAAS4jB,GACpD+hB,EAAgBjqC,KAAOA,EACvB4W,EAASkY,GAAemb,MAiG5BC,UA7Fc,SAACC,GACVhmC,EAAUC,kBAAkB8jB,KACD,KAAxBA,EAAeloB,KACf4W,EAASkY,GAAe5G,IAExBtR,EAASkY,GAAiB5G,IAG1BtR,EADAizB,IAAoBM,EACX/W,GAAYb,QAAQkC,YAEpBrB,GAAYb,QAAQ3H,UAoFrC9W,YA/EgB,WACX3P,EAAUC,kBAAkB8jB,IAC7BtR,EAASkY,GAAiB5G,IAE9BtR,EAASwc,GAAYb,QAAQ3H,SA4E7Bwf,cAzEkB,WAClB,OAAKjmC,EAAUC,kBAAkB8jB,IACtB/jB,EAAUI,YAAY2jB,EAAeloB,OAwEhDqqC,cA/CkB,WAClBzzB,EAASwc,GAAYb,QAAQkC,cA+C7B6V,eA5CmB,WACnB,IAAMta,EAA2B7rB,EAAUG,SAAS4jB,GACpDtR,EAAS2a,GAAajpB,KAAK0nB,KA2C3Bua,uBA1D2B,SAAChrC,GAC5B,IAAIirC,EAA8CjrC,OAC3B8B,IAAnBmpC,KACAA,EAAiB,IAAIhB,IACN9oC,SAAuB,OAAbwnB,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,MAAO,GAEnD6X,EAASwc,GAAYb,QAAQuC,kBAAkB0V,KAqD/CC,mBArEuB,SAAC38B,GACxB,IAAI48B,EAA2C58B,OACvBzM,IAApBqpC,KACAA,EAAkB,IAAIl+B,IACN9L,SAAuB,OAAbwnB,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,MAAO,EAChD2rC,EAAgBzqC,KAAOsiB,GAE3B3L,EAASwc,GAAYb,QAAQsC,cAAc6V,KA+D3CC,WAlBe,WACVxmC,EAAUC,kBAAkB8jB,IAC7BtR,EAASwc,GAAYb,QAAQoC,oBAiBjCF,UAzBc,WACTtwB,EAAUC,kBAAkB8jB,IAC7BtR,EAASwc,GAAYb,QAAQkC,UAAUvM,KAwB3C6hB,+BACAa,+BAvCmC,WACnC,IAAKzmC,EAAUC,kBAAkB8jB,GAAgB,CAC7C,IAAI2iB,EAA8B,IAAInB,GACtCmB,EAAcnqC,QAAUwnB,EAAenpB,GACvCgrC,EAA6Bc,KAoCjCC,+BAhCmC,SAACC,GACpCn0B,EAAS+yB,GAAsBoB,OChG1BC,GAAuE,WAChF,MAUIpB,KATA5pC,EADJ,EACIA,KACAwlC,EAFJ,EAEIA,WACA6E,EAHJ,EAGIA,cACAE,EAJJ,EAIIA,uBACAL,EALJ,EAKIA,UACAp2B,EANJ,EAMIA,YACA/U,EAPJ,EAOIA,GACA0rC,EARJ,EAQIA,mBACAE,EATJ,EASIA,WAGJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAa9qB,MAAM,gBACf,kBAAC,GAAD,CACIA,MAAM,QACNqX,YAAY,gBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,KAIf,kBAAC,GAAD,CAAare,MAAM,+BACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAauD,EACbtD,SAAU,kBAAC,GAAD,CACNlQ,SAAU,SAACnpB,GAAD,OAAU28B,EAAmB38B,IACvC+R,MAAM,OACNvR,QAASvP,OAK5B,kBAAC,GAAD,CAAa8gB,MAAM,mCACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAaqD,EACbpD,SAAU,kBAAC,GAAD,CACNlQ,SAAUsT,EACV1qB,MAAM,WACNvR,QAASvP,OAK5B,kBAAC,GAAD,CAAa8gB,MAAM,UACNypB,SAAS,GAElB,kBAAC,GAAD,CAAarvB,QAAS0wB,GAAtB,SACA,kBAAC,GAAD,CAAa1wB,QAASowB,GACjB,kBAEL,kBAAC,GAAD,CAAiBpwB,QAASiwB,IAC1B,kBAAC,GAAD,CAAmBjwB,QAASnG,OCpD/Bm3B,GAAqE,WAE9E,MAMIC,KALAC,EADJ,EACIA,eACAC,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,kBACAC,EAJJ,EAIIA,kBACAC,EALJ,EAKIA,eAGJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAa1rB,MAAM,SACf,kBAAC,GAAD,CACIqnB,YAAa,kBAAMiE,KACnBhE,SAAU,kBAAC,GAAD,CAAoBlQ,SAAUkU,EACVtrB,MAAM,aAI5C,kBAAC,GAAD,CAAaA,MAAM,OACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAa,kBAAMkE,KACnBjE,SAAU,kBAAC,GAAD,CAAmBlQ,SAAUmU,EACVvrB,MAAM,WAG9C,kBAAC,GAAD,CAAWqnB,YAAa,kBAAMmE,KACnBlE,SAAU,kBAAC,GAAD,CAAuBlQ,SAAUoU,EACVxrB,MAAM,gBAKtD,kBAAC,GAAD,CAAaA,MAAM,WACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAa,kBAAMoE,KACnBnE,SAAU,kBAAC,GAAD,CACNlQ,SAAU,SAACjqB,GAAD,OAAgBs+B,EAAiB,OAACt+B,QAAD,IAACA,OAAD,EAACA,EAAYjO,KACxD8gB,MAAM,eAGrB,kBAAC,GAAD,CAAWqnB,YAAa,kBAAMqE,KACnBpE,SAAU,kBAAC,GAAD,CACNlQ,SAAU,SAAC/oB,GAAD,OAAWq9B,EAAer9B,IACpC2R,MAAM,eAQ/BqrB,GAAmC,WACrC,IAAMt0B,EAAW4D,cAGjB,MAAO,CACHqQ,KAHetQ,YAAYqY,IAI3BuY,eAAgB,SAACrkC,GAAD,OAAsB8P,EAASwc,GAAYb,QAAQc,UAAUvsB,KAC7EskC,cAAe,SAACjrC,GAAD,OAAoByW,EAASwc,GAAYb,QAAQiB,SAASrzB,KACzEkrC,kBAAmB,SAACnmC,GAAD,OAA+B0R,EAASwc,GAAYb,QAAQwB,aAAa7uB,KAC5FomC,kBAAmB,SAAC7kC,GAAD,OAAyBmQ,EAASwc,GAAYb,QAAQyB,aAAavtB,KACtF8kC,eAAgB,SAACr9B,GAAD,OAAqB0I,EAASwc,GAAYb,QAAQkC,UAAUvmB,OCpFvEs9B,GAAb,oDACI,aAOG,IAAD,EANSxrC,EAMT,uDANgB,GACPlB,EAKT,wDALkB,EACToB,EAIT,wDAJuB,EACdiG,EAGT,uDAHsB,CAACC,KAAMnC,EAAUyI,OAC9BzM,EAET,wDADSK,EACT,uDADwB,GACxB,4BACE,gBAPON,OAMT,EALSlB,QAKT,EAJSoB,aAIT,EAHSiG,OAGT,EAFSlG,OAET,EADSK,OACT,EARN,UAAoCiM,ICAvBk/B,GACT,aAA4G,IAAzFz7B,EAAwF,uDAAvD,IAAIw7B,GAAyB3tC,EAA0B,uDAAJ,GAAI,yBAAxFmS,iBAAwF,KAA1BnS,WCKxE6tC,GAAb,oDACI,aASG,IAAD,EARS1rC,EAQT,uDARwB,GACfE,EAOT,wDAP+B,EACtBS,EAMT,uDANqC,GAC5BK,EAKT,uDALiE,GACxDjB,EAIT,uDAJwB,CAACqG,KAAMnC,EAAUiiB,KAChCpmB,EAGT,uDAH0B,CAACsG,KAAMnC,EAAUyI,OAClCzM,EAET,wDADSK,EACT,uDADwB,GACxB,4BACE,gBATON,OAQT,EAPSE,aAOT,EANSS,aAMT,EALSK,4BAKT,EAJSjB,SAIT,EAHSD,WAGT,EAFSG,OAET,EADSK,OACT,EAVN,UAAgCiM,ICPnBo/B,GAAb,oDACI,aAEG,IAAD,EADSzrC,EACT,wDAD+B,EAC/B,4BACE,gBAFOA,aACT,EAHN,UAAqCupC,ICqBxBmC,GAhBkB,SAACl8B,GAAD,OAA8C,SAACkH,GAC1E,IAAMzB,EAAgDD,GAA6BxF,GAC7D,MAAlByF,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QAWAopB,GARoB,SAACC,GAAD,OAA+B,SAACj1B,GAC7D,IAAMzB,EAAgDD,GAA+B22B,GAC/D,MAAlB12B,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAAS4L,QCNAspB,GAAuB,WAChC,IAAMtR,EAAoCjgB,YAAYqY,IAChDuT,EAAuC5rB,YAAYoQ,IACnD/T,EAAW4D,cACjB,EAA8Ckc,oBAAkB,GAAhE,mBAAOmT,EAAP,KAAwBC,EAAxB,KAEAjT,qBAAU,WAEF1yB,EAAUC,kBAAkBo2B,KAC5B5jB,EAASF,GAAcN,YAAY,kEACnCQ,EAASwc,GAAYb,QAAQ3H,UAEL,KAAV,OAAd4P,QAAc,IAAdA,OAAA,EAAAA,EAAgBz7B,KAChB+qC,GAAmB,KAExB,CAACtP,EAAgB5jB,IAEpB,IAsDM2L,EAAU,WACZ,OAAqD,KAA9B,OAAhB4jB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl5B,iBAAiBzG,SAAsD,IAAtC2/B,EAAiBroC,UAAU0I,QA6BnFwM,EAAoB,SAACg3B,GACvBpzB,EAASg1B,GAAuB5B,KA2BpC,MAAO,CACHnqB,MAAO,YAA2B,OAAd2a,QAAc,IAAdA,OAAA,EAAAA,EAAgBx6B,OAAQ,IAC5CA,KAAI,OAAEw6B,QAAF,IAAEA,OAAF,EAAEA,EAAgBx6B,KACtBwlC,WAnHe,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkBo2B,GAAiB,CAC9C,IAAMuR,EAAiC5nC,EAAUG,SAASk2B,GAC1DuR,EAAmB/rC,KAAOA,EAC1B4W,EAAS2a,GAAajpB,KAAKyjC,MAgH/BC,aA5GiB,WACY,KAAzBxR,EAAgBx6B,KAChB4W,EAAS2a,GAAajpB,KAAKkyB,IAE3B5jB,EAAS2a,GAAalpB,OAAOmyB,IAG7B5jB,EADAizB,EACSzW,GAAYb,QAAQyB,eAEpBZ,GAAYb,QAAQ3H,SAoGjCqhB,eAhGmB,WACnBr1B,EAAS2a,GAAalpB,OAAOmyB,IAC7B5jB,EAASwc,GAAYb,QAAQ3H,SA+F7BshB,sBApF0B,SAAChmC,GAC3B,IAAIimC,EAA0CjmC,OAC3B7E,IAAf8qC,KACAA,EAAa,IAAIV,IACNz7B,eAAe9P,YAA2B,OAAds6B,QAAc,IAAdA,OAAA,EAAAA,EAAgBz7B,MAAO,EAC9DotC,EAAWn8B,eAAe/P,KAAOsiB,KAErC3L,EAASwc,GAAYb,QAAQ4B,SAASgY,KA8EtC/B,cA7FkB,WAClB,OAAKjmC,EAAUC,kBAAkBo2B,IACtBr2B,EAAUI,YAAYi2B,EAAgBx6B,OA4FjDgwB,aA9DiB,WACjB,IAAMA,EAA2B7rB,EAAUG,SAASk2B,GACpDxK,EAAahwB,MAAqB,OAAdw6B,QAAc,IAAdA,OAAA,EAAAA,EAAgBx6B,MAAO,QAC3CgwB,EAAajxB,IAAM,EACnB6X,EAAS2a,GAAa3C,OAAOoB,KA2D7Bqa,cAxDkB,WAClBzzB,EAASwc,GAAYb,QAAQyB,iBAwD7BsW,eArDmB,WACnB,IAAMta,EAA2B7rB,EAAUG,SAASk2B,GACpD5jB,EAAS2a,GAAajpB,KAAK0nB,KAoD3Boc,kBA/EsB,SAAC7sC,GACvB,IAAIirC,EAAyCjrC,OACtB8B,IAAnBmpC,KACAA,EAAiB,IAAIkB,IACNxrC,YAA2B,OAAds6B,QAAc,IAAdA,OAAA,EAAAA,EAAgBz7B,MAAO,EACnDyrC,EAAevqC,KAAOsiB,KAE1B3L,EAASwc,GAAYb,QAAQ6B,aAAaoW,KAyE1CzrC,IAAkB,OAAdy7B,QAAc,IAAdA,OAAA,EAAAA,EAAgBz7B,MAAO,EAC3BuB,KAAMk6B,EAAiBA,EAAel6B,KAAO,GAC7C+rC,SApDa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkBo2B,GAAiB,CAC9C,IAAMuR,EAAiC5nC,EAAUG,SAASk2B,GAC1DuR,EAAmBzrC,KAAOuZ,EAC1BjD,EAAS2a,GAAajpB,KAAKyjC,MAiD/B/4B,oBACAC,oBAhCwB,SAAC83B,GACzBn0B,EAASg1B,GAAyBb,KAgClCuB,oBAzCwB,WACxB,IAAKnoC,EAAUC,kBAAkBo2B,GAAiB,CAC9C,IAAI+R,EAAoC,IAAIZ,GAC5CY,EAAiBrsC,WAAas6B,EAAgBz7B,GAC9CiU,EAAkBu5B,KAsCtB5B,WAxBe,WACVxmC,EAAUC,kBAAkBo2B,IAC7B5jB,EAASwc,GAAYb,QAAQ0B,uBAuBjCD,aA/BiB,WACZ7vB,EAAUC,kBAAkBo2B,IAC7B5jB,EAASwc,GAAYb,QAAQyB,aAAawG,EAAgBz7B,QCpHzDytC,GAA6E,WAEtF,MAYIV,KAXA9rC,EADJ,EACIA,KACAwlC,EAFJ,EAEIA,WACAyG,EAHJ,EAGIA,eACAD,EAJJ,EAIIA,aACAE,EALJ,EAKIA,sBACA7B,EANJ,EAMIA,cACAC,EAPJ,EAOIA,eACA8B,EARJ,EAQIA,kBACA9rC,EATJ,EASIA,KACA+rC,EAVJ,EAUIA,SACA1B,EAXJ,EAWIA,WAGJ,OACI,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAa9qB,MAAM,mBACf,kBAAC,GAAD,CACIA,MAAM,QACNqX,YAAY,mBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,EACPD,OAAQqM,KAGhB,kBAAC,GAAD,CAAazqB,MAAM,kCACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAagF,EACb/E,SAAU,kBAAC,GAAD,CAAmBlQ,SAAUiV,EACVrsB,MAAM,YAIlD,kBAAC,GAAD,CAAaA,MAAM,sCACNypB,SAAS,GAElB,kBAAC,GAAD,CAAWpC,YAAakF,EACbjF,SAAU,kBAAC,GAAD,CAAuBlQ,SAAUmV,EACVvsB,MAAM,gBAItD,kBAAC,GAAD,CAAaA,MAAO,UACPypB,SAAS,GAElB,kBAAC,GAAD,CAAarvB,QAAS0wB,GAAtB,SAEA,kBAAC,GAAD,CAAa1wB,QAASowB,GAEjB,kBAEL,kBAAC,GAAD,CAAiBpwB,QAAS+xB,IAC1B,kBAAC,GAAD,CAAoB3E,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAmB2Z,QAASgyB,OC1E/BQ,GAAb,oDACI,aASG,IAAD,EARSptC,EAQT,wDAR2B,EAClBF,EAOT,wDAP6B,EACpBC,EAMT,wDAN2B,EAClBH,EAKT,wDALmB,EACVC,EAIT,wDAJuB,EACdF,EAGT,uDAHsBwc,GAAWyH,IACxB3jB,EAET,uDAFuB,GACdR,EACT,wDADkB,EAClB,4BACE,gBATOO,iBAQT,EAPSF,mBAOT,EANSC,iBAMT,EALSH,SAKT,EAJSC,aAIT,EAHSF,aAGT,EAFSM,cAET,EADSR,QACT,EAVN,UAA8ByN,ICyDjBmgC,GAnCa,SAAC7tC,GAAD,OAAgC,SAAC+X,GACvD,IAAM+1B,EAAsB9tC,EAAOC,MAE7BqW,EAAyCD,GAA0BrW,GACnD,MAAlBsW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAGhD,IAAMw3B,EAAyDpqB,GAAuB7Q,oBAClF9S,EAAOQ,gBAGPutC,IACAA,EAA0B/uC,QAAQe,KAAI,SAACC,GAInC,OAHIA,EAAOC,MAAQ6tC,IACf9tC,EAAOC,MAAQD,EAAOC,MAAQ,GAE3BD,KAGX+X,EAASmZ,GAASznB,KAAKskC,KAG3Bh2B,EAAS4L,QAYAkqB,GATgB,SAAC7tC,GAAD,OAAgC,SAAC+X,EAAUK,GACpE,IAAM4T,EAAa5T,IAAW2T,KAAKC,KAC/BA,IAASC,GAAKoH,0BACdtb,EAAS+W,GAAYsE,gBAAgBpzB,IAErC+X,EAASF,GAAcN,YAAY,sCAAwCyU,MAItE6hB,GA1CW,SAAC7tC,GAAD,OAAgC,SAAC+X,GACrD,IAAMzB,EAAyCD,GAAwBrW,GACjD,MAAlBsW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,YAuCvCs3B,GAlDa,SAAC7tC,GAAD,OAAgC,SAAC+X,GACvD,IAAMzB,EAAyCD,GAAwBrW,GACjD,MAAlBsW,EAASE,MACTuB,EAASF,GAAcN,YAAYjB,EAASC,UAEhDwB,EAASwc,GAAYb,QAAQiC,WAAWrf,EAAS9Q,WCExCwoC,GAAqB,WAC9B,IAAM/Z,EAAgCvY,YAAYqY,IAC5Cv1B,EAAqBkd,YAAY8H,IACjCtkB,EAAmBwc,YAAY8H,IAC/B8jB,EAAuC5rB,YAAYoQ,IACnD/T,EAAW4D,cAEjB,EAAsBkc,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEMxxB,EAAe,SAAClT,GAClB,GAAe,OAAXA,EAAiB,CACjB+X,EAAS81B,GAAkB7tC,IAE3B,IAAMqH,EAAoCsc,GAAuB7Q,oBAC7D9S,EAAOQ,gBAGP6G,EACA0Q,EAASwc,GAAYb,QAAQ4B,SAASjuB,KAGtC0Q,EAASF,GAAcN,YAAY,oBACnCQ,EAASwc,GAAYb,QAAQ3H,WA8GnCkiB,EAAe,SAACjnC,EAAiBxI,GAAgC,IAAD,EAClE,OAAO,UAAAA,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAO8G,YAA1C,eAAoDiB,MAAM9G,OAAQ,IAQvEo4B,EAAqB,SAAChyB,GACxB,IAAIyZ,EAAgB,GACpB,OAAQzZ,GACJ,KAAKoV,GAAWyH,IACZpD,EAAQ,gBACR,MACJ,KAAKrE,GAAW8H,OACZzD,EAAQ,SACR,MACJ,KAAKrE,GAAWgI,KACZ3D,EAAQ,OACR,MACJ,KAAKrE,GAAWkI,gBACZ7D,EAAQ,kBACR,MACJ,KAAKrE,GAAW6O,QACZxK,EAAQ,UAGhB,OAAOA,GAiBX,MAAO,CACHA,MAAO,kCACPhhB,OAAQi0B,EACRia,SAnJa,SAACjmC,EAA6BkmC,GAC3C,QAAc3rC,IAAVyF,EAAqB,CACrB,IAAMmmC,EAA6B9oC,EAAUG,SAASwuB,GACtDka,EACOC,EAAiB7tC,eAAiB0H,EAAMA,MAAM/H,GAC9CkuC,EAAiB9tC,iBAAmB2H,EAAMA,MAAM/H,GACvD6X,EAAS81B,GAAkBO,IAC3Br2B,EAAS81B,GAAgBO,MA6I7BC,UAzIc,SAACC,GACf,QAAsB9rC,IAAlB8rC,GAAoD,OAArBhH,GAA8C,OAAjBrT,EAAuB,CACnF,IAAMma,EAA6B9oC,EAAUG,SAASwuB,GACtDma,EAAiBjuC,WAAamuC,EAC9BF,EAAiB7tC,eAAiB+tC,EAAc5iB,SAAS,QAAUuI,EAAa1zB,gBAAkB,EAClG6tC,EAAiB9tC,iBAAmBguC,EAAc5iB,SAAS,QAAUuI,EAAa3zB,kBAAoB,EACtGyX,EAAS81B,GAAkBO,IAC3Br2B,EAAS81B,GAAgBO,MAmI7BG,QArHY,SAACjtC,GACb,QAAakB,IAATlB,EAAoB,CACpB,IAAM8sC,EAA6B9oC,EAAUG,SAASwuB,GACtDma,EAAiBhuC,OAASkB,EAAKA,KAAKpB,GACpC6X,EAAS81B,GAAkBO,IAC3Br2B,EAAS81B,GAAgBO,MAiH7BI,eAAc,OAAEva,QAAF,IAAEA,OAAF,EAAEA,EAAc1zB,eAC9BkuC,iBAAgB,OAAExa,QAAF,IAAEA,OAAF,EAAEA,EAAc3zB,iBAChC6F,QAAkC,KAAd,OAAZ8tB,QAAY,IAAZA,OAAA,EAAAA,EAAc7zB,SAAd,OAA0C6zB,QAA1C,IAA0CA,OAAZzxB,EAAYyxB,EAAc7zB,OAChED,WAAU,OAAE8zB,QAAF,IAAEA,OAAF,EAAEA,EAAc9zB,WAC1B+S,eACAw7B,mBAjKuB,WAClBppC,EAAUC,kBAAkB0uB,IAC7B/gB,EAAa+gB,IAgKjBP,QAvFY,SAAC4X,GACb,IAAKhmC,EAAUC,kBAAkB0uB,GAI7B,GAvBY,SAACj0B,GACjB,IAAI2F,EACJ,OAAQ3F,EAAOG,YACX,KAAKwc,GAAW6O,QACZ7lB,GAAqC,IAA7B3F,EAAOM,mBAAsD,IAA3BN,EAAOO,eACjD,MACJ,KAAKoc,GAAWgI,KAGhB,KAAKhI,GAAWkI,gBACZlf,GAA2B,IAAnB3F,EAAOI,SAA8C,IAA7BJ,EAAOM,mBAAsD,IAA3BN,EAAOO,eACzE,MACJ,QACIoF,GAA2B,IAAnB3F,EAAOI,SAA8C,IAA7BJ,EAAOM,iBAE/C,OAAOqF,EAKEgpC,CAAY1a,IACb/gB,EAAa+gB,GAEbqX,GAAuB,SAAZA,EACXvzB,EAASwc,GAAYb,QAAQ3H,aAC1B,GAAIuf,GAAuB,aAAZA,EAClBvzB,EAASwc,GAAYb,QAAQyB,aAApB,OAAiCmS,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAkBn5B,WAAWjO,SACpE,CACH,IAAMmH,EAAoCsc,GAAuB7Q,oBAC7DmhB,EAAczzB,gBAEd6G,GACA0Q,EAASwc,GAAYb,QAAQ4B,SAASjuB,MA0ElDmkC,cApEkB,WAClB,GAAIvX,EAAc,CACd,IAAM2a,EAAsB,IAAIhB,GAChCgB,EAAUpuC,eAAiByzB,EAAazzB,eACxCouC,EAAU3uC,MAAQg0B,EAAah0B,MAAQ,EACvC8X,EAAS81B,GAAkBe,IAC3BlK,EAAO/gC,EAAM,KA+DjBA,MACAkrC,mBAtHuB,SAAC3G,GACxB,QAAwB1lC,IAApB0lC,EAA+B,CAC/B,IAAMkG,EAA6B9oC,EAAUG,SAASwuB,GACtDma,EAAiBhuC,OAAS8nC,EAAgB9nC,OAC1CguC,EAAiB/tC,WAAa6nC,EAAgBjmC,WAC9C8V,EAAS81B,GAAkBO,IAC3Br2B,EAAS81B,GAAgBO,MAiH7BlG,gBAAiB/kC,KAAKG,UAAU,CAC5BlD,OAAM,OAAE6zB,QAAF,IAAEA,OAAF,EAAEA,EAAc7zB,OACtB6B,WAAU,OAAEgyB,QAAF,IAAEA,OAAF,EAAEA,EAAc5zB,aAE9ByuC,gBA9IoB,SAAC9zB,GACrB,QAAqBxY,IAAjByxB,EAA4B,CAC5B,IAAMma,EAA6B9oC,EAAUG,SAASwuB,GACtDma,EAAiB3tC,YAAcua,EAC/BjD,EAAS81B,GAAkBO,IAE3Br2B,EAAS81B,GAAgBO,MAyI7BW,cAA0B,OAAZ9a,QAAY,IAAZA,OAAA,EAAAA,EAAc9zB,cAAewc,GAAW6O,QAAUyI,EAAaxzB,YAAc,GAC3FuuC,cApCkB,SAAChvC,GAWnB,OATIA,EAAOG,aAAewc,GAAW6O,QAC7B,UAAMyiB,EAAajuC,EAAOM,iBAAkB9B,GAA5C,cAAyD+6B,EACzDv5B,EAAOG,YADP,cA9BQ,SAACgG,EAAgBjH,GACjC,IAAMoC,EAA4BpC,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,KACxE,OAAO7E,EAAI,OAAGA,QAAH,IAAGA,OAAH,EAAGA,EAAMA,KAAKH,KAAO,eA8BrBo8B,CAAYv9B,EAAOI,OAAQlB,IAE9B,UAAM+uC,EAAajuC,EAAOO,eAAgB/B,GAA1C,cAAuD+6B,EACvDv5B,EAAOG,YADP,cAEG8tC,EAAajuC,EAAOM,iBAAkB9B,Q,S9B3L7CikC,K,mBAAAA,E,gBAAAA,E,gBAAAA,Q,KAWL,IAAMwM,GAA+C,SAACn0B,GACzD,IAAOgc,EAA8Bhc,EAA9Bgc,SAAU3b,EAAoBL,EAApBK,UAAW+zB,EAASp0B,EAATo0B,MAE5B,OACI,2BAAO/zB,UAAWA,GAAwB,kBACnC0F,MAAO,CAACsuB,eAAgBD,QAAgB1sC,IAC7Cs0B,I+BEGsY,GAAiD,WAE1D,MAeIpB,KAdAE,EADJ,EACIA,SACAG,EAFJ,EAEIA,UACAE,EAHJ,EAGIA,QACAG,EAJJ,EAIIA,mBACAF,EALJ,EAKIA,eACAC,EANJ,EAMIA,iBACAtoC,EAPJ,EAOIA,OACAhG,EARJ,EAQIA,WACAuzB,EATJ,EASIA,QACA8X,EAVJ,EAUIA,cACAqD,EAXJ,EAWIA,mBACA3G,EAZJ,EAYIA,gBACA4G,EAbJ,EAaIA,gBACAC,EAdJ,EAcIA,aAGJ,OAAO,kBAAC,GAAD,KAEH,kBAAC,GAAD,KACI,uCAGJ,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,kBAAC,GAAD,CAAoB3W,SAAUiW,EACVzqC,MAAOzD,KAI/B,kBAAC,GAAD,MAECA,IAAewc,GAAW6O,SAAW,kBAAC,GAAD,KAEjCrrB,IAAewc,GAAWyH,KACvB,oCACI,kBAAC,GAAD,6BACA,kBAAC,GAAD,CAAkBgU,SAAUyW,EACVjrC,MAAOskC,KAIhC/nC,IAAewc,GAAWyH,KAC3B,oCACI,kBAAC,GAAD,oBACA,kBAAC,GAAD,CAAcgU,SAAUmW,EACV3qC,MAAOuC,MAK5BhG,IAAewc,GAAW6O,SAC3B,kBAAC,GAAD,KACI,kBAAC,GAAD,2BACA,kBAAC,GAAD,CACI6M,YAAY,mBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkB2tC,EAAgB3tC,IACpDyC,MAAOmrC,KAIf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWG,MAAOzM,GAAepC,QAC5BlgC,IAAewc,GAAWyH,IAAM,KAAO,SAIhD,kBAAC,GAAD,KACI,kBAAC,GAAD,MAEkB,OAAVjkB,QAAU,IAAVA,OAAA,EAAAA,EAAYurB,SAAS,UAAWvrB,IAAewc,GAAW6O,QACpD,uBACA,SAGd,kBAAC,GAAD,CACI4M,SAAU,SAACnwB,GAAD,OACNimC,EAASjmC,GAAiB,OAAV9H,QAAU,IAAVA,OAAA,EAAAA,EAAYurB,SAAS,UAAWvrB,IAAewc,GAAW6O,UAE9E5nB,OACc,OAAVzD,QAAU,IAAVA,OAAA,EAAAA,EAAYurB,SAAS,UAAWvrB,IAAewc,GAAW6O,QACpDgjB,EACAC,OAMH,OAAVtuC,QAAU,IAAVA,OAAA,EAAAA,EAAYurB,SAAS,UAAWvrB,IAAewc,GAAW6O,UAC3D,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW0jB,MAAOzM,GAAepC,QAAjC,OAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,+BACA,kBAAC,GAAD,CACIjI,SAAU,SAACnwB,GAAD,OAAWimC,EAASjmC,GAAO,IACrCrE,MAAO6qC,MAMvB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBrzB,QAASszB,IAC5B,kBAAC,GAAD,CAAatzB,QAASowB,GACjB,kBAEL,kBAAC,GAAD,CAAiBpwB,QAASsY,EACTyD,SAAU5d,UChI1B81B,GAA2D,WAEpE,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCKCC,GAA+C,WAExD,MAAsBzX,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA,ECb6B,WAAO,IAAD,IAE7B6K,EAA+B7zB,YAAYqY,IAC3Chc,EAAW4D,cAEjBqc,qBAAU,WAEF1yB,EAAUC,kBAAkBgqC,KAC5Bx3B,EAASF,GAAcN,YAAY,sEACnCgd,GAAYb,QAAQ3H,UAEzB,CAACwjB,EAAax3B,IAEjB,IAWMy3B,EAAY,WACTlqC,EAAUC,kBAAkBgqC,KACG,MAAjB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAatnC,MAAM9G,MACnB4W,EAASiX,GAAeugB,IAExBE,IAEJ13B,EAASwc,GAAYb,QAAQ3H,UAS/B0jB,EAAc,WAChB13B,EAASiX,GAAiBugB,IAC1Bx3B,EAASwc,GAAYb,QAAQ3H,SAWjC,MAAO,CACHyjB,YACAhE,cApBkB,WAClBgE,IACAz3B,EAASwc,GAAYb,QAAQc,cAmB7BgZ,SAXa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkBgqC,GAAc,CAC3C,IAAMG,EAAsBpqC,EAAUG,SAAS8pC,GAC/CG,EAAUznC,MAAMxG,KAAOuZ,EACvBjD,EAASwc,GAAYb,QAAQc,UAAUkb,MAQ3CD,cACAE,YAvCgB,WAChB,IAAMC,EAA4BtqC,EAAUG,SAAS8pC,GACrDx3B,EAASiX,GAAe4gB,KAsCxBjJ,WA9Ce,SAACxlC,GAChB,IAAMyuC,EAA4BtqC,EAAUG,SAAS8pC,GACrDK,EAAgB3nC,MAAM9G,KAAOA,EAC7B4W,EAASwc,GAAYb,QAAQc,UAAUob,KA4CvCzuC,MAAiB,OAAXouC,QAAW,IAAXA,GAAA,UAAAA,EAAatnC,aAAb,eAAoB9G,OAAQ,GAClCM,MAAiB,OAAX8tC,QAAW,IAAXA,GAAA,UAAAA,EAAatnC,aAAb,eAAoBxG,OAAQ,IDvClCouC,GARAlJ,EADJ,EACIA,WACAgJ,EAFJ,EAEIA,YACAF,EAHJ,EAGIA,YACAjC,EAJJ,EAIIA,SACAhC,EALJ,EAKIA,cACAgE,EANJ,EAMIA,UACAruC,EAPJ,EAOIA,KACAM,EARJ,EAQIA,KAGJ,OACI,kBAAC,GAAD,CAAMkC,IAAKA,GACP,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIqd,MAAM,QACNqX,YAAY,aACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/Ci+B,OAAQuQ,EACR/rC,MAAOzC,EACPk+B,OAAK,MAMjB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBjkB,QAASq0B,IAC5B,kBAAC,GAAD,CAAoBjH,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAa2Z,QAAS,WAClBowB,IACA9G,EAAO/gC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiByX,QAASo0B,OE7D7BM,GAAyD,WAElE,OACI,kBAAC,GAAD,CAAqBtK,KAAM,kBAAC,GAAD,SCEtBuK,GAAiE,SAACj1B,GAC3E,IAAOsd,EAAyCtd,EAAzCsd,SAAUC,EAA+Bvd,EAA/Bud,YAAaz0B,EAAkBkX,EAAlBlX,MAAO/B,EAAWiZ,EAAXjZ,QAC/BnC,EAA8Bgc,YAAY8H,GAA8C3hB,IAM9F,OACI,kBAAC,GAAD,CACIs2B,cAAez4B,EAAYK,KANG,SAAC4P,GACnC,MAAO,CAAChM,IAAKgM,EAAWzP,GAAI0D,MAAO+L,EAAWzP,GAAGmE,WAAY2W,KAAMrL,EAAWqR,UAM1EoX,SAAU,SAAChH,GAAD,OAAUgH,EAAS14B,EAAYuE,MAAK,SAAA0L,GAAU,OAAIA,EAAWzP,KAAOoE,OAAO8sB,EAAKxtB,YAC1Fy0B,YAAaA,EACbz0B,MAAOA,KCMNosC,GAA+D,WAExE,MCpBqC,WACrC,IAAMrE,EAAyCjwB,YAAYqY,IACrD1K,EAAgC3N,YAAYoQ,IAC5C/T,EAAW4D,cACjB,EAA0Ckc,mBAAoB,CAACtwB,KAAM3B,EAAeyhB,MAApF,mBAAO4oB,EAAP,KAAsBC,EAAtB,KACA,EAA8CrY,mBAAoB,CAACtwB,KAAM3B,EAAeiI,QAAxF,mBAAOsiC,EAAP,KAAwBC,EAAxB,KACA,EAAsBvY,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA1M,qBAAU,WACF1yB,EAAUC,kBAAkBomC,KAC5B5zB,EAASF,GAAcN,YAAY,yEACnCQ,EAASwc,GAAYb,QAAQ3H,SAE7B4f,IACAuE,EAAiBvE,EAAezqC,QAChCkvC,EAAmBzE,EAAe1qC,aAEvC,CAAC8W,EAAU4zB,IAEd,IAAM0E,EAAsB,SAACzuC,GACpB0D,EAAUC,kBAAkB3D,IAC7BmW,EAAS0X,GAAkBM,OAAOnuB,KAmBpCkQ,EAAe,WACZxM,EAAUC,kBAAkBomC,IAAoBrmC,EAAUC,kBAAkB8jB,KAChD,KAAzBsiB,EAAgBxqC,KAChB4W,EAAS0X,GAAkBhmB,KAAKkiC,IAEhC5zB,EAAS0X,GAAkBjmB,OAAOmiC,MAcxC2E,EAAe,SAACpvC,EAAiBgkB,GACnC,QAAa1iB,IAAT0iB,EAAoB,CACpB,IAAMqrB,EAAsCjrC,EAAUG,SAASkmC,GAC/DzqC,EAAUqvC,EAAmBrvC,OAASgkB,EAASqrB,EAAmBtvC,SAAWikB,EAC7EnN,EAAS0X,GAAkBhmB,KAAK8mC,IAChCx4B,EAASwc,GAAYb,QAAQuC,kBAAkBsa,MAyHvD,MAAO,CACHpvC,KAAI,OAAEwqC,QAAF,IAAEA,OAAF,EAAEA,EAAgBxqC,KACtBwlC,WAlKe,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAM4E,EAAsCjrC,EAAUG,SAASkmC,GAC/D4E,EAAmBpvC,KAAOA,EAC1BkvC,EAAoBE,KA+JxBz+B,eACAC,eA1ImB,WACdzM,EAAUC,kBAAkBomC,IAAoBrmC,EAAUC,kBAAkB8jB,KAC7EtR,EAAS0X,GAAkBjmB,OAAOmiC,IAClC5zB,EAASwc,GAAYb,QAAQkC,UAAUvM,MAwI3CmnB,WA1He,SAACtvC,EAAiBuvC,GACjC,QAAoBjuC,IAAhBiuC,EAA2B,CAC3B,IAAMC,EAAQ,CAACnpC,KAAO3B,EAAuB6qC,IAE7C,OADAvvC,EAASgvC,EAAiBQ,GAASN,EAAmBM,GAC9CD,GACJ,KAAK7qC,EAAeiI,MAGpB,KAAKjI,EAAeyhB,IAChBipB,EAAapvC,EAAQwvC,MAkHjCC,gBA5GoB,SAACzvC,EAAiB+N,GACtC,GAAIA,EAAM,CACN,IAAM2hC,EAAqB,CAACrpC,KAAM3B,EAAeoiB,KAAM9nB,GAAI+O,EAAK/O,IAChEowC,EAAapvC,EAAQ0vC,KA0GzBC,oBAtGwB,SAAC3vC,EAAiBR,GAC1C,GAAIA,EAAU,CACV,IAAMkwC,EAAqB,CAACrpC,KAAM3B,EAAeiM,IAAK3R,GAAIQ,EAASR,IACnEowC,EAAapvC,EAAQ0vC,KAoGzB1vC,OAAQ+uC,EACRhvC,SAAUkvC,EACVW,eAlGmB,SAAC5vC,GACpB,IAAKoE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACnDoF,EAAwB,IAAIpjC,GAClCojC,EAASlvC,QAAU8pC,EAAgB9pC,QACnCkW,EAASwc,GAAYb,QAAQsC,cAAc+a,EAAUtb,EAAcv0B,MA8FvE8vC,mBA1FuB,SAAC9vC,GACxB,IAAKoE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMsF,EAAgC,IAAItG,GAC1CsG,EAAapvC,QAAU8pC,EAAgB9pC,QACvC,IAAM0uC,EAAsCjrC,EAAUG,SAASkmC,GAC/D5zB,EAASwc,GAAYb,QAAQuC,kBAAkBgb,EAAcV,EAAoBrvC,IACjFwjC,EAAO/gC,EAAM,KAqFjBA,MACAutC,MAAK,OAAEvF,QAAF,IAAEA,OAAF,EAAEA,EAAgBzrC,GACvBuP,SAAuB,OAAdk8B,QAAc,IAAdA,OAAA,EAAAA,EAAgB9pC,WAAY,EACrCsvC,iBAA+B,OAAdxF,QAAc,IAAdA,OAAA,EAAAA,EAAgB7pC,aAAc,GAC/CsvC,OAxKW,WACN9rC,EAAUC,kBAAkBomC,IAAoBrmC,EAAUC,kBAAkB8jB,KAC7EvX,IACAiG,EAASwc,GAAYb,QAAQkC,UAAUvM,MAsK3CgoB,cA9DkB,SAACC,GACnB,IAAKhsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GAGzD,GADiDlW,EAAa3zB,WAAWmC,MAAK,SAAA0C,GAAS,OAAIA,EAAUzG,KAAOoxC,EAAgBpxC,MACrG,CACnB,IAAIqxC,EAAoC9b,EAAa3zB,WAAWsJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUzG,KAAOoxC,EAAgBpxC,MACrHqxC,EAAmBxwC,KAAKuwC,GACxB7b,EAAa3zB,WAAayvC,OAE1B9b,EAAa3zB,WAAWf,KAAKuwC,GAEjCjB,EAAoB5a,KAmDxB+b,gBAvEoB,SAACC,GACrB,IAAKnsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACzDlW,EAAa3zB,WAAa2zB,EAAa3zB,WAAWsJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUzG,KAAOuxC,KACvFpB,EAAoB5a,KAoExBic,gBAtFoB,WACpB,IAAKpsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACzDlW,EAAa3zB,WAAWf,KAAK,CACzBiB,WAAYyzB,EAAav1B,GACzBA,GAAIu1B,EAAa3zB,WAAW6F,OAC5B3G,SAAU,EACVX,YAAa,EACbD,QAAS,IAEbiwC,EAAoB5a,KA6ExBtzB,2BAAyC,OAAdwpC,QAAc,IAAdA,OAAA,EAAAA,EAAgBxpC,4BAA6B,GACxE4pC,+BAhDmC,WACnC,IAAKzmC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACzDlW,EAAatzB,0BAA0BpB,KAAK,CAACkF,SAAU,EAAGwf,gBAAgB,IAE1E4qB,EAAoB5a,KA4CxBkc,+BAxCmC,SAACC,EAAgD3xC,GACpF,GAAI2xC,IACKtsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACzDlW,EAAatzB,0BAA0BlC,GAAS2xC,EAChDvB,EAAoB5a,KAoC5BwW,+BA/BmC,SAAC4F,GACpC,IAAKvsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAAgCnwB,EAAUG,SAASkmC,GACzDlW,EAAatzB,0BAA4BszB,EAAatzB,0BAA0BiJ,QAAO,SAAA0mC,GAAqB,OAAIA,EAAsB7rC,UAAY4rC,KAClJxB,EAAoB5a,MD3IxBsc,GArBAvB,EADJ,EACIA,WACA/gC,EAFJ,EAEIA,QACAk3B,EAHJ,EAGIA,WACAqK,EAJJ,EAIIA,mBACA7vC,EALJ,EAKIA,KACA4Q,EANJ,EAMIA,eACA9Q,EAPJ,EAOIA,SACAC,EARJ,EAQIA,OACA4vC,EATJ,EASIA,eACAI,EAVJ,EAUIA,MACAL,EAXJ,EAWIA,oBACAF,EAZJ,EAYIA,gBACAQ,EAbJ,EAaIA,gBACAE,EAdJ,EAcIA,cACAG,EAfJ,EAeIA,gBACAE,EAhBJ,EAgBIA,gBACAN,EAjBJ,EAiBIA,OACAjvC,EAlBJ,EAkBIA,0BACA4pC,EAnBJ,EAmBIA,+BACA4F,EApBJ,EAoBIA,+BACA1F,EArBJ,EAqBIA,+BAiEE+F,EAAqB,SAAC1sB,EAAoDrlB,GAE5E,OACI,wBAAI0D,IAAK2hB,EAAyBrf,SAC9B,4BACI,yBAAKkV,UAAU,8BAEX,kBAAC,GAAD,CAAoBid,SAAU,SAAC9S,GAAD,OAnBzB,SAAC3V,EAAsC1P,GACxD0P,GACAgiC,EAA+B,CAAC1rC,QAAS0J,EAAWzP,GAAIulB,eAAgB9V,EAAW6V,SAAUvlB,GAiBrBgyC,CAAiB3sB,EAA0BrlB,IACnF4B,QAAS4N,EACT7L,MAAO0hB,EAAyBrf,QAAQ5B,WACxCg0B,YAAY,0BAGhC,kBAAC,GAAD,CAAc+N,eAAgB,SAACY,GAAD,OAnBxB,SAAC7kC,EAAqDlC,EAAe0G,GAC3F,IAAMurC,EAAyD5sC,EAAUG,SAAStD,GAClF+vC,EAA6BzsB,eAAiB9e,EAC9CgrC,EAA+BO,EAA8BjyC,GAgBPkyC,CAAkB7sB,EAA0BrlB,EAAO+mC,IAC3EX,OAAQ/gB,EAAyBG,eACjC6gB,UAAU,OACVC,WAAW,UAGzB,kBAAC,GAAD,CAAmBnrB,QAAS,WACxB6wB,EAA+B3mB,EAAyBrf,UAEzC2xB,WAAS,QAShD,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,+CAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,KAxGU,yBAyGV,kBAAC,GAAD,CACI5W,MAAM,QACNqX,YAAY,0BACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KApHgB,eAwHpB,kBAAC,GAAD,KACI,2BAAOlkB,UAAW,SACX0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,wBAAIuC,MAAO,CAACinB,UAAW,WAAvB,SACA,wBAAIjnB,MAAO,CAACinB,UAAW,WAAvB,iBACA,wBAAI3sB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAASs2B,OAG7D,2BAAO7wB,MAAO,CAACmnB,UAAW,SACzBmJ,EAAgBpxC,KA5HD,SAAC4G,GACjC,IAAIyrC,EAA6B9sC,EAAUG,SAASkB,GAEpD,OACI,wBAAIhD,IAAKyuC,EAAclyC,IACnB,4BACI,yBAAK2gB,MAAO,CAACwxB,QAAS,OAAQlD,eAAgB,kBAC1C,kBAAC,GAAD,CACI/W,SAAU,SAACnwB,GACPmqC,EAAcpxC,QAAUiH,EAAQA,EAAMA,MAAM/H,IAAM,EAClDmxC,EAAce,IAElB/Z,YAAa,kBACbz0B,MAAOwuC,EAAcpxC,UAEzB,kBAAC,GAAD,CACIo3B,SAAU,SAAC8P,GACF5iC,EAAUC,kBAAkB2iC,KAC7BkK,EAAchyC,OAAS8nC,EAAiB9nC,OACxCgyC,EAAc/xC,WAAa6nC,EAAiBjmC,WAC5CovC,EAAce,KAGtB/Z,YAAa,2BACbz0B,MAAOT,KAAKG,UAAU,CAClBlD,OAAQgyC,EAAehyC,OACvB6B,WAAYmwC,EAAe/xC,gBAIZ,IAAtB+xC,EAAclyC,IAAa,kBAAC,GAAD,CAAmBkb,QAAS,WACpDo2B,EAAgBY,EAAclyC,KAEa03B,WAAS,aAiGhE,kBAAC,GAAD,KACI,2BAAOzc,UAAU,SACV0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,qCACA,kCACA,wBAAInD,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAAS2wB,OAI7D,2BAAOlrB,MAAO,CAACmnB,UAAW,SACzB7lC,EAA0BpC,KAAI,SAAC2P,EAAOzP,GAAR,OAAkB+xC,EAAmBtiC,EAAOzP,SAKnF,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA9JgB,uBA+JhB,kBAAC,GAAD,CACIm4B,SAAU,SAACka,GACP9B,GAAW,EAAM8B,IAErB1uC,MAAO1C,EAASA,EAAOqG,KAAO3B,EAAeyhB,OAIpDnmB,EAAQqG,OAAS3B,EAAeoiB,MAC7B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzKQ,oBA0KR,kBAAC,GAAD,CACIoQ,SAAU,SAACnpB,GAAD,OAAU0hC,GAAgB,EAAM1hC,IAC1CrL,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAAS3B,EAAeoiB,KAAO9mB,EAAOhB,GAAK,EAC1DuP,QAASA,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAlLQ,oBAmLR,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM01B,GAAe,QAKzD5vC,EAAQqG,OAAS3B,EAAeiM,KAC7B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA1LY,wBA2LZ,kBAAC,GAAD,CACIumB,SAAU,SAACjoB,GAAD,OAAU0gC,GAAoB,EAAM1gC,IAC9CvM,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAAS3B,EAAeiM,IAAM3Q,EAAOhB,GAAK,EACzD45B,QAASoX,EACTzhC,QAASA,KAIjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KArMY,wBAsMZ,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM41B,GAAmB,QAK9D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjNkB,wBAkNlB,kBAAC,GAAD,CACI5Y,SAAU,SAACka,GACP9B,GAAW,EAAO8B,IAEtB1uC,MAAO3C,EAAWA,EAASsG,KAAO3B,EAAeyhB,OAKxDpmB,EAAUsG,OAAS3B,EAAeoiB,MAC/B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA9NQ,oBA+NR,kBAAC,GAAD,CACIoQ,SAAU,SAACnpB,GAAD,OAAU0hC,GAAgB,EAAO1hC,IAC3CrL,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAAS3B,EAAeoiB,KAAO9mB,EAAOhB,GAAK,EAC1DuP,QAASA,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAvOQ,oBAwOR,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM01B,GAAe,QAKzD7vC,EAAUsG,OAAS3B,EAAeiM,KAC/B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/OY,wBAgPZ,kBAAC,GAAD,CACIumB,SAAU,SAACjoB,GAAD,OAAU0gC,GAAoB,EAAO1gC,IAC/CvM,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAAS3B,EAAeiM,IAAM3Q,EAAOhB,GAAK,EACzD45B,QAASoX,EACTzhC,QAASA,KAIjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KA1PY,wBA2PZ,kBAAC,GAAD,CAAgB2L,QAAS,kBAAM41B,GAAmB,SAOlE,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB51B,QAASrJ,IAC5B,kBAAC,GAAD,CAAiBqJ,QAASg2B,QE/TjCmB,GAAyE,WAElF,OAEI,kBAAC,GAAD,CAAqB/M,KAAM,kBAAC,GAAD,SCctBgN,GAAuD,WAEhE,MCbiC,WACjC,IAAM3G,EAAsCnwB,YAAYqY,IAClD1K,EAAgC3N,YAAYoQ,IAC5C/T,EAAW4D,cACjB,EAAsCkc,mBAAoB,CAACtwB,KAAM3B,EAAeoiB,KAAM9nB,IAAK,IAA3F,mBAAOuyC,EAAP,KAAoBC,EAApB,KAEA1a,qBAAU,WACF1yB,EAAUC,kBAAkBsmC,KAC5B9zB,EAASF,GAAcN,YAAY,2EACnCQ,EAASwc,GAAYb,QAAQ3H,SAE7B8f,GACA6G,EAAe7G,EAAgBvkC,QAEpC,CAACyQ,EAAU8zB,IAEd,IA+BMyE,EAAe,SAACprB,GAClB,QAAa1iB,IAAT0iB,IAAuB5f,EAAUC,kBAAkBsmC,GAAkB,CACrE,IAAM8G,EAA6BrtC,EAAUG,SAASomC,GACtD8G,EAAcrrC,KAAO4d,EACrBnN,EAASuX,GAAc7lB,KAAKkpC,IAC5B56B,EAASwc,GAAYb,QAAQsC,cAAc2c,MAoFnD,MAAO,CACH3xB,MAAO,YAA0B,OAAbqI,QAAa,IAAbA,OAAA,EAAAA,EAAeloB,OAAQ,IAAM,QAAwB,OAAf0qC,QAAe,IAAfA,OAAA,EAAAA,EAAiB1qC,OAAQ,IACnFA,KAAM0qC,EAAkBA,EAAgB1qC,KAAO,GAC/CwlC,WA3He,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkBsmC,GAAkB,CAC/C,IAAM+G,EAA6BttC,EAAUG,SAASomC,GACtD+G,EAAczxC,KAAOA,EACrB4W,EAASuX,GAAc7lB,KAAKmpC,IAC5B76B,EAASwc,GAAYb,QAAQsC,cAAc4c,MAuH/Cx9B,cAnHkB,SAACk2B,GACdhmC,EAAUC,kBAAkBsmC,IAAqBvmC,EAAUC,kBAAkB8jB,KAChD,KAA1BwiB,EAAiB1qC,KACjB4W,EAASuX,GAAc7lB,KAAKoiC,IAE5B9zB,EAASuX,GAAc9lB,OAAOqiC,IAG9B9zB,EADAuzB,GAAuB,SAAZA,EACF/W,GAAYb,QAAQ3H,OAEpBwI,GAAYb,QAAQkC,UAAUvM,MA0G/CwpB,gBArGoB,WACfvtC,EAAUC,kBAAkBsmC,IAAqBvmC,EAAUC,kBAAkB8jB,KAC9EtR,EAASuX,GAAc9lB,OAAOqiC,IAC9B9zB,EAASwc,GAAYb,QAAQkC,UAAUvM,MAmG3CnE,KAAMutB,EACNK,UAAuB,OAAfjH,QAAe,IAAfA,OAAA,EAAAA,EAAiBzqC,OAAOyqC,EAAgBzqC,KAChDuN,OAAM,OAAEk9B,QAAF,IAAEA,OAAF,EAAEA,EAAiB3rC,GACzB6yC,iBAAgB,OAAElH,QAAF,IAAEA,OAAF,EAAEA,EAAiBj+B,YACnCue,gBAAe,OAAE0f,QAAF,IAAEA,OAAF,EAAEA,EAAiBxqC,WAClCgmC,aA5CiB,SAACr5B,GAClB,IAAK1I,EAAUC,kBAAkBsmC,GAAkB,CAC/C,IAAMmH,EAAmC1tC,EAAUG,SAASomC,GAExDmH,EAAoBplC,YADpBI,EACkCA,EAAU9N,IAET,EAEvC6X,EAASuX,GAAc7lB,KAAKupC,IAC5Bj7B,EAASwc,GAAYb,QAAQsC,cAAcgd,MAoC/CC,iBAhCqB,SAAC1kC,GACtB,IAAKjJ,EAAUC,kBAAkBsmC,GAAkB,CAC/C,IAAMmH,EAAmC1tC,EAAUG,SAASomC,GAExDmH,EAAoB3xC,WADpBkN,EACiCA,EAASrO,IAER,EAEtC6X,EAASuX,GAAc7lB,KAAKupC,IAC5Bj7B,EAASwc,GAAYb,QAAQsC,cAAcgd,MAwB/CvqB,OAAM,OAAEojB,QAAF,IAAEA,OAAF,EAAEA,EAAiB3rC,GACzBuP,SAAwB,OAAfo8B,QAAe,IAAfA,OAAA,EAAAA,EAAiBhqC,WAAY,EACtC2uC,WA/Fe,SAACC,GAChB,QAAoBjuC,IAAhBiuC,EAA2B,CAC3B,IAAMC,EAAQ,CAACnpC,KAAO3B,EAAuB6qC,IAE7C,OADAiC,EAAehC,GACPD,GACJ,KAAK7qC,EAAeiI,MAGpB,KAAKjI,EAAeyhB,IAChBipB,EAAaI,MAuFzBwC,YAjFgB,SAACjkC,GACjB,GAAIA,EAAM,CACN,IAAM2hC,EAAqB,CAACrpC,KAAM3B,EAAeoiB,KAAM9nB,GAAI+O,EAAK/O,IAChEowC,EAAaM,KA+EjBuC,gBA3EoB,SAACzyC,GACrB,GAAIA,EAAU,CACV,IAAMkwC,EAAqB,CAACrpC,KAAM3B,EAAeiM,IAAK3R,GAAIQ,EAASR,IACnEowC,EAAaM,KAyEjBwC,mBArEuB,WACvB,IAAK9tC,EAAUC,kBAAkBsmC,GAAkB,CAC/C,IAAMmH,EAAmC1tC,EAAUG,SAASomC,GACtDwH,EAA4B,IAAI1lC,GACtC0lC,EAAaxxC,QAAUgqC,EAAiBhqC,QACxCkW,EAASwc,GAAYb,QAAQsC,cAAcqd,EAAcL,MAiE7DhC,mBA7DuB,WACvB,IAAK1rC,EAAUC,kBAAkBsmC,GAAkB,CAC/C,IAAMyH,EAAkChuC,EAAUG,SAASomC,GACrDoF,EAAgC,IAAItG,GAC1CsG,EAAapvC,QAAUgqC,EAAiBhqC,QACxCkW,EAASwc,GAAYb,QAAQuC,kBAAkBgb,EAAcqC,MAyDjErhC,QA3BY,WACP3M,EAAUC,kBAAkBsmC,KAC7B9zB,EAASkY,GAAkB4b,EAAiBhqC,QAASgqC,EAAiB3rC,IAAI,IAC1E6X,EAASwc,GAAYb,QAAQsC,cAAc1G,GAAcrrB,KAAK4nC,EAAiB3rC,QAyBnFA,IAAmB,OAAf2rC,QAAe,IAAfA,OAAA,EAAAA,EAAiB3rC,MAAO,GD7H5BqzC,GAlBApyC,EADJ,EACIA,KACA6vC,EAFJ,EAEIA,mBACArK,EAHJ,EAGIA,WACAl3B,EAJJ,EAIIA,QACA2jC,EALJ,EAKIA,mBACAL,EANJ,EAMIA,iBACA5mB,EAPJ,EAOIA,gBACA0mB,EARJ,EAQIA,gBACA3tB,EATJ,EASIA,KACAsrB,EAVJ,EAUIA,WACAsC,EAXJ,EAWIA,OACArqB,EAZJ,EAYIA,OACArT,EAbJ,EAaIA,cACAiyB,EAdJ,EAcIA,aACA8L,EAfJ,EAeIA,gBACAD,EAhBJ,EAgBIA,YACAjhC,EAjBJ,EAiBIA,QACAghC,EAlBJ,EAkBIA,iBAWJ,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,2CAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIjyB,MAAM,QACNqX,YAAY,qBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/Be,qBAgCf,kBAAC,GAAD,CACIjH,SAAU,SAACpqB,GAAD,OAAeq5B,EAAar5B,IACtCqqB,YAAY,wBACZz0B,MAAOmvC,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzCc,mBA0Cd,kBAAC,GAAD,CACI3a,SAAU,SAACob,GAAD,OAAcP,EAAiBO,IACzC5vC,MAAOuoB,KAIf,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KAlDc,2BAmDd,kBAAC,GAAD,CACIiM,SAAUoY,EACV5sC,MAAOshB,EAAOA,EAAK3d,KAAO3B,EAAeiI,SAIhDqX,EAAK3d,OAAS3B,EAAeoiB,MAC1B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7DQ,oBA8DR,kBAAC,GAAD,CAAgB5M,QAASg4B,KAE7B,kBAAC,GAAD,KACI,kBAAC,GAAD,KAhEQ,oBAiER,kBAAC,GAAD,CACIhb,SAAU8a,EACVtvC,OAAW,OAAJshB,QAAI,IAAJA,OAAA,EAAAA,EAAM3d,QAAS3B,EAAeoiB,KAAO9C,EAAKhlB,GAAK,EACtDuP,QAASA,EACTqqB,QAASrR,MAKxBvD,EAAK3d,OAAS3B,EAAeiM,KAC1B,oCACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,KA9EY,wBA+EZ,kBAAC,GAAD,CAAgBuJ,QAAS41B,KAE7B,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjFY,wBAkFZ,kBAAC,GAAD,CACI5Y,SAAU,SAACjoB,GAAD,OAAUgjC,EAAgBhjC,IACpCvM,OAAW,OAAJshB,QAAI,IAAJA,OAAA,EAAAA,EAAM3d,QAAS3B,EAAeiM,IAAMqT,EAAKhlB,GAAK,EACrDuP,QAASA,OAQ7B,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB2L,QAASy3B,EACT5b,SAAU6b,IAE7B,kBAAC,GAAD,CAAa13B,QAASnJ,EACTglB,SAAU6b,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiB13B,QAAShG,OEvJ7Bq+B,GAAiE,WAE1E,OACI,kBAAC,GAAD,CAAqBjO,KAAM,kBAAC,GAAD,SCMtBkO,GAAyD,WAElE,MAMI3I,KALAG,EADJ,EACIA,6BACAtV,EAFJ,EAEIA,UACAmW,EAHJ,EAGIA,+BACAE,EAJJ,EAIIA,+BACA/rC,EALJ,EAKIA,GAGER,EAA8Bgc,YAAY8H,GAA8CtjB,IAwB9F,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAYumC,aAAc/mC,EACdonC,gBAAgB,UAChBJ,iBAAkBqF,EAClBnF,oBAAqBqF,EACrBpF,kBA7BL,SAACe,EAAwBZ,GACxC,IAAM2M,EAA6BruC,EAAUG,SAASmiC,GACtD+L,EAAkBnuB,QAAUwhB,EAC5BkE,EAA6ByI,IA2BThN,WAxBL,SAACxlC,EAAc6rC,GAC9B,IAAM4G,EAA8Cl0C,EAAYuE,MAAK,SAAAyL,GAAK,OAAIA,EAAMxP,KAAO8sC,KAC3F,GAAI4G,EAAmB,CACnB,IAAMC,EAAsCvuC,EAAUG,SAASmuC,GAC/DC,EAAsB7yB,MAAQ7f,EAC9B+pC,EAA6B2I,QAwB7B,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBz4B,QA3CN,WACd1b,EAAYqG,MAAK,SAAA2J,GAAK,MAAoB,KAAhBA,EAAMsR,WACjCthB,EAAYmB,QAAQqqC,GACpBtV,WCzBCke,GAA8D,WAEvE,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCQCC,GAA6C,WAElD,MAAsBlc,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA,ECfwB,WAC5B,IAAMsP,EAA6Bt4B,YAAYqY,IACzChc,EAAW4D,cAEjBqc,qBAAU,WAEa,OAAfgc,QAAsCxxC,IAAfwxC,IACvBj8B,EAASF,GAAcN,YAAY,0DACnCQ,EAASwc,GAAYb,QAAQ3H,YAIrC,IAmBM5mB,EAAW,WACb,GAA8B,MAAhB,OAAV6uC,QAAU,IAAVA,OAAA,EAAAA,EAAY1yC,KAAKH,MAAa,CAC9B,IAAM2zB,EAAoBxvB,EAAUG,SAASuuC,GAC7Clf,EAASxzB,KAAKI,UAAYozB,EAASxzB,KAAKI,UAAU0J,QAAO,SAAAzJ,GAAQ,MAAsB,KAAlBA,EAASR,QAC9E4W,EAAS6Y,GAAckE,SAEvBmf,IAEJl8B,EAASwc,GAAYb,QAAQ3H,SAG3BkoB,EAAa,WACV3uC,EAAUC,kBAAkByuC,KAC7Bj8B,EAAS6Y,GAAgBojB,IACzBj8B,EAASwc,GAAYb,QAAQ3H,UAkCrC,MAAO,CACH/K,MAAO,YAAuB,OAAVgzB,QAAU,IAAVA,OAAA,EAAAA,EAAY1yC,KAAKH,OAAQ,IAC7CA,KAAI,OAAE6yC,QAAF,IAAEA,OAAF,EAAEA,EAAY1yC,KAAKH,KACvBwlC,WAtEmB,SAACxlC,GACpB,IAAM+yC,EAA0B5uC,EAAUG,SAASuuC,GACnDE,EAAe5yC,KAAKH,KAAOA,EAC3B4W,EAASwc,GAAYb,QAAQiB,SAASuf,KAoEtC/uC,WACA8uC,aACAE,WA3De,WACf,IAAMD,EAA0B5uC,EAAUG,SAASuuC,GACnDj8B,EAAS6Y,GAAcsjB,KA0DvB1I,cArCkB,WAClBrmC,IACA4S,EAASwc,GAAYb,QAAQiB,aAoC7BjzB,WAAqB,OAAVsyC,QAAU,IAAVA,OAAA,EAAAA,EAAY1yC,KAAKI,WAAYsyC,EAAW1yC,KAAKI,UAAY,GACpExB,IAAc,OAAV8zC,QAAU,IAAVA,OAAA,EAAAA,EAAY1yC,KAAKpB,MAAO,EAC5BuB,KAAMuyC,EAAaA,EAAW1yC,KAAKG,KAAO,GAC1C+rC,SAnCa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkByuC,IAAwB,KAATh5B,EAAa,CACzD,IAAMk5B,EAA0B5uC,EAAUG,SAASuuC,GACnDE,EAAe5yC,KAAKG,KAAOuZ,EAC3BjD,EAASwc,GAAYb,QAAQiB,SAASuf,MAgC1CE,mBAzEuB,SAACjzC,EAAckzC,GACtC,GAAmB,OAAfL,GAAyC,OAAlBK,EAAwB,CAC/C,IAAMvf,EAAoBxvB,EAAUG,SAASuuC,GAC7Clf,EAASxzB,KAAKI,UAAU2yC,GAAelzC,KAAOA,EAC9C4W,EAASwc,GAAYb,QAAQiB,SAASG,MAsE1Cwf,eA7BmB,WACnB,IAAKhvC,EAAUC,kBAAkByuC,GAAa,CAC1C,IAAMlf,EAAoBxvB,EAAUG,SAASuuC,GAC7Clf,EAASxzB,KAAKI,UAAUX,KAAK,CAACb,IAAK,EAAGiB,KAAM,KAC5C4W,EAASwc,GAAYb,QAAQiB,SAASG,MA0B1Cyf,eAtBmB,SAACC,GACpB,IAAKlvC,EAAUC,kBAAkByuC,GAAa,CAC1C,IAAMlf,EAAoBxvB,EAAUG,SAASuuC,GAC7Clf,EAASxzB,KAAKI,UAAU+yC,OAAOD,EAAe,GAC9Cz8B,EAASwc,GAAYb,QAAQiB,SAASG,OD/CtC4f,GAZAvzC,EADJ,EACIA,KACAwlC,EAFJ,EAEIA,WACAxhC,EAHJ,EAGIA,SACA8uC,EAJJ,EAIIA,WACAE,EALJ,EAKIA,WACA3I,EANJ,EAMIA,cACA9pC,EAPJ,EAOIA,UACAD,EARJ,EAQIA,KACA+rC,EATJ,EASIA,SACA4G,EAVJ,EAUIA,mBACAE,EAXJ,EAWIA,eACAC,EAZJ,EAYIA,eAyBJ,OACI,kBAAC,GAAD,CAAM5wC,IAAKA,GAEP,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAGI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIqd,MAAM,QACNqX,YAAY,YACZ8G,iBAAkBwH,EAClB/iC,MAAOzC,EACPk+B,OAAK,EACLD,OAAQ+U,KAKhB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,2BAAOh5B,UAAW,SACX0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,wBAAIuC,MAAO,CAACinB,UAAW,WAAvB,aACA,wBAAI3sB,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAASk5B,OAG7D,+BACC5yC,EAAU3B,KA3DL,SAAC4B,EAA0B1B,GACjD,OAAQ,wBAAI0D,IAAK1D,GACT,4BACI,yBAAK4gB,MAAO,CAACwxB,QAAS,OAAQlD,eAAgB,gBAAiBwF,WAAY,WACvE,kBAAC,GAAD,CACIxV,iBAAkB,SAACyV,GAAD,OAAaR,EAAmBQ,EAAS30C,IAC3D2D,MAAOjC,EAASR,KAChBi+B,OAAQ+U,IAED,IAAVl0C,GACD,6BACI,kBAAC,GAAD,CAAmBmb,QAAS,kBAAMm5B,EAAet0C,IAC9B23B,WAAS,eAsD5C,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBxc,QAAS64B,IAC5B,kBAAC,GAAD,CAAoBzL,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAa2Z,QAAS,WAClBowB,IACA9G,EAAO/gC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiByX,QAASjW,OE9GjC0vC,GAAuD,WAEhE,OACI,kBAAC,GAAD,CAAqBrP,KAAM,kBAAC,GAAD,SCStBsP,GAA6D,WAEtE,MAAsBjd,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA,ECboC,WACpC,IAAMxlC,EAAmBwc,YAAY8H,IAC/BuxB,EAAwCr5B,YAAYqY,IACpDhc,EAAW4D,cACjB,EAAsBkc,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA1M,qBAAU,WAEF1yB,EAAUC,kBAAkBwvC,KAC5Bh9B,EAASwc,GAAYb,QAAQ3H,QAC7BhU,EAASF,GAAcN,YAAY,qEAExC,CAACw9B,EAAgBh9B,IAEpB,IAyCMi9B,EAAiB,WACnBj9B,EAASqa,GAAoB2iB,IAC7Bh9B,EAASwc,GAAYb,QAAQ3H,SAa3BkpB,EAAmBxxC,OAAOC,QAAQiX,IAAW5a,KAAI,WAAeE,GAAf,6BAA0B,CAC7E0D,IAAK1D,EACL+a,KAFmD,KAGnDpX,MAHmD,KAGtCS,eAGX6wC,EAAczxC,OAAOC,QAAQkX,IAAc7a,KAAI,WAAeE,GAAf,6BAA0B,CAC3E0D,IAAK1D,EACL+a,KAFiD,KAGjDpX,MAHiD,KAGpCS,eAmBjB,MAAO,CACH2c,MAAO,kBACP/E,OAAM,OAAE84B,QAAF,IAAEA,OAAF,EAAEA,EAAgB94B,OACxBC,OAAM,OAAE64B,QAAF,IAAEA,OAAF,EAAEA,EAAgB74B,OACxBi5B,OAAoC,KAAf,OAAdJ,QAAc,IAAdA,OAAA,EAAAA,EAAgBzuC,UAAhB,OAA6CyuC,QAA7C,IAA6CA,OAAZvyC,EAAYuyC,EAAgBzuC,QAAQjC,WAC5E+wC,OAAoC,KAAf,OAAdL,QAAc,IAAdA,OAAA,EAAAA,EAAgBxuC,UAAhB,OAA6CwuC,QAA7C,IAA6CA,OAAZvyC,EAAYuyC,EAAgBxuC,QAAQlC,WAC5E8X,WAAU,OAAE44B,QAAF,IAAEA,OAAF,EAAEA,EAAgB54B,WAC5BE,WAAU,OAAE04B,QAAF,IAAEA,OAAF,EAAEA,EAAgB14B,WAC5BE,MAAK,OAAEw4B,QAAF,IAAEA,OAAF,EAAEA,EAAgBx4B,MACvBE,MAAK,OAAEs4B,QAAF,IAAEA,OAAF,EAAEA,EAAgBt4B,MACvB44B,SAhFa,SAACr0B,EAAes0B,GAC7B,IAAMC,EAA+BjwC,EAAUG,SAASsvC,GACxDO,EAASC,EAAar5B,OAAS8E,EAAUu0B,EAAat5B,OAAS+E,EAC/DjJ,EAASwc,GAAYb,QAAQwB,aAAaqgB,KA8E1CC,QArEY,SAACC,EAA4BH,GACzC,IAAMC,EAA+BjwC,EAAUG,SAASsvC,GACxDO,EAASC,EAAa94B,MAAQg5B,EAAiBF,EAAah5B,MAAQk5B,EACpE19B,EAASwc,GAAYb,QAAQwB,aAAaqgB,KAmE1CG,aA5EiB,SAACz3B,EAAsBq3B,GACxC,IAAMC,EAA+BjwC,EAAUG,SAASsvC,GACxDO,EAASC,EAAal5B,WAAa4B,EAAcs3B,EAAap5B,WAAa8B,EAC3ElG,EAASwc,GAAYb,QAAQwB,aAAaqgB,KA0E1ChH,QAzFY,SAACpoC,EAAgBmvC,GAC7B,IAAMC,EAA+BjwC,EAAUG,SAASsvC,GACxDO,EAASC,EAAahvC,QAAUJ,EAAWovC,EAAajvC,QAAUH,EAClE4R,EAASwc,GAAYb,QAAQwB,aAAaqgB,KAuF1CI,aAlEiB,YACgB,KAAf,OAAdZ,QAAc,IAAdA,OAAA,EAAAA,EAAgBzuC,WAA+C,KAAf,OAAdyuC,QAAc,IAAdA,OAAA,EAAAA,EAAgBxuC,SAClDwR,EAASqa,GAAkB2iB,IAE3BC,IAEJj9B,EAASwc,GAAYb,QAAQ3H,SA6D7BipB,iBACAY,OAAQ,kBAAM79B,EAASwc,GAAYb,QAAQ3H,SAC3C8pB,YAAa32C,EAAMa,KArGF,SAACuB,GAClB,MAAO,CACHqC,IAAKrC,EAAKA,KAAKpB,GACf8a,KAAM1Z,EAAKA,KAAKH,KAChByC,MAAOtC,EAAKA,KAAKpB,GAAGmE,eAkGxB4wC,mBACAC,cACAY,cApCkB,WAClB,IAAInwC,GAAiB,EAIrB,OAHKL,EAAUC,kBAAkBwvC,KAC7BpvC,GAAqC,IAA7BovC,EAAgBzuC,UAA+C,IAA7ByuC,EAAgBxuC,SAEvDZ,GAgCPhC,MACA6nC,cAvDkB,WAClB9G,EAAO/gC,EAAM,GACboU,EAASwc,GAAYb,QAAQwB,iBAsD7B6gB,eA7DmB,WACnB,IAAMC,EAAqC1wC,EAAUG,SAASsvC,GAC9Dh9B,EAASqa,GAAkB4jB,KA4D3Bv0C,KAAMszC,EAAiBA,EAAetzC,KAAO,GAC7C+rC,SAjCa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkBwvC,IAA4B,KAAT/5B,EAAa,CAC7D,IAAMu6B,EAA+BjwC,EAAUG,SAASsvC,GACxDQ,EAAa9zC,KAAOuZ,EACpBjD,EAASwc,GAAYb,QAAQwB,aAAaqgB,ODlE9CU,GAdAd,EADJ,EACIA,MACAC,EAFJ,EAEIA,MACAj5B,EAHJ,EAGIA,WACAE,EAJJ,EAIIA,WACAq5B,EALJ,EAKIA,aACAnH,EANJ,EAMIA,QACAoH,EAPJ,EAOIA,aACAX,EARJ,EAQIA,eACAa,EATJ,EASIA,YACAZ,EAVJ,EAUIA,iBACAzJ,EAXJ,EAWIA,cACAuK,EAZJ,EAYIA,eACAt0C,EAbJ,EAaIA,KACA+rC,EAdJ,EAcIA,SAGJ,OACI,kBAAC,GAAD,CAAM7pC,IAAKA,GACP,kBAAC,GAAD,KACI,8CAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWurC,MAAOzM,GAAepC,QAAjC,SAGJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIhI,YAAY,iBACZF,cAAe0d,EACfzd,SAAU,SAAC92B,GACPitC,EAAQjqC,OAAOhD,EAAKsC,QACpBmyC,KAEJnyC,MAAOuxC,IAEX,kBAAC,GAAD,CACI9c,YAAY,oBACZF,cAAe8c,EACf7c,SAAU,SAAC92B,GACPo0C,EAAa/6B,GAAUrZ,EAAKsC,QAC5BmyC,KAEJnyC,MAAOuY,KAIf,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW+yB,MAAOzM,GAAepC,QAAjC,OAEJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIhI,YAAY,iBACZF,cAAe0d,EACfzd,SAAU,SAAC92B,GACPitC,EAAQjqC,OAAOhD,EAAKsC,QAAQ,GAC5BmyC,KAEJnyC,MAAOwxC,IAEX,kBAAC,GAAD,CACI/c,YAAY,oBACZF,cAAe8c,EACf7c,SAAU,SAAC92B,GACPo0C,EAAa/6B,GAAUrZ,EAAKsC,QAAqB,GACjDmyC,KAEJnyC,MAAOyY,KAGf,kBAAC,GAAD,OAKJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmBjB,QAAS45B,IAC5B,kBAAC,GAAD,CAAoBxM,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAa2Z,QAAS,WAClBowB,IACA9G,EAAO/gC,EAAM,KAGZ,kBAEL,kBAAC,GAAD,CAAiByX,QAASu6B,OE5G7BO,GAAuE,WAEhF,OACI,kBAAC,GAAD,CAAqB1Q,KAAM,kBAAC,GAAD,SCEtB2Q,GAAuE,SAACr7B,GACjF,IAAOsd,EAA4Ctd,EAA5Csd,SAAUC,EAAkCvd,EAAlCud,YAAaz0B,EAAqBkX,EAArBlX,MAAOvC,EAAcyZ,EAAdzZ,WAC/B5B,EAAoCic,YAAY8H,GAAoDniB,IAM1G,OACI,kBAAC,GAAD,CACI82B,cAAe14B,EAAeM,KANG,SAAC8Q,GACtC,MAAO,CAAClN,IAAKkN,EAAc3Q,GAAI0D,MAAOiN,EAAc3Q,GAAGmE,WAAY2W,KAAMnK,EAAcmQ,UAMnFoX,SAAU,SAAChH,GAAD,OAAUgH,EAAS34B,EAAewE,MAAK,SAAAyL,GAAK,OAAIA,EAAMxP,KAAOoE,OAAO8sB,EAAKxtB,YACnFy0B,YAAaA,EACbz0B,MAAOA,KCQNwyC,GAAqD,WAE9D,MCtBgC,WAChC,IAAMzK,EAAoCjwB,YAAYqY,IAChDuT,EAAuC5rB,YAAYoQ,IACnD/T,EAAW4D,cACjB,EAAsBkc,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA1M,qBAAU,WACF1yB,EAAUC,kBAAkBomC,KAC5B5zB,EAASF,GAAcN,YAAY,yEACnCQ,EAASwc,GAAYb,QAAQ3H,WAElC,CAAChU,EAAU4zB,IAEd,IA2BM55B,EAAiB,WACdzM,EAAUC,kBAAkBomC,IAAoBrmC,EAAUC,kBAAkB+hC,KAC7EvvB,EAASsZ,GAAa7nB,OAAOmiC,EAAiBrE,IAC9CvvB,EAASwc,GAAYb,QAAQyB,aAAawW,EAAgBtqC,eAI5Dg1C,EAAiB,SAACC,GACpB,IAAKhxC,EAAUC,kBAAkB+wC,GAAc,CAE3C,IAAM7gB,EAA2BnwB,EAAUG,SAAS6wC,GAEpDv+B,EAASsZ,GAAa5nB,KAAKgsB,IAC3B1d,EAASsZ,GAAatB,OAAO0F,MAc/B6a,EAAe,SAACpvC,EAAiBgkB,GACnC,QAAa1iB,IAAT0iB,EAAoB,CACpB,IAAMqrB,EAAiCjrC,EAAUG,SAASkmC,GAC1DzqC,EAAUqvC,EAAmBrvC,OAASgkB,EAASqrB,EAAmBtvC,SAAWikB,EAC7EmxB,EAAe9F,GACfx4B,EAASiV,GAAqBE,uBAAuBqjB,EAAmBlvC,eAoE1Ek1C,EAAa,SAACjvC,GAChB,IAAMkvC,EAAiBlxC,EAAUG,SAAS6B,GAM1C,OAJKA,EAAKC,OAASnC,EAAUoC,MAAQF,EAAKC,OAASnC,EAAUyM,MAAsB,IAAbvK,EAAKpH,SAAyBsC,IAAZ8E,EAAKpH,KACzFs2C,EAASjvC,KAAOnC,EAAUyI,OAGvB2oC,GAwFX,MAAO,CACHx1B,MAAO,YAA6B,OAAhBsmB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn5B,WAAWhN,OAAQ,IAAM,QAAuB,OAAdwqC,QAAc,IAAdA,OAAA,EAAAA,EAAgBxqC,OAAQ,IAChGA,KAAI,OAAEwqC,QAAF,IAAEA,OAAF,EAAEA,EAAgBxqC,KACtBwlC,WAjOe,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAM8K,EAAkCnxC,EAAUG,SAASkmC,GAC3D8K,EAAoBt1C,KAAOA,EAE3B4W,EAASwc,GAAYb,QAAQ6B,aAAakhB,IAC1C1+B,EAASiV,GAAqBE,uBAAuBupB,EAAoBp1C,eA4N7EyQ,aA/MiB,SAACpR,GACb4E,EAAUC,kBAAkB7E,IACA,KAAzBirC,EAAgBxqC,MAChB4W,EAASsZ,GAAa5nB,KAAK/I,KA6MnCg2C,UAvLc,WACd,IAAI/wC,GAAiB,EAMrB,OALKL,EAAUC,kBAAkBomC,IACA,KAAzBA,EAAgBxqC,OAChBwE,GAAQ,GAGTA,GAiLP0wC,iBACAtkC,iBACAy+B,WAvKe,SAACtvC,EAAiBuvC,GACjC,QAAoBjuC,IAAhBiuC,EAA2B,CAC3B,IAAMC,EAAQ,CAACnpC,KAAOnC,EAAkBqrC,IACxC,OAAQA,GACJ,KAAKrrC,EAAUyI,MAGf,KAAKzI,EAAUiiB,IAGf,KAAKjiB,EAAUkiB,KAGf,KAAKliB,EAAUoC,KAGf,KAAKpC,EAAUyM,IACXy+B,EAAapvC,EAAQwvC,MAuJjCC,gBAjJoB,SAACzvC,EAAiBmG,GACtC,GAAIA,EAAM,CACN,IAAMupC,EAAgB,CAACrpC,KAAMnC,EAAUoC,KAAMtH,GAAImH,EAAK8J,eAAejR,IACrEowC,EAAapvC,EAAQ0vC,KA+IzBC,oBA3IwB,SAAC3vC,EAAiBR,GAC1C,GAAIA,EAAU,CACV,IAAMkwC,EAAgB,CAACrpC,KAAMnC,EAAUyM,IAAK3R,GAAIQ,EAASR,IACzDowC,EAAapvC,EAAQ0vC,KAyIzB1vC,OAAM,OAAEyqC,QAAF,IAAEA,OAAF,EAAEA,EAAgBzqC,OACxBD,SAAQ,OAAE0qC,QAAF,IAAEA,OAAF,EAAEA,EAAgB1qC,SAC1B6vC,eAvImB,SAAC5vC,GACpB,IAAKoE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMgL,EAA4B,IAAI/J,GACtC+J,EAASxlC,eAAe9P,WAAasqC,EAAgBtqC,WACrD,IAAMo0B,EAA2BnwB,EAAUG,SAASkmC,GACpD5zB,EAASwc,GAAYb,QAAQ4B,SAASqhB,EAAUlhB,EAAcv0B,MAmIlE8vC,mBA/HuB,SAAC9vC,GACxB,IAAKoE,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMsF,EAA2B,IAAIpE,GACrCoE,EAAa5vC,WAAasqC,EAAgBtqC,WAC1C,IAAMu1C,EAAkCtxC,EAAUG,SAASkmC,GAC3D5zB,EAASwc,GAAYb,QAAQ6B,aAAa0b,EAAc2F,EAAgB11C,IACxEwjC,EAAO/gC,EAAM,KA0HjBsO,QAtHY,WACP3M,EAAUC,kBAAkBomC,KAC7B5zB,EAAS2a,GAAazgB,QAAQ05B,EAAgBtqC,WAAYsqC,EAAgBzrC,IAAI,IAC9E6X,EAASwc,GAAYb,QAAQ6B,aAAalE,GAAaptB,KAAK0nC,EAAgBzrC,QAoHhF4yC,UAAsB,OAAdnH,QAAc,IAAdA,OAAA,EAAAA,EAAgBvqC,OAAOuqC,EAAevqC,KAC9CuC,MACA+tC,gBAtFoB,WACpB,IAAKpsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GACpDlW,EAAa3zB,WAAWf,KAAK,CACzBiB,WAAYyzB,EAAav1B,GACzBA,IAAK,EACLc,SAAU,EACVX,YAAa,EACbD,QAAS,IAEbi2C,EAAe5gB,KA6EnByb,MAAK,OAAEvF,QAAF,IAAEA,OAAF,EAAEA,EAAgBzrC,GACvB4B,YAA0B,OAAd6pC,QAAc,IAAdA,OAAA,EAAAA,EAAgB7pC,aAAc,GAC1CL,KAAMkqC,EAAiBA,EAAelqC,KAAO,GAC7C+rC,SA1Oa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAM8K,EAAkCnxC,EAAUG,SAASkmC,GAC3D8K,EAAoBh1C,KAAOuZ,EAC3BjD,EAASwc,GAAYb,QAAQ6B,aAAakhB,IAC1C1+B,EAASiV,GAAqBE,uBAAuBupB,EAAoBp1C,eAsO7EmwC,gBA5EoB,SAACC,GACrB,IAAKnsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GACpDlW,EAAa3zB,WAAa2zB,EAAa3zB,WAAWsJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUzG,KAAOuxC,KACvF4E,EAAe5gB,KAyEnB4b,cArEkB,SAACC,GACnB,IAAKhsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GAGpD,GADiDlW,EAAa3zB,WAAWmC,MAAK,SAAA0C,GAAS,OAAIA,EAAUzG,KAAOoxC,EAAgBpxC,MACrG,CACnB,IAAIqxC,EAAoC9b,EAAa3zB,WAAWsJ,QAAO,SAAAzE,GAAS,OAAIA,EAAUzG,KAAOoxC,EAAgBpxC,MACrHqxC,EAAmBxwC,KAAKuwC,GACxB7b,EAAa3zB,WAAayvC,OAE1B9b,EAAa3zB,WAAWf,KAAKuwC,GAEjC+E,EAAe5gB,KA0DnBohB,cA9GkB,WAClB,IAAKvxC,EAAUC,kBAAkBomC,KAAoBrmC,EAAUC,kBAAkB+hC,GAAmB,CAChG,IAAM7R,EAA2BnwB,EAAUG,SAASkmC,GACzB,KAAvBlW,EAAct0B,MACds0B,EAAav0B,OAASq1C,EAAW9gB,EAAav0B,QAC9Cu0B,EAAax0B,SAAWs1C,EAAW9gB,EAAax0B,UAEhD8W,EAASsZ,GAAa5nB,KAAKgsB,IAC3B1d,EAASwc,GAAYb,QAAQyB,aAAamS,EAAkBn5B,WAAWjO,MAEvE6R,MAqGR5P,2BAAyC,OAAdwpC,QAAc,IAAdA,OAAA,EAAAA,EAAgBxpC,4BAA6B,GACxE8pC,+BAnCmC,SAAC4F,GACpC,IAAKvsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GACpDlW,EAAatzB,0BAA4BszB,EAAatzB,0BAA0BiJ,QAAO,SAAA0mC,GAAqB,OAAIA,EAAsB7rC,UAAY4rC,KAClJwE,EAAe5gB,KAgCnBsW,+BA7CmC,WACnC,IAAKzmC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GACpDlW,EAAatzB,0BAA0BpB,KAAK,CAACkF,SAAU,EAAGwf,gBAAgB,IAE1E4wB,EAAe5gB,KAyCnBkc,+BAxDmC,SAACC,EAAgD3xC,GACpF,GAAI2xC,IACKtsC,EAAUC,kBAAkBomC,GAAiB,CAC9C,IAAMlW,EAA2BnwB,EAAUG,SAASkmC,GACpDlW,EAAatzB,0BAA0BlC,GAAS2xC,EAChDyE,EAAe5gB,KAoDvBp0B,YAA0B,OAAdsqC,QAAc,IAAdA,OAAA,EAAAA,EAAgBtqC,cAAe,GDzN3Cy1C,GAzBA31C,EADJ,EACIA,KACAwlC,EAFJ,EAEIA,WACA6J,EAHJ,EAGIA,WACAtvC,EAJJ,EAIIA,OACAD,EALJ,EAKIA,SACA0vC,EANJ,EAMIA,gBACAG,EAPJ,EAOIA,eACA7+B,EARJ,EAQIA,QACA6gC,EATJ,EASIA,OACA/gC,EAVJ,EAUIA,eACAi/B,EAXJ,EAWIA,mBACAH,EAZJ,EAYIA,oBACAa,EAbJ,EAaIA,gBACAR,EAdJ,EAcIA,MACApvC,EAfJ,EAeIA,WACAL,EAhBJ,EAgBIA,KACA+rC,EAjBJ,EAiBIA,SACAgE,EAlBJ,EAkBIA,gBACAH,EAnBJ,EAmBIA,cACAwF,EApBJ,EAoBIA,cACA10C,EArBJ,EAqBIA,0BACA4pC,EAtBJ,EAsBIA,+BACA4F,EAvBJ,EAuBIA,+BACA1F,EAxBJ,EAwBIA,+BACA5qC,EAzBJ,EAyBIA,WAmEE2wC,EAAqB,SAAChsC,EAA+C/F,GAEvE,OACI,wBAAI0D,IAAKqC,EAAoBC,SACzB,4BACI,yBAAKkV,UAAU,8BAEX,kBAAC,GAAD,CAAuBid,SAAU,SAAC2e,GAAD,OAnBzB,SAAClmC,EAA4C5Q,GACjE4Q,GACA8gC,EAA+B,CAAC1rC,QAAS4K,EAAc3Q,GAAIulB,eAAgB5U,EAAc2U,SAAUvlB,GAiBnC+2C,CAAoBD,EAAe92C,IAChEoB,WAAYA,EACZuC,MAAOoC,EAAoBC,QAAQ5B,WACnCg0B,YAAY,0BAGnC,kBAAC,GAAD,CAAc+N,eAAgB,SAACY,GAAD,OAnBxB,SAAC7kC,EAAqDlC,EAAe0G,GAC3F,IAAMurC,EAAyD5sC,EAAUG,SAAStD,GAClF+vC,EAA6BzsB,eAAiB9e,EAC9CgrC,EAA+BO,EAA8BjyC,GAgBPkyC,CAAkBnsC,EAAqB/F,EAAO+mC,IACtEX,OAAQrgC,EAAoByf,eAC5B6gB,UAAU,OACVC,WAAW,UAGzB,kBAAC,GAAD,CAAmBnrB,QAAS,WACxB6wB,EAA+BjmC,EAAoBC,UAEpC2xB,WAAS,QAQhD,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KAAY,yCAGZ,kBAAC,GAAD,KAEI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI5W,MAAM,QACNqX,YAAY,oBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,KAMf,kBAAC,GAAD,KACI,2BAAOlkB,UAAW,SACX0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,qCACA,6CACA,wBAAInD,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAASs2B,OAG7D,2BAAO7wB,MAAO,CAACmnB,UAAW,SACzBlmC,EAAW/B,KApHD,SAAC4G,GAC5B,IAAIyrC,EAA6B9sC,EAAUG,SAASkB,GAEpD,OACI,wBAAIhD,IAAKyuC,EAAclyC,IACnB,4BACI,yBAAKib,UAAU,8BACX,kBAAC,GAAD,CACIid,SAAU,SAACnwB,GACPmqC,EAAcpxC,QAAUiH,EAAQA,EAAMA,MAAM/H,IAAM,EAClDmxC,EAAce,IAElB/Z,YAAa,kBACbz0B,MAAOwuC,EAAcpxC,UAEzB,kBAAC,GAAD,CACIo3B,SAAU,SAAC8P,GACF5iC,EAAUC,kBAAkB2iC,KAC7BkK,EAAchyC,OAAS8nC,EAAiB9nC,OACxCgyC,EAAc/xC,WAAa6nC,EAAiBjmC,WAC5CovC,EAAce,KAGtB/Z,YAAa,2BACbz0B,MAAOT,KAAKG,UAAU,CAClBlD,OAAQgyC,EAAehyC,OACvB6B,WAAYmwC,EAAe/xC,gBAIZ,IAAtB+xC,EAAclyC,IAAa,kBAAC,GAAD,CAAmBkb,QAAS,WACpDo2B,EAAgBY,EAAclyC,KAEa03B,WAAS,aAyFhE,kBAAC,GAAD,KACI,2BAAOzc,UAAU,SACV0F,MAAO,CAACvC,MAAO,SAElB,+BACA,4BACI,qCACA,kCACA,wBAAInD,UAAW,iBAAiB,kBAAC,GAAD,CAAgBC,QAAS2wB,OAI7D,2BAAOlrB,MAAO,CAACmnB,UAAW,SACzB7lC,EAA0BpC,KAAI,SAAC2P,EAAOzP,GAAR,OAAkB+xC,EAAmBtiC,EAAOzP,SAOnF,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWivC,MAAOzM,GAAepC,QAC7B,4BAtJS,6BA0JjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7JY,uBA8JZ,kBAAC,GAAD,CACIjI,SAAU,SAACka,GAAD,OAAQ9B,GAAW,EAAM8B,IACnC1uC,MAAO1C,EAASA,EAAOqG,KAAOnC,EAAUiiB,OAI/CnmB,EAAQqG,OAASnC,EAAUoC,MACxB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KAzKE,oBA0KF,kBAAC,GAAD,CACI4wB,SAAU,SAAC/wB,GAAD,OAAUspC,GAAgB,EAAMtpC,IAC1CzD,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAASnC,EAAUoC,KAAOtG,EAAOhB,GAAK,KAG7D,kBAAC,GAAD,KACI,kBAAC,GAAD,KA/KQ,yBAgLR,kBAAC,GAAD,CAAgBkb,QAAS,kBAAM01B,GAAe,QAKzD5vC,EAAQqG,OAASnC,EAAUyM,KACxB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA3LM,wBA4LN,kBAAC,GAAD,CACIumB,SAAU,SAACjoB,GAAD,OAAU0gC,GAAoB,EAAM1gC,IAC9CvM,OAAa,OAAN1C,QAAM,IAANA,OAAA,EAAAA,EAAQqG,QAASnC,EAAUyM,IAAM3Q,EAAOhB,GAAK,EACpD45B,QAASoX,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KAlMY,8BAmMZ,kBAAC,GAAD,CAAgB91B,QAAS,kBAAM41B,GAAmB,QAM9D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW9B,MAAOzM,GAAepC,QAC7B,4BAvMW,8BA2MnB,kBAAC,GAAD,KACI,kBAAC,GAAD,KA9Mc,wBA+Md,kBAAC,GAAD,CACIjI,SAAU,SAACka,GAAD,OAAQ9B,GAAW,EAAO8B,IACpC1uC,MAAO3C,EAAWA,EAASsG,KAAOnC,EAAUyI,SAInD5M,EAAUsG,OAASnC,EAAUoC,MAC1B,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA3NE,oBA4NF,kBAAC,GAAD,CACI4wB,SAAU,SAAC/wB,GAAD,OAAUspC,GAAgB,EAAOtpC,IAC3CzD,OAAe,OAAR3C,QAAQ,IAARA,OAAA,EAAAA,EAAUsG,QAASnC,EAAUoC,KAAOvG,EAASf,GAAK,KAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,KAjOQ,yBAkOR,kBAAC,GAAD,CAAgBkb,QAAS,kBAAM01B,GAAe,QAKzD7vC,EAAUsG,OAASnC,EAAUyM,KAC1B,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KA7OM,wBA8ON,kBAAC,GAAD,CACIumB,SAAU,SAACjoB,GAAD,OAAU0gC,GAAoB,EAAO1gC,IAC/CvM,OAAe,OAAR3C,QAAQ,IAARA,OAAA,EAAAA,EAAUsG,QAASnC,EAAUyM,IAAM5Q,EAASf,GAAK,EACxD45B,QAASoX,KAGjB,kBAAC,GAAD,KACI,kBAAC,GAAD,KApPY,8BAqPZ,kBAAC,GAAD,CAAgB91B,QAAS,kBAAM41B,GAAmB,QAK9D,kBAAC,GAAD,OAGJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB51B,QAASrJ,IAC5B,kBAAC,GAAD,CAAoBy2B,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAa2Z,QAASnJ,EACTglB,SAAU6b,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiB13B,QAASy7B,OEjU7BI,GAA+D,WAExE,OACI,kBAAC,GAAD,CAAqBzR,KAAM,kBAAC,GAAD,SCMtB0R,GAAuD,WAEhE,MAMIjK,KALA94B,EADJ,EACIA,kBACAghB,EAFJ,EAEIA,aACAsY,EAHJ,EAGIA,oBACAr5B,EAJJ,EAIIA,oBACAlU,EALJ,EAKIA,GAGET,EAAoCic,YAAY8H,GAAoDtjB,IAwB1G,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,sCAGJ,kBAAC,GAAD,MAEA,kBAAC,GAAD,KAEI,yBAAKib,UAAU,mCACX,kBAAC,GAAD,CAAYsrB,aAAchnC,EACdqnC,gBAAgB,UAChBJ,iBAAkB+G,EAClB7G,oBAAqBxyB,EACrByyB,kBA9BT,SAACe,EAAwBZ,GACxC,IAAM2M,EAA6BruC,EAAUG,SAASmiC,GACtD+L,EAAkBnuB,QAAUwhB,EAC5B7yB,EAAkBw/B,IA4BMhN,WAzBT,SAACxlC,EAAc6rC,GAC9B,IAAM4G,EAAiDn0C,EAAewE,MAAK,SAAAyL,GAAK,OAAIA,EAAMxP,KAAO8sC,KACjG,GAAI4G,EAAmB,CACnB,IAAMuD,EAAwC7xC,EAAUG,SAASmuC,GACjEuD,EAAqBn2B,MAAQ7f,EAC7BgT,EAAkBgjC,SA0BlB,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiB/7B,QA7CN,WACd3b,EAAesG,MAAK,SAAA2J,GAAK,MAAoB,KAAhBA,EAAMsR,WACpCvhB,EAAeoB,QAAQsT,GACvBghB,WCzBCiiB,GAAiE,WAE1E,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,QCmBCC,GAA6C,WAEtD,MChB4B,WAC5B,IAAM/J,EAAqC5xB,YAAYqY,IACjDuT,EAAuC5rB,YAAYoQ,IACnD/T,EAAW4D,cACjB,EAAsCkc,mBAAe,CACjDtwB,KAAMnC,EAAUoC,KAChBtH,IAAK,IAFT,mBAAOuyC,EAAP,KAAoBC,EAApB,KAIA,EAAsB7a,mBAAiB,GAAvC,mBAAOl0B,EAAP,KAAY+gC,EAAZ,KAEA1M,qBAAU,gBACax1B,IAAf8qC,IACAv1B,EAASF,GAAcN,YAAY,2EACnCQ,EAASwc,GAAYb,QAAQ3H,SAE7BuhB,GACAoF,EAAepF,EAAWn8B,eAAe7J,QAG9C,CAACyQ,EAAUu1B,IAEd,IA+DMgD,EAAe,SAACprB,GAClB,QAAa1iB,IAAT0iB,EAAoB,CACpB,IAAMoyB,EAAoChyC,EAAUG,SAAS6nC,GAC7DgK,EAAiBnmC,eAAe7J,KAAO4d,EACvCnN,EAASmZ,GAASnB,OAAOunB,IACzBv/B,EAASmZ,GAASznB,KAAK6tC,IACvBv/B,EAASiV,GAAqBE,uBAAuBoqB,EAAiBnmC,eAAe9P,eAsG7F,MAAO,CACH2f,MAAO,YAA6B,OAAhBsmB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn5B,WAAWhN,OAAQ,IAAM,QAAmB,OAAVmsC,QAAU,IAAVA,OAAA,EAAAA,EAAYn8B,eAAehQ,OAAQ,IAC3GA,KAAMmsC,EAAaA,EAAYn8B,eAAehQ,KAAO,GACrDwlC,WA9Ke,SAACxlC,GAChB,IAAKmE,EAAUC,kBAAkB+nC,GAAa,CAC1C,IAAMgK,EAAoChyC,EAAUG,SAAS6nC,GAC7DgK,EAAiBnmC,eAAehQ,KAAOA,EACvC4W,EAASwc,GAAYb,QAAQ4B,SAASgiB,IACtCv/B,EAASmZ,GAASznB,KAAK6tC,IACvBv/B,EAASiV,GAAqBE,uBAAuBoqB,EAAiBnmC,eAAe9P,eAyKzFmQ,iBArKqB,SAAC85B,GACjBhmC,EAAUC,kBAAkB+nC,IAAgBhoC,EAAUC,kBAAkB+hC,KACjC,KAApCgG,EAAYn8B,eAAehQ,KAC3B4W,EAASmZ,GAASznB,KAAK6jC,IAEvBv1B,EAASmZ,GAAS1nB,OAAO8jC,EAAahG,IAGtCvvB,EADAuzB,GAAuB,SAAZA,EACF/W,GAAYb,QAAQ3H,OAEpBwI,GAAYb,QAAQyB,aAAamY,EAAYn8B,eAAe9P,eA4J7E2Q,mBAvJuB,WAClB1M,EAAUC,kBAAkB+nC,IAAgBhoC,EAAUC,kBAAkB+hC,KACzEvvB,EAASmZ,GAAS1nB,OAAO8jC,EAAahG,IACtCvvB,EAASwc,GAAYb,QAAQyB,aAAamY,EAAYn8B,eAAe9P,eAqJzEq1C,UA5Hc,WACd,IAAI/wC,GAAiB,EAMrB,OALKL,EAAUC,kBAAkB+nC,IACW,KAApCA,EAAYn8B,eAAehQ,OAC3BwE,GAAQ,GAGTA,GAsHP4xC,gBA3IoB,SAACv3C,GACrB,IAAKsF,EAAUC,kBAAkB+nC,GAAa,CAC1C,IAAIr6B,EAAmC3N,EAAUG,SAASzF,QACvCwC,IAAfyQ,IACAA,EAAa,IAAI26B,IACNptC,eAAiB8sC,EAAYn8B,eAAejR,GACvD+S,EAAWhT,MAAQqtC,EAAYtuC,QAAQ2I,OACvCoQ,EAAS81B,GAAkB56B,KAE3B8E,EAASwc,GAAYb,QAAQiC,WAAW1iB,MAmIhDukC,WAnJe,aAoJfhH,WA3Ge,SAACC,GAChB,QAAoBjuC,IAAhBiuC,EAA2B,CAC3B,IAAMC,EAAQ,CAACnpC,KAAOnC,EAAkBqrC,IAExC,OADAiC,EAAehC,GACPD,GACJ,KAAKrrC,EAAUyI,MAGf,KAAKzI,EAAUiiB,IACXipB,EAAaI,GACb,MACJ,KAAKtrC,EAAUkiB,KACXgpB,EAAaI,MAgGzBxrB,KAAMutB,EACN9B,gBA5FoB,SAACtpC,GACrB,GAAIA,EAAM,CACN,IAAMupC,EAAgB,CAACrpC,KAAMnC,EAAUoC,KAAMtH,GAAImH,EAAK8J,eAAejR,IACrEowC,EAAaM,KA0FjBC,oBAtFwB,SAACnwC,GACzB,GAAIA,EAAU,CACV,IAAMkwC,EAAgB,CAACrpC,KAAMnC,EAAUyM,IAAK3R,GAAIQ,EAASR,IACzDowC,EAAaM,KAoFjBE,eAhFmB,WACnB,IAAKxrC,EAAUC,kBAAkB+nC,GAAa,CAC1C,IAAMqJ,EAA4B,IAAI/J,GACtC+J,EAASxlC,eAAe9P,WAAaisC,EAAYn8B,eAAe9P,WAChE,IAAMu1C,EAAkCtxC,EAAUG,SAAS6nC,GAC3D5I,EAAO/gC,EAAM,GACboU,EAASwc,GAAYb,QAAQ4B,SAASqhB,EAAUC,IAChD7+B,EAASiV,GAAqBE,uBAAuBypB,EAASxlC,eAAe9P,eA0EjF2vC,mBAtEuB,WACvB,IAAK1rC,EAAUC,kBAAkB+nC,GAAa,CAC1C,IAAM2D,EAA2B,IAAIpE,GACrCoE,EAAa5vC,WAAaisC,EAAYn8B,eAAe9P,WACrD,IAAMu1C,EAAkCtxC,EAAUG,SAAS6nC,GAC3Dv1B,EAASwc,GAAYb,QAAQ6B,aAAa0b,EAAc2F,MAkE5D3kC,QA9DY,WACZ,IAAK3M,EAAUC,kBAAkB+nC,KAAgBhoC,EAAUC,kBAAkB+hC,GAAmB,CAC5FvvB,EAAS2a,GAAazgB,QAAQq7B,EAAYn8B,eAAe9P,WAAYisC,EAAYn8B,eAAejR,IAAI,IACpG,IAAMmH,EAAoCsc,GAAuB7Q,oBAC7Dw6B,EAAYn8B,eAAejR,IAG3B6X,EADA1Q,EACSktB,GAAYb,QAAQ4B,SAASjuB,GAE7BktB,GAAYb,QAAQ3H,UAsDrC+mB,UAAkB,OAAVxF,QAAU,IAAVA,OAAA,EAAAA,EAAYn8B,eAAe/P,QAA3B,OAAkCksC,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAYn8B,eAAe/P,MACrEuC,MACAgL,OAAM,OAAE2+B,QAAF,IAAEA,OAAF,EAAEA,EAAYn8B,eAAejR,GACnCuB,KAAM6rC,EAAaA,EAAWn8B,eAAe1P,KAAO,GACpD+rC,SArDa,SAACxyB,GACd,IAAK1V,EAAUC,kBAAkB+nC,IAAwB,KAATtyB,EAAa,CACzD,IAAMs8B,EAAoChyC,EAAUG,SAAS6nC,GAC7DgK,EAAiBnmC,eAAe1P,KAAOuZ,EACvCjD,EAASwc,GAAYb,QAAQ4B,SAASgiB,IACtCv/B,EAASmZ,GAASznB,KAAK6tC,IACvBv/B,EAASiV,GAAqBE,uBAAuBoqB,EAAiBnmC,eAAe9P,eAgDzFrC,SAAmB,OAAVsuC,QAAU,IAAVA,OAAA,EAAAA,EAAYtuC,UAAW,GAChCy4C,qBA7CyB,SAACC,EAAuBC,GACjD,IAAMC,EAAmBD,EAAYD,EAAgB,EAAIA,EAAgB,EACnEG,EAA4BvyC,EAAUG,SAAS6nC,GAErD,GAAIsK,GAAY,GAAKA,GAAYC,EAAS74C,QAAQ2I,OAAS,EAAG,CAC1D,IAAMmwC,EAAoBD,EAAS74C,QAAQ04C,GAC3CI,EAAQ73C,MAAQ23C,EAChB,IAAMG,EAAoBF,EAAS74C,QAAQ44C,GAC3CG,EAAQ93C,MAAQy3C,EAChBG,EAAS74C,QAAQ04C,GAAiBK,EAClCF,EAAS74C,QAAQ44C,GAAYE,EAG7B//B,EAASmZ,GAASznB,KAAKouC,IAGvB9/B,EAASiV,GAAqBE,uBAAuB2qB,EAAS1mC,eAAe9P,aAG7E0W,EAASmZ,GAASnB,OAAO8nB,ODxJ7BG,GAnBA72C,EADJ,EACIA,KACAwlC,EAFJ,EAEIA,WACA30B,EAHJ,EAGIA,mBACAR,EAJJ,EAIIA,iBACA+lC,EALJ,EAKIA,gBACAC,EANJ,EAMIA,WACAhH,EAPJ,EAOIA,WACAG,EARJ,EAQIA,gBACAzrB,EATJ,EASIA,KACA2rB,EAVJ,EAUIA,oBACAC,EAXJ,EAWIA,eACAE,EAZJ,EAYIA,mBACA/+B,EAbJ,EAaIA,QACA6gC,EAdJ,EAcIA,OACAnkC,EAfJ,EAeIA,OACAlN,EAhBJ,EAgBIA,KACA+rC,EAjBJ,EAiBIA,SACAxuC,EAlBJ,EAkBIA,QACAy4C,EAnBJ,EAmBIA,qBAGJ,EAAsCzJ,KAA/B96B,EAAP,EAAOA,aAAc87B,EAArB,EAAqBA,cAOrB,EAAsCnX,oBAAS,GAA/C,mBAAOogB,EAAP,KAAoBC,EAApB,KAiDA,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,qCAGJ,kBAAC,GAAD,KAEI,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIl3B,MAAM,QACNqX,YAAY,gBACZ8G,iBAAkB,SAACh+B,GAAD,OAAkBwlC,EAAWxlC,IAC/CyC,MAAOzC,EACPk+B,OAAO,EACPD,OAAQoY,KAIhB,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUltC,SAAUssB,GAAiByJ,QACjC,kBAAC,GAAD,KAAW,yCAEf,kBAAC,GAAD,CAAU/1B,SAAUssB,GAAiByJ,QAEjC,kBAAC,GAAD,CAAqB7I,KAAMygB,EACN78B,QAAS,kBAAM88B,GAAgBD,QAK3DA,GAAe,kBAAC,GAAD,OAAmB,kBAAC,GAAD,KA3DtB,SAACj5C,GACtB,OACI,2BAAOmc,UAAU,SACV0F,MAAO,CAACvC,MAAO,OAAQ65B,SAAU,WAEpC,+BACA,wBAAIh9B,UAAU,2CACV,sCACA,4BACI,kBAAC,GAAD,CAAgBC,QAAS,WACrBm8B,IACAC,UAMZ,2BAAO32B,MAAO,CAACmnB,UAAW,SACzBhpC,EAAQe,KAAI,SAACC,EAAQC,GAAT,OAzCD,SAACD,EAAkBC,GACvC,OAAQ,wBAAI0D,IAAK1D,GACT,4BACI,+BAAQ+uC,EAAchvC,KAE1B,wBAAImb,UAAU,iBACV,kBAAC,GAAD,CAAmBC,QAAS,WACxBlI,EAAalT,GACbw3C,OAGJ,kBAAC,GAAD,CAAiBp8B,QAAS,kBAAMm8B,EAAgBv3C,MAChD,kBAAC,GAAD,CAAiBm3B,SAAUxd,eACVyB,QAAS,kBAAMq8B,EAAqBx3C,GAAO,MAE5D,kBAAC,GAAD,CAAiBk3B,SAAUtd,aACVuB,QAAS,kBAAMq8B,EAAqBx3C,GAAO,QAyBhCm4C,CAAgBp4C,EAAQC,QAyCVo4C,CAAiBr5C,IAE/D,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUsL,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,yCAGJ,kBAAC,GAAD,CAAUhuC,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,CAAoBlgB,SAAUoY,EACV5sC,MAAOshB,EAAOA,EAAK3d,KAAOnC,EAAUyI,UAK/DqX,EAAM3d,OAASnC,EAAUoC,MACtB,oCAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAU8C,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,KA5GI,qBA8GR,kBAAC,GAAD,CAAUhuC,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,CACIlgB,SAAUuY,EACV/sC,OAAW,OAAJshB,QAAI,IAAJA,OAAA,EAAAA,EAAM3d,QAASnC,EAAUoC,KAAO0d,EAAKhlB,GAAK,EACjD45B,QAASnrB,MAKrB,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUrE,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,KAxHI,qBA0HR,kBAAC,GAAD,CAAUhuC,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,CAAgBl9B,QAAS01B,OAMxC5rB,EAAM3d,OAASnC,EAAUyM,KACtB,oCAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUvH,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,KAzIQ,yBA2IZ,kBAAC,GAAD,CAAUhuC,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,CACIlgB,SAAUyY,EACVjtC,OAAW,OAAJshB,QAAI,IAAJA,OAAA,EAAAA,EAAM3d,QAASnC,EAAUyM,IAAMqT,EAAKhlB,GAAK,MAK5D,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUoK,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,KApJQ,yBAsJZ,kBAAC,GAAD,CAAUhuC,SAAUssB,GAAiB0hB,OACjC,kBAAC,GAAD,CAAgBl9B,QAAS41B,OAMzC,kBAAC,GAAD,OAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAmB51B,QAASpJ,IAC5B,kBAAC,GAAD,CAAoBw2B,eAAgBgF,EAChB/E,QAAShnC,IAE7B,kBAAC,GAAD,CAAa2Z,QAASnJ,EACTglB,SAAU6b,GAElBA,EAAS,QAAU,gBAExB,kBAAC,GAAD,CAAiB13B,QAAS5J,OE5N7B+mC,GAAuD,WAEhE,OACI,kBAAC,GAAD,CAAqB/S,KAAM,kBAAC,GAAD,SCUtBgT,GAAiF,WAqC1F,OAjCsB,SAACC,GACnB,OAAQA,GACJ,KAAKxsB,GAAK4C,WACN,OAAO,kBAAC,GAAD,MACX,KAAK5C,GAAKyE,UACN,OAAO,kBAAC,GAAD,MACX,KAAKzE,GAAKiG,cACN,OAAO,kBAAC,GAAD,MACX,KAAKjG,GAAKuG,cACN,OAAO,kBAAC,GAAD,MACX,KAAKvG,GAAK+E,mBACN,OAAO,kBAAC,GAAD,MACX,KAAK/E,GAAK+H,qBACN,OAAO,kBAAC,GAAD,MACX,KAAK/H,GAAKyF,uBACN,OAAO,kBAAC,GAAD,MACX,KAAKzF,GAAKoH,0BACN,OAAO,kBAAC,GAAD,MACX,KAAKpH,GAAK4J,WACN,OAAO,kBAAC,GAAD,MACX,KAAK5J,GAAK8J,kBACN,OAAO,kBAAC,GAAD,MACX,KAAK9J,GAAKmD,gBACN,OAAO,kBAAC,GAAD,MACX,KAAKnD,GAAK2D,oBACN,OAAO,kBAAC,GAAD,MACP,KAAK3D,GAAKmE,mBACN,OAAO,kBAAC,GAAD,MACf,QACI,OAAO,kBAAC,GAAD,OAIZsoB,CAnCYh9B,YAAYqY,M,SCVtB4kB,GAAiF,WAC1F,MAAgC9gB,oBAAkB,GAAlD,mBAAO6Q,EAAP,KAAiBC,EAAjB,KACMiQ,EAAeC,sBAkBf9gC,EAAW4D,cAOjB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAaqF,MAAM,UACf,6BACI,kBAAC,GAAD,CAAiBmW,SAAU2hB,oBACV19B,QA5BT,WACC,OAAjBw9B,GAAkD,OAAzBA,EAAalZ,SACtCkZ,EAAalZ,QAAQz6B,WA4Bb,2BACI8zC,QAAQ,EACRpZ,IAAKiZ,EACLrxC,KAAK,OACLwxB,SAAU,SAAC+F,GACoB,OAAvBA,EAAMc,OAAOoZ,OA7BhB,SAAC/+B,GACtB,IAAMg/B,EAAa,IAAIC,WACV,OAATj/B,IACAg/B,EAAWE,WAAWl/B,GACtBg/B,EAAWG,OAAS,SAACta,GACjB/mB,EAASF,GAAcC,cAAcgnB,EAAMc,OAAQjZ,WAyBnC0yB,CAAiBva,EAAMc,OAAOoZ,MAAM,SAMxD,kBAAC,GAAD,CAAah4B,MAAM,YACf,kBAAC,GAAD,CAAiB5F,QAAS,kBAAMutB,GAAY,IAC3BxR,SAAUmiB,OAE1B5Q,GAAY,kBAAC,GAAD,CAAoBzH,cAAe,kBAAM0H,GAAY,OAEtE,kBAAC,GAAD,CAAa3nB,MAAM,SACf,kBAAC,GAAD,CAAmB5F,QA/BJ,WACvBrD,EAASwc,GAAYb,QAAQ6C,QAC7Bxe,EAASF,GAAcnB,0BC1BlB6iC,GAA+E,WAExF,MAAwEC,KAAjEC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,kBAAmBC,EAAvD,EAAuDA,cAEvD,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBziB,SAAU0iB,KACVz+B,QAASq+B,IAE1B,kBAAC,GAAD,CAAiBtiB,SAAU0iB,KACVz+B,QAASs+B,IAE1B,kBAAC,GAAD,CAAiBviB,SAAU0iB,KACVz+B,QAASw+B,IAE1B,kBAAC,GAAD,CAAiBziB,SAAU0iB,KACVz+B,QAASu+B,OAOpCH,GAAyB,WAc3B,MAAO,CAACC,cAbc,WAClBzhC,OAAO8hC,KAAKC,GAAa9xC,MAAO,SAAU,4BAYvByxC,aAVF,WACjB1hC,OAAO8hC,KAAKC,GAAaz4C,KAAM,SAAU,4BASRs4C,cAPf,WAClB5hC,OAAO8hC,KAAKC,GAAaC,MAAO,SAAU,4BAMML,kBAJ1B,WACtB3hC,OAAO8hC,KAAKC,GAAaE,UAAW,SAAU,8BCtCzCC,I,OAAyD,SAACp/B,GACnE,IAAOE,EAAeF,EAAfE,KAAMgG,EAASlG,EAATkG,MAEb,OACI,yBAAK7F,UAAU,kBACX,0BAAMA,UAAU,sBACZ,+BAAQ6F,IAEZ,0BAAM7F,UAAU,uBACZ,+BAAQH,O,oCCDXm/B,GAAuD,SAACr/B,GACjE,IAAOs/B,EAAuDt/B,EAAvDs/B,aAAcC,EAAyCv/B,EAAzCu/B,YAAaC,EAA4Bx/B,EAA5Bw/B,SAAUC,EAAkBz/B,EAAlBy/B,QAASt6C,EAAS6a,EAAT7a,MAErD,OACI,yBAAKkb,UAAU,QACX,kBAAC,GAAD,CACIgc,SAAUqjB,kBACVp/B,QAASg/B,IAEb,kBAAC,GAAD,CAAah/B,QAASk/B,GAClB,kBAAC,KAAD,CAAiBj/B,KAAMo/B,iBACtB,QAEL,yBAAKt/B,UAAW,qEACZ,+BAAQlb,IAEZ,kBAAC,GAAD,CAAiBmb,QAASm/B,GACrB,OACD,kBAAC,KAAD,CAAiBl/B,KAAMq/B,mBAE3B,kBAAC,GAAD,CACIvjB,SAAUwjB,iBACVv/B,QAASi/B,MCjBZO,GAAqE,WAE9E,MAMIC,KALAvkB,EADJ,EACIA,UACAwkB,EAFJ,EAEIA,UACAC,EAHJ,EAGIA,kBACAC,EAJJ,EAIIA,qBACA7kB,EALJ,EAKIA,kBAGJ,E9E2DoC,WACpC,IAAMnK,EAAatQ,YAAYqY,IACzBxlB,EAA+BmN,YAAYoQ,IAC3CwK,EAA2B5a,YAAYoQ,IACvCzC,EAAgC3N,YAAYoQ,IAC5CgvB,EAA2Bp/B,YAAYoQ,IACvC/T,EAAW4D,cAEXs/B,EAAa,WACf,OAAOjvB,IAASC,GAAKC,MAGnB4B,EAAW,YACRxoB,EAAUC,kBAAkBgJ,IAAa0sC,KAC1CljC,EAASiV,GAAqBc,SAASwI,KAIzC1I,EAAW,YACRtoB,EAAUC,kBAAkBgJ,IAAa0sC,KAC1CljC,EAASiV,GAAqBY,SAAS0I,KAIzCtI,EAAW,YACR1oB,EAAUC,kBAAkB8jB,IAAkB4xB,KAC/CljC,EAASiV,GAAqBgB,SAAS8sB,KAIzC/sB,EAAW,YACRzoB,EAAUC,kBAAkB8jB,IAAkB4xB,KAC/CljC,EAASiV,GAAqBe,SAAS+sB,KAIzCI,EAAsB,SAACpc,GACP,cAAdA,EAAMn7B,KACNmqB,IAEc,eAAdgR,EAAMn7B,KACNiqB,IAEc,aAAdkR,EAAMn7B,MACNm7B,EAAM4E,iBACN1V,KAEc,WAAd8Q,EAAMn7B,MACNm7B,EAAM4E,iBACN3V,MAYR,OARAiK,qBAAU,WAGN,OAFAlzB,SAASi6B,iBAAiB,UAAWmc,GAE9B,WACHp2C,SAASk6B,oBAAoB,UAAWkc,OAIzC,CACHttB,WACAE,WACAE,WACAD,Y8E5H6CotB,GAA1CrtB,EAAP,EAAOA,SAAUF,EAAjB,EAAiBA,SAAUG,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAQrC,OACI,kBAAC,GAAD,KAEI,kBAAC,GAAD,CAAahN,MAAM,iBACf,kBAAC,GAAD,CAAa5F,QAAS+a,GAAtB,kBAGJ,kBAAC,GAAD,MACA,kBAAC,GAAD,KACI,yBAAKtV,MAAO,CAACu6B,WAAY,SACrB,kBAAC,GAAD,CAAgBp6B,MAAM,SACNhG,KAAM+/B,IAEtB,kBAAC,GAAD,CAAgB/5B,MAAM,SACNhG,KAAMggC,MAK9B,kBAAC,GAAD,CAAah6B,MAAM,OACNypB,SAAS,GAElB,kBAAC,GAAD,CAAe2P,aAAcrsB,EACdssB,YAAarsB,EACbssB,SAAUxsB,EACVysB,QAAS3sB,EACT3tB,QA/BD66C,EAAY,GAAGz2C,YAAc,KAErC,OADOiyB,EAAUjyB,YAAc,UAqC/Cw2C,GAAmC,WACrC,IAAMvT,EAAuC5rB,YAAYoQ,IACnDwK,EAA2B5a,YAAYoQ,IACvC/C,EAAyCrN,YAAYoQ,IACrDzC,EAAgC3N,YAAYoQ,IAC5CgvB,EAA2Bp/B,YAAYoQ,IACvC/T,EAAW4D,cAsBX2f,EAAkB,SAACttB,GACjB1I,EAAUC,kBAAkByI,GAC5B+J,EAASiV,GAAqBM,uBAE9BvV,EAASiV,GAAqBI,wBAAwBpf,EAAW9N,MA+BzE,MAAO,CACH8gB,MAAO,QA3BH+H,EACO,MAAQuS,EAAgBn6B,KAExB,KAKPmmC,EACO,MAAQA,EAAiBn5B,WAAWhN,KAEpC,IAIK,WACoB,IAAD,EAAnC,OAAIm1B,GAAagR,EAET,iBACAA,EAAiBl5B,iBAAiBnK,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOo2B,YAD5E,aACA,EAAwFnlB,eAAehQ,MAGpG,GAK8Ck6C,GACzD9sC,SAAU+4B,EACVhR,YACAwkB,YACAnd,eA5DmB,SAACpvB,GACfjJ,EAAUC,kBAAkBgJ,IAC7BwJ,EAASiV,GAAqBE,uBAAuB3e,EAAUrO,UAElDsC,IAAb+L,IACAwJ,EAASiV,GAAqBO,uBAC9BxV,EAASiV,GAAqBQ,wBAuDlC8N,kBACAyX,kBAAmC,OAAjBhqB,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB/a,UAAU9N,MAAO,EACtDisB,iBAAiC,OAAhBmb,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn5B,WAAWjO,MAAO,EACrDo7C,cAA2B,OAAbjyB,QAAa,IAAbA,OAAA,EAAAA,EAAenpB,MAAO,EACpCo6B,YAvDgB,SAACjrB,GACZ/J,EAAUC,kBAAkB8J,IAC7B0I,EAASiV,GAAqBiB,gBAAgB5e,SAEpC7M,IAAV6M,IACA0I,EAASiV,GAAqBO,uBAC9BxV,EAASiV,GAAqBS,qBAkDlCutB,sBAAsC,OAAhB1T,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBn5B,WAAWhN,OAAQ,GAC3D45C,mBAAgC,OAAb1xB,QAAa,IAAbA,OAAA,EAAAA,EAAeloB,OAAQ,GAC1Cg1B,kBAAmB,kBAAMpe,EAASwc,GAAYb,QAAQyC,wBCxIjDolB,GAA+D,WACxE,IAAOvvB,EAAQwvB,KAARxvB,KAmBP,OACI,yBAAK7Q,UAAU,oBAlBM,SAAC6Q,GACtB,IAAK1mB,EAAUC,kBAAkBymB,GAAO,CACpC,GAAIA,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,MAEX,GAAIM,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,CAAsBqtB,QAAS/sB,EAAKN,SAAS,UAExD,GAAIM,EAAKN,SAAS,QACd,OAAO,kBAAC,GAAD,MAEX,GAAIM,EAAKN,SAAS,OACd,OAAO,kBAAC,GAAD,CAA2BqtB,QAAS/sB,EAAKN,SAAS,UAO5D+vB,CAAiBzvB,KAKxBwvB,GAA2B,WAC7B,IAAMxvB,EAAatQ,YAAYqY,IACzBhc,EAAW4D,cAkCjB,MAAO,CAACqQ,OAAM0vB,eAhCS,SAAC1vB,GACpB,OAAQA,GACJ,IAAK,OACDjU,EAASwc,GAAYb,QAAQ3H,QAC7B,MACJ,IAAK,OACDhU,EAASwc,GAAYb,QAAQiB,YAC7B,MACJ,IAAK,YACD5c,EAASwc,GAAYb,QAAQ2B,iBAC7B,MACJ,IAAK,WACDtd,EAASwc,GAAYb,QAAQyB,gBAC7B,MAQJ,IAAK,QACDpd,EAASwc,GAAYb,QAAQkC,iB,oBCpDhC+lB,I,OAAyD,WAClE,MAA4DC,KAArDC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,cAAe/vB,EAApD,EAAoDA,KAEpD,OACI,yBAAK7Q,UAAU,aACX,kBAAC,GAAD,CAAiBgc,SAAUpe,GAAWgB,OACrBwB,KAAMqX,GAAYopB,MAClB7gC,UAAW,mBAAqB6Q,EAAKN,SAASO,GAAK+G,KAAK3uB,YAAc,UAAY,IAClF+W,QAASygC,IAE1B,kBAAC,GAAD,CAAiB1kB,SAAUpe,GAAWoB,IACrBgB,UAAW,mBAAqB6Q,IAASC,GAAKC,KAAO,UAAY,IACjE9Q,QAAS2gC,IAE1B,kBAAC,GAAD,CAAiB5kB,SAAUpe,GAAWkB,KACrBkB,UAAW,mBAAqB6Q,IAASC,GAAKuK,KAAO,UAAY,IACjEpb,QAAS0gC,IAK1B,yBAAKj7B,MAAO,CAACvW,SAAU,WAAY2xC,OAAQ,QACvC,yBAAKC,IAAKC,KACLC,IAAI,aAET,yBAAKjhC,UAAU,iBAAf,YACA,2BAAO0F,MAAO,CAAC0N,MAAO,QAASjkB,SAAU,WAAY2xC,OAAQ,MAA7D,KzLhCqB,QyLwC/BL,GAAwB,WAC1B,IAAM7jC,EAAW4D,cAmBjB,MAAO,CACHkgC,cAjBkB,WAClB9jC,EAASwc,GAAYb,QAAQ3H,SAiB7BgwB,cAdkB,WAClBhkC,EAASwc,GAAYb,QAAQ6C,SAc7BulB,cAXkB,WAClB/jC,EAASwc,GAAYb,QAAQzZ,SAW7BoiC,aARiB,WACjBtkC,EAASwc,GAAYb,QAAQ+C,QAQ7BzK,KAvBStQ,YAAYqY,MCtBhBuoB,GAAqE,WAE1E,MAQIC,KAPAjb,EADJ,EACIA,iBACAkb,EAFJ,EAEIA,UACA5Z,EAHJ,EAGIA,cACAC,EAJJ,EAIIA,OACAC,EALJ,EAKIA,QACAxkC,EANJ,EAMIA,UACAm+C,EAPJ,EAOIA,wBAGJ,OACI,oCAC8B,IAAzB7Z,EAAcj7B,QACf,yBAAKwT,UAAU,cACX,wBAAIA,UAAW,0BAA2B,uBAE7CynB,EAAcj7B,OAAS,GAAK,kBAAC,GAAD,CACzB25B,iBAAkBA,EAClBsB,cAAeA,EACfG,YAAayZ,IACb3Z,OAAQA,EACRC,QAASA,EACTr4B,KAAMnM,EACNiJ,KAAM44B,GAAWl4B,MACjBu5B,YAAaib,MAO3BF,GAAe,WACb,IAAMxkC,EAAW4D,cAEXnd,EAAqBkd,YAAY8H,IACjCtkB,EAAmBwc,YAAY8H,IAE/Bk5B,EAAkChhC,YAAYqY,IAC9CuZ,EAAqC5xB,YAAYqY,IACjDE,EAAgCvY,YAAYqY,IAC5C4X,EAAoCjwB,YAAYqY,IAChD4oB,EAAsCjhC,YAAYqY,IAClD6oB,EAAuClhC,YAAYqY,IACnD8oB,EAAoCnhC,YAAYqY,IAChD+oB,EAA0BphC,YAAYqY,IACtCgpB,EAA0BrhC,YAAYqY,IAEtC5I,EAAkBzP,YAAYoQ,IAE9BkxB,EAAiCthC,YAAYoQ,IAC7CzU,EAAqBqE,YAAYoQ,IAEjCxtB,EAAoBod,YAAY9C,IAEtCqkC,IAAMjlB,WAAU,WACZjgB,EAAS4L,MACT5L,EAAS4L,QACV,CAAC5L,IAEJ,IAAMmlC,EAAgB,WAClB,IAAMr5B,EAAkC,GAGxC,OAFAA,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASs5B,MACnBt5B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASu5B,MACZv5B,GAGLs5B,EAAwB,WAC1B,IAAMt5B,EAAkC,GAElCw5B,EAA2ChmC,EAAOtX,IAAIu9C,GAC5Dz5B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASw5B,IAEnB,IAAME,EAAuDP,EACxDj9C,IAAIy9C,GACJ7qC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzR,KAAK03B,cAAchmB,EAAE1R,SAO3C,OANA0iB,EAAW9iB,KAAX,MAAA8iB,EAAU,YACH05B,EAAgCnyC,QAC/B,SAACqyC,GAAD,OAA6B55B,EAAW9d,MAAK,SAAC0hB,GAAD,OAAQi2B,EAAgBj2B,EAAIg2B,WAI1E55B,GAGLu5B,EAAwB,WAC1B,IAAMv5B,EAAkC,GAClC85B,GACQ,OAAVrQ,QAAU,IAAVA,OAAA,EAAAA,EAAYtuC,QAAQe,KAAI,SAACC,GAAD,OAAaA,EAAS49C,EAAsB59C,GAAU,MAAKmoB,KAAK,KAAM,GAC5F01B,EAAiD5pB,EAAe2pB,EAAsB3pB,GAAgB,GACtG6pB,EAAmDC,EAAuBpS,GAC1EqS,EAAmDpB,EACnDA,EAAgBx9C,UAAUW,IAAIwsB,GAC9B,GACA0xB,EAAwDpB,EACxDtwB,EAAuBswB,QACvBr6C,EAaN,OAZAm7C,EAAyB98C,SAAQ,SAAC4F,GAC9BA,GAAaod,EAAW9iB,KAAK0F,MAEjCod,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASi6B,IACnBj6B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASm6B,IACnBn6B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASg6B,IACfI,GACAp6B,EAAW9iB,KAAKk9C,GAEhBtB,GACA94B,EAAW9iB,KAAKm9C,EAAwBvB,IAErC94B,GAGL65B,EAAkB,SAACS,EAA4BC,GACjD,OAAOD,EAAQhU,WAAaiU,EAAQjU,UAAYgU,EAAQh9C,OAASi9C,EAAQj9C,MAGvEy8C,EAAwB,SAACS,GAC3B,IAAMC,EAAyC,GAE/C,GAAID,EAAWl+C,aAAewc,GAAW6O,QAAS,CAC9C,IAAM9b,EAAwB6uC,EAAiCF,EAAWl+C,YACpEgqC,EAAWz6B,IAAUkS,GAAegD,KAAOy5B,EAAW99C,eAAiB89C,EAAW/9C,iBAExFg+C,EAAkBv9C,KAAK,CACnBI,KAAMq9C,EAAgBH,EAAWj+C,OAAQi+C,EAAWh+C,YACpDqP,MAAOA,EACPy6B,SAAUA,IAGVkU,EAAWl+C,aAAewc,GAAWkI,iBACrCy5B,EAAkBv9C,KAAK,CACnBI,KAAMq9C,EAAgBH,EAAWj+C,OAAQi+C,EAAWh+C,YACpDqP,MAAOkS,GAAe8C,QACtBylB,SAAUkU,EAAW99C,iBAIjC,OAAO+9C,GAGLhB,EAAuB,SAACmB,GAC1B,IAAM/uC,EAAwBgvC,EAAgCD,EAAUt+C,YAElEgqC,EAAWz6B,IAAUkS,GAAe+8B,WAAaF,EAAUl+C,eAAiBk+C,EAAUn+C,iBAE5F,MAAO,CACHa,KAAMq9C,EAAgBC,EAAUr+C,OAAQq+C,EAAUp+C,YAClDqP,MAAOA,EACPy6B,SAAUA,IAIZqT,EAA6B,SAAC/2C,GAChC,MAAO,CACHtF,KAAMq9C,EAAgB/3C,EAAUrG,OAAQqG,EAAUpG,YAClD8pC,SAAU1jC,EAAUzF,QACpB0O,MAAOjJ,EAAUiJ,QAInBquC,EAAyB,SAACr9C,GAC5B,IAAIoa,EAA6B,GAQjC,OAPIpa,QAC4B8B,IAAxB9B,EAASoB,YAA4BpB,EAASoB,WAAW6F,OAAS,IAClEmT,EAAQpa,EAASoB,WAAW/B,KAAI,SAAC4G,GAC7B,OAAOu3C,EAAwBv3C,OAIpCmU,GAGLojC,EAA0B,SAACv3C,GAC7B,MAAO,CACHwjC,SAAUxjC,EAAU3F,QACpBG,KAAMq9C,EAAgB73C,EAAUvG,OAAQuG,EAAUtG,YAClDqP,MAAOkS,GAAewD,UAIxBmH,EAAyB,SAACzlB,GAC5B,MAAO,CACHqjC,SAAUrjC,EAAS9F,QACnBG,KAAMq9C,EAAgB13C,EAAS1G,OAAQ0G,EAASzG,YAChDqP,MAAOkS,GAAe4C,MAIxBg6B,EAAkB,SAACr4C,EAAgBlE,GACrC,IAIuD,EAJnD28C,EAAmB,sBACjBt9C,EAA4BpC,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,KACpE7E,IACAs9C,EAAWt9C,EAAKA,KAAKH,UACFqB,IAAfP,IAA4C,IAAhBA,IAC5B28C,EACIA,EACA,QACC,UAAAt9C,EAAKA,KAAKI,UAAUuC,MAAK,SAACwI,GAAD,OAAUA,EAAKvM,KAAO+B,YAA/C,eAA4Dd,OACzD,kCAGhB,OAAOy9C,GAGLL,EAAmC,SAACp+C,GACtC,IAAI0+C,EACJ,OAAQ1+C,GACJ,KAAKwc,GAAWyH,IACZy6B,EAAUj9B,GAAe4C,IACzB,MACJ,KAAK7H,GAAW8H,OACZo6B,EAAUj9B,GAAe8C,QACzB,MACJ,KAAK/H,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZg6B,EAAUj9B,GAAegD,KACzB,MACJ,KAAKjI,GAAW6O,QACZqzB,EAAUj9B,GAAeoC,WAGjC,OAAO66B,GAGLH,EAAkC,SAACv+C,GACrC,IAAI0+C,EACJ,OAAQ1+C,GACJ,KAAKwc,GAAWyH,IACZy6B,EAAUj9B,GAAek9B,UACzB,MACJ,KAAKniC,GAAW8H,OACZo6B,EAAUj9B,GAAem9B,aACzB,MACJ,KAAKpiC,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZg6B,EAAUj9B,GAAe+8B,WACzB,MACJ,KAAKhiC,GAAW6O,QACZqzB,EAAUj9B,GAAeoC,WAGjC,OAAO66B,GA+CLG,EAAc,SAAC/2C,GACjB,MAAO,CACH/H,GAAI+H,EAAMA,MAAM/H,GAChBipC,SAAUlhC,EAAMA,MAAM9G,KACtBioC,UAAW,IACXC,WAAY,GACZC,cAAe4T,IAAgB9xC,QAC3B,SAACspB,GAAD,OACIA,EAAIyV,WAAaliC,EAAMA,MAAM/H,IAC5Bw0B,EAAIyV,SAAoDhkC,SAAW8B,EAAMA,MAAM/H,MAExFqpC,WAAYjrC,EACZiJ,KAAM,UA6Cd,MAAO,CACH+5B,iBAtGqB,SAACzjB,EAAWC,EAAW3V,GAC5C,IAAMmD,EAAW9M,EAAOyF,MAAK,SAACqH,GAAD,OAAcA,EAASpB,gBAAgBI,SAASpK,KAAOiI,KACpF,GAAImD,EAAU,CACV,IAAM2zC,EAAyB35C,EAAUG,SAAS6F,GAClD2zC,EAAa/0C,gBAAgBI,SAASuT,EAAIA,EAC1CohC,EAAa/0C,gBAAgBI,SAASwT,EAAIA,EAC1C/F,EAASiX,GAAeiwB,MAiG5BzC,UA3Cc,WAAyB,IAAD,EAElC0C,EADEC,EAA+B,GA6BrC,OA1BAD,EAAe/zB,EAEX2xB,GACAoC,EAAan+C,KAAK+7C,IAEtB,EAAAoC,GAAan+C,KAAb,oBAAqBg8C,IAErBmC,EAAar+C,SAAQ,SAACu+C,EAAan/C,GAC/Bk/C,EAAWp+C,KAAK,CACZ0c,KAAM1B,GAAc0D,MACpBvf,GAAID,EACJod,OAAQ+hC,EAAY7zB,WACpB7N,SAAU5B,GAAemE,OACzBpD,QAASuiC,EAAYh0B,sBAAsB9gB,SAASuT,EACpDf,QAASsiC,EAAYh0B,sBAAsB9gB,SAASwT,EACpDf,QAASqiC,EAAY/zB,sBAAsB/gB,SAASuT,EACpDb,QAASoiC,EAAY/zB,sBAAsB/gB,SAASwT,EACpDZ,aAAckiC,EAAYh0B,sBAAsBlhB,gBAAgBqU,OAChEtB,YAAamiC,EAAYh0B,sBAAsBlhB,gBAAgBoU,MAC/DnB,aAAciiC,EAAY/zB,sBAAsBnhB,gBAAgBqU,OAChEnB,YAAagiC,EAAY/zB,sBAAsBnhB,gBAAgBoU,MAC/Dd,QAAS4hC,EAAY73C,OAASsU,GAAU2P,QAExC7N,UAAWyhC,EAAY73C,OAASsU,GAAU8I,KAAO,oBAAsB,0BAGxEw6B,GAcPvc,cAnFwB,SAACpkC,GACzB,IAAI6gD,EAmBJ,OAlBAA,EAAiB7gD,EACZ4M,QAAO,SAACnD,GAAD,QAAay0C,GAAkBA,EAAez0C,MAAM/H,KAAO+H,EAAMA,MAAM/H,OAC9EH,KAAI,SAACu/C,GACF,MAAO,CACH/a,QAAS,kBAAC,GAAcya,EAAYM,IACpCh1C,SAAUg1C,EAAOp1C,gBAAgBI,SACjCJ,gBAAiBo1C,EAAOp1C,gBAAgBA,oBAG/CkB,QAAO,SAACgmB,GAAD,YAAmB5uB,IAAT4uB,KAElBsrB,GACA2C,EAAet+C,KAAK,CAChBwjC,QAAS,kBAAC,GAAcya,EAAYtC,IACpCpyC,SAAUoyC,EAAexyC,gBAAgBI,SACzCJ,gBAAiBwyC,EAAexyC,gBAAgBA,kBAGjDm1C,EA+DQE,CAAoB/gD,GACnCqkC,OARW,WACX9qB,EAASF,GAAcM,gBAQvB2qB,QAbY,WACZ/qB,EAASF,GAAcU,iBAavBkkC,wBAjG4B,SAACn+B,EAAeC,EAAgBkjB,GAC5D,IAAMiO,EAAkCpqC,EAAUG,SAC9CjH,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMiC,gBAAgBA,gBAAgBhK,KAAOuhC,MAEpEiO,IACAA,EAAUxlC,gBAAgBA,gBAAgBoU,MAAQA,EAClDoxB,EAAUxlC,gBAAgBA,gBAAgBqU,OAASA,EACnDxG,EAASiX,GAAe0gB,MA2F5BpxC,cC/VCkhD,GAAmE,WAE5E,MAQIC,KAPAne,EADJ,EACIA,iBACAsB,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,OACAC,EAJJ,EAIIA,QACA4c,EALJ,EAKIA,aACAjD,EANJ,EAMIA,wBACAkD,EAPJ,EAOIA,eAyBJ,OApBY,oCAC8B,IAAzB/c,EAAcj7B,QACf,yBAAKwT,UAAU,aACX,wBAAIA,UAAW,0BAA2B,6BAE7CynB,EAAcj7B,OAAS,GAAK,kBAAC,GAAD,CACzB25B,iBAAkBA,EAClBsB,cAAeA,EACfG,YAAa2c,IACb7c,OAAQA,EACRC,QAASA,EACTr4B,KAAMk1C,EACNp4C,KAAM44B,GAAW7+B,KACjBkgC,YAAaib,MAU/BgD,GAA4B,WAC1B,IAAM1nC,EAAW4D,cAEXzc,EAAmBwc,YAAY8H,IAC/Bo8B,EAAgClkC,YAAYqY,IAC5C8rB,EAAkCnkC,YAAY8H,IAC9ChlB,EAAqBkd,YAAY8H,IAEjCs8B,EAA4CpkC,YAAYqY,IACxDuZ,EAAqC5xB,YAAYqY,IACjDE,EAAgCvY,YAAYqY,IAC5C4X,EAAoCjwB,YAAYqY,IAChD4oB,EAAsCjhC,YAAYqY,IAClD6oB,EAAuClhC,YAAYqY,IACnD8oB,EAAoCnhC,YAAYqY,IAEhD/0B,EAAsB0c,YAAYoQ,IAElCkxB,EAAiCthC,YAAYoQ,IAC7CzU,EAAqBqE,YAAYoQ,IAEjC6zB,EAAyBjkC,YAAY9C,IAE3CqkC,IAAMjlB,WAAU,WACZjgB,EAAS4L,MACT5L,EAAS4L,QACV,CAAC5L,IAEJ,IAAMgoC,EAAmB,SAAC/4C,GAA6B,IAAD,EAClD,OAAO,UAAAxI,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAO8G,YAA1C,eAAoDiB,MAAM9G,OAAQ,wBAGvE+7C,EAAgB,WAClB,IAAMr5B,EAAkC,GAGxC,OAFAA,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASs5B,MACnBt5B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASu5B,MACZv5B,GAGLs5B,EAAwB,WAC1B,IAAMt5B,EAAkC,GAElCw5B,EAA2ChmC,EAAOtX,IAAIu9C,GAC5Dz5B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASw5B,IAEnB,IAAM2C,EAA6ChhD,EAAQe,IAAI69C,GAC/D/5B,EAAW9iB,KAAX,MAAA8iB,EAAU,YACHm8B,EAAsB50C,QACrB,SAAC60C,GAAD,OAA0Bp8B,EAAW9d,MAAK,SAAC0hB,GAAD,OAAQi2B,EAAgBj2B,EAAIw4B,WAI9E,IAAM1C,EAAuDP,EAExD5xC,QAAO,SAAC80C,GAAD,OAAYA,EAAOxwC,QAAUkS,GAAe2C,gBACnDxkB,IAAIy9C,GACJ7qC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzR,KAAK03B,cAAchmB,EAAE1R,SAO3C,OANA0iB,EAAW9iB,KAAX,MAAA8iB,EAAU,YACH05B,EAAgCnyC,QAC/B,SAAC+0C,GAAD,OAAqCt8B,EAAW9d,MAAK,SAAC0hB,GAAD,OAAQi2B,EAAgBj2B,EAAI04B,WAIlFt8B,GAGLu5B,EAAwB,WAC1B,IAAMv5B,EAAkC,GAClC85B,GAA0D,OAAVrQ,QAAU,IAAVA,OAAA,EAAAA,EAAYtuC,QAAQe,IAAI69C,KAA0B,GAClGC,EAA2D5pB,EAC3D2pB,EAAsB3pB,QACtBzxB,EACA49C,EAA6DvD,EAC7DtwB,EAAuBswB,QACvBr6C,EACAs7C,EAAmDC,EAAuBpS,GAC1E0U,EAA+CzD,EAC/CA,EAAgBx9C,UAAUW,IAAIwsB,GAC9B,GAaN,OAZA1I,EAAW9iB,KAAX,MAAA8iB,EAAU,YAAS85B,IACnB95B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASi6B,IACnBj6B,EAAW9iB,KAAX,MAAA8iB,EAAU,YAASw8B,IACfxC,GACAh6B,EAAW9iB,KAAK88C,GAEhBuC,GACAv8B,EAAW9iB,KAAKq/C,GAEhBzD,GACA94B,EAAW9iB,KAAKm9C,EAAwBvB,IAErC94B,GAGLy5B,EAAuB,SAACmB,GAC1B,IAAM/uC,EAAwBgvC,EAAgCD,EAAUt+C,YAElEgqC,EAAWz6B,IAAUkS,GAAe+8B,WAAaF,EAAUl+C,eAAiBk+C,EAAUn+C,iBAE5F,MAAO,CACHa,KAAMq9C,EAAgBC,EAAUr+C,OAAQq+C,EAAUp+C,YAClDqP,MAAOA,EACPy6B,SAAUA,IAIlB,SAASyT,EAAsBS,GAC3B,IAAM3uC,EAAwB6uC,EAAiCF,EAAWl+C,YAC1E,MAAO,CACHgB,KAAM4+C,EAAiB1B,EAAW/9C,kBAClCoP,MAAOA,EACPy6B,SAAUkU,EAAWj+C,QAI7B,IAAMo9C,EAA6B,SAAC/2C,GAChC,MAAO,CACHtF,KAAM4+C,EAAiBt5C,EAAUzF,SACjCmpC,SAAU,CAAChkC,OAAQM,EAAUrG,OAAQ6B,WAAYwE,EAAUpG,YAC3DqP,MAAOkS,GAAeoC,aAIxB+5B,EAAyB,SAACr9C,GAC5B,IAAIoa,EAA6B,GAQjC,OAPIpa,QAC4B8B,IAAxB9B,EAASoB,YAA4BpB,EAASoB,WAAW6F,OAAS,IAClEmT,EAAQpa,EAASoB,WAAW/B,KAAI,SAAC4G,GAC7B,OAAOu3C,EAAwBv3C,OAIpCmU,GAGLojC,EAA0B,SAACv3C,GAC7B,MAAO,CACHwjC,SAAU,CAAChkC,OAAQQ,EAAUvG,OAAQ6B,WAAY0E,EAAUtG,YAC3Dc,KAAM4+C,EAAiBp5C,EAAU3F,SACjC0O,MAAOkS,GAAewD,UAIxBmH,EAAyB,SAACzlB,GAC5B,MAAO,CACHqjC,SACIrjC,EAASzG,YAAc,EACjB,CAAC8F,OAAQW,EAAS1G,OAAQ6B,WAAY6E,EAASzG,YAC/CyG,EAAS1G,OACnBe,KAAM4+C,EAAiBj5C,EAAS9F,SAChC0O,MAAOkS,GAAe4C,MAIxBk5B,EAAkB,SAACS,EAA4BC,GACjD,IAAMkC,EAAWnC,EAAQhU,SAAoDhkC,QAAUg4C,EAAQhU,SACzFoW,EAAepC,EAAQhU,SAG1BloC,WACGu+C,EAAWpC,EAAQjU,SAAoDhkC,QAAUi4C,EAAQjU,SACzFsW,EAAerC,EAAQjU,SAG1BloC,WACH,OACKq+C,IAAYE,GAAWrC,EAAQhU,WAAaiU,EAAQjU,WACrDgU,EAAQh9C,OAASi9C,EAAQj9C,SACtBo/C,GAAeE,IAAgBF,IAAgBE,IAIpDlC,EAAmC,SAACp+C,GACtC,IAAI0+C,EACJ,OAAQ1+C,GACJ,KAAKwc,GAAWyH,IACZy6B,EAAUj9B,GAAe4C,IACzB,MACJ,KAAK7H,GAAW8H,OACZo6B,EAAUj9B,GAAe8C,QACzB,MACJ,KAAK/H,GAAWgI,KAGhB,KAAKhI,GAAWkI,gBACZg6B,EAAUj9B,GAAe4C,IACzB,MACJ,KAAK7H,GAAW6O,QACZqzB,EAAUj9B,GAAeoC,WAGjC,OAAO66B,GAGLH,EAAkC,SAACv+C,GACrC,IAAI0+C,EACJ,OAAQ1+C,GACJ,KAAKwc,GAAWyH,IACZy6B,EAAUj9B,GAAek9B,UACzB,MACJ,KAAKniC,GAAW8H,OACZo6B,EAAUj9B,GAAem9B,aACzB,MACJ,KAAKpiC,GAAWgI,KAChB,KAAKhI,GAAWkI,gBACZg6B,EAAUj9B,GAAe+8B,WACzB,MACJ,KAAKhiC,GAAW6O,QACZqzB,EAAUj9B,GAAeoC,WAGjC,OAAO66B,GAGLL,EAAkB,SAACr4C,EAAgBlE,GACrC,IAIuD,EAJnD28C,EAAmB,sBACjBt9C,EAA4BpC,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,KACpE7E,IACAs9C,EAAWt9C,EAAKA,KAAKH,UACFqB,IAAfP,IAA4C,IAAhBA,IAC5B28C,EACIA,EACA,QACC,UAAAt9C,EAAKA,KAAKI,UAAUuC,MAAK,SAACwI,GAAD,OAAUA,EAAKvM,KAAO+B,YAA/C,eAA4Dd,OACzD,kCAGhB,OAAOy9C,GAoCL8B,EAAa,SAACp/C,GAChB,MAAO,CACHpB,GAAIoB,EAAKA,KAAKpB,GACdipC,SAAU7nC,EAAKA,KAAKH,KACpBioC,UAAW,IACXC,WAAY,GACZC,cAAe4T,IAAgB9xC,QAC3B,SAACspB,GAAD,OACIA,EAAIyV,WAAa7oC,EAAKA,KAAKpB,IAC1Bw0B,EAAIyV,SAAoDhkC,SAAW7E,EAAKA,KAAKpB,MAEtFwB,UAAWJ,EAAKA,KAAKI,UACrB6nC,WAAYoW,EACZp4C,KAAM,SAYRo5C,EAAqB,SAACx6C,GAAoD,IAAD,EAC3E,OAAO,UAAAjH,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOiG,YAAtC,eAA+C+D,uBAAmB1H,GAGvEo+C,EAAsB,SAACv6C,EAA0BnG,EAAY2gD,GAC/D,IAAMz1B,EAAwDu1B,EAAmBt6C,EAASC,SACpF+kB,EAAwDs1B,EAAmBt6C,EAASE,SAE1F,MAAO,CACHrG,GAAIA,EACJmd,OAAQ,GACRK,SAAU5B,GAAeoF,KACzBrE,SAA8B,OAArBuO,QAAqB,IAArBA,OAAA,EAAAA,EAAuB9gB,SAASuT,IAAK,EAC9Cf,SAA8B,OAArBsO,QAAqB,IAArBA,OAAA,EAAAA,EAAuB9gB,SAASwT,IAAK,EAC9Cf,SAA8B,OAArBsO,QAAqB,IAArBA,OAAA,EAAAA,EAAuB/gB,SAASuT,IAAK,EAC9Cb,SAA8B,OAArBqO,QAAqB,IAArBA,OAAA,EAAAA,EAAuB/gB,SAASwT,IAAK,EAC9CZ,cAAmC,OAArBkO,QAAqB,IAArBA,OAAA,EAAAA,EAAuBlhB,gBAAgBqU,SAAU,EAC/DtB,aAAkC,OAArBmO,QAAqB,IAArBA,OAAA,EAAAA,EAAuBlhB,gBAAgBoU,QAAS,EAC7DnB,cAAmC,OAArBkO,QAAqB,IAArBA,OAAA,EAAAA,EAAuBnhB,gBAAgBqU,SAAU,EAC/DnB,aAAkC,OAArBiO,QAAqB,IAArBA,OAAA,EAAAA,EAAuBnhB,gBAAgBoU,QAAS,EAC7Dd,QAASqjC,EACTvjC,gBAAiBjX,EAAS8V,WAC1BoB,gBAAiBlX,EAASgW,aAoB5BykC,EAAwB,SAACj1C,GAC3B,OAAkC,IAA1BA,EAAavF,UAA4C,IAA1BuF,EAAatF,SAcxD,MAAO,CACH+6B,iBApHqB,SAACzjB,EAAWC,EAAW3V,GAC5C,IAAM6E,EAAU9N,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAK4I,gBAAgBI,SAASpK,KAAOiI,KAC1E,GAAI6E,EAAS,CACT,IAAMC,EAAuB3H,EAAUG,SAASuH,GAChDC,EAAY/C,gBAAgBI,SAASuT,EAAIA,EACzC5Q,EAAY/C,gBAAgBI,SAASwT,EAAIA,EACzC/F,EAAS6Y,GAAc3jB,MA+G3B21B,cA3GsB,SAAC1jC,GACvB,IAAImgD,EAmBJ,OAlBAA,EAAiBngD,EACZkM,QAAO,SAAC9J,GAAD,QAAYs+C,GAAiBA,EAAct+C,KAAKpB,KAAOoB,EAAKA,KAAKpB,OACxEH,KAAI,SAACghD,GACF,MAAO,CACHxc,QAAS,kBAAC,GAAcmc,EAAWK,IACnCz2C,SAAUy2C,EAAM72C,gBAAgBI,SAChCJ,gBAAiB62C,EAAM72C,gBAAgBA,oBAG9CkB,QAAO,SAACgmB,GAAD,YAAmB5uB,IAAT4uB,KAElBwuB,GACAP,EAAet+C,KAAK,CAChBwjC,QAAS,kBAAC,GAAcmc,EAAWd,IACnCt1C,SAAUs1C,EAAc11C,gBAAgBI,SACxCJ,gBAAiB01C,EAAc11C,gBAAgBA,kBAGhDm1C,EAuFQ2B,CAAkB9hD,GACjC2jC,OAhEW,WACX9qB,EAASF,GAAcW,eAgEvBsqB,QArEY,WACZ/qB,EAASF,GAAcY,gBAqEvBinC,aApCiB,WACjB,IAAIuB,EAAuC,GAEvCC,EAAsC57C,EAAUG,SAASo6C,GAU7D,OARIC,IACAoB,EAAoBA,EAAkB91C,QAAO,SAAC/E,GAAD,OAAcA,EAASnG,KAAO4/C,EAAmB5/C,MAC1F4gD,EAAsBhB,IACtBmB,EAAmBlgD,KAAK6/C,EAAoBd,EAAoBA,EAAmB5/C,IAAI,KAI/FghD,EAAkBrgD,SAAQ,SAACsgD,GAAD,OAASF,EAAmBlgD,KAAK6/C,EAAoBO,EAAKA,EAAIjhD,QACjF+gD,GAwBPxE,wBAjB4B,SAACn+B,EAAeC,EAAgBkjB,GAC5D,IAAM3M,EAAgCxvB,EAAUG,SAC5CvG,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAK4I,gBAAgBA,gBAAgBhK,KAAOuhC,MAEjE3M,IACAA,EAAS5qB,gBAAgBA,gBAAgBoU,MAAQA,EACjDwW,EAAS5qB,gBAAgBA,gBAAgBqU,OAASA,EAClDxG,EAAS6Y,GAAckE,MAW3B6qB,mB,SCrZCyB,I,OAA+C,SAACtmC,GAAW,IAAD,IAC5DumC,EAAavmC,EAAbumC,UAED5hD,GAAoC,UAAAic,YAAYoQ,WAAZ,eAAoDrsB,iBAAkB,GAC1GC,GAA8B,UAAAgc,YAAYoQ,WAAZ,eAAoDpsB,cAAe,GAEjGolB,EAAiCpJ,YAAYoQ,IAC7C/G,EAAgCrJ,YAAYoQ,IAGlD,EAAoC+L,oBAAkB,GAAtD,mBAAOypB,EAAP,KAAmBC,EAAnB,KAEMC,EAAgB,SAAC9xC,EAAgBzP,GAE/B,IAAMwhD,EAAuB18B,EAAWhf,MAAK,SAAA27C,GAAS,OAAIA,EAAUxhD,KAAOwP,EAAMxP,MAC3EyhD,EAAwB78B,EAAY/e,MAAK,SAAA67C,GAAU,OAAIA,EAAW1hD,KAAOwP,EAAMxP,MAErF,OACI,yBAAKyD,IAAK1D,EACLkb,UAAW,8CAA0D,IAAVlb,EAAc,kBAAoB,KAE9F,yBAAKkb,UAAU,8CACX,+BAAQzL,EAAMsR,QAGlB,yBAAK7F,UAAU,4CACX,yBAAKA,UAAU,qBACX,0BAAMA,UAAWzL,EAAM8V,QAAU,kBAAoB,mBAC/CtF,GAAG,IACHC,GAAG,IACHC,GAAG,OACHC,GAAG,OAGZohC,GAAe,yBAAKtmC,UAAU,eAC9BwmC,GAAgB,yBAAKxmC,UAAU,gBAC9BwmC,IAAiBF,GAAe,yBAAKtmC,UAAU,uBAOrE,OACI,yBAAKA,UAAU,kDACX,yBAAKA,UAAU,4DACX,+BArCW,SAsCX,kBAAC,GAAD,CAAqBqc,KAAM8pB,EACNlmC,QAASmmC,KAGjCD,GAAc,yBAAKnmC,UAAU,qBACxBkmC,GAAa5hD,EAAeM,KAAI,SAAC2P,EAAOzP,GAAR,OAAkBuhD,EAAc9xC,EAAOzP,MACxEohD,GAAa3hD,EAAYK,KAAI,SAAC2P,EAAOzP,GAAR,OAAkBuhD,EAAc9xC,EAAOzP,UC1DxE4hD,GAAmD,SAAC/mC,GAC7D,IAAOkG,EAA4BlG,EAA5BkG,MAAO8gC,EAAqBhnC,EAArBgnC,SAAU1mC,EAAWN,EAAXM,QACxB,OACI,yBAAKD,UAAW,mBAAqB2mC,EAAW,aAAe,OAC1D1mC,QAASA,GAET4F,ICNA+gC,I,OAA6D,SAACjnC,GACvE,IAAOkG,EAA0BlG,EAA1BkG,MAAO8V,EAAmBhc,EAAnBgc,SAAUjW,EAAS/F,EAAT+F,MACxB,OACI,yBAAK1F,UAAU,YACV0F,MAAOA,GAER,yBAAK1F,UAAU,kBAAkB6F,GACjC,yBAAK7F,UAAU,QAAQ2b,MCOtBkrB,I,OAAmE,WACxE,MAWIC,KAVAC,EADJ,EACIA,cACAC,EAFJ,EAEIA,UACAC,EAHJ,EAGIA,YACAzkC,EAJJ,EAIIA,UACA0kC,EALJ,EAKIA,cACAC,EANJ,EAMIA,mBACAC,EAPJ,EAOIA,cACAlzC,EARJ,EAQIA,MACAd,EATJ,EASIA,SACAi0C,EAVJ,EAUIA,eAGJ,EAAkC3qB,oBAAkB,GAApD,mBAAOwpB,EAAP,KAAkBoB,EAAlB,KACAzqB,qBAAU,WACNyqB,GAAcn9C,EAAUC,kBAAkB8J,MAC3C,CAACA,IACJ,IAAMqzC,EAAYjjB,iBAAuB,MACzC,EAAsC5H,mBAAiB,GAAvD,mBAAO8qB,EAAP,KAAoBC,EAApB,KAGA5qB,qBAAU,WACN,IAAM8M,EAAiB,WACf4d,GAAaA,EAAUhjB,SACvBkjB,EAAeF,EAAUhjB,QAAQqC,eAOzC,OAHA+C,IACA9sB,OAAO+mB,iBAAiB,SAAU+F,GAE3B,WACH9sB,OAAOgnB,oBAAoB,SAAU8F,MAE1C,CAAC4d,IAEJ,IA2HMG,EAAkB,WACpB,SAAUt0C,IAAac,IAG3B,OACI,yBAAK8L,UAAU,iBACVwkB,IAAK+iB,IAEJG,KACF,wBAAI1nC,UAAW,0BAA2B,oDAGzC0nC,KAAqB,oCAClB,yBAAK1nC,UAAU,mBACX,yBAAKA,UAAU,oBACV9L,GAGG,kBAAC,GAAD,CAAkB2R,MAAM,OACNH,MAAO,CAACooB,gBAAiB,mCAEvC,kBAAC,GAAD,CAAajoB,MAAM,QACN8gC,SAAUT,EACVjmC,QAAS,kBAAMqnC,GAAa,MAEzC,kBAAC,GAAD,CAAazhC,MAAM,WACN8gC,UAAWT,EACXjmC,QAAS,kBAAMqnC,GAAa,OAKjD,kBAAC,GAAD,CAAWpB,UAAWA,MAM9B,yBAAKlmC,UAAU,0BACV0F,MAAO,CAACtC,OAAQokC,KAEftB,GAAa9yC,GA3DvB,kBAAC,mBAAD,CAAiBu0C,UAAU,EACVC,YAAa,GA1GX,SAArBC,EAAsBC,GACxB,IAAM9B,EAAkB,GAoBxB,OAlBI8B,EAAK9Y,UACLgX,EAAIpgD,KAAK,CACLmiD,SAAUD,EAAK9Y,SACfgZ,aAAc,SACdC,aAAc,MACdviC,MAAO,CACHwiC,YACIlB,EAAUl+C,MAAK,SAACoD,GAAD,OAAUA,IAAS47C,EAAK9Y,aAAagY,EAAUl+C,MAAK,SAACoD,GAAD,OAAUA,IAAS47C,EAAK/iD,MACrFyd,IACA,iCACVoC,YACIoiC,EAAUl+C,MAAK,SAACoD,GAAD,OAAUA,IAAS47C,EAAK9Y,aAAagY,EAAUl+C,MAAK,SAACoD,GAAD,OAAUA,IAAS47C,EAAK/iD,MACrF,EACA,KAMlB,yBAAKib,UAAU,gBACV0F,MAAO,CAACyiC,OAAoB,SAAZL,EAAK/iD,GAAgB,GAAK,UAC1CyD,IAAKs/C,EAAK/iD,IAEX,kBAAC,iBAAD,CAAeA,GAAI+iD,EAAK/iD,GACT4hB,UAAWq/B,GAEtB,yBACIhmC,UAAuB,SAAZ8nC,EAAK/iD,GAAgB,OAAS+iD,EAAKM,SAC9CrjD,GAAImiD,IAAkBY,EAAK/iD,GAAK,uBAAyB,IAE5C,SAAZ+iD,EAAK/iD,IAAiB+iD,EAAKM,WAAan+C,EAAUyM,IAAM,GAAKoxC,EAAKjiC,QAG1EiiC,EAAKM,WAAan+C,EAAUyM,KAAO,yBAAKsJ,UAAU,aAAa8nC,EAAKjiC,OACrE,yBACIH,MAAO,CACHwxB,QAAS,OACTlD,eAAgB,eAChBwF,WAAY,QACZr2B,MAAO,SAGV2kC,EAAKO,OAAOzjD,IAAIijD,KA+DpBA,CAAmBd,IAyDfb,GAAahyC,GAlDtB,kBAAC,mBAAD,CAAiByzC,UAAU,EACVC,YAAa,GAjEd,SAAlBU,EAAmBR,GACrB,IAAM9B,EAAkB,GAsBxB,OApBI8B,EAAK9Y,UACLgX,EAAIpgD,KAAK,CACLmiD,SAAUD,EAAK9Y,SACfgZ,aAAc,SACdC,aAAc,MACdviC,MAAO,CACHwiC,aACe,OAAXjB,QAAW,IAAXA,OAAA,EAAAA,EAAan+C,MAAK,SAACgL,GAAD,OAAUA,IAASg0C,EAAK9Y,cAC1CiY,EAAYn+C,MAAK,SAACgL,GAAD,OAAUA,IAASg0C,EAAK/iD,MACnCsiD,IACA,iCACVziC,aACe,OAAXqiC,QAAW,IAAXA,OAAA,EAAAA,EAAan+C,MAAK,SAACgL,GAAD,OAAUA,IAASg0C,EAAK9Y,cAC1CiY,EAAYn+C,MAAK,SAACgL,GAAD,OAAUA,IAASg0C,EAAK/iD,MACnC,EACA,KAMlB,yBAAKib,UAAU,gBACV0F,MAAO,CAACyiC,OAAoB,SAAZL,EAAK/iD,GAAgB,GAAK,UAC1CyD,IAAKs/C,EAAK/iD,IAEX,kBAAC,iBAAD,CAAeA,GAAI+iD,EAAK/iD,GACT4hB,UAAWq/B,GAEtB,yBAAKhmC,UAAW8nC,EAAKM,SAChBrjD,GAAIqiD,IAAkBU,EAAK/iD,GAAK,uBAAyB,IAEzD+iD,EAAKM,WAAa39C,EAAeiM,IAAM,GAAKoxC,EAAKjiC,QAGzDiiC,EAAKM,WAAa39C,EAAeiM,KAAO,yBAAKsJ,UAAU,aAAa8nC,EAAKjiC,OAC1E,yBACIH,MAAO,CACHwxB,QAAS,OACTlD,eAAgB,eAChBwF,WAAY,QACZr2B,MAAO,SAGV2kC,EAAKO,OAAOzjD,IAAI0jD,KAqBpBA,CAAgBnB,SAuF/BL,GAAwB,WACtB,IAAM1zC,EAA+BmN,YAAYoQ,IAC3C43B,EAAgChoC,YAAYoQ,IAC5C9F,EAAoBtK,YAAYoQ,IAChCzc,EAAyBqM,YAAYoQ,IACrC9C,EAA8BtN,YAAYoQ,IAC1Cu2B,EAAwB3mC,YAAYoQ,IACpCy2B,EAAwB7mC,YAAYoQ,IA0CpC63B,EAAgB,SAAhBA,EAAiBr8C,EAAY6iC,EAAkByZ,GACjD,IAAMC,EAAuB,CACzB3jD,GAAI,GACJ8gB,MAAO,GACPuiC,SAAUj8C,EAAKC,KACf4iC,SAAUA,EACVqZ,OAAQ,IAEZ,IAAKl+C,EAAUC,kBAAkBgJ,GAC7B,OAAQjH,EAAKC,MACT,KAAKnC,EAAUoC,KAEX,IAAMH,EACFkH,EAAUH,iBAAiBnK,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAOoH,EAAKpH,OAAO,KACrF,GAAImH,EAAM,CACN,IAAMy8C,EAAiB,SAAWz8C,EAAK8J,eAAejR,GACtD2jD,EAAU3jD,GAAKiqC,EAAW2Z,EAC1BD,EAAU7iC,MAAQ3Z,EAAK8J,eAAehQ,KACjCgpC,EAASze,SAASo4B,KACnBF,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAUL,OAAOziD,KAAK4iD,EAAct8C,EAAK8J,eAAe7J,KAAMu8C,EAAU3jD,GAAI0jD,KAGpF,MACJ,KAAKx+C,EAAUyM,IAEX,IAAM1B,EAA0B5B,EAAUtP,UAAUgF,MAAK,SAACkM,GAAD,OAAUA,EAAKjQ,KAAOoH,EAAKpH,OAAO,KAC3F,GAAIiQ,EAAM,CACN,IAAM2zC,EAAiB,QAAU3zC,EAAKjQ,GACtC2jD,EAAU3jD,GAAKiqC,EAAW2Z,EAC1BD,EAAU7iC,MAAQ7Q,EAAKhP,KAElBgpC,EAASze,SAASo4B,KACnBF,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAUL,OAAOziD,KAAK4iD,EAAcxzC,EAAKjP,OAAQ2iD,EAAU3jD,GAAI0jD,IAC/DC,EAAUL,OAAOziD,KAAK4iD,EAAcxzC,EAAKlP,SAAU4iD,EAAU3jD,GAAI0jD,KAErE,MAEJ,MACJ,KAAKx+C,EAAUyI,MACXg2C,EAAU3jD,GAAKiqC,EAAW,SAC1B,MACJ,KAAK/kC,EAAUiiB,IACXw8B,EAAU3jD,GAAKiqC,EAAW,OAC1B,MACJ,KAAK/kC,EAAUkiB,KACXu8B,EAAU3jD,GAAKiqC,EAAW,QAItC,OAAO0Z,GAgJX,MAAO,CACH3B,cAtEuB,SAACe,GACxB,IAAMW,EAAsB,GACtBC,EAAuB,CAAC3jD,GAAI,OAAQ8gB,MAAO,GAAIuiC,SAAUN,EAAK17C,KAAMi8C,OAAQ,IAClF,OAAQP,EAAK17C,MACT,KAAKnC,EAAUoC,KACXo8C,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAU7iC,MAASiiC,EAAKr/C,MAA0BuN,eAAehQ,KACjE0iD,EAAUL,OAAOziD,KACb4iD,EAAeV,EAAKr/C,MAA0BuN,eAAe7J,KAAMu8C,EAAU3jD,GAAI0jD,IAErF,MACJ,KAAKx+C,EAAUyM,IACX+xC,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAU7iC,MAASiiC,EAAKr/C,MAAqBzC,KAC7C0iD,EAAUL,OAAOziD,KAAK4iD,EAAeV,EAAKr/C,MAAqB1C,OAAQ2iD,EAAU3jD,GAAI0jD,IACrFC,EAAUL,OAAOziD,KAAK4iD,EAAeV,EAAKr/C,MAAqB3C,SAAU4iD,EAAU3jD,GAAI0jD,IAG/F,OAAOC,EAoDQE,CA3FE,WACjB,IAAMj9C,EAAiB,CAACk9C,QAAQ,EAAOz8C,KAAMnC,EAAUoC,KAAM5D,MAAO,IAAIgpC,IACxE,GAAIr+B,EAAU,CACV,IAAMnN,EApJE,SAACmN,GACb,IAAMnN,EAAa,CACfmG,KAAMnC,EAAUyI,MAChBjK,MAAO,CAAC2D,KAAMnC,EAAUyI,OACxBm2C,QAAQ,GAEZ,IAAK1+C,EAAUC,kBAAkBgJ,GAAW,CACxC,IAAM01C,EAAwC11C,EAAUH,iBAAiBnK,MACrE,SAACoD,GAAD,OAAUA,EAAK8J,eAAe/P,QAE5B8iD,EAAmC31C,EAAUtP,UAAUgF,MAAK,SAACkM,GAAD,OAAUA,EAAK/O,QAE7E6iD,IAAaC,IACb9iD,EAAKmG,KAAOnC,EAAUoC,KACtBpG,EAAKwC,MAAQqgD,GAEbC,IAAaD,IACb7iD,EAAKmG,KAAOnC,EAAUyM,IACtBzQ,EAAKwC,MAAQsgD,GAGrB,OAAO9iD,EA+HgBmlB,CAAQhY,GACtBnN,EAAKwC,MAA0B5E,UAC/B8H,EAASlD,MAA0BuN,eAAe7J,KAAO,CACtDC,KAAMnC,EAAUoC,KAChBtH,GAAKkB,EAAKwC,MAA0BuN,eAAejR,KAGtDkB,EAAKwC,MAAqB3C,WAC1B6F,EAASlD,MAA0BuN,eAAe7J,KAAO,CACtDC,KAAMnC,EAAUyM,IAChB3R,GAAKkB,EAAKwC,MAAqB1D,KAGvC4G,EAASk9C,QAAS,EAEtB,OAAOl9C,EAyE2Bq9C,IAClC7B,mBAlD4B,SAACW,GAC7B,IAAMW,EAAsB,GACtBC,EAA4B,CAAC3jD,GAAI,GAAI8gB,MAAO,GAAIuiC,SAAUN,EAAK17C,KAAMi8C,OAAQ,IASnF,OARAI,EAAU7iD,KAAK8iD,EAAU3jD,IACpB+iD,EAAKr/C,MAAuB0K,YAC7Bu1C,EAAU3jD,GAAM+iD,EAAKr/C,MAAuB0K,UAAUpO,GAAGmE,WACzDw/C,EAAU7iC,MAASiiC,EAAKr/C,MAAuB0K,UAAUnN,KACzD0iD,EAAUL,OAAOziD,KApGE,SAArBqjD,EAAsB98C,EAAiB6iC,EAAkByZ,GAC3D,IAAMC,EAA4B,CAC9B3jD,GAAI,GACJ8gB,MAAO,GACPuiC,SAAUj8C,EAAKC,KACf4iC,SAAUA,EACVqZ,OAAQ,IAEZ,IAAKl+C,EAAUC,kBAAkB8J,GAC7B,OAAQ/H,EAAKC,MACT,KAAK3B,EAAeoiB,KAEhB,IAAM/Y,EACFI,EAAO+G,MAAMnS,MAAK,SAACgL,GAAD,OAAUA,EAAKX,UAAUpO,KAAOoH,EAAKpH,OAAO,KAClE,GAAI+O,EAAM,CACN,IAAM60C,EAAiB,SAAW70C,EAAKX,UAAUpO,GACjD2jD,EAAU3jD,GAAKiqC,EAAW2Z,EAC1BD,EAAU7iC,MAAQ/R,EAAKX,UAAUnN,KAC5BgpC,EAASze,SAASo4B,KACnBF,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAUL,OAAOziD,KAAKqjD,EAAmBn1C,EAAKX,UAAUhH,KAAMu8C,EAAU3jD,GAAI0jD,KAGpF,MACJ,KAAKh+C,EAAeiM,IAEhB,IAAMnR,EAAmC2O,EAAOpQ,UAAUgF,MAAK,SAAC6D,GAAD,OAASA,EAAI5H,KAAOoH,EAAKpH,OAAO,KAC/F,GAAIQ,EAAU,CACV,IAAMojD,EAAiB,QAAUpjD,EAASR,GAC1C2jD,EAAU3jD,GAAKiqC,EAAW2Z,EAC1BD,EAAU7iC,MAAQtgB,EAASS,KAEtBgpC,EAASze,SAASo4B,KACnBF,EAAU7iD,KAAK8iD,EAAU3jD,IACzB2jD,EAAUL,OAAOziD,KAAKqjD,EAAmB1jD,EAASQ,OAAQ2iD,EAAU3jD,GAAI0jD,IACxEC,EAAUL,OAAOziD,KAAKqjD,EAAmB1jD,EAASO,SAAU4iD,EAAU3jD,GAAI0jD,KAE9E,MAEJ,MACJ,KAAKh+C,EAAeiI,MAChBg2C,EAAU3jD,GAAKiqC,EAAW,SAC1B,MACJ,KAAKvkC,EAAeyhB,IAChBw8B,EAAU3jD,GAAKiqC,EAAW,OAItC,OAAO0Z,EAqDCO,CAAoBnB,EAAKr/C,MAAuB0K,UAAUhH,KAAMu8C,EAAU3jD,GAAI0jD,KAG/EC,EAuCaQ,CArNH,SAACh1C,GAClB,IAAMjO,EAAkB,CACpBmG,KAAM3B,EAAeiI,MACrBjK,MAAO,CAAC2D,KAAM3B,EAAeiI,OAC7Bm2C,QAAQ,GAEZ,IAAK1+C,EAAUC,kBAAkB8J,GAAQ,CACrC,IAAM40C,EAAqC50C,EAAO+G,MAAMnS,MAAK,SAACgL,GAAD,OAAUA,EAAKX,UAAUlN,QAClF6iD,IACA7iD,EAAKmG,KAAO3B,EAAeoiB,KAC3B5mB,EAAKwC,MAAQqgD,GAGrB,OAAO7iD,EAwMqCkjD,CAAaj1C,IACzDgzC,gBACAF,UArCO78C,EAAUG,SAASugB,GAsC1Bo8B,YAAW,OAAEp5B,QAAF,IAAEA,OAAF,EAAEA,EAAWjB,QACxBpK,UAnCiB,WACjB,IAAI+lC,EAUA,MAAO,UATP,OAAQA,EAAan8C,MACjB,KAAKnC,EAAUyI,MACX,MAAO,qBACX,KAAKzI,EAAUiiB,IACX,MAAO,qBACX,KAAKjiB,EAAUkiB,KACX,MAAO,sBA4BnBk7B,eApBsB,WACtB,IAAIx5B,EAQA,MAAO,UAPP,OAAQA,EAAU9C,SAAS3e,MACvB,KAAK3B,EAAeiI,MAChB,MAAO,qBACX,KAAKjI,EAAeyhB,IAChB,MAAO,uBAenBk7B,gBACAh0C,WACAc,QACAk1C,WAAgB,OAALl1C,QAAK,IAALA,OAAA,EAAAA,EAAOA,MAAMlO,OAAQ,GAChCqjD,cAAsB,OAARj2C,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,WAAWhN,OAAQ,KC7e1CsjD,I,OAAiD,SAAC3pC,GAC3D,IAAOC,EAA8CD,EAA9CC,OAAQ2pC,EAAsC5pC,EAAtC4pC,SAAUC,EAA4B7pC,EAA5B6pC,YAAahC,EAAe7nC,EAAf6nC,YAEhCiC,EAAW,SAAChhD,EAA6B3D,GAC3C,OACI,wBAAIC,GAAID,EAAMoE,WACVV,IAAK1D,GAEJ2D,IAKPihD,EAAe,SAAC7kD,EAA0B2D,GAC5C,OAAO,kBAAC,GAAD,CAAiBwzB,SAAUn3B,EAAOqb,KACjBE,KAAMqX,GAAYoX,MAClB7uB,UAAW,kBACXC,QAASpb,EAAO8W,SAChBnT,IAAKA,EACLszB,SAAUj3B,EAAO8kD,WA4BvCC,EAAiB,SAACphD,EAAaqhD,EAA0B7pC,GAC3D,OACI,wBAAIxX,IAAKA,EACLwX,UAAWA,GAEV,IAAIrX,MAAMkhD,GAAkBjlD,KAAI,SAACklD,EAAGhlD,GACjC,OAAO,wBAAI0D,IAAK1D,SAMhC,OACI,+BACI,+BACA,4BAAK8a,EAAOhb,IAAI6kD,KAEhB,2BAAO/jC,MAAO,CAACtC,OAAQokC,IACtB+B,EAAS3kD,KA1CA,SAACuB,EAAyBrB,GACxC,OACI,wBAAI0D,IAAK1D,EACLkb,UAAW7Z,EAAK4jD,QAChB9pC,QAAS9Z,EAAK8Z,SAEb9Z,EAAKA,KAAKvB,IAAI6kD,GACdtjD,EAAKtC,QAAQ2I,OAAS,GACvB,wBAAIwT,UAAW,iBAAkB7Z,EAAKtC,QAAQe,KAAI,SAACC,EAAQC,GAAT,OAAmB4kD,EAAa7kD,EAAQC,WAmC7F0kD,GACG,4BACI,4BAAKE,EAAa,CAACxpC,KAAMtC,GAAWK,KAAMtC,SAAU6tC,GAAc,KAhCxD,WAAO,IAAD,EACxBQ,EAAaT,EAAS/8C,OAC1Bg9C,GAAeQ,IAGf,IAFA,IAAMC,GAAkB,UAAAV,EAAS,UAAT,eAAapjD,KAAKqG,SAAU,EAC9C09C,EAAY,GACTC,EAAIH,EAAYG,GAAK,GAAIA,IAC9BD,EAAUtkD,KAAKgkD,EAAeO,EAAEjhD,WAAY+gD,EAAiB,YAEjE,OAAOC,EA2BFE,OCrEAC,GAA6C,SAAC1qC,GACvD,IACI2qC,EAOA3qC,EAPA2qC,UACAC,EAMA5qC,EANA4qC,aACAC,EAKA7qC,EALA6qC,iBACAC,EAIA9qC,EAJA8qC,oBACAC,EAGA/qC,EAHA+qC,kBACAC,EAEAhrC,EAFAgrC,sBACAC,EACAjrC,EADAirC,aAGE/5B,EAAatQ,YAAYqY,IA6BzBiyB,EAAuC,CACzC,CACIhlC,MAAO,aACPra,UAAWg/C,GAAoBC,EAC/BK,KAAM,CACF,CACIjlC,MAAO,QACPklC,WAAYC,GAAU92C,MACtB1I,UAAWg/C,GAEf,CACI3kC,MAAO,WACPklC,WAAYC,GAAU53C,SACtB5H,UAAWi/C,GAEf,CACI5kC,MAAO,gBACPklC,WAAYC,GAAUC,YACtBz/C,UAAWo/C,KAIvB,CACI/kC,MAAO,cACPra,UAAWk/C,EACXI,KAAM,CACF,CACIjlC,MAAO,WACPklC,WAAYC,GAAUnkC,gBAE1B,CACIhB,MAAO,QACPklC,WAAYC,GAAUpkC,cA3DK,WACvC,IAAMkkC,EAAwB,CAC1B,CACIjlC,MAAO,WACPklC,WAAYC,GAAUzlD,UAE1B,CACIsgB,MAAO,QACPklC,WAAYC,GAAU9+C,OAY9B,OARI2kB,IAASC,GAAK+E,oBAAsBhF,IAASC,GAAKoH,2BAClD4yB,EAAKllD,KAAK,CAACigB,MAAO,UAAWklC,WAAYC,GAAUnmD,SAGnDgsB,IAASC,GAAKyF,wBAA0B1F,IAASC,GAAK0F,kCACtDs0B,EAAKllD,KAAK,CAACigB,MAAO,YAAaklC,WAAYC,GAAUx/C,YAGlD,CACHqa,MAAO,iBACPra,UAAWm/C,EACXG,KAAMA,GAwCVI,GACA,CACIrlC,MAAO,SACPilC,KAAM,CACF,CACIjlC,MAAO,QACPklC,WAAYC,GAAUG,YAE1B,CACItlC,MAAO,WACPklC,WAAYC,GAAUI,gBAE1B,CACIvlC,MAAO,aACPklC,WAAYC,GAAUn4C,cAoCtC,OACI,yBAAKmN,UAAU,OACVxX,IAVU,WACf,IAAIA,EAAMgiD,EAAmB,QAAU,GAIvC,OAHAhiD,GAAOmiD,EAAwB,WAAa,GAC5CniD,GAAOkiD,EAAoB,aAAe,GAC1CliD,GAAOiiD,EAAsB,MAAQ,GAM3BY,IAELR,EAAejmD,KAlCH,SAAC0mD,EAA8BxmD,GAChD,YAC4BuC,IAAvBikD,EAAS9/C,WAA2B8/C,EAAS9/C,YAC1C,kBAAC,GAAD,CAAkBqa,MAAOylC,EAASzlC,MAChBrd,IAAK1D,GAElBwmD,EAASR,KAAKlmD,KACX,SAAC02B,EAAUx2B,GAAX,YACuBuC,IAAlBi0B,EAAI9vB,WAA2B8vB,EAAI9vB,YAChC,kBAAC,GAAD,CACIqa,MAAOyV,EAAIzV,MACX8gC,SAAU2D,IAAchvB,EAAIyvB,WAC5B9qC,QAAS,kBAAMsqC,EAAajvB,EAAIyvB,aAChCviD,IAAK1D,aC7GnC8a,GAAS,CAAC,OAAQ,OAAQ,SAAU,UAEpC2rC,GAA8B,SAChCvmD,EACAy+C,EACA+H,EACAC,GAIA,MAAO,CACHtlD,KAAM,CAACnB,EAAYy+C,EAAU+H,EAAaC,GAC1C1B,QAJY,UAKZlmD,QAAS,KAMXu+B,GAAc,SAACv9B,EAAkBd,GACnC,IAGgE,EAH5DoC,EAA4BpC,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,UACzEw+C,EAAmBt9C,EAAOA,EAAKA,KAAKH,KAAO,4BAElCqB,IAATlB,GAAsBtB,EAAOG,aAAewc,GAAWyH,MACvDw6B,EACIA,EAAW,MAAX,UAAkBt9C,EAAKA,KAAKI,UAAUuC,MAAK,SAACtC,GAAD,OAAcA,EAASzB,KAAOF,EAAOK,qBAAhF,aAAkB,EAA2Ec,OAC7F,4BAGR,OAAOy9C,GCpCL7jC,GAAS,CAAC,QAAS,OAAQ,WAAY,YAAa,YAEpD8rC,GAAuB,SACzB53C,EACAhP,EACAmb,EACA0rC,GACqB,IAAD,IACd3lD,EAAe8N,EAAK9N,MAAQ,uBAC5BqjD,GAAuB,UAAAv1C,EAAKV,SAASwX,qBAAd,eAA6B5X,WAAWhN,OAAQ,2BACvE4lD,GAAwB,UAAA93C,EAAKjB,UAAUA,iBAAf,eAA0B7M,OAAQ,6BAC5D+jD,EAAU,UAId,OAHIjlD,IAAU6mD,IACV5B,EAAU,iBAEP,CACHA,QAAS,aAAeA,EACxB5jD,KAAM,EAAErB,EAAQ,GAAGoE,WAAYlD,EAAMqjD,EAAcuC,EAAe93C,EAAKV,SAAS2X,SAAS3e,KAAKlD,YAC9FrF,QAAS,GACToc,YCHFL,GAAS,CAAC,QAAS,OAAQ,OAAQ,SAEnCisC,GAA+B,SACjC1f,EACAjgC,EACApH,EACAq2B,EACA2wB,EACAC,EACAhhC,GAEA,IAAIg/B,EAAkB+B,GAAsBA,GAAsBhnD,EAAQ,uBAAyB,UAEjF,aAAdoH,EAAKE,MAAuB2e,IAC5Bg/B,EAAU,kBAAoBh/B,EAAS3e,MAGvCtH,IAAUq2B,IACQ,aAAdjvB,EAAKE,KACL29C,GAAoB,yBAEpBA,EAAU,iBAIlB,IAAMiC,EAAW9/C,EAAKgQ,OAAO1P,OAAS,EAEtC,MAAO,CACH3I,QAAS,GACTsC,KAAM,CACFrB,EAAMoE,WACN+iD,GAAoB//C,EAAMigC,EAAkBphB,GAC5C7e,EAAKE,KACL4/C,EAAW,kBAAC,KAAD,CAAiB9rC,KAAMtC,GAAWsB,UAAc,IAE/D6qC,QAAS,aAAeA,EACxB9pC,QAAS8rC,IAIjB,SAASE,GAAoB//C,EAAsBs2B,EAAoCzX,GAA4B,IAAD,IAC9G,OAAQ7e,EAAKE,MACT,IAAK,OACD,OACkB,OAAdo2B,QAAc,IAAdA,GAAA,UAAAA,EAAgBvvB,iBAAiBnK,MAAK,SAACmtB,GAAD,OAAUA,EAAKjgB,eAAejR,KAAOmH,EAAKyf,yBAAhF,eACM3V,eAAehQ,OAAQ,kBAErC,IAAK,WACD,OACkB,OAAdw8B,QAAc,IAAdA,GAAA,UAAAA,EAAgB1+B,UAAUgF,MAAK,SAACmtB,GAAD,OAAUA,EAAKlxB,KAAOmH,EAAKyf,yBAA1D,eAA2E3lB,OAAQ,sBAE3F,IAAK,OACD,MAAO,eACX,IAAK,WACD,OAAe,OAAR+kB,QAAQ,IAARA,OAAA,EAAAA,EAAU3e,OAAV,2BACX,QACI,MAAM,8BAAN,OAAqCF,EAAKE,KAA1C,wBCvFL,IAmBDwT,GAAS,CAAC,OAAQ,WAElBssC,GAAyB,SAC3Bh4C,EACAi4C,EACAC,GAOA,MAAO,CACHrC,QALY,UAMZ5jD,KAAM,CAPG+N,EAAMlO,MAQfnC,QAAS,CANM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,GAClC,CAACjsC,KAAMtC,GAAWG,YAAapC,SAAUywC,MChC3D,SAASC,GACZlgD,EACAmgD,EACAC,GACD,IAAD,IACMC,EAAmB,sBACvB,OAAQrgD,EAAKC,MACT,KAAK3B,EAAeiI,MACpB,KAAKjI,EAAeyhB,IAChBsgC,EAAWrgD,EAAKC,KAChB,MACJ,KAAK3B,EAAeoiB,KAChB2/B,GACI,UAAAF,EAAmBxjD,MAAK,SAACgL,GAAD,OAAUA,EAAKX,UAAUpO,KAAQoH,EAA2BpH,aAApF,eAAyFoO,UACpFnN,OAAQwmD,EACjB,MACJ,KAAK/hD,EAAeiM,IAChB81C,GACI,UAAAD,EAAuBzjD,MAAK,SAAC6D,GAAD,OAASA,EAAI5H,KAAQoH,EAA2BpH,aAA5E,eAAiFiB,OAAQwmD,EAGrG,OAAOA,EChBJ,IAoBD5sC,GAAS,CAAC,OAAQ,UAAW,YAAa,WAE1C6sC,GAA4B,SAC9BlnD,EACA+mD,EACAC,EACAJ,GASA,MAAO,CACHpC,QALY,UAMZ5jD,KAAM,CATWZ,EAASS,KACPqmD,GAAiB9mD,EAASQ,OAAQumD,EAAoBC,GACpDF,GAAiB9mD,EAASO,SAAUwmD,EAAoBC,IAQ7E1oD,QAAS,CALM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,MCjBrDvsC,GAAS,CAAC,OAAQ,WAAY,YAAa,OAAQ,UAAW,SAE9D8sC,GAAmB,SACrB54C,EACAw4C,EACAC,EACAJ,GAUA,MAAO,CACHpC,QAJY,UAKZ5jD,KAAM,CAVW2N,EAAKX,UAAUnN,KACP8N,EAAKV,SAASJ,WAAWhN,KACxB8N,EAAKjB,UAAUA,UAAU7M,KAC9BqmD,GAAiBv4C,EAAKX,UAAUhH,KAAMmgD,EAAoBC,GAC9Dz4C,EAAKX,UAAUlN,KAAO,QAAU,IAOjDpC,QAAS,CALM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,MCfrDvsC,GAAS,CAAC,OAAQ,WAElB+sC,GAA6B,SAC/B95C,EACAs5C,EACAC,GAOA,MAAO,CACHrC,QALY,UAMZ5jD,KAAM,CAPW0M,EAAU7M,MAQ3BnC,QAAS,CANM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,GAClC,CAACjsC,KAAMtC,GAAWG,YAAapC,SAAUywC,MCN5DxsC,GAAS,CAAC,OAAQ,WAElBgtC,GAA4B,SAC9Bx5C,EACA+4C,EACAC,GAOA,MAAO,CACHjmD,KAAM,CANGiN,EAASpN,MAOlB+jD,QANY,UAOZlmD,QAAS,CANwB,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,GAClC,CAACjsC,KAAMtC,GAAWG,YAAapC,SAAUywC,MC2B9ExsC,GAAS,CAAC,QAAS,OAAQ,WAAY,WAEvCitC,GAAwB,SAC1BC,EACArJ,EACA3U,EACAqd,EACAY,GAKA,MAAO,CACHhD,QAJYgD,EAAS,gBAAkB,UAKvC5mD,KAAM,CAAC2mD,EAAWrJ,EAAU3U,GAC5BjrC,QAAS,CALM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,MClDrDvsC,GAAS,CAAC,OAAQ,UAAW,YAAa,UAAW,SAErDotC,GAAuB,SACzBznD,EACA4mC,EACAggB,GAiBA,MAAO,CACHpC,QAJY,UAKZ5jD,KAAM,CAjBGZ,EAASS,KACKinD,GACvB1nD,EAASQ,QACO,OAAhBomC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl5B,mBAAoB,IACtB,OAAhBk5B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBroC,YAAa,IAENmpD,GACzB1nD,EAASO,UACO,OAAhBqmC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl5B,mBAAoB,IACtB,OAAhBk5B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBroC,YAAa,IAEdyB,EAASU,KAAO,QAAU,IAO3CpC,QAAS,CALM,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,MAS3D,SAASc,GAAY9gD,EAAYvI,EAA0BE,GAA0B,IAAD,IAC5E0oD,EAAmB,sBACvB,OAAQrgD,EAAKC,MACT,KAAKnC,EAAUyI,MACf,KAAKzI,EAAUiiB,IACf,KAAKjiB,EAAUkiB,KACXqgC,EAAWrgD,EAAKC,KAChB,MACJ,KAAKnC,EAAUoC,KACXmgD,GACI,UAAA5oD,EAAMkF,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAQoH,EAAsBpH,aAAvE,eAA4EiR,eAAehQ,OAC3FwmD,EACJ,MACJ,KAAKviD,EAAUyM,IACX81C,GAAW,UAAA1oD,EAAUgF,MAAK,SAAC6D,GAAD,OAASA,EAAI5H,KAAQoH,EAAsBpH,aAA1D,eAA+DiB,OAAQwmD,EAG1F,OAAOA,EC9DJ,IAiBD5sC,GAAS,CAAC,OAAQ,OAAQ,QAAS,WAEnCstC,GAAwB,SAC1BhhD,EACAigC,EACAggB,GAYA,MAAO,CACHhmD,KAAM,CAXG+F,EAAK8J,eAAehQ,KAiBrC,SAAqBmG,EAAYvI,EAA0BE,GAA0B,IAAD,IAC5E0oD,EAAmB,sBACvB,OAAQrgD,EAAKC,MACT,KAAKnC,EAAUyI,MACf,KAAKzI,EAAUiiB,IACf,KAAKjiB,EAAUkiB,KACXqgC,EAAWrgD,EAAKC,KAChB,MACJ,KAAKnC,EAAUoC,KACXmgD,GACI,UAAA5oD,EAAMkF,MAAK,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,KAAQoH,EAAsBpH,aAAvE,eAA4EiR,eAAehQ,OAC3FwmD,EACJ,MACJ,KAAKviD,EAAUyM,IACX81C,GAAW,UAAA1oD,EAAUgF,MAAK,SAAC6D,GAAD,OAASA,EAAI5H,KAAQoH,EAAsBpH,aAA1D,eAA+DiB,OAAQwmD,EAG1F,OAAOA,EAjCkBS,CACrB/gD,EAAK8J,eAAe7J,MACJ,OAAhBggC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBl5B,mBAAoB,IACtB,OAAhBk5B,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBroC,YAAa,IAEboI,EAAK8J,eAAe/P,KAAO,QAAU,IAMvD8jD,QAJY,UAKZlmD,QAAS,CAAC,CAACqc,KAAMtC,GAAWC,OAAQlC,SAAUwwC,MChC/C,ICuBKnB,GDsENprC,GAAS,CAAC,QAAS,OAAQ,OAAQ,SAAU,SAAU,WAEvDutC,GAA0B,SAC5BC,EACApoD,EACAy+C,EACA+H,EACAC,EACAU,EACAkB,EACAC,EACAC,EACAR,GAKA,MAAO,CACH5mD,KAAM,CAJkBinD,EAAWlkD,WAIflE,EAAYy+C,EAAU+H,EAAaC,GACvD1B,QAJYgD,EAAS,gBAAkB,UAKvClpD,QAAS,CACL,CAACqc,KAAMtC,GAAWa,QAAS9C,SAAU2xC,EAAwB3D,QAAwB,IAAfyD,GACtE,CAACltC,KAAMtC,GAAWW,UAAW5C,SAAU0xC,EAAwB1D,QAASyD,GAAcG,EAAc,GACpG,CAACrtC,KAAMtC,GAAWC,OAAQlC,SAAUwwC,O,SC7FpCnB,K,sBAAAA,E,gBAAAA,E,0BAAAA,E,YAAAA,E,oBAAAA,E,oBAAAA,E,cAAAA,E,wBAAAA,E,gCAAAA,E,gCAAAA,E,yBAAAA,E,uBAAAA,Q,KAeL,IAAMwC,GAAqE,WAC9E,MAWIC,KAVA/C,EADJ,EACIA,kBACAC,EAFJ,EAEIA,sBACAH,EAHJ,EAGIA,iBACAC,EAJJ,EAIIA,oBACAG,EALJ,EAKIA,aACAN,EANJ,EAMIA,UACAC,EAPJ,EAOIA,aACAmD,EARJ,EAQIA,gBACAlG,EATJ,EASIA,YACAD,EAVJ,EAUIA,UAGJ,OACI,yBAAKvnC,UAAW,6BACXwkB,IAAK+iB,GAEN,yBAAKvnC,UAAU,eACX,kBAAC,GAAD,CACI0qC,kBAAmBA,EACnBC,sBAAuBA,EACvBH,iBAAkBA,EAClBC,oBAAqBA,EACrBH,UAAWA,EACXC,aAAcA,EACdK,aAAcA,IAElB,kBAAC,GAAD,iBAAgB8C,EAAhB,CAAiClG,YAAaA,QAMxDiG,GAA4B,WAC9B,IAAM58B,EAAatQ,YAAYqY,IACzBuT,EAAuC5rB,YAAYoQ,IACnDg9B,EAAuCptC,YAAYqY,IACnDouB,EAA8BzmC,YAAYoQ,IAC1C9C,EAA8BtN,YAAYoQ,IAC1ChtB,EAA0B4c,YAAY8H,IACtCnkB,EAA4Bqc,YAAY8H,IACxC6F,EAAgC3N,YAAYoQ,IAC5Ci9B,EAAyBrtC,YAAY8H,IACrCikC,EAAqC/rC,YAAYoQ,IACjD47B,EAA4ChsC,YAAYoQ,IACxDk9B,EAAwCttC,YAAYqY,IACpDk1B,EAA4CvtC,YAAYqY,IACxDm1B,EAA8CxtC,YAAYqY,IAC1Do1B,EAA6BztC,YAAYoQ,IAE/C,EAAkC+L,mBAAoBsuB,GAAU53C,UAAhE,mBAAOk3C,EAAP,KAAkBC,EAAlB,KAEA1tB,qBAAU,WACN,IAAIoxB,OAAsC5mD,EAC1C,OAAQwpB,GACJ,KAAKC,GAAKC,KAEFk9B,EADA//B,EACe88B,GAAU92C,MAEV82C,GAAU53C,SAE7B,MACJ,KAAK0d,GAAK4J,WACNuzB,EAAejD,GAAUG,WACzB,MACJ,KAAKr6B,GAAK2D,oBACV,KAAK3D,GAAK4D,8BACNu5B,EAAejD,GAAUnkC,eACzB,MACJ,KAAKiK,GAAKuG,cACN42B,EAAejD,GAAU9+C,KACzB,MACJ,KAAK4kB,GAAKyF,uBACV,KAAKzF,GAAK0F,iCACNy3B,EAAejD,GAAUx/C,UACzB,MACJ,KAAKslB,GAAK+E,mBAGV,KAAK/E,GAAKoH,0BACN+1B,EAAejD,GAAUnmD,OAG7BopD,GACA1D,EAAa0D,KAElB,CAACp9B,EAAM3C,IAEV,IAAMggC,ENtI8B,SAAChqD,GACrC,IACIqlD,EADE3sC,EAAW4D,cAUjB,OARA+oC,EAAWrlD,EAAWU,KAAI,SAACiO,GAMvB,OAAO85C,GAA2B95C,GALd,kBAAM+J,EAASwc,GAAYb,QAAQ2B,cAAcrnB,EAAU9N,QACzD,WAClB6X,EAASiV,GAAqBI,wBAAwBpf,EAAU9N,KAChE6X,EAASwc,GAAYb,QAAQ6C,cAI9B,CACHxb,UACA2pC,YMyHkB4E,CAAyBjqD,GACzCkqD,ELvImC,SAACzqD,GAC1C,IAAMiZ,EAAW4D,cAEb+oC,EAAgC,GAYpC,OAXI5lD,IACA4lD,EAAW5lD,EAAUiB,KAAI,SAACwO,GAOtB,OAAOw5C,GAA0Bx5C,GAFd,kBAAMwJ,EAASwc,GAAYb,QAAQyB,aAAa5mB,EAASrO,QAJvD,WACjB6X,EAASiV,GAAqBE,uBAAuB3e,EAASrO,KAC9D6X,EAASwc,GAAYb,QAAQ6C,eAOlC,CACHxb,UACA2pC,YKsHsB8E,CAA8B1qD,GAClD2qD,EHtI0C,SAACniB,GACjD,IAAMvvB,EAAW4D,cAEb+oC,EAAgC,GAOpC,OANyB,OAArBpd,IACAod,EAAWpd,EAAiBroC,UAAUc,KAAI,SAAC+H,GAEvC,OAAOqgD,GAAqBrgD,EAAKw/B,GADb,kBAAMvvB,EAASwc,GAAYb,QAAQ6B,aAAaztB,WAIrE,CACHiT,UACA2pC,YG0H8BgF,CAAqCpiB,GACjEqiB,EJrI2C,SACjDjpD,EACAiG,GAEA,IAAMoR,EAAW4D,cAEXghC,EAAsCjhC,YAAYqY,IAEpD61B,EAAoClpD,EAElClC,EAAqBkd,YAAY8H,IACjCtkB,EAAmBwc,YAAY8H,IAEjCkhC,EAAgC,GAmCpC,OAjCkB,OAAd/9C,IACAijD,EAAiBv4B,GAAaptB,KAAK0C,EAAU3E,aAG1B,OAAnB4nD,IACAlF,EAAWkF,EAAe9nD,WAAW/B,KAAI,SAAC4G,GAAe,IAAD,EASvC,EARPshD,GACF,UAAAzpD,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOyG,EAAU3F,kBAApD,eAA8DiH,MAAM9G,OAAQ,uBAE1E6L,EAA+B9N,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOyG,EAAUvG,UAEjFw+C,EAAmB,sBACnB3U,EAAuB,sBAEvBj9B,IACA4xC,GAAkB,OAAP5xC,QAAO,IAAPA,OAAA,EAAAA,EAAS1L,KAAKH,OAAQ,sBACjC8oC,GACW,OAAPj9B,QAAO,IAAPA,GAAA,UAAAA,EAAS1L,KAAKI,UAAUuC,MAAK,SAACtC,GAAD,OAAcA,EAASzB,KAAOyG,EAAUtG,qBAArE,eAAkFc,OAClF,2BAKR,OAAO6mD,GACHC,EACArJ,EACA3U,GALgB,kBAAMlyB,EAASwc,GAAYb,QAAQ8B,cAAco0B,EAAiBjjD,MAOlFA,EAAUzG,MAAV,OAAiBy8C,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAiBz8C,SAKvC,CACH6a,UACA2pC,YImF+BmF,CAC/BZ,EACAC,GAEEY,EF3IyB,SAC/BxiB,GAEA,IAAMvvB,EAAW4D,cACbouC,EAA4B,GAOhC,OANyB,OAArBziB,IACAyiB,EAAOziB,EAAiBl5B,iBAAiBrO,KAAI,SAACsH,GAE1C,OAAOghD,GAAsBhhD,EAAMigC,GADd,kBAAMvvB,EAASwc,GAAYb,QAAQ4B,SAASjuB,WAIlE,CACH0T,UACA2pC,SAAUqF,GE8HgBC,CAAoB1iB,GAsB5C2iB,ED5J+B,SACrCnB,GAEA,IAAM5pD,EAAmBwc,YAAY8H,IAC/BhlB,EAAqBkd,YAAY8H,IACjCyQ,EAAgCvY,YAAYqY,IAC5C/H,EAAatQ,YAAYqY,IACzBhc,EAAW4D,cAEbouC,EAA4B,GAE1BtS,EAAuB,SAACC,EAAuBrwC,EAAuBswC,GACxE,IAAMC,EAAmBD,EAAYD,EAAgB,EAAIA,EAAgB,EACnEG,EAA4BvyC,EAAUG,SAAS4B,GAE/CywC,EAAoBD,EAAS74C,QAAQ04C,GAC3CI,EAAQ73C,MAAQ23C,EAChB,IAAMG,EAAoBF,EAAS74C,QAAQ44C,GAC3CG,EAAQ93C,MAAQy3C,EAChBG,EAAS74C,QAAQ04C,GAAiBK,EAClCF,EAAS74C,QAAQ44C,GAAYE,EAG7B//B,EAASmZ,GAASznB,KAAKouC,IAGvB9/B,EAASiV,GAAqBE,uBAAuB2qB,EAAS1mC,eAAe9P,aAGzE2qB,IAASC,GAAK+E,oBACdjZ,EAASmZ,GAASnB,OAAO8nB,KAyDjC,OArDqB,OAAjBiR,IACAiB,EAAOjB,EAAa9pD,QAAQe,KAAI,SAACC,EAAQC,GAAW,IAAD,IAuBD,EANxCqB,EAA4BpC,EAAM+E,MAAK,SAAC3C,GAAD,OAAUA,EAAKA,KAAKpB,KAAOF,EAAOI,UAE3Ew+C,EAAmB,2BAEnBt9C,IACAs9C,EAAWt9C,EAAKA,KAAKH,KACjBnB,EAAOG,aAAewc,GAAWyH,MACjCw6B,EACIA,EACA,MADA,UAEAt9C,EAAKA,KAAKI,UAAUuC,MAAK,SAACtC,GAAD,OAAcA,EAASzB,KAAOF,EAAOK,qBAF9D,aAEA,EAA2Ec,OAC3E,iCAIZ,IAAMwlD,GACF,UAAAnoD,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOF,EAAOM,2BAAjD,eAAoE2H,MAAM9G,OAAQ,GAEhFylD,GACF,UAAApoD,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOF,EAAOO,yBAAjD,eAAkE0H,MAAM9G,OAAQ,GAEpF,OAAOmnD,GACHroD,EACAD,EAAOG,WACPy+C,EACA+H,EACAC,GA1CiB,WACjB7uC,EAASwc,GAAYb,QAAQiC,WAAW31B,OAGb,WACvBC,EAAQ6oD,EAAa9pD,QAAQ2I,OAAS,GACtC8vC,EAAqBx3C,EAAO6oD,GAAc,MAInB,WACvB7oD,EAAQ,GACRw3C,EAAqBx3C,EAAO6oD,GAAc,KAkC9CA,EAAa9pD,QAAQ2I,OACrB3H,EAAOE,MAAP,OAAc+zB,QAAd,IAAcA,OAAd,EAAcA,EAAc/zB,SAIjC,CACH6a,UACA2pC,SAAUqF,GCmEcG,CApBZ,WACZ,IAAIC,EAAqC,KAIzC,GAAIn+B,IAASC,GAAKoH,2BACd,GAAI21B,EAAsB,CACtB,IAAM3hD,EAAiC,OAAGigC,QAAH,IAAGA,OAAH,EAAGA,EAAkBl5B,iBAAiBnK,MACzE,SAACoD,GAAD,OAAUA,EAAK8J,eAAejR,MAApB,OAA2B8oD,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAsBxoD,mBAE3D6G,IACA8iD,EAAa9iD,SAIrB8iD,EAAarB,EAEjB,OAAOqB,EAG2CC,IAEhDC,EVrKgC,SAACtB,GACvC,IAAMhxC,EAAW4D,cACb+oC,EAAgC,GAWpC,OAVIqE,IACArE,EAAWqE,EAAYhpD,KAAI,SAACsP,GAMxB,OAAOg4C,GAAuBh4C,GALV,kBAAM0I,EAASwc,GAAYb,QAAQkC,UAAUvmB,OAC3C,WAClB0I,EAASiV,GAAqBiB,gBAAgB5e,IAC9C0I,EAASwc,GAAYb,QAAQ6C,eAKlC,CACHmuB,WACA3pC,WUsJmBuvC,CAA2BvB,GAC5CwB,ERpKuC,SAC7CvhC,EACAwhC,EACA9C,GAEA,IAAM3vC,EAAW4D,cAEb+oC,EAAgC,GAOpC,OANkB,OAAd17B,IACA07B,EAAWgD,EAAuB3nD,KAAI,SAACW,GAEnC,OAAOknD,GAA0BlnD,EAAU8pD,EAAoB9C,GAD3C,kBAAM3vC,EAASwc,GAAYb,QAAQuC,kBAAkBv1B,WAI1E,CACHqa,UACA2pC,YQoJ2B+F,CAC3BzhC,EACAy+B,EACAC,GAEEgD,EP1KmC,SACzCjD,EACAC,GAEA,IAEIhD,EAFE3sC,EAAW4D,cAOjB,OAJA+oC,EAAW+C,EAAmB1nD,KAAI,SAACkP,GAE/B,OAAO44C,GAAiB54C,EAAMw4C,EAAoBC,GAD9B,kBAAM3vC,EAASwc,GAAYb,QAAQsC,cAAc/mB,EAAKX,kBAGvE,CACHyM,UACA2pC,YO6JuBiG,CAA8BlD,EAAoBC,GACvEkD,EXzKiC,SAACzI,EAA6B7a,GACrE,IAAMvvB,EAAW4D,cAEX+nC,EAAgChoC,YAAYoQ,IAC5Cm7B,EAAoCvrC,YAAYoQ,IAEhDwK,EAA2B5a,YAAYoQ,IAEvC44B,EAAgCvC,EAAUpiD,KAAI,SAACsH,EAAMpH,GAGvD,OAAO+mD,GACH1f,EACAjgC,EACApH,EACAq2B,EACA2wB,GAPY,kBAAMlvC,EAASiV,GAAqB7C,oBAAoBlqB,MASpEyjD,MAIR,MAAO,CACH3oC,UACA2pC,YWiJqBmG,CAA4B1I,EAAW7a,GAC1DwjB,EZ/K6B,SAAC9hC,GACpC,IAAMjR,EAAW4D,cACXmrC,EAA4BprC,YAAYoQ,IAE1C44B,EAAgC,GAOpC,OANkB,OAAd17B,IACA07B,EAAW17B,EAAUlB,UAAU/nB,KAAI,SAACkP,EAAMhP,GAEtC,OAAO4mD,GAAqB53C,EAAMhP,GADf,kBAAM8X,EAASiV,GAAqBtD,oBAAoBzpB,MACtB6mD,OAGtD,CACH/rC,UACA2pC,YYkKiBqG,CAAwB/hC,GAEvCgiC,Eb9KqC,SAAC7hC,GAC5C,IAAMjqB,EAAmBwc,YAAY8H,IAC/BhlB,EAAqBkd,YAAY8H,IAEjCkhC,EAAgCv7B,EAAappB,KAAI,SAACC,GAAY,IAAD,IACzD4+C,EAAmBrhB,GAAYv9B,EAAQd,GACvCynD,GACF,UAAAnoD,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOF,EAAOM,2BAAjD,eAAoE2H,MAAM9G,OAAQ,GAEhFylD,GACF,UAAApoD,EAAOyF,MAAK,SAACgE,GAAD,OAAWA,EAAMA,MAAM/H,KAAOF,EAAOO,yBAAjD,eAAkE0H,MAAM9G,OAAQ,GAEpF,OAAOulD,GAA4B1mD,EAAOG,WAAYy+C,EAAU+H,EAAaC,MAGjF,MAAO,CACH7rC,UACA2pC,Ya6JoBuG,CAAgC9B,GAiClDzG,EAAYjjB,iBAAuB,MAEzC,EAAsC5H,mBAAiB,GAAvD,mBAAO8qB,EAAP,KAAoBuI,EAApB,KAiBA,OAfAlzB,qBAAU,WACN,IAAM8M,EAAiB,WACf4d,GAAaA,EAAUhjB,SACvBwrB,EAAexI,EAAUhjB,QAAQqC,aAAe,MAOxD,OAHA+C,IACA9sB,OAAO+mB,iBAAiB,SAAU+F,GAE3B,WACH9sB,OAAOgnB,oBAAoB,SAAU8F,MAE1C,CAAC4d,IAEG,CACHmD,mBAAoBvgD,EAAUC,kBAAkB8jB,GAChDy8B,uBAAwBxgD,EAAUC,kBAAkB+hC,GACpDqe,kBAAmBrgD,EAAUC,kBAAkByjB,GAC/C48B,oBAAqBzD,EAAUx6C,OAAS,EACxCo+C,aAAcoD,EAAexhD,OAAS,EACtC89C,YACAC,eACAmD,gBA1DuB,WACvB,OAAQpD,GACJ,KAAKU,GAAU92C,MACX,OAAOy7C,EACX,KAAK3E,GAAUnkC,eACX,OAAOuoC,EACX,KAAKpE,GAAUpkC,WACX,OAAO2oC,EACX,KAAKvE,GAAUnmD,OACX,OAAOiqD,EACX,KAAK9D,GAAU9+C,KACX,OAAOyiD,EACX,KAAK3D,GAAUzlD,SACX,OAAO+oD,EACX,KAAKtD,GAAUx/C,UACX,OAAOgjD,EACX,KAAKxD,GAAU53C,SACX,OAAOq8C,EACX,KAAKzE,GAAUI,eACX,OAAOgD,EACX,KAAKpD,GAAUG,WACX,OAAO+D,EACX,KAAKlE,GAAUn4C,UACX,OAAOq7C,EACX,KAAKlD,GAAUC,YACX,OAAO4E,EACX,QACI,MAAO,CAACjwC,OAAQ,GAAI2pC,SAAU,KA+BrByG,GACjBxI,cACAD,cCrOK3I,I,OAAe,CACxBqR,KAAM,IACNnjD,MAAO,aACP3G,KAAM,QACN04C,MAAO,SACPC,UAAW,eAIR,SAASoR,KACZ,IAAMtzC,EAAW4D,cAOjB,OANAqc,qBAAU,WACNjgB,EAAS4L,MACT5L,EAASF,GAAca,4BACvBX,EAASF,GAAcc,6BACxB,CAACZ,IAGA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuzC,OAAK,EACLC,KAAMxR,GAAaqR,MAEtB,yBAAKjwC,UAAU,sBACX,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAOmwC,OAAK,EACLC,KAAMxR,GAAa9xC,OAEtB,yBAAKkT,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAOmwC,OAAK,EACLC,KAAMxR,GAAaz4C,MAEtB,yBAAK6Z,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAOmwC,OAAK,EACLC,KAAMxR,GAAaC,OAEtB,yBAAK7+B,UAAU,iBACX,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAOmwC,OAAK,EACLC,KAAMxR,GAAaE,WAEtB,yBAAK9+B,UAAU,iBACX,kBAAC,GAAD,UC7DJqwC,QACa,cAA7BxzC,OAAOC,SAASwzC,UAEa,UAA7BzzC,OAAOC,SAASwzC,UAEhBzzC,OAAOC,SAASwzC,SAASC,MAAM,2DCTnC,ICNsCC,GDMhCC,GAAaC,cAAuB9+B,QELnC,WACH,OAAO,SAAC++B,GAAD,OAAe,SAAC9rD,GACnB,IAAKA,EAAO+rD,OAAQ,CAChB,IAAMC,EAAgBvoD,OAAOwoD,OAAO,CAACF,OAAQ,eAAgB/rD,GAC7DgD,aAAaO,QAPS,uBAOWJ,KAAKG,UAAU0oD,GANzB,KAMwD,IAAIE,MAGvFJ,EAAK9rD,QFAA2rD,GAAQQ,YAAe,CAChCrzC,QAAS,CACLR,OAAQO,GACR4K,WAAYF,GACZwI,KAAM+H,GACN/N,cAAe8F,IAEnB+/B,gBAGJ5zC,OAAO+mB,iBAAiB,WClBc4sB,GDkBmBA,GCjB9C,WACH,IAAMS,EAAmCppD,aAAaC,QCJ5B,wBDK1B,GAAImpD,EAAmB,CACnB,IAAMC,EAAuBD,EAAkBE,MCLxB,MDK2C,GAC5DN,EAAgB7oD,KAAKC,MAAMipD,UAC1BL,EAAcD,OACrBJ,GAAM5zC,SAASi0C,O,OEA3BO,IAASC,OACL,kBAAC,IAAD,CAAUb,MAAOA,IACb,kBAAC,GAAD,KACI,kBAAC,GAAD,QAGR7mD,SAAS2nD,eAAe,SJkHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACv2C,GACJ5W,QAAQ4W,MAAMA,EAAMF,e","file":"static/js/main.e8fea1af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    stateFkAndStateConditions: [],\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\nimport { StoreTO02 } from \"./to/StoreTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO02 {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n                stateFkAndStateConditions: [],\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO02 } from \"../davitVersion02/to/StoreTO02\";\n\nexport const DavitVersionMigrator03 = {\n    migrate(dataStoreObject: StoreTO02): StoreTO {\n        console.info(\"start migration to version 0.3\");\n        const actorZoom: number = dataStoreObject.actorZoom;\n        const dataZoom: number = dataStoreObject.dataZoom;\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: dataStoreObject.decisions as DecisionTO[],\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n            sequenceStates: [],\n            chainStates: [],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\nimport { DavitVersionMigrator03 } from \"./davitVersion03/DavitVersionMigrator03\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(\n                        DavitVersionMigrator01.migrate(dataStoreObject),\n                    )\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(dataStoreObject));\n                break;\n            case 0.2:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceStateConstraintCheck(sequenceStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingSequenceState: boolean = Array.from(dataStore.decisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === sequenceStateId));\n        if (decisionIsUsingSequenceState) {\n            throw new Error(`Sequence state.error! state with id: ${sequenceStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteChainStateConstraintCheck(chainStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingChainState: boolean = Array.from(dataStore.chaindecisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === chainStateId));\n        if (decisionIsUsingChainState) {\n            throw new Error(`Sequence state.error! state with id: ${chainStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainStateConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceStateConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        return DataSetupRepository.save(dataSetup);\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ----------------------------------------------- Init Data --------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        return InitDataRepository.save(initData);\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlay, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n    play: faPlay,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        }\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors: errors, falseStates: [], trueStates: []};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[], states: SequenceStateTO[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        const falseStates: SequenceStateTO[] = [];\n        const trueStates: SequenceStateTO[] = [];\n\n        decision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n            const stateToCheck: SequenceStateTO | undefined = states.find(state => state.id === stateFkAndStateCondition.stateFk);\n            if (stateToCheck) {\n                if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                    falseStates.push(stateToCheck);\n                    goTo = decision.elseGoTo;\n                } else {\n                    trueStates.push(stateToCheck);\n                }\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo, falseStates: falseStates, trueStates: trueStates};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                            sequence.sequenceStates,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                        falseStates: terminalResult.falseStates,\n                        trueStates: terminalResult.trueStates,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {\n        stepId: \"root\",\n        actorDatas: result.actorDatas,\n        type: \"INIT\",\n        errors: result.errors,\n        falseStates: result.falseStates,\n        trueStates: result.trueStates,\n    };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas, sequenceChain.chainStates);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[], chainStates: ChainStateTO[]): GoToChain => {\n    let goTo: GoToChain | undefined;\n    // check conditions\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n\n    // check states\n    chainDecision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n        const stateToCheck: ChainStateTO | undefined = chainStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n        if (stateToCheck) {\n            if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                goTo = chainDecision.elseGoTo;\n            }\n        }\n    });\n\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst setSelectedSequenceByIdThunk = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    }\n};\n\nconst setSelectedSequenceByIdWithStatesThunk = (sequenceId: number, states: SequenceStateTO[]): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        // set states\n        const sequence: SequenceCTO = response.object;\n        sequence.sequenceStates = states;\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(sequence));\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n\n    selectFalseStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.falseStates || [];\n    },\n\n    selectTrueStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.trueStates || [];\n    },\n\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: SequenceModelSlice.actions.setSelectedSequence,\n    setCurrentSequenceById: setSelectedSequenceByIdThunk,\n    setCurrentSequenceByIdWithStates: setSelectedSequenceByIdWithStatesThunk,\n    setCurrentDataSetupById: getDataSetupCTOFromBackend,\n    setCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    // calcChain: calcModelsThunk,\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n    EDIT_CONFIGURATION = \"EDIT_CONFIGURATION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface Configuration {\n    sequence: SequenceTO;\n    dataSetup: DataSetupCTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | Configuration\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_CONFIGURATION) {\n                (state.objectToEdit as Configuration).dataSetup = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConfigurationToEdit: (state, action: PayloadAction<Configuration>) => {\n            if (state.mode === Mode.EDIT_CONFIGURATION) {\n                state.objectToEdit = action.payload;\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditConfigurationThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CONFIGURATION));\n    dispatch(EditSlice.actions.setConfigurationToEdit({sequence: new SequenceTO(), dataSetup: new DataSetupCTO()}));\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(response.object));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CONFIGURATION));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setDataSetupInConfigurationThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            const copyConfig: Configuration = DavitUtil.deepCopy((getState().edit.objectToEdit as Configuration));\n            copyConfig.dataSetup = DavitUtil.deepCopy(response.object);\n            dispatch(EditSlice.actions.setConfigurationToEdit(copyConfig));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n\n        const dataSetup: DataSetupCTO = new DataSetupCTO();\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n        dispatch(MasterDataActions.loadDataSetupsFromBackend());\n        const copyConfig: Configuration = DavitUtil.deepCopy((getState().edit.objectToEdit as Configuration));\n        copyConfig.dataSetup = response.object;\n        dispatch(EditSlice.actions.setConfigurationToEdit(copyConfig));\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        if ((state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)) {\n            return (state.edit.objectToEdit as SequenceTO);\n        }\n\n        if ((state.edit.mode === Mode.EDIT_CONFIGURATION && (state.edit.objectToEdit as Configuration))) {\n            return (state.edit.objectToEdit as Configuration).sequence;\n        }\n\n        return null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n\n        if (state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup) {\n            return (state.edit.objectToEdit as DataSetupCTO);\n        }\n\n        if (state.edit.mode === Mode.EDIT_CONFIGURATION && (state.edit.objectToEdit as Configuration).dataSetup) {\n            return (state.edit.objectToEdit as Configuration).dataSetup;\n        }\n\n        return null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n    selectConfigurationToEdit: (state: RootState): Configuration | null => {\n        return (state.edit.mode === Mode.EDIT_CONFIGURATION)\n            ? (state.edit.objectToEdit as Configuration)\n            : null;\n    }\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        editConfiguration: setModeToEditConfigurationThunk,\n        setDataSetupInConfiguration: setDataSetupInConfigurationThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CONFIGURATION) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequenceById(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\nimport \"./DavitIconButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n    size?: ElementSize;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon className={children ? \"iconButtonIcon\" : \"\"} icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps {\n    onClick: (show: boolean) => void;\n    show?: boolean;\n    className?: string;\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show, className} = props;\n\n    return <DavitIconButton onClick={() => onClick(!show)}\n                            size={ElementSize.tiny}\n                            iconName={show ? faAngleDown : faAngleRight}\n                            className={className}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Table.css\";\n\nexport interface TableRow {\n    cellElements: JSX.Element[];\n}\n\nexport interface TableProps {\n    headers?: JSX.Element[];\n    tableRows?: TableRow[];\n}\n\nexport const Table: FunctionComponent<TableProps> = (props) => {\n    const {headers, tableRows} = props;\n\n    const buildHeader = (header: JSX.Element, index: number): JSX.Element => {\n        return <th key={index}><div className=\"flex flex-center align-center width-fluid height-fluid\">{header}</div></th>;\n    };\n\n    const buildCell = (jsx: JSX.Element, index: number): JSX.Element => {\n        return <td key={index}>{jsx}</td>;\n    };\n\n    const buildTableRow = (row: TableRow, index: number): JSX.Element => {\n        return (\n            <tr key={index}>\n                {row.cellElements.map(buildCell)}\n            </tr>\n        );\n    };\n\n    return (\n        <table className=\"width-fluid\">\n            {headers && <thead className=\"thaeder\">\n            <tr>\n                {headers.map(buildHeader)}\n            </tr>\n            </thead>}\n\n            {tableRows !== undefined && tableRows.length > 0 && <tbody>\n            {tableRows.map(buildTableRow)}\n            </tbody>}\n\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"../atomic\";\n\ninterface ToggleButtonProps {\n    toggleCallback: (isLeft: boolean) => void;\n    isLeft: boolean;\n    leftLabel: string;\n    rightLabel: string;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\n    const {toggleCallback, isLeft, leftLabel, rightLabel} = props;\n\n    return (\n        <div className=\"flex flex-center\">\n            <DavitButton\n                className={isLeft ? \" active\" : \"\"}\n                onClick={() => toggleCallback(true)}\n            >{leftLabel}</DavitButton>\n            <DavitButton\n                className={isLeft ? \"\" : \" active\"}\n                onClick={() => toggleCallback(false)}\n            >{rightLabel}</DavitButton>\n        </div>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport { Table, TableRow } from \"../../../../../../../../atomic/Table\";\nimport { ToggleButton } from \"../../../../../../../../molecules/ToggleButton\";\n\ninterface StateTableProps {\n    statesToEdit: StateTO[];\n    stateColumnName: string\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n    changeName?: (name: string, stateId: number) => void;\n    removeStateCallback?: (stateId: number) => void;\n    addStateCallback?: () => void;\n}\n\nexport const StateTable: FunctionComponent<StateTableProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback, stateColumnName} = props;\n\n    const trueLabel: string = \"TRUE\";\n    const falseLabel: string = \"FALSE\";\n\n    const buildTableRow = (state: StateTO, index: number): TableRow => {\n\n        const getLabel = (): JSX.Element => {\n            return changeName\n                ?\n                <div className=\"flex flex-center align-center\">\n                    <DavitTextInput\n                        key={index}\n                        onChangeCallback={(name) => changeName ? changeName(name, state.id) : {}}\n                        placeholder=\"State Name\"\n                        value={state.label}\n                        focus\n                    />\n                </div>\n                : <label key={index}\n                         className=\"padding-small\"\n                >{state.label}</label>;\n        };\n\n        const getToggleButton = (): JSX.Element => {\n            return (<ToggleButton\n                key={index}\n                toggleCallback={(is) => setActiveCallback(state, is)}\n                isLeft={state.isState}\n                leftLabel={trueLabel}\n                rightLabel={falseLabel}\n            />);\n        };\n\n        const getDeleteButton = (): JSX.Element => {\n            return removeStateCallback\n                ? <div className=\"flex flex-center align-center width-fluid height-fluid\">\n                    <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                       noConfirm\n                    />\n                </div>\n                : <div />;\n        };\n\n        return {\n            cellElements: [getLabel(), getToggleButton(), getDeleteButton()]\n        };\n    };\n\n    const getHeaders = (): JSX.Element[] => {\n        return addStateCallback\n            ? [<div key={1}\n                    className=\"padding-small\"\n            ><label\n\n            >Name</label></div>, <label key={2}\n                                        className=\"padding-small\"\n            >{stateColumnName}</label>, <DavitAddButton key={3}\n                                                        onClick={addStateCallback}\n            />]\n            : [<label key={1}\n                      className=\"padding-small\"\n            >Name</label>, <label key={2}\n                                  className=\"padding-small\"\n            >{stateColumnName}</label>];\n    };\n\n    const getRows = (): TableRow[] => {\n        return statesToEdit.map(buildTableRow);\n    };\n\n    return (\n        <Table headers={getHeaders()}\n               tableRows={getRows()}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../dataAccess/access/to/StateTO\";\nimport { StateTable } from \"../../controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateTable\";\n\ninterface StateConfigurationViewProps {\n    states: StateTO[];\n    setStateCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateConfigurationView: FunctionComponent<StateConfigurationViewProps> = (props) => {\n\n    const {states, setStateCallback} = props;\n\n    const HEADER: string = \"State\";\n\n    return (\n        <StateTable\n            statesToEdit={states}\n            stateColumnName={HEADER}\n            setActiveCallback={setStateCallback}\n        />\n    );\n};\n\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { InitDataTO } from \"../../../dataAccess/access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { StateTO } from \"../../../dataAccess/access/to/StateTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    DavitAddButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitIconButton,\n    InstanceDropDown\n} from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./Configuration.css\";\nimport { StateConfigurationView } from \"./fragments/StateConfigurationView\";\n\nexport interface ConfigurationPanelProps {\n\n}\n\nexport const ConfigurationPanel: FunctionComponent<ConfigurationPanelProps> = () => {\n\n    const dispatch = useDispatch();\n\n    const [states, setStates] = useState<StateTO[]>([]);\n    const [dataSetup, setDataSetup] = useState<DataSetupCTO>(new DataSetupCTO());\n\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStates: StateTO[] = DavitUtil.deepCopy(states);\n        copyStates.map(state => {\n            if (state.id === stateToToggle.id) {\n                state.isState = is;\n            }\n            return state;\n        });\n        setStates(copyStates);\n    };\n\n    const runCalc = () => {\n        if(selectedSequence !== null){\n            const copySequence: SequenceCTO = DavitUtil.deepCopy(selectedSequence);\n            dispatch(SequenceModelActions.setCurrentSequenceByIdWithStates(copySequence.sequenceTO.id, (states as SequenceStateTO[])));\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup));\n            dispatch(EditActions.setMode.view());\n        }\n    };\n\n    const setSequence = (sequenceId: number) => {\n        dispatch(SequenceModelActions.setCurrentSequenceById(sequenceId));\n        if (selectedSequence) {\n            const copyStates: StateTO[] = DavitUtil.deepCopy(selectedSequence.sequenceStates);\n            setStates(copyStates);\n        }\n    };\n\n    const buildSequenceButton = (sequence: SequenceTO): JSX.Element => {\n        return (\n            <DavitButton key={sequence.id}\n                         onClick={() => setSequence(sequence.id)}\n            >{sequence.name}</DavitButton>\n        );\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetup);\n        copyDataSetup.initDatas.map(iData => {\n            if (iData.id === initData.id) {\n                iData.actorFk = initData.actorFk;\n                iData.dataFk = initData.dataFk;\n                iData.instanceFk = initData.instanceFk;\n            }\n            return iData;\n        });\n        setDataSetup(copyDataSetup);\n    };\n\n    const createInitData = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetup);\n        const newInitData: InitDataTO = new InitDataTO();\n        newInitData.id = copyDataSetup.initDatas.length;\n        copyDataSetup.initDatas.push(newInitData);\n        setDataSetup(copyDataSetup);\n    };\n\n    const deleteInitData = (initDataToDelete: InitDataTO) => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetup);\n        copyDataSetup.initDatas.filter(iData => iData.id !== initDataToDelete.id);\n        setDataSetup(copyDataSetup);\n    };\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <div className=\"configurationPanel flex flex-column content-space-around border border-medium\">\n            {/*----- Header -----*/}\n            <div className=\"configurationPanelHeader flex content-space-around width-fluid align-center border border-medium padding-small\">\n\n                <h1>Configuration</h1>\n\n                <DavitButton onClick={() => {\n                    dispatch(EditActions.setMode.view());\n                    dispatch(SequenceModelActions.resetCurrentSequence);\n                    dispatch(SequenceModelActions.resetCurrentDataSetup);\n                }}\n                >Cancel</DavitButton>\n\n                <DavitIconButton onClick={runCalc}\n                                 iconLeft={true}\n                                 iconName={DavitIcons.play}\n                >\n                    <label>\n                        Calculate\n                    </label>\n                </DavitIconButton>\n            </div>\n\n            <div className=\"configurationBody flex\">\n\n                {/*----- Sequence / Chain -----*/}\n                <div className=\"configurationSequenceChainColumn flex flex-column\">\n                    {/*{(chains.length > 0) &&*/}\n                    {/*<div className=\"configurationPanelHeader padding-medium border border-medium\">*/}\n                    {/*    <h2>Chains</h2>*/}\n                    {/*</div>*/}\n                    {/*}*/}\n                    {/*{(chains.length > 0) && chains.map(buildChainButton)}*/}\n                    {sequences.length > 0 &&\n                    <div className=\"configurationPanelHeader padding-medium border border-medium\">\n                        <h2>Sequences</h2>\n                    </div>\n                    }\n                    {sequences.length > 0 && sequences.map(buildSequenceButton)}\n                </div>\n\n                {/*----- States -----*/}\n                <div className=\"configurationStateColumn flex flex-column border border-medium\">\n                    <div>\n                        {/*    State*/}\n                        <StateConfigurationView states={states}\n                                                setStateCallback={setIsState}\n                        />\n                    </div>\n                    <div>\n                        {/*    Data setup*/}\n                        <div className=\"configurationPanelHeader border border-medium width-fluid\">\n                            <h2>Data-Setup</h2>\n                        </div>\n\n                        <table className=\"border\"\n                               style={{width: \"40em\", minHeight: \"30vh\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Actor</td>\n                                <td style={{textAlign: \"center\"}}>Data Instance</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                            </tr>\n                            </thead>\n                            <tbody style={{maxHeight: \"40vh\"}}>\n                            {dataSetup.initDatas.map(buildActorDataTableRow)}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                                         show={showMenu}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\nimport { StateFkAndStateCondition } from \"./DecisionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editChain());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveStateFkAndStateCondition = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveStateFkAndStateCondition(newChainState);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        editChain,\n        saveStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport {\n    ActorDropDownLabel,\n    ChainDropDownButton,\n    DataLabelDropDown,\n    RelationLabelDropDown,\n    SequenceLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport interface StateFkAndStateCondition {\n    stateFk: number,\n    stateCondition: boolean,\n}\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveSequenceState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createSequenceState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveSequenceState(newSequenceState);\n        }\n    };\n\n    const deleteSequenceState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveSequenceState,\n        deleteSequenceState,\n        createSequenceState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ChainStateDropDownProps {\n    onSelect: (chainState: ChainStateTO | undefined) => void;\n    chainFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const ChainStateDropDown: FunctionComponent<ChainStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainFk} = props;\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(chainFk));\n\n    const chainStateToDavitDropDownItem = (chainState: ChainStateTO): DavitDropDownItemProps => {\n        return {key: chainState.id, value: chainState.id.toString(), text: chainState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={chainStates.map(chainStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(chainStates.find(chainState => chainState.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { ChainStateDropDown } from \"../../../../../../../atomic/dropdowns/ChainStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectChainState = (chainState: ChainStateTO | undefined, index: number) => {\n        if (chainState) {\n            updateStateFkAndStateCondition({stateFk: chainState.id, stateCondition: chainState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndStateCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndStateCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <ChainStateDropDown onSelect={(stateFkAndStateCondition) => selectChainState(stateFkAndStateCondition, index)}\n                                            chainFk={chainId}\n                                            value={stateFkAndStateCondition.stateFk.toString()}\n                                            placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndStateCondition, index, is)}\n                                      isLeft={stateFkAndStateCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FLASE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndStateCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateChainDecision(copyDecision);\n            }\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {\n        saveStateFkAndStateCondition,\n        editChain,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        id\n    } = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveStateFkAndStateCondition);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveStateFkAndStateCondition(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveStateFkAndStateCondition(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={chainStates}\n                            stateColumnName=\"Default\"\n                            addStateCallback={createStateFkAndStateCondition}\n                            removeStateCallback={deleteStateFkAndStateCondition}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceStateDropDownProps {\n    onSelect: (sequenceState: SequenceStateTO | undefined) => void;\n    sequenceFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const SequenceStateDropDown: FunctionComponent<SequenceStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, sequenceFk} = props;\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(sequenceFk));\n\n    const sequenceStateToDavitDropDownItem = (sequenceState: SequenceStateTO): DavitDropDownItemProps => {\n        return {key: sequenceState.id, value: sequenceState.id.toString(), text: sequenceState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequenceStates.map(sequenceStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(sequenceStates.find(state => state.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionDropDown,\n    Form,\n    GoToOptionDropDown,\n    InstanceDropDown,\n    StepDropDown\n} from \"../../../../../../../atomic\";\nimport { SequenceStateDropDown } from \"../../../../../../../atomic/dropdowns/SequenceStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        sequenceFk,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectSequenceState = (sequenceState: SequenceStateTO | undefined, index: number) => {\n        if (sequenceState) {\n            updateStateFkAndStateCondition({stateFk: sequenceState.id, stateCondition: sequenceState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <SequenceStateDropDown onSelect={(selectedState) => selectSequenceState(selectedState, index)}\n                                               sequenceFk={sequenceFk}\n                                               value={stateFkAndCondition.stateFk.toString()}\n                                               placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndCondition, index, is)}\n                                      isLeft={stateFkAndCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FALSE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>Actor</td>\n                            <td>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO, StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateDecision(copyDecision);\n            }\n        }\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateDecision(copyDecision);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateDecision(copyDecision);\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        deleteStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        sequenceFk: decisionToEdit?.sequenceFk || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {\n        saveSequenceState,\n        editSequence,\n        createSequenceState,\n        deleteSequenceState,\n        id,\n    } = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveSequenceState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveSequenceState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveSequenceState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <div className=\"border border-small width-fluid\">\n                    <StateTable statesToEdit={sequenceStates}\n                                stateColumnName=\"Default\"\n                                addStateCallback={createSequenceState}\n                                removeStateCallback={deleteSequenceState}\n                                setActiveCallback={setIsState}\n                                changeName={changeName}\n                    />\n                </div>\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic\";\nimport { DavitBackButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic\";\nimport { DavitEditButton } from \"../../../../../../../atomic\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic\";\nimport { DecisionDropDown } from \"../../../../../../../atomic\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic\";\nimport { StepDropDown } from \"../../../../../../../atomic\";\nimport { Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td className=\"flex flex-end\">\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className=\"border\"\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr className=\"flex content-space-between align-center\">\n                    <td>Action</td>\n                    <td>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ConfigurationPanel } from \"../../../../configurationPanel/Configuration\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n                case Mode.EDIT_CONFIGURATION:\n                    return <ConfigurationPanel />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { FlowChartlabel } from \"../../../../../../domains/overview/flowChartModel/fragments/FlowChartlabel\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { DavitButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectedChainName,\n        selectedSequenceName,\n        editConfiguration,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Configuration\">\n                <DavitButton onClick={editConfiguration}>Configuration</DavitButton>\n            </OptionField>\n\n            <OptionField />\n            <OptionField>\n                <div style={{marginLeft: \"auto\"}}>\n                    <FlowChartlabel label=\"CHAIN:\"\n                                    text={selectedChainName}\n                    />\n                    <FlowChartlabel label=\"SEQU.:\"\n                                    text={selectedSequenceName}\n                    />\n                </div>\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={false}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetupById(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (selectedSequence) {\n            return \" * \" + selectedSequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && selectedSequence) {\n            return (\n                \" * \" +\n                selectedSequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepIndex)?.sequenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence: selectedSequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: selectedSequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n        selectedSequenceName: selectedSequence?.sequenceTO.name || \"\",\n        selectedChainName: selectedChain?.name || \"\",\n        editConfiguration: () => dispatch(EditActions.setMode.editConfiguration())\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../dataAccess/access/to/StateTO\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { DavitShowMoreButton } from \"../atomic\";\nimport \"./StateView.css\";\n\ninterface StateViewProps {\n    showChain: boolean;\n}\n\nexport const StateView: FunctionComponent<StateViewProps> = (props) => {\n    const {showChain} = props;\n\n    const sequenceStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectSequence)?.sequenceStates || [];\n    const chainStates: ChainStateTO[] = useSelector(sequenceModelSelectors.selectChainCTO)?.chainStates || [];\n\n    const falseStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectFalseStates);\n    const trueStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectTrueStates);\n\n    const HEADER: string = \"State\";\n    const [showStates, setShowStates] = useState<boolean>(false);\n\n    const buildStateRow = (state: StateTO, index: number): JSX.Element => {\n\n            const stateIsTrue: boolean = trueStates.some(trueState => trueState.id === state.id);\n            const stateIsFalse: boolean = falseStates.some(falseState => falseState.id === state.id);\n\n            return (\n                <div key={index}\n                     className={\"stateViewState flex content-space-between \" + (index !== 0 ? \"stateViewBorder\" : \"\")}\n                >\n                    <div className=\"flex flex-start align-center padding-small\">\n                        <label>{state.label}</label>\n                    </div>\n\n                    <div className=\"flex flex-end align-center padding-small\">\n                        <svg className=\"stateViewSvgField\">\n                            <line className={state.isState ? \"stateViewIsTrue\" : \"stateViewIsFalse\"}\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"1rem\"\n                                  y2=\"0\"\n                            />\n                        </svg>\n                        {stateIsTrue && <div className=\"gg-check-o\" />}\n                        {stateIsFalse && <div className=\"gg-close-o\" />}\n                        {!stateIsFalse && !stateIsTrue && <div className=\"stateViewSpacer\" />}\n                    </div>\n                </div>\n            );\n        }\n    ;\n\n    return (\n        <div className=\"stateView flex flex-column border border-small\">\n            <div className=\"stateViewHeader flex content-space-between padding-small\">\n                <label>{HEADER}</label>\n                <DavitShowMoreButton show={showStates}\n                                     onClick={setShowStates}\n                />\n            </div>\n            {showStates && <div className=\"flex flex-column\">\n                {!showChain && sequenceStates.map((state, index) => buildStateRow(state, index))}\n                {showChain && chainStates.map((state, index) => buildStateRow(state, index))}\n            </div>}\n\n        </div>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./TabGroupFragment.css\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div className=\"flex\">{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { StateView } from \"../../../components/molecules/StateView\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() && <>\n                    <div className=\"flowChartHeader\">\n                        <div className=\"flex flex-column\">\n                            {chain && (\n\n                                //TODO: Create component for this.\n                                <TabGroupFragment label=\"Mode\"\n                                                  style={{backgroundColor: \"var(--background-color-header)\"}}\n                                >\n                                    <TabFragment label=\"Chain\"\n                                                 isActive={showChain}\n                                                 onClick={() => setShowChain(true)}\n                                    />\n                                    <TabFragment label=\"Sequence\"\n                                                 isActive={!showChain}\n                                                 onClick={() => setShowChain(false)}\n                                    />\n                                </TabGroupFragment>\n                            )}\n\n                            <StateView showChain={showChain} />\n                        </div>\n\n\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Error Actions\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetupById(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequenceById(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}