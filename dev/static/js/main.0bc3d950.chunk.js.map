{"version":3,"sources":["dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/davitVersion03/DavitVersionMigrator03.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateTable.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/atomic/dropdowns/SequenceStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/calculated/useGetErrorState.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx","assets/exxcellent_logo_200.png"],"names":["DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","sequenceStates","chainStates","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","DavitVersionMigrator02","stateFks","DavitVersionMigrator03","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","sequenceStateId","some","stateFk","sequenceMockId","dataId","dataRelationExists","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateId","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","chainDecisions","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","errorStates","states","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","stateToCheck","isState","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","stateErrors","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","FormLinePosition","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","useState","showMore","setShowMore","useEffect","tiny","faAngleRight","DavitDeleteButton","noConfirm","fluid","setFluid","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveState","stateToSave","changeName","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createState","newChainState","deleteState","stateToDeleteId","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","selectedSequence","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","saveNote","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","useChainDecisionViewModel","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","StateTable","statesToEdit","addStateCallback","removeStateCallback","setActiveCallback","inputClasses","buildStateTableRow","ChainStateForm","stateToToggle","is","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","InitDataTO","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","EditDataSetupModal","SequenceStateDropDown","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","stateFkToRemove","seqeuenceFk","updateState","newState","useDecisionViewModel","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","isActive","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","zIndex","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","showStateErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","errorState","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createErrorStateColumn","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","selectedStateErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","calcErrorState","useGetErrorState","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.0bc3d950.chunk.js","sourcesContent":["import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic/dropdowns/InstanceDropDown\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\nimport { StoreTO02 } from \"./to/StoreTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO02 {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n                stateFks: [],\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO02 } from \"../davitVersion02/to/StoreTO02\";\n\nexport const DavitVersionMigrator03 = {\n    migrate(dataStoreObject: StoreTO02): StoreTO {\n        console.info(\"start migration to version 0.3\");\n        const actorZoom: number = dataStoreObject.actorZoom;\n        const dataZoom: number = dataStoreObject.dataZoom;\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: dataStoreObject.decisions as DecisionTO[],\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n            sequenceStates: [],\n            chainStates: [],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\nimport { DavitVersionMigrator03 } from \"./davitVersion03/DavitVersionMigrator03\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(\n                        DavitVersionMigrator01.migrate(dataStoreObject),\n                    )\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(dataStoreObject));\n                break;\n            case 0.2:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceStateConstraintCheck(sequenceStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingSequenceState: boolean = Array.from(dataStore.decisions.values())\n            .some(decision => decision.stateFks.some(stateFk => stateFk === sequenceStateId));\n        if (decisionIsUsingSequenceState) {\n            throw new Error(`Sequence state.error! state with id: ${sequenceStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteChainStateConstraintCheck(sequenceMockId: number, dataStore: DataStoreCTO) {\n        // TODO: check if mock is part of an decision.\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainStateConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceStateConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        return DataSetupRepository.save(dataSetup);\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ----------------------------------------------- Init Data --------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        return InitDataRepository.save(initData);\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        }\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    errorStates: SequenceStateTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    errorStates: SequenceStateTO[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors: errors, errorStates: []};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[], states: SequenceStateTO[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        const errorStates: SequenceStateTO[] = [];\n\n        decision.stateFks.forEach(stateFk => {\n            const stateToCheck: SequenceStateTO | undefined = states.find(state => state.id === stateFk);\n            if (stateToCheck) {\n                if (!stateToCheck.isState) {\n                    errorStates.push(stateToCheck);\n                    goTo = decision.elseGoTo;\n                }\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo, errorStates: errorStates};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    stateErrors: SequenceStateTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                            stateErrors: result.errorStates\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                            sequence.sequenceStates,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                            stateErrors: result.errorStates,\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                        stateErrors: terminalResult.errorStates,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {\n        stepId: \"root\",\n        actorDatas: result.actorDatas,\n        type: \"INIT\",\n        errors: result.errors,\n        stateErrors: result.errorStates\n    };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[]): GoToChain => {\n    // const filteredCompData: ActorData[] = actorDatas.filter((actorData) => actorData.actorFk === chainDecision.actorFk);\n    let goTo: GoToChain | undefined;\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n    selectStateErrors: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.stateErrors || [];\n    },\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditInitData } from \"./thunks/InitDataThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set initData to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps extends DavitButtonProps {\n    show?: boolean\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show} = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if (show !== undefined) {\n            setShowMore(show);\n        }\n    }, [show]);\n\n    const onToggle = () => {\n        setShowMore(!showMore);\n        onClick();\n    };\n\n    return <DavitIconButton onClick={onToggle}\n                            size={ElementSize.tiny}\n                            iconName={showMore ? faAngleDown : faAngleRight}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveState = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createState = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveState(newChainState);\n        }\n    };\n\n    const deleteState = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        saveState,\n        editChain,\n        createState,\n        deleteState,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../../../../../../../dataAccess/access/to/GroupTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport { ActorDropDownLabel } from \"../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { ChainDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDropDown\";\nimport { DataLabelDropDown } from \"../../../../../../atomic/dropdowns/DataDropDown\";\nimport { DataSetupLabelDropDown } from \"../../../../../../atomic/dropdowns/DataSetupDropDown\";\nimport { RelationLabelDropDown } from \"../../../../../../atomic/dropdowns/RelationDropDown\";\nimport { SequenceLabelDropDown } from \"../../../../../../atomic/dropdowns/SequenceDropDown\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Data - Setup\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupLabelDropDown onSelect={editOrAddDataSetup}\n                                                             label=\"Data-Setup\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFks: number[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveState(newSequenceState);\n        }\n    };\n\n    const deleteState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveState,\n        deleteState,\n        createState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        // saveDecision,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*// TODO: Condition list*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport \"./StateTable.css\";\n\ninterface StateTableProps {\n    statesToEdit: StateTO[];\n    addStateCallback: () => void;\n    changeName: (name: string, stateId: number) => void;\n    removeStateCallback: (stateId: number) => void;\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateTable: FunctionComponent<StateTableProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback} = props;\n\n    const buildStateTableRow = (state: StateTO, index: number): JSX.Element => {\n\n        const inputClasses: string = state.label === \"\" ? \"border border-warning border-animation\" : \"\";\n\n        return (\n            <tr className=\"flex content-space-between fluid\"\n                key={index}\n            >\n                <td className={inputClasses}>\n                    <DavitTextInput\n                        onChangeCallback={(name) => changeName(name, state.id)}\n                        placeholder=\"State Name\"\n                        value={state.label}\n                        focus\n                    />\n                </td>\n                <td className=\"flex flex-center\">\n\n                    <DavitButton\n                        className={state.isState ? \" active\" : \"\"}\n                        onClick={() => setActiveCallback(state, true)}\n                    >TRUE</DavitButton>\n                    <DavitButton\n                        className={state.isState ? \"\" : \" active\"}\n                        onClick={() => setActiveCallback(state, false)}\n                    >FALSE</DavitButton>\n                </td>\n                <td className=\"flex flex-center\">\n                    <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                       noConfirm\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <table className={\"border table\"}>\n\n            <thead className=\"flex content-space-between padding-medium\">\n\n            <tr className=\"flex content-space-between fluid\">\n                <td className=\"flex flex-center\">Name</td>\n                <td className=\"flex flex-center\">Default</td>\n                <td className={\"flex flex-center\"}><DavitAddButton onClick={addStateCallback} /></td>\n            </tr>\n\n            </thead>\n\n            <tbody className=\"body\">\n            {statesToEdit.map((state, index) => buildStateTableRow(state, index))}\n            </tbody>\n\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {saveState, editChain, createState, deleteState, id} = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveState);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveState(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveState(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={chainStates}\n                            addStateCallback={createState}\n                            removeStateCallback={deleteState}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataSetupViewModel } from \"../viewmodels/DataSetupViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Data Setup Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataSetupCTO } from \"../../../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditDataSetup } from \"../../../../../../../../slices/thunks/DataSetupThunks\";\nimport { EditInitData } from \"../../../../../../../../slices/thunks/InitDataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit dataSetup without dataSetupToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== \"\") {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + \"-copy\";\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== \"\") {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataSetupToEdit?.dataSetup.name || \"\"),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : \"\",\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataSetupForm } from \"../forms/DataSetupForm\";\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceStateDropDownProps {\n    onSelect: (stateFk: number | undefined) => void;\n    sequenceFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const SequenceStateDropDown: FunctionComponent<SequenceStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, sequenceFk} = props;\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(sequenceFk));\n\n    const sequenceStateToDavitDropDownItem = (sequenceState: SequenceStateTO): DavitDropDownItemProps => {\n        return {key: sequenceState.id, value: sequenceState.id.toString(), text: sequenceState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequenceStates.map(sequenceStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(Number(item.value))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { SequenceStateDropDown } from \"../../../../../../../atomic/dropdowns/SequenceStateDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        deleteState,\n        saveCondition,\n        saveAndGoBack,\n        stateFks,\n        createState,\n        seqeuenceFk,\n        updateState,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const buildStateTableRow = (stateFk: number, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <SequenceStateDropDown onSelect={(newState) => updateState(newState, index)}\n                                               sequenceFk={seqeuenceFk}\n                                               value={stateFk.toString()}\n                                               placeholder=\"Select sequence state\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteState(stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>Actor</td>\n                            <td>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createState} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFks.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const deleteState = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFks = copyDecision.stateFks.filter(stateFk => stateFk !== stateFkToRemove);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const updateState = (newState: number | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                console.info(\"New State: \" + newState);\n                copyDecision.stateFks[index] = newState;\n                console.info(\"State on index: \" + index + \" is: \" + newState);\n                updateDecision(copyDecision);\n            }\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    const createState = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFks.push(-1);\n\n            updateDecision(copyDecision);\n        }\n    };\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFks: decisionToEdit?.stateFks || [],\n        deleteState,\n        createState,\n        seqeuenceFk: decisionToEdit?.sequenceFk || -1,\n        updateState,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {saveState, editSequence, createState, deleteState, id} = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={sequenceStates}\n                            addStateCallback={createState}\n                            removeStateCallback={deleteState}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitEditButton } from \"../../../../../../../atomic/buttons/DavitEditButton\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic/buttons/DavitShowMoreButton\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{textAlign: \"end\"}}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={\"border\"}\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr>\n                    <td style={{textAlign: \"center\"}}>Action</td>\n                    <td style={{textAlign: \"end\"}}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDataSetupModal } from \"./fragments/modals/EditDataSetupModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { ChainDropDown, DataSetupDropDown, SequenceDropDown } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Data - Setup\">\n                <DataSetupDropDown\n                    onSelect={selectDataSetup}\n                    placeholder=\"Select Data Setup ...\"\n                    value={currentDataSetup}\n                />\n            </OptionField>\n\n            <OptionField label=\"SEQUENCE\">\n                <SequenceDropDown onSelect={selectSequence}\n                                  value={currentSequence}\n                />\n            </OptionField>\n\n            <OptionField label=\"CHAIN\"\n                         divider={true}\n            >\n                <ChainDropDown onSelect={selectChain}\n                               value={currentChain}\n                />\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={true}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return \" * \" + sequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                \" * \" +\n                sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepIndex)?.sequenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{display: \"flex\"}}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\nimport { FlowChartlabel } from \"./fragments/FlowChartlabel\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() && <>\n                    {/*TODO: try to move this in to a css class.*/}\n                    <div style={{display: \"flex\", position: \"absolute\", zIndex: 99, width: \"47vw\"}}>\n                        {chain && (\n                            <TabGroupFragment label=\"Mode\"\n                                              style={{backgroundColor: \"var(--background-color-header)\"}}\n                            >\n                                <TabFragment label=\"Chain\"\n                                             isActive={showChain}\n                                             onClick={() => setShowChain(true)}\n                                />\n                                <TabFragment label=\"Sequence\"\n                                             isActive={!showChain}\n                                             onClick={() => setShowChain(false)}\n                                />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{marginLeft: \"auto\"}}>\n                            <FlowChartlabel label=\"CHAIN:\"\n                                            text={chainName}\n                            />\n                            <FlowChartlabel label=\"SEQU.:\"\n                                            text={sequenceName}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n    showStateErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n        showStateErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Error Actions\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n                {\n                    label: \"Error States\",\n                    identifier: ActiveTab.errorState,\n                    condition: showStateErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0 || step.stateErrors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceStateTO } from \"../../../../../dataAccess/access/to/SequenceStateTO\";\n\nexport const useGetErrorState = (errorStates: SequenceStateTO[]) => {\n\n    const bodyData: DavitTableRowData[] = errorStates.map(createErrorStateColumn);\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"State\"];\n\nconst createErrorStateColumn = (state: SequenceStateTO): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [state.label],\n        trClass,\n        actions: [],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetErrorState } from \"../tables/calculated/useGetErrorState\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n    errorState = \"errorState\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        showStateErrorTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                    showStateErrorTab={showStateErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n    const selectedStateErrors: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectStateErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n    const calcErrorState = useGetErrorState(selectedStateErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            case ActiveTab.errorState:\n                return calcErrorState;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        showStateErrorTab: selectedStateErrors.length > 0,\n        activeTab,\n        setActiveTab,\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";"],"sourceRoot":""}