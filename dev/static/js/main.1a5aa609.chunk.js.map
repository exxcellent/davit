{"version":3,"sources":["dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/davitVersio01/DavitVersionMigrator01.ts","dataAccess/migration/davitVersion02/DavitVersionMigrator02.ts","dataAccess/migration/davitVersion03/DavitVersionMigrator03.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainlinkTO.ts","dataAccess/access/to/DataSetupTO.ts","dataAccess/access/cto/DataSetupCTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainlinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DataSetupRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/InitDataRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","slices/thunks/DataSetupThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/InitDataThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DataSetupDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/atomic/dropdowns/ChainStateDropDown.tsx","components/molecules/ToggleButton.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateTable.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","dataAccess/access/to/InitDataTO.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataSetupForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataSetupViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataSetupModal.tsx","components/atomic/dropdowns/SequenceStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewMenu.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/calculated/useGetFalseState.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx","assets/exxcellent_logo_200.png"],"names":["DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","initDatas","dataSetups","chains","chainlinks","chaindecisions","sequenceStates","chainStates","DavitVersionMigrator01","dataStoreObject","console","info","map","action","index","id","actionType","dataFk","instanceFk","receivingActorFk","sendingActorFk","sequenceStepFk","triggerText","decision","dataAndInstaceIds","dataAndInstaceId","forEach","dataAndInsanceId","push","actorFk","elseGoTo","ifGoTo","name","root","sequenceFk","data","geometricalDataFk","dataConnectionFks","note","instances","instance","chainDecision","chainFk","conditions","dataInstanceId","decisionFk","instanceId","buildConditionFromDataAndInstance","stateFkAndStateConditions","DavitVersionMigrator02","DavitVersionMigrator03","DavitVersionManager","migratedDataStoreObject","undefined","project","isSameVersion","warn","DataStore","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","valid","GoToTypesChain","ConstraintsHelper","sequenceStateId","some","stateFkAndCondition","stateFk","chainStateId","dataId","dataRelationExists","relation","data1Fk","data2Fk","actionExist","actorData","decisionExists","condition","chainDecisionExists","initDataExists","initData","actionExists","actorId","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","constraintDecision","length","sequenceId","stepExists","dec","geometDataId","actorExists","actor","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainlinkTO","dataSetupFk","ERROR","DataSetupTO","DataSetupCTO","dataSetup","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainlinkCTO","chainLink","sequence","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DataSetupRepository","dataSetupId","dataSetupTO","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","InitDataRepository","initDataId","findAllForSetup","initDataTO","deletedInitData","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllDataSetup","findDatSetupCTO","createDataSetupCTO","saveDataSetup","saveDataSetupCTO","dataSetupCTO","copyDataSetupCTO","savedDataSetupTO","savedInitDatas","deleteDataSetup","findAllInitDatas","findInitData","saveInitData","deleteInitData","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","DataInstanceTO","ActorDataState","MasterDataSlice","relations","chainLinks","chainDecisions","setActors","setGroups","setDatas","setRelations","setSequences","setDataSetups","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadDataSetupsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","errorStates","states","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","falseStates","stateFkAndStateCondition","stateToCheck","isState","stateCondition","findIndex","indexActorDataToEdit","SequenceService","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedDataSetup","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setCalcChain","setSelectedDataSetup","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getCurrentDataSetup","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","SequenceModelActions","setCurrentSequence","setCurrentDataSetup","resetCurrentDataSetup","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","setDataSetupThunk","EDIT_DATASETUP","setDataSetupToEdit","EditDataSetup","DataTO","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","EditInitData","EditActions","setMode","editInitData","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setInitDataToEdit","EDIT_DATASETUP_INITDATA","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editDataSetup","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","stepIndex","view","FILE","tab","TAB","FormLinePosition","Theme","children","DavitButton","medium","disabled","DavitIconButton","iconName","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","useState","showMore","setShowMore","useEffect","tiny","faAngleRight","DavitDeleteButton","noConfirm","fluid","setFluid","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DataSetupDropDown","useDataSetupDropDownViewModel","selectDataSetup","dataSetupToOption","setup","DataSetupLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","stateValue","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","faComment","faCommentDots","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveStateFkAndStateCondition","stateToSave","changeName","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createStateFkAndStateCondition","newChainState","deleteStateFkAndStateCondition","stateToDeleteId","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddDataSetup","editOrAddChain","editOrAddGroup","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","selectedSequence","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","saveNote","createSequenceState","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainStateDropDown","ToggleButton","toggleCallback","isLeft","leftLabel","rightLabel","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","updateStateFkAndStateCondition","newState","stateFkToRemove","stateFkStateCondition","useChainDecisionViewModel","buildStateTableRow","selectChainState","is","copyStateFkAndStateCondition","setStateCondition","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentDataSetup","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","StateTable","statesToEdit","addStateCallback","removeStateCallback","setActiveCallback","inputClasses","ChainStateForm","stateToToggle","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","InitDataTO","DataSetupForm","dataSetupToEdit","copyDataSetupToEdit","copyDataSetup","getInitDatas","getDatas","dataIds","updateDataSetup","createInitData","copyInitData","useDataSetupViewModel","EditDataSetupModal","SequenceStateDropDown","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","selectedState","selectSequenceState","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelViewMenu","useControlPanelViewMenuViewModel","linkIndex","currentChain","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","getStepName","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToView","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","initDataToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","actorDatasFromDataSetupEdit","actorDatasFromInitData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","actorDataFromInitDataToEdit","actorDatasFromDataSetup","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","TabFragment","isActive","TabGroupFragment","FlowChartlabel","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainName","sequenceName","chainLineColor","showChain","setShowChain","parentRef","tableHeight","setTableHeight","renderFlowChart","marginLeft","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","showFalseStateTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","falseState","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","hasFalseState","getModelElementName","createFalseStateColumn","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","showStateErrorTab","activeTableData","selectedStep","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","selectedFalseStates","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","calcFalseState","useGetFalseState","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.1a5aa609.chunk.js","sourcesContent":["import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataSetupTO } from \"../to/DataSetupTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Setup\n        public initDatas = new Map<number, InitDataTO>(),\n        public dataSetups = new Map<number, DataSetupTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainlinks = new Map<number, ChainlinkTO>(),\n        public chaindecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"carv2\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DataAndInstanceId } from \"../../../components/atomic\";\nimport { DEFAULT_PROJECT_NAME } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { DecisionTO02 } from \"../davitVersion02/to/DecisionTO02\";\nimport { ActionTO01 } from \"./to/ActionTO01\";\nimport { ChainDecisionTO01 } from \"./to/ChainDecisionTO01\";\nimport { DataTO01 } from \"./to/DataTO01\";\nimport { DecisionTO01 } from \"./to/DecisionTO01\";\nimport { StoreTO01 } from \"./to/StoreTO01\";\n\nexport const DavitVersionMigrator01 = {\n    migrate(dataStoreObject: StoreTO): StoreTO01 {\n        console.info(\"start migration to version 0.1\");\n        const version: number = 0.1;\n        const projectName: string = DEFAULT_PROJECT_NAME;\n\n        const actions: ActionTO[] = (dataStoreObject.actions as ActionTO01[]).map((action, index) => {\n            return {\n                id: action.id,\n                actionType: action.actionType,\n                dataFk: action.dataFk,\n                instanceFk: action.instanceFk,\n                receivingActorFk: action.receivingActorFk,\n                sendingActorFk: action.sendingActorFk,\n                sequenceStepFk: action.sequenceStepFk,\n                triggerText: \"\",\n                index: index,\n            };\n        });\n        const decisions: DecisionTO02[] = (dataStoreObject.decisions as DecisionTO01[]).map((decision) => {\n            const dataAndInstaceIds: DataAndInstanceId[] = [];\n            decision.dataAndInstaceId.forEach((dataAndInsanceId) => {\n                dataAndInstaceIds.push(dataAndInsanceId);\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                dataAndInstaceIds: dataAndInstaceIds,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n            };\n        });\n        const datas: DataTO[] = (dataStoreObject.datas as DataTO01[]).map((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                geometricalDataFk: data.geometricalDataFk,\n                dataConnectionFks: data.dataConnectionFks,\n                note: \"\",\n                instances: data.instances.map((instance) => {\n                    return {id: instance.id, name: instance.name};\n                }),\n            };\n        });\n\n        const buildConditionFromDataAndInstance = (dataInstanceId: DataAndInstanceId, actorFk: number, decisionFk: number): ConditionTO => {\n            return {\n                id: -1,\n                actorFk: actorFk,\n                decisionFk: decisionFk,\n                dataFk: dataInstanceId.dataFk,\n                instanceFk: dataInstanceId.instanceId\n            };\n        };\n\n        const chaindecisions: ChainDecisionTO[] = (dataStoreObject.chaindecisions as ChainDecisionTO01[]).map(\n            (chainDecision) => {\n                return {\n                    id: chainDecision.id,\n                    name: chainDecision.name,\n                    chainFk: chainDecision.chainFk,\n                    conditions: chainDecision.dataAndInstaceIds.map(dataInstanceId => buildConditionFromDataAndInstance(dataInstanceId, chainDecision.actorFk, chainDecision.id)),\n                    stateFkAndStateConditions: [],\n                    ifGoTo: chainDecision.ifGoTo,\n                    elseGoTo: chainDecision.elseGoTo,\n                };\n            },\n        );\n\n        return {\n            version: version,\n            projectName: projectName,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n\n            actions: actions,\n            decisions: decisions,\n            datas: datas,\n            chaindecisions: chaindecisions,\n        };\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { ConditionTO } from \"../../access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO01 } from \"../davitVersio01/to/StoreTO01\";\nimport { DecisionTO02 } from \"./to/DecisionTO02\";\nimport { StoreTO02 } from \"./to/StoreTO02\";\n\nexport const DavitVersionMigrator02 = {\n    migrate(dataStoreObject: StoreTO01): StoreTO02 {\n        console.info(\"start migration to version 0.2\");\n        const actorZoom: number = DEFAULT_ZOOM;\n        const dataZoom: number = DEFAULT_ZOOM;\n\n        const decisions: DecisionTO[] = (dataStoreObject.decisions as DecisionTO02[]).map((decision) => {\n            const conditions: ConditionTO[] = [];\n            decision.dataAndInstaceIds.forEach((dataAndInsanceId) => {\n                conditions.push({\n                    decisionFk: decision.id,\n                    instanceFk: dataAndInsanceId.instanceId,\n                    dataFk: dataAndInsanceId.dataFk,\n                    actorFk: decision.actorFk,\n                    id: -1,\n                });\n            });\n\n            return {\n                actorFk: decision.actorFk,\n                conditions: conditions,\n                elseGoTo: decision.elseGoTo,\n                id: decision.id,\n                ifGoTo: decision.ifGoTo,\n                name: decision.name,\n                root: decision.root,\n                sequenceFk: decision.sequenceFk,\n                note: \"\",\n                stateFkAndStateConditions: [],\n            };\n        });\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: decisions,\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../../access/to/ActionTO\";\nimport { ActorTO } from \"../../access/to/ActorTO\";\nimport { ChainDecisionTO } from \"../../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../access/to/ChainTO\";\nimport { DataRelationTO } from \"../../access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../access/to/DataSetupTO\";\nimport { DataTO } from \"../../access/to/DataTO\";\nimport { DecisionTO } from \"../../access/to/DecisionTO\";\nimport { GeometricalDataTO } from \"../../access/to/GeometricalDataTO\";\nimport { GroupTO } from \"../../access/to/GroupTO\";\nimport { InitDataTO } from \"../../access/to/InitDataTO\";\nimport { PositionTO } from \"../../access/to/PositionTO\";\nimport { SequenceStepTO } from \"../../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../access/to/SequenceTO\";\nimport { StoreTO } from \"../../access/to/StoreTO\";\nimport { StoreTO02 } from \"../davitVersion02/to/StoreTO02\";\n\nexport const DavitVersionMigrator03 = {\n    migrate(dataStoreObject: StoreTO02): StoreTO {\n        console.info(\"start migration to version 0.3\");\n        const actorZoom: number = dataStoreObject.actorZoom;\n        const dataZoom: number = dataStoreObject.dataZoom;\n\n        return {\n            version: DAVIT_VERISON,\n            projectName: dataStoreObject.projectName,\n            actorZoom: actorZoom,\n            dataZoom: dataZoom,\n\n            actors: dataStoreObject.actors as ActorTO[],\n            groups: dataStoreObject.groups as GroupTO[],\n            geometricalDatas: dataStoreObject.geometricalDatas as GeometricalDataTO[],\n            positions: dataStoreObject.positions as PositionTO[],\n            designs: dataStoreObject.designs as DecisionTO[],\n            sequences: dataStoreObject.sequences as SequenceTO[],\n            steps: dataStoreObject.steps as SequenceStepTO[],\n            actions: dataStoreObject.actions as ActionTO[],\n            decisions: dataStoreObject.decisions as DecisionTO[],\n            datas: dataStoreObject.datas as DataTO[],\n            dataConnections: dataStoreObject.dataConnections as DataRelationTO[],\n            initDatas: dataStoreObject.initDatas as InitDataTO[],\n            dataSetups: dataStoreObject.dataSetups as DataSetupTO[],\n            chains: dataStoreObject.chains as ChainTO[],\n            chainlinks: dataStoreObject.chainlinks as ChainlinkTO[],\n            chaindecisions: dataStoreObject.chaindecisions as ChainDecisionTO[],\n            sequenceStates: [],\n            chainStates: [],\n        };\n    },\n};\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\nimport { DavitVersionMigrator01 } from \"./davitVersio01/DavitVersionMigrator01\";\nimport { DavitVersionMigrator02 } from \"./davitVersion02/DavitVersionMigrator02\";\nimport { DavitVersionMigrator03 } from \"./davitVersion03/DavitVersionMigrator03\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(\n                        DavitVersionMigrator01.migrate(dataStoreObject),\n                    )\n                );\n                break;\n            case 0.1:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(\n                    DavitVersionMigrator02.migrate(dataStoreObject));\n                break;\n            case 0.2:\n                migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            initDatas: [],\n            dataSetups: [],\n            chains: [],\n            chainlinks: [],\n            chaindecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n            objectStore = DavitVersionManager.updateProject(objectStore);\n        }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            initDatas: Array.from(this.data!.initDatas.values()),\n            dataSetups: Array.from(this.data!.dataSetups.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainlinks: Array.from(this.data!.chainlinks.values()),\n            chaindecisions: Array.from(this.data!.chaindecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceStateConstraintCheck(sequenceStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingSequenceState: boolean = Array.from(dataStore.decisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === sequenceStateId));\n        if (decisionIsUsingSequenceState) {\n            throw new Error(`Sequence state.error! state with id: ${sequenceStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteChainStateConstraintCheck(chainStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingChainState: boolean = Array.from(dataStore.chaindecisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === chainStateId));\n        if (decisionIsUsingChainState) {\n            throw new Error(`Sequence state.error! state with id: ${chainStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId,\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.dataFk === dataId && initData.instanceFk === instanceId,\n        );\n\n        if (actionExists || decisionExists || initDataExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        const initDataExists: boolean = Array.from(dataStore.initDatas.values()).some(\n            (initData) => initData.actorFk === actorId,\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists || initDataExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainlinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chaindecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainlinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public dataSetupFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataSetupTO extends AbstractTO {\n    constructor(public name = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DataSetupTO } from \"../to/DataSetupTO\";\nimport { InitDataTO } from \"../to/InitDataTO\";\n\nexport class DataSetupCTO {\n    constructor(public dataSetup: DataSetupTO = new DataSetupTO(), public initDatas: InitDataTO[] = []) {\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainlinkTO } from \"../to/ChainlinkTO\";\nimport { DataSetupCTO } from \"./DataSetupCTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainlinkCTO {\n    constructor(\n        public chainLink: ChainlinkTO = new ChainlinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public dataSetup: DataSetupCTO = new DataSetupCTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chaindecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chaindecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chaindecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chaindecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainlinkTO | undefined {\n        return dataStore.getDataStore().chainlinks.get(id);\n    },\n\n    findAll(): ChainlinkTO[] {\n        return Array.from(dataStore.getDataStore().chainlinks.values());\n    },\n\n    findAllForChain(id: number): ChainlinkTO[] {\n        const all: ChainlinkTO[] = this.findAll();\n        const filtered: ChainlinkTO[] = all.filter((link) => link.chainFk === id);\n        return filtered;\n    },\n\n    delete(step: ChainlinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainlinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainlinkTO): ChainlinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainlinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainlinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainStateConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataSetupRepository = {\n    find(dataSetupId: number): DataSetupTO | undefined {\n        return dataStore.getDataStore().dataSetups.get(dataSetupId);\n    },\n    findAll(): DataSetupTO[] {\n        return Array.from(dataStore.getDataStore().dataSetups.values());\n    },\n\n    save(dataSetup: DataSetupTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: DataSetupTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().dataSetups.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(dataSetup: DataSetupTO): DataSetupTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().dataSetups.delete(dataSetup.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataSetup;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const InitDataRepository = {\n    find(initDataId: number): InitDataTO | undefined {\n        return dataStore.getDataStore().initDatas.get(initDataId);\n    },\n\n    findAll(): InitDataTO[] {\n        return Array.from(dataStore.getDataStore().initDatas.values());\n    },\n\n    findAllForSetup(dataSetupId: number): InitDataTO[] {\n        const copyAllInitDatas: InitDataTO[] = DavitUtil.deepCopy(this.findAll());\n        return copyAllInitDatas.filter((initData) => initData.dataSetupFk === dataSetupId);\n    },\n\n    save(initData: InitDataTO) {\n        CheckHelper.nullCheck(initData, \"initData\");\n        let initDataTO: InitDataTO;\n        if (initData.id === -1) {\n            initDataTO = {\n                ...initData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            initDataTO = {...initData};\n        }\n        dataStore.getDataStore().initDatas.set(initDataTO.id!, initDataTO);\n        return initDataTO;\n    },\n\n    delete(id: number): InitDataTO {\n        const deletedInitData: InitDataTO | undefined = this.find(id);\n        if (!deletedInitData) {\n            throw new Error(\"Can't delete InitData. There is no Object with id: \" + id);\n        } else {\n            const success = dataStore.getDataStore().initDatas.delete(id);\n            if (!success) {\n                throw new Error(\"dataAccess.repository.error.notExists\");\n            }\n            return deletedInitData;\n        }\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceStateConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DataSetupTO } from \"../access/to/DataSetupTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { InitDataTO } from \"../access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DataSetupRepository } from \"../repositories/DataSetupRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { InitDataRepository } from \"../repositories/InitDataRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainlinkTO | ChainDecisionTO {\n        let root: ChainlinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllDataSetup(): DataSetupTO[] {\n        return DataSetupRepository.findAll();\n    },\n\n    findDatSetupCTO(dataId: number): DataSetupCTO {\n        return createDataSetupCTO(DataSetupRepository.find(dataId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataSetupTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        return DataSetupRepository.save(dataSetup);\n    },\n\n    saveDataSetupCTO(dataSetupCTO: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetupCTO, \"dataSetupCTO\");\n        const copyDataSetupCTO: DataSetupCTO = DavitUtil.deepCopy(dataSetupCTO);\n        const savedDataSetupTO: DataSetupTO = DataSetupRepository.save(dataSetupCTO.dataSetup);\n        // remove old init data.\n        InitDataRepository.findAllForSetup(dataSetupCTO.dataSetup.id).forEach((initData) =>\n            InitDataRepository.delete(initData.id),\n        );\n        // update and save new init data.\n        copyDataSetupCTO.initDatas.forEach((initData) => {\n            initData.dataSetupFk = savedDataSetupTO.id;\n            InitDataRepository.save(initData);\n        });\n        const savedInitDatas: InitDataTO[] = InitDataRepository.findAllForSetup(savedDataSetupTO.id);\n        return {dataSetup: savedDataSetupTO, initDatas: savedInitDatas};\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataSetupCTO {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        dataSetup.initDatas.forEach((initData) => InitDataRepository.delete(initData.id));\n        DataSetupRepository.delete(dataSetup.dataSetup);\n        return dataSetup;\n    },\n\n    // ----------------------------------------------- Init Data --------------------------------------------\n    findAllInitDatas(): InitDataTO[] {\n        return InitDataRepository.findAll();\n    },\n\n    findInitData(id: number): InitDataTO {\n        const initData: InitDataTO | undefined = InitDataRepository.find(id);\n        if (!initData) {\n            throw new Error(\"Could not find Init Data with id: \" + id);\n        } else {\n            return initData;\n        }\n    },\n\n    saveInitData(initData: InitDataTO): InitDataTO {\n        CheckHelper.nullCheck(initData, \"initData\");\n        return InitDataRepository.save(initData);\n    },\n\n    deleteInitData(id: number): InitDataTO {\n        return InitDataRepository.delete(id);\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainlinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainlinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainlinkTO): ChainlinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainlinkTO {\n        const link: ChainlinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createDataSetupCTO = (dataSetupTO: DataSetupTO | undefined): DataSetupCTO => {\n    CheckHelper.nullCheck(dataSetupTO, \"dataSetupTO\");\n    const initDatas: InitDataTO[] = InitDataRepository.findAllForSetup(dataSetupTO!.id);\n    return {\n        dataSetup: dataSetupTO!,\n        initDatas: initDatas,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainlinkTO | undefined): ChainlinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainlinkCTO = new ChainlinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const dataSetupTO: DataSetupTO | undefined = DataSetupRepository.find(link!.dataSetupFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (dataSetupTO && sequenceTO) {\n        const dataSetupCTO: DataSetupCTO = createDataSetupCTO(dataSetupTO);\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.dataSetup = dataSetupCTO;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainlinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainlinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { DataSetupCTO } from \"./access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"./access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DataSetupTO } from \"./access/to/DataSetupTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { InitDataTO } from \"./access/to/InitDataTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllDataSetups(): DataAccessResponse<DataSetupTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllDataSetup);\n    },\n\n    findDataSetupCTO(dataSetupId: number): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDatSetupCTO(dataSetupId));\n    },\n\n    saveDataSetup(dataSetup: DataSetupTO): DataAccessResponse<DataSetupTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetup(dataSetup));\n    },\n\n    deleteDataSetup(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDataSetup(dataSetup));\n    },\n\n    saveDataSetupCTO(dataSetup: DataSetupCTO): DataAccessResponse<DataSetupCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDataSetupCTO(dataSetup));\n    },\n\n    // ========================================= INIT DATA =========================================\n\n    findAllInitDatas(): DataAccessResponse<InitDataTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllInitDatas);\n    },\n\n    findInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.findInitData(id));\n    },\n\n    saveInitData(initData: InitDataTO): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveInitData(initData));\n    },\n\n    deleteInitData(id: number): DataAccessResponse<InitDataTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteInitData(id));\n    },\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainlinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainlinkTO): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainlinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainlinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faPencilAlt, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    dataSetups: DataSetupTO[];\n    chains: ChainTO[];\n    chainLinks: ChainlinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    dataSetups: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setDataSetups: (state, action: PayloadAction<DataSetupTO[]>) => {\n            state.dataSetups = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainlinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        }\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDataSetupsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupTO[]> = DataAccess.findAllDataSetups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDataSetups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadDataSetupsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainlinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectDataSetups: (state: RootState): DataSetupTO[] => state.masterData.dataSetups,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectDataSetupToById: (id: number) => {\n        return (state: RootState): DataSetupTO | null => {\n            return state.masterData.dataSetups.find((dataSetup) => dataSetup.id === id) || null;\n        };\n    },\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadDataSetupsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    errorStates: SequenceStateTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    falseStates: SequenceStateTO[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors: errors, errorStates: []};\n    },\n\n    executeDecisionCheck(decision: DecisionTO, actorDatas: ActorData[], states: SequenceStateTO[]): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        const falseStates: SequenceStateTO[] = [];\n\n        decision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n            const stateToCheck: SequenceStateTO | undefined = states.find(state => state.id === stateFkAndStateCondition.stateFk);\n            if (stateToCheck) {\n                if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                    falseStates.push(stateToCheck);\n                    goTo = decision.elseGoTo;\n                }\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo, falseStates: falseStates};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        dataSetup: DataSetupCTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && dataSetup) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = dataSetup.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                            falseStates: result.errorStates\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                            sequence.sequenceStates,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                            falseStates: result.falseStates,\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                        falseStates: terminalResult.errorStates,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {\n        stepId: \"root\",\n        actorDatas: result.actorDatas,\n        type: \"INIT\",\n        errors: result.errors,\n        falseStates: result.errorStates\n    };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    dataSetup: DataSetupCTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainlinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainlinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainlinkCTO = step as ChainlinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.dataSetup,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            dataSetup: link.dataSetup,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainlinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas, sequenceChain.chainStates);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[], chainStates: ChainStateTO[]): GoToChain => {\n    let goTo: GoToChain | undefined;\n    // check conditions\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n\n    // check states\n    chainDecision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n        const stateToCheck: ChainStateTO | undefined = chainStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n        if (stateToCheck) {\n            if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                goTo = chainDecision.elseGoTo;\n            }\n        }\n    });\n\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainlinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainlinkCTO | null => {\n    let rootLink: ChainlinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainlinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainlinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainlinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainlinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainlinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../dataAccess/access/cto/ChainlinkCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedDataSetup: DataSetupCTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedDataSetup: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedDataSetup) {\n                calcSequenceAndSetState(action.payload, state.selectedDataSetup, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedDataSetup) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedDataSetup, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedDataSetup = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedDataSetup: (state, action: PayloadAction<DataSetupCTO | null>) => {\n            state.selectedDataSetup = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, dataSetup: DataSetupCTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, dataSetup);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst calcModelsThunk = (): AppThunk => (dispatch, getState) => {\n    if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedChain !== null &&\n        getRoot(getState().sequenceModel.selectedChain || null)\n    ) {\n        dispatch(SequenceModelActions.setCurrentChain(getState().sequenceModel.selectedChain!.chain));\n        dispatch(\n            SequenceModelSlice.actions.setCalcChain(\n                SequenceChainService.calculateChain(getState().sequenceModel.selectedChain),\n            ),\n        );\n    } else if (\n        getState().edit.mode === Mode.VIEW &&\n        getState().sequenceModel.selectedSequenceModel !== null &&\n        getState().sequenceModel.selectedDataSetup !== null\n    ) {\n        dispatch(\n            SequenceModelActions.setCurrentSequence(getState().sequenceModel.selectedSequenceModel!.sequenceTO.id),\n        );\n        dispatch(SequenceModelActions.setCurrentDataSetup(getState().sequenceModel.selectedDataSetup!.dataSetup.id));\n    }\n};\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst getDataSetupCTOFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedDataSetup(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst getSequenceCTOFromBackend = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainlinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectDataSetup: (state: RootState): DataSetupCTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentDataSetup(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedDataSetup && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedDataSetup?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n\n    selectFalseStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.falseStates || [];\n    },\n\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: getSequenceCTOFromBackend,\n    setCurrentDataSetup: getDataSetupCTOFromBackend,\n    resetCurrentDataSetup: SequenceModelSlice.actions.setSelectedDataSetup(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    calcChain: calcModelsThunk,\n};\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentDataSetup(state: SequenceModelState): DataSetupCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].dataSetup || null\n        : state.selectedDataSetup;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditDataSetup } from \"./thunks/DataSetupThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditInitData } from \"./thunks/InitDataThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_DATASETUP = \"EDIT_DATASETUP\",\n    EDIT_DATASETUP_INITDATA = \"EDIT_DATASETUP_INIT DATA\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | DataSetupCTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainlinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainLinkToEdit: (state, action: PayloadAction<ChainlinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setDataSetupToEdit: (state, action: PayloadAction<DataSetupCTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set dataSetup to edit in mode: \" + state.mode);\n            }\n        },\n        setInitDataToEdit: (state, action: PayloadAction<InitDataTO>) => {\n            if (state.mode === Mode.EDIT_DATASETUP_INITDATA) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set initData to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n    dispatch(SequenceModelActions.calcChain());\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        // TODO: change CTO to TO.\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(sequenceId));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainlinkTO,\n    from?: ChainlinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP_INITDATA));\n    if (initData.id !== -1) {\n        const response: DataAccessResponse<InitDataTO> = DataAccess.findInitData(initData.id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setInitDataToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditInitData.save(initData));\n    }\n};\n\nconst setModeToEditDataSetupThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATASETUP));\n    if (id) {\n        const response: DataAccessResponse<DataSetupCTO> = DataAccess.findDataSetupCTO(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setDataSetupToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditDataSetup.create());\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainlinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainlinkTO).dataSetupFk\n            ? (state.edit.objectToEdit as ChainlinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)\n            ? (state.edit.objectToEdit as SequenceTO)\n            : null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectDataSetupToEdit: (state: RootState): DataSetupCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP && (state.edit.objectToEdit as DataSetupCTO).dataSetup\n            ? (state.edit.objectToEdit as DataSetupCTO)\n            : null;\n    },\n    selectInitDataToEdit: (state: RootState): InitDataTO | null => {\n        return state.edit.mode === Mode.EDIT_DATASETUP_INITDATA && (state.edit.objectToEdit as InitDataTO).dataSetupFk\n            ? (state.edit.objectToEdit as InitDataTO)\n            : null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editDataSetup: setModeToEditDataSetupThunk,\n        editInitData: setModeToEditInitDataThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainlinkTO, from?: ChainlinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainlinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainlinkTO => {\n    const response: DataAccessResponse<ChainlinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainlinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainlinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainlinkTO).dataSetupFk !== undefined) {\n                (from as ChainlinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainlinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainlinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataSetupThunk = (): AppThunk => (dispatch) => {\n    const dataSetup: DataSetupCTO = new DataSetupCTO();\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n    dispatch(setDataSetupThunk(response.object));\n};\n\nconst saveDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.saveDataSetupCTO(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst deleteDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataSetupCTO> = DataAccess.deleteDataSetup(dataSetup);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setDataSetupThunk = (dataSetup: DataSetupCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP) {\n        dispatch(editActions.setDataSetupToEdit(dataSetup));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set dataSetup to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDataSetup = {\n    save: saveDataSetupThunk,\n    delete: deleteDataSetupThunk,\n    update: setDataSetupThunk,\n    create: createDataSetupThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveInitDataThunk = (initData: InitDataTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.saveInitData(initData);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editInitData(response.object));\n};\n\nconst deleteInitDataThunk = (initDataId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<InitDataTO> = DataAccess.deleteInitData(initDataId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDataSetupsFromBackend());\n};\n\nconst setInitDataToEditThunk = (initData: InitDataTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_DATASETUP_INITDATA) {\n        dispatch(editActions.setInitDataToEdit(initData));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set initData to edit in mode: \" + mode));\n    }\n};\n\nexport const EditInitData = {\n    save: saveInitDataThunk,\n    delete: deleteInitDataThunk,\n    update: setInitDataToEditThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequence(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && <FontAwesomeIcon icon={iconName} />}\n            {children}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps extends DavitButtonProps {\n    show?: boolean\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show} = props;\n\n    const [showMore, setShowMore] = useState(false);\n\n    useEffect(() => {\n        if (show !== undefined) {\n            setShowMore(show);\n        }\n    }, [show]);\n\n    const onToggle = () => {\n        setShowMore(!showMore);\n        onClick();\n    };\n\n    return <DavitIconButton onClick={onToggle}\n                            size={ElementSize.tiny}\n                            iconName={showMore ? faAngleDown : faAngleRight}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainlinkTO } from \"../../../dataAccess/access/to/ChainlinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainlinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainlinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainlinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainlinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainlinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataSetupTO } from \"../../../dataAccess/access/to/DataSetupTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataSetupDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataSetupLabelDropDownProps {\n    onSelect: (dataSetup: DataSetupTO | undefined) => void;\n    label: string;\n}\n\nexport const DataSetupDropDown: FunctionComponent<DataSetupDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            value={value?.toString()}\n            clearable={true}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n            placeholder={placeholder}\n        />\n    );\n};\n\nexport const DataSetupLabelDropDown: FunctionComponent<DataSetupLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {dataSetups, selectDataSetup, dataSetupToOption} = useDataSetupDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={dataSetups.map(dataSetupToOption)}\n            label={label}\n            onSelect={(setup) => onSelect(selectDataSetup(Number(setup.value), dataSetups))}\n        />\n    );\n};\n\nconst useDataSetupDropDownViewModel = () => {\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n\n    const dataSetupToOption = (dataSetup: DataSetupTO): DavitDropDownItemProps => {\n        return {\n            key: dataSetup.id,\n            value: dataSetup.id.toString(),\n            text: dataSetup.name,\n        };\n    };\n\n    const selectDataSetup = (dataSetupId: number, dataSetups: DataSetupTO[]): DataSetupTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataSetups) && !DavitUtil.isNullOrUndefined(dataSetupId)) {\n            return dataSetups.find((dataSetup) => dataSetup.id === dataSetupId);\n        }\n        return undefined;\n    };\n\n    return {dataSetups, dataSetupToOption, selectDataSetup};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton } from \"../atomic/buttons\";\nimport { DavitNoteModal } from \"../atomic/modals/DavitNoteModal\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? faComment : faCommentDots}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./ControlPanel.css\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"headerGrid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\nimport { StateFkAndStateCondition } from \"./DecisionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainlinkTO) => {\n        let chainLinkToEdit: ChainlinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainlinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveStateFkAndStateCondition = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveStateFkAndStateCondition(newChainState);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        editChain,\n        saveStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DataSetupTO } from \"../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { GroupTO } from \"../../../../../../../dataAccess/access/to/GroupTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport { ActorDropDownLabel } from \"../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { ChainDropDownButton } from \"../../../../../../atomic/dropdowns/ChainDropDown\";\nimport { DataLabelDropDown } from \"../../../../../../atomic/dropdowns/DataDropDown\";\nimport { DataSetupLabelDropDown } from \"../../../../../../atomic/dropdowns/DataSetupDropDown\";\nimport { RelationLabelDropDown } from \"../../../../../../atomic/dropdowns/RelationDropDown\";\nimport { SequenceLabelDropDown } from \"../../../../../../atomic/dropdowns/SequenceDropDown\";\nimport { AddOrEdit } from \"../../../../../../molecules/AddOrEdit\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddDataSetup,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Data - Setup\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddDataSetup()}\n                           dropDown={<DataSetupLabelDropDown onSelect={editOrAddDataSetup}\n                                                             label=\"Data-Setup\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddGroup: (group?: GroupTO) => dispatch(EditActions.setMode.editGroup(group)),\n        editOrAddDataSetup: (dataSetup?: DataSetupTO) =>\n            dispatch(EditActions.setMode.editDataSetup(dataSetup ? dataSetup.id : undefined)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport interface StateFkAndStateCondition {\n    stateFk: number,\n    stateCondition: boolean,\n}\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveSequenceState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createSequenceState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveSequenceState(newSequenceState);\n        }\n    };\n\n    const deleteSequenceState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveSequenceState,\n        deleteSequenceState,\n        createSequenceState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ChainStateDropDownProps {\n    onSelect: (chainState: ChainStateTO | undefined) => void;\n    chainFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const ChainStateDropDown: FunctionComponent<ChainStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainFk} = props;\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(chainFk));\n\n    const chainStateToDavitDropDownItem = (chainState: ChainStateTO): DavitDropDownItemProps => {\n        return {key: chainState.id, value: chainState.id.toString(), text: chainState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={chainStates.map(chainStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(chainStates.find(chainState => chainState.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"../atomic\";\n\ninterface ToggleButtonProps {\n    toggleCallback: (isLeft: boolean) => void;\n    isLeft: boolean;\n    leftLabel: string;\n    rightLabel: string;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\n    const {toggleCallback, isLeft, leftLabel, rightLabel} = props;\n\n    return (\n        <div className=\"flex flex-center\">\n            <DavitButton\n                className={isLeft ? \" active\" : \"\"}\n                onClick={() => toggleCallback(true)}\n            >{leftLabel}</DavitButton>\n            <DavitButton\n                className={isLeft ? \"\" : \" active\"}\n                onClick={() => toggleCallback(false)}\n            >{rightLabel}</DavitButton>\n        </div>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { ChainStateDropDown } from \"../../../../../../../atomic/dropdowns/ChainStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectChainState = (chainState: ChainStateTO | undefined, index: number) => {\n        if (chainState) {\n            updateStateFkAndStateCondition({stateFk: chainState.id, stateCondition: chainState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndStateCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndStateCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <ChainStateDropDown onSelect={(stateFkAndStateCondition) => selectChainState(stateFkAndStateCondition, index)}\n                                            chainFk={chainId}\n                                            value={stateFkAndStateCondition.stateFk.toString()}\n                                            placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndStateCondition, index, is)}\n                                      isLeft={stateFkAndStateCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FLASE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndStateCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainlinkTO = new ChainlinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateChainDecision(copyDecision);\n            }\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DataSetupDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentDataSetup,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setDataSetup,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                    <DataSetupDropDown\n                        onSelect={(dataSetup) => setDataSetup(dataSetup)}\n                        placeholder=\"Select Data Setup ...\"\n                        value={currentDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainlinkTO } from \"../../../../../../../../dataAccess/access/to/ChainlinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainlinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainlinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainlinkTO = new ChainlinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (dataSetup?: DataSetupTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (dataSetup) {\n                copyChainLinkToEdit.dataSetupFk = dataSetup.id;\n            } else {\n                copyChainLinkToEdit.dataSetupFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainlinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentDataSetup: chainLinkToEdit?.dataSetupFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport { ToggleButton } from \"../../../../../../../../molecules/ToggleButton\";\nimport \"./StateTable.css\";\n\ninterface StateTableProps {\n    statesToEdit: StateTO[];\n    addStateCallback: () => void;\n    changeName: (name: string, stateId: number) => void;\n    removeStateCallback: (stateId: number) => void;\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateTable: FunctionComponent<StateTableProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback} = props;\n\n    const buildStateTableRow = (state: StateTO, index: number): JSX.Element => {\n\n        const inputClasses: string = state.label === \"\" ? \"border border-warning border-animation\" : \"\";\n\n        return (\n            <tr className=\"flex content-space-between fluid\"\n                key={index}\n            >\n                <td className={inputClasses}>\n                    <DavitTextInput\n                        onChangeCallback={(name) => changeName(name, state.id)}\n                        placeholder=\"State Name\"\n                        value={state.label}\n                        focus\n                    />\n                </td>\n                <td className=\"flex flex-center\">\n\n                    <ToggleButton toggleCallback={(is) => setActiveCallback(state, is)}\n                                  isLeft={state.isState}\n                                  leftLabel=\"TRUE\"\n                                  rightLabel=\"FLASE\"\n                    />\n\n                </td>\n                <td className=\"flex flex-center\">\n                    <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                       noConfirm\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <table className={\"border table\"}>\n\n            <thead className=\"flex content-space-between padding-medium\">\n\n            <tr className=\"flex content-space-between fluid\">\n                <td className=\"flex flex-center\">Name</td>\n                <td className=\"flex flex-center\">Default</td>\n                <td className={\"flex flex-center\"}><DavitAddButton onClick={addStateCallback} /></td>\n            </tr>\n\n            </thead>\n\n            <tbody className=\"body\">\n            {statesToEdit.map((state, index) => buildStateTableRow(state, index))}\n            </tbody>\n\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {\n        saveStateFkAndStateCondition,\n        editChain,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        id\n    } = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveStateFkAndStateCondition);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveStateFkAndStateCondition(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveStateFkAndStateCondition(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={chainStates}\n                            addStateCallback={createStateFkAndStateCondition}\n                            removeStateCallback={deleteStateFkAndStateCondition}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataSetupViewModel } from \"../viewmodels/DataSetupViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataSetupFormProps {\n\n}\n\nexport const DataSetupForm: FunctionComponent<DataSetupFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        createAnother,\n        updateDataSetup,\n        createInitData,\n        note,\n        saveNote,\n        initDatas,\n        saveInitData,\n        deleteInitData,\n    } = useDataSetupViewModel();\n\n    const buildActorDataTableRow = (initData: InitDataTO): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={copyInitData.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveInitData(copyInitData);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveInitData(copyInitData);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyInitData.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteInitData(copyInitData);\n                        }}\n                                                                      noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Data Setup</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Data Setup Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateDataSetup}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\", minHeight: \"30vh\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createInitData} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {initDatas.map(buildActorDataTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDataSetup} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveDataSetup} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataSetupCTO } from \"../../../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { InitDataTO } from \"../../../../../../../../dataAccess/access/to/InitDataTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditDataSetup } from \"../../../../../../../../slices/thunks/DataSetupThunks\";\nimport { EditInitData } from \"../../../../../../../../slices/thunks/InitDataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataSetupViewModel = () => {\n    const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n    const dispatch = useDispatch();\n    const [actorToEdit, setActorToEdit] = useState<ActorCTO | null>(null);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit dataSetup without dataSetupToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dataSetupToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.name = name;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    const saveDataSetup = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n\n            if (dataSetupToEdit!.dataSetup.name !== \"\") {\n                const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n                copyDataSetup!.initDatas = copyDataSetup!.initDatas!.filter(initData => initData.dataFk !== -1 && initData.instanceFk !== -1 && initData.actorFk !== -1);\n                dispatch(EditDataSetup.save(copyDataSetup!));\n            } else {\n                deleteDataSetup();\n            }\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteDataSetup = () => {\n        dispatch(EditDataSetup.delete(dataSetupToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editDataSetup());\n    };\n\n    const updateDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        dispatch(EditDataSetup.save(copyDataSetup));\n    };\n\n    const copyDataSetup = () => {\n        const copyDataSetup: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n        copyDataSetup.dataSetup.name = dataSetupToEdit?.dataSetup.name + \"-copy\";\n        copyDataSetup.dataSetup.id = -1;\n        copyDataSetup.initDatas.forEach((initData) => {\n            initData.id = -1;\n            initData.dataSetupFk = -1;\n        });\n        dispatch(EditActions.setMode.editDataSetup(copyDataSetup.dataSetup.id));\n    };\n\n    const getDatas = (): number[] => {\n        const dataIds: number[] = [];\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && !DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dataSetupToEdit!.initDatas\n                .filter((initData) => initData.actorFk === actorToEdit!.actor.id)\n                .forEach((initData) => dataIds.push(initData.dataFk));\n        }\n        return dataIds;\n    };\n\n    const editInitData = (initData: InitDataTO | undefined) => {\n        if (initData) {\n            dispatch(EditActions.setMode.editInitData(initData));\n        }\n    };\n\n    const createInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            const initData: InitDataTO = new InitDataTO();\n            initData.dataSetupFk = dataSetupToEdit!.dataSetup.id;\n            dispatch(EditInitData.save(initData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveInitData = (initData: InitDataTO) => {\n        console.info(initData);\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n            console.info(copyInitData);\n            dispatch(EditInitData.save(copyInitData));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const deleteInitData = (initData: InitDataTO) => {\n        if (!DavitUtil.isNullOrUndefined(initData) && !DavitUtil.isNullOrUndefined(dataSetupToEdit)) {\n            dispatch(EditInitData.delete(initData.id));\n            dispatch(EditActions.setMode.editDataSetup(dataSetupToEdit!.dataSetup?.id));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataSetupToEdit) && text !== \"\") {\n            const copyDataSetupToEdit: DataSetupCTO = DavitUtil.deepCopy(dataSetupToEdit);\n            copyDataSetupToEdit.dataSetup.note = text;\n            dispatch(EditDataSetup.update(copyDataSetupToEdit));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataSetupToEdit?.dataSetup.name || \"\"),\n        name: dataSetupToEdit?.dataSetup.name,\n        changeName,\n        saveDataSetup,\n        deleteDataSetup,\n        copyDataSetup,\n        setActorToEdit,\n        getInitDatas: dataSetupToEdit?.initDatas ? dataSetupToEdit.initDatas : [],\n        getDatas,\n        createAnother,\n        updateDataSetup,\n        editInitData,\n        createInitData,\n        note: dataSetupToEdit ? dataSetupToEdit.dataSetup.note : \"\",\n        saveNote,\n        initDatas: dataSetupToEdit?.initDatas || [],\n        saveInitData,\n        deleteInitData,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataSetupForm } from \"../forms/DataSetupForm\";\n\ninterface EditDataSetupModalProps {\n\n}\n\nexport const EditDataSetupModal: FunctionComponent<EditDataSetupModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataSetupForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceStateDropDownProps {\n    onSelect: (sequenceState: SequenceStateTO | undefined) => void;\n    sequenceFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const SequenceStateDropDown: FunctionComponent<SequenceStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, sequenceFk} = props;\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(sequenceFk));\n\n    const sequenceStateToDavitDropDownItem = (sequenceState: SequenceStateTO): DavitDropDownItemProps => {\n        return {key: sequenceState.id, value: sequenceState.id.toString(), text: sequenceState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequenceStates.map(sequenceStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(sequenceStates.find(state => state.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionDropDown,\n    Form,\n    GoToOptionDropDown,\n    InstanceDropDown,\n    StepDropDown\n} from \"../../../../../../../atomic\";\nimport { SequenceStateDropDown } from \"../../../../../../../atomic/dropdowns/SequenceStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        sequenceFk,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectSequenceState = (sequenceState: SequenceStateTO | undefined, index: number) => {\n        if (sequenceState) {\n            updateStateFkAndStateCondition({stateFk: sequenceState.id, stateCondition: sequenceState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <SequenceStateDropDown onSelect={(selectedState) => selectSequenceState(selectedState, index)}\n                                               sequenceFk={sequenceFk}\n                                               value={stateFkAndCondition.stateFk.toString()}\n                                               placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndCondition, index, is)}\n                                      isLeft={stateFkAndCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FALSE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>Actor</td>\n                            <td>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO, StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequence(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateDecision(copyDecision);\n            }\n        }\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateDecision(copyDecision);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateDecision(copyDecision);\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        deleteStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        sequenceFk: decisionToEdit?.sequenceFk || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateTable } from \"./fragments/StateTable\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {\n        saveSequenceState,\n        editSequence,\n        createSequenceState,\n        deleteSequenceState,\n        id,\n    } = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveSequenceState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveSequenceState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveSequenceState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateTable statesToEdit={sequenceStates}\n                            addStateCallback={createSequenceState}\n                            removeStateCallback={deleteSequenceState}\n                            setActiveCallback={setIsState}\n                            changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitEditButton } from \"../../../../../../../atomic/buttons/DavitEditButton\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic/buttons/DavitShowMoreButton\";\nimport { DecisionDropDown } from \"../../../../../../../atomic/dropdowns/DecisionDropDown\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic/dropdowns/GoToOptionDropDown\";\nimport { StepDropDown } from \"../../../../../../../atomic/dropdowns/StepDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td style={{textAlign: \"end\"}}>\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className={\"border\"}\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr>\n                    <td style={{textAlign: \"center\"}}>Action</td>\n                    <td style={{textAlign: \"end\"}}>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequence(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequence(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDataSetupModal } from \"./fragments/modals/EditDataSetupModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_DATASETUP:\n                return <EditDataSetupModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataSetupCTO } from \"../../../../../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceCTO } from \"../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataSetupTO } from \"../../../../../../dataAccess/access/to/DataSetupTO\";\nimport { SequenceTO } from \"../../../../../../dataAccess/access/to/SequenceTO\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../utils/DavitUtil\";\nimport { useStepAndLinkNavigation } from \"../../../../../../utils/WindowUtil\";\nimport { ChainDropDown, DataSetupDropDown, SequenceDropDown } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\nimport { ViewNavigator } from \"./fragments/ViewNavigator\";\n\nexport interface ControlPanelViewMenuProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelViewMenu: FunctionComponent<ControlPanelViewMenuProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup,\n        currentSequence,\n        currentChain,\n        selectChain,\n    } = useControlPanelViewMenuViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Data - Setup\">\n                <DataSetupDropDown\n                    onSelect={selectDataSetup}\n                    placeholder=\"Select Data Setup ...\"\n                    value={currentDataSetup}\n                />\n            </OptionField>\n\n            <OptionField label=\"SEQUENCE\">\n                <SequenceDropDown onSelect={selectSequence}\n                                  value={currentSequence}\n                />\n            </OptionField>\n\n            <OptionField label=\"CHAIN\"\n                         divider={true}\n            >\n                <ChainDropDown onSelect={selectChain}\n                               value={currentChain}\n                />\n            </OptionField>\n\n            <OptionField label=\"STEP\"\n                         divider={true}\n            >\n                <ViewNavigator fastBackward={linkBack}\n                               fastForward={linkNext}\n                               backward={stepBack}\n                               forward={stepNext}\n                               index={getIndex()}\n                />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelViewMenuViewModel = () => {\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedDataSetup: DataSetupCTO | null = useSelector(sequenceModelSelectors.selectDataSetup);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequence(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const selectDataSetup = (dataSetup: DataSetupTO | undefined): void => {\n        if (DavitUtil.isNullOrUndefined(dataSetup)) {\n            dispatch(SequenceModelActions.resetCurrentDataSetup);\n        } else {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup!.id));\n        }\n    };\n\n    const getDataSetupName = (): string => {\n        if (selectedDataSetup) {\n            return \" * \" + selectDataSetup.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getSequenceName = (): string => {\n        if (sequence) {\n            return \" * \" + sequence.sequenceTO.name;\n        } else {\n            return \"\";\n        }\n    };\n\n    const getStepName = (): string => {\n        if (stepIndex && sequence) {\n            return (\n                \" * \" +\n                sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepIndex)?.sequenceStepTO.name\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    return {\n        label: \"VIEW\" + getDataSetupName() + getSequenceName() + getStepName(),\n        sequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        selectDataSetup,\n        currentDataSetup: selectedDataSetup?.dataSetup.id || -1,\n        currentSequence: sequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewMenu } from \"./fragments/view/ControllPanelViewMenu\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewMenu hidden={!mode.includes(\"VIEW\")} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editDataSetup());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToView, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + (mode.includes(Mode.EDIT.toString()) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW ? \" active\" : \"\")}\n                             onClick={setModeToView}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToView = () => {\n        dispatch(EditActions.setMode.view());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToView,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetupEdit: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            const actorDatasFromInitData: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetupEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n            if (actorDatasFromInitData) {\n                actorDatas.push(actorDatasFromInitData);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId: initData.actorFk,\n                name: getDataNameById(initData.dataFk, initData.instanceFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules/card/DavitCard\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataSetupCTO } from \"../../dataAccess/access/cto/DataSetupCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { InitDataTO } from \"../../dataAccess/access/to/InitDataTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const dataSetupToEdit: DataSetupCTO | null = useSelector(editSelectors.selectDataSetupToEdit);\n        const initDataToEdit: InitDataTO | null = useSelector(editSelectors.selectInitDataToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n            const actorDataFromInitDataToEdit: ViewFragmentProps | undefined = initDataToEdit\n                ? mapInitDataToActorData(initDataToEdit)\n                : undefined;\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n            const actorDatasFromDataSetup: ViewFragmentProps[] = dataSetupToEdit\n                ? dataSetupToEdit.initDatas.map(mapInitDataToActorData)\n                : [];\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDatasFromDataSetup);\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n            if (actorDataFromInitDataToEdit) {\n                actorDatas.push(actorDataFromInitDataToEdit);\n            }\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n            return {\n                parentId:\n                    initData.instanceFk > -1\n                        ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n                        : initData.dataFk,\n                name: getActorNameById(initData.actorFk),\n                state: ActorDataState.NEW,\n            };\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab active\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div style={{display: \"flex\"}}>{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainlinkCTO } from \"../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { TabFragment } from \"../tableModel/fragments/TabFragment\";\nimport { TabGroupFragment } from \"../tableModel/fragments/TabGroupFragment\";\nimport \"./FlowChart.css\";\nimport { FlowChartlabel } from \"./fragments/FlowChartlabel\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainName,\n            sequenceName,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() && <>\n                    <div className=\"flowChartHeader\">\n                        {chain && (\n                            <TabGroupFragment label=\"Mode\"\n                                              style={{backgroundColor: \"var(--background-color-header)\"}}\n                            >\n                                <TabFragment label=\"Chain\"\n                                             isActive={showChain}\n                                             onClick={() => setShowChain(true)}\n                                />\n                                <TabFragment label=\"Sequence\"\n                                             isActive={!showChain}\n                                             onClick={() => setShowChain(false)}\n                                />\n                            </TabGroupFragment>\n                        )}\n                        <div style={{marginLeft: \"auto\"}}>\n                            <FlowChartlabel label=\"CHAIN:\"\n                                            text={chainName}\n                            />\n                            <FlowChartlabel label=\"SEQU.:\"\n                                            text={sequenceName}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"flowChart padding-small\"\n                         style={{height: tableHeight}}\n                    >\n                        {!showChain && sequence && buildFlowChart()}\n                        {showChain && chain && buildChainFlowChart()}\n                    </div>\n                </>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainlinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainlinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainlinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainlinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainlinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainlinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainlinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n    showFalseStateTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n        showFalseStateTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Error Actions\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n                {\n                    label: \"False States\",\n                    identifier: ActiveTab.falseState,\n                    condition: showFalseStateTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.dataSetup.dataSetup?.name || \"Data setup name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ERROR\", \"STATE FLASE\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n    const hasFalseState = step.falseStates.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n            hasFalseState ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceStateTO } from \"../../../../../dataAccess/access/to/SequenceStateTO\";\n\nexport const useGetFalseState = (errorStates: SequenceStateTO[]) => {\n\n    const bodyData: DavitTableRowData[] = errorStates.map(createFalseStateColumn);\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"State\", \"Is\", \"should\"];\n\nconst createFalseStateColumn = (state: SequenceStateTO): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [state.label, state.isState.toString(), (!state.isState).toString()],\n        trClass,\n        actions: [],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainlinkCTO,\n    selectedChainlinks: ChainlinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.dataSetup.dataSetup.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { DataSetupTO } from \"../../../../../dataAccess/access/to/DataSetupTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: DataSetupTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editDataSetup(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentDataSetup(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: DataSetupTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequence(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequence(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainlinkCTO } from \"../../../../dataAccess/access/cto/ChainlinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DataSetupTO } from \"../../../../dataAccess/access/to/DataSetupTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetFalseState } from \"../tables/calculated/useGetFalseState\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n    falseState = \"falseState\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        showStateErrorTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                    showFalseStateTab={showStateErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: DataSetupTO[] = useSelector(masterDataSelectors.selectDataSetups);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainlinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n    const selectedFalseStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectFalseStates);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n    const calcFalseState = useGetFalseState(selectedFalseStates);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            case ActiveTab.falseState:\n                return calcFalseState;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        showStateErrorTab: selectedFalseStates.length > 0,\n        activeTab,\n        setActiveTab,\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";"],"sourceRoot":""}