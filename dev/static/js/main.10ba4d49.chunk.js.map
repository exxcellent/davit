{"version":3,"sources":["assets/exxcellent_logo_200.png","dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainLinkTO.ts","dataAccess/access/to/SequenceConfigurationTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainLinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainConfigurationRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/SequenceConfigurationRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","slices/SequenceModelSlice.ts","services/SequenceChainService.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/atomic/dropdowns/ChainStateDropDown.tsx","components/molecules/ToggleButton.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateList.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","components/atomic/dropdowns/SequenceStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","components/atomic/icons/NoteIcon.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ControlPanelCalculationView.tsx","components/organisms/controllPanel/presentation/fragments/view/viewmodels/ViewViewModel.tsx","dataAccess/access/to/InitDataTO.ts","dataAccess/access/to/ChainConfigurationTO.tsx","slices/thunks/ChainConfigurationThunks.ts","slices/thunks/SequenceConfigurationThunks.ts","components/atomic/buttons/DavitToggleButton.tsx","components/atomic/dropdowns/ChainConfigurationDropDown.tsx","components/atomic/dropdowns/SequenceConfigurationDropDown.tsx","components/organisms/configurationPanel/fragments/ConfigurationSelectButton.tsx","components/organisms/configurationPanel/fragments/SaveConfigurationModal.tsx","components/organisms/configurationPanel/fragments/StateConfigurationView.tsx","components/organisms/configurationPanel/Configuration.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ControlPanelConfiguration.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewController.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","components/molecules/StateView.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx"],"names":["module","exports","DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","sequenceConfigurations","chainConfigurations","chains","chainLinks","chainDecisions","sequenceStates","chainStates","DavitVersionManager","dataStoreObject","console","info","project","isSameVersion","undefined","warn","DataStore","data","instance","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","forEach","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","id","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","name","valid","GoToTypesChain","ConstraintsHelper","sequenceStateId","some","decision","stateFkAndStateConditions","stateFkAndCondition","stateFk","chainStateId","dataId","dataRelationExists","relation","data1Fk","data2Fk","actionExist","actorData","dataFk","decisionExists","conditions","condition","chainDecisionExists","chainDecision","instanceId","actionExists","action","instanceFk","actorId","sendingActorFk","receivingActorFk","actorFk","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","sequenceStepFk","actionType","constraintDecision","ifGoTo","elseGoTo","length","sequenceId","stepExists","sequenceFk","dec","geometDataId","actorExists","actor","geometricalDataFk","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","map","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","instances","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainLinkTO","sequenceConfigurationFk","ERROR","root","chainFk","SequenceConfigurationTO","note","initDatas","stateValues","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainLinkCTO","chainLink","sequence","sequenceConfiguration","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainConfigurationRepository","chainConfiguration","chainConfigurationTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","SequenceConfigurationRepository","sequenceConfigurationTO","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","index","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllSequenceConfigurations","findSequenceConfigurationTO","saveSequenceConfigurationTO","deleteSequenceConfiguration","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","findAllChainConfigurations","findChainConfigurationTO","deleteChainConfiguration","saveChainConfigurationTO","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","push","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","play","faPlay","noteEmpty","faComment","noteFilled","faCommentDots","faSave","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","decisionFk","DataInstanceTO","ActorDataState","MasterDataSlice","relations","setActors","setGroups","setDatas","setRelations","setSequences","setSequenceConfigurations","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","setChainConfigurations","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadSequenceConfigurationsFromBackend","loadChainConfigurationsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","config","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","falseStates","trueStates","states","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","configuredStates","stateValue","sequenceStateFk","isState","stateFkAndStateCondition","stateToCheck","stateCondition","findIndex","indexActorDataToEdit","ViewLevel","SequenceService","configuration","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","triggerText","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","getInitialState","selectedSequenceModel","selectedSequenceConfiguration","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","selectedChainConfiguration","viewLevel","SequenceModelSlice","setViewLevel","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setSelectedChainConfiguration","setCalcChain","setSelectedSequenceConfiguration","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","initData","SequenceModelActions","setCurrentSequence","setCurrentSequenceById","setCurrentSequenceByIdWithStates","setCurrentSequenceConfigurationById","dataSetupId","setCurrentSequenceConfiguration","resetCurrentSequenceConfiguration","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","resetAll","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","setCurrentChainConfiguration","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","DataTO","dataConnectionFks","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","sequenceCTO","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","objectToEdit","EDIT","EditSlice","setChainConfiguration","VIEW_CONFIGURATION","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setSequenceConfigurationToEdit","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setMode","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","setModeToEditSequenceConfigurationThunk","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","EditActions","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editSequenceConfiguration","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","editConfiguration","stepIndex","view","FILE","tab","TAB","FormLinePosition","Theme","children","DavitButton","medium","disabled","active","DavitIconButton","iconName","iconLeft","iconColor","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","tiny","faAngleRight","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainlinks","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveStateFkAndStateCondition","stateToSave","changeName","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createStateFkAndStateCondition","newChainState","deleteStateFkAndStateCondition","stateToDeleteId","saveNote","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddChain","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","selectedSequence","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","createSequenceState","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainStateDropDown","ToggleButton","toggleCallback","isLeft","leftLabel","rightLabel","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","updateStateFkAndStateCondition","newState","stateFkToRemove","stateFkStateCondition","useChainDecisionViewModel","buildStateTableRow","selectChainState","is","copyStateFkAndStateCondition","setStateCondition","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentSequenceConfiguration","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","StateList","statesToEdit","addStateCallback","removeStateCallback","setActiveCallback","ChainStateForm","stateColumnName","stateToToggle","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","SequenceStateDropDown","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","selectedState","selectSequenceState","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","FlowChartlabel","NoteIcon","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelCalculationView","linkIndex","currentChain","selectedSequenceName","selectedChainName","getSequenceNote","getChainNote","setViewLevelToSequence","setViewLevelToChain","useViewViewModel","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","readOnly","InitDataTO","dataSetupFk","ChainConfigurationTO","setChainConfigurationThunk","EditChainConfiguration","chainStateFk","setSequenceConfigurationThunk","EditSequenceConfiguration","DavitToggleButton","toggle","checked","ChainConfigurationDropDown","onSelectCallback","dropDownItem","SequenceConfigurationDropDown","ConfigurationSelectButton","isSelected","SaveConfigurationModal","editName","setEditName","StateConfigurationView","setStateCallback","ConfigurationPanel","sequenceOptions","setSequenceOptions","showMore","setShowMore","showSaveConfiguration","setShowSaveConfiguration","sequenceConfigurationToEdit","chainConfigurationToEdit","runCalc","copyChainTO","newSequenceConfiguration","setIsStateInSequenceConfiguration","updatedSequenceConfiguration","sv","getUpdateStatesByConfiguration","statesToUpdate","createSequenceInitData","copySequenceConfiguration","saveSequenceInitData","buildSequenceActorDataTableRow","copyInitData","iData","iex","deleteSequenceInitData","getUpdateChainStatesByConfiguration","setIsStateInChainConfiguration","updatedChainConfiguration","createChainInitData","copyChainConfiguration","saveChainInitData","buildChainActorDataTableRow","deleteChainInitData","toggleSequenceChain","toggleValue","getSequenceStates","getChainStates","getSequenceInitDatas","getChainInitDatas","getNote","noteToReturn","initD","ControlPanelConfiguration","ControlPanelViewController","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToConfiguration","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","StateView","showChain","showStates","setShowStates","buildStateRow","stateIsTrue","trueState","stateIsFalse","falseState","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainLineColor","tableHeight","setTableHeight","parentRef","renderFlowChart","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","chainName","sequenceName","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabFragment","isActive","TabGroupFragment","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","dataSetup","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","dataSetups","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.10ba4d49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainConfigurationTO } from \"../to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../to/ChainLinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceConfigurationTO } from \"../to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Configuration\n        public sequenceConfigurations = new Map<number, SequenceConfigurationTO>(),\n        public chainConfigurations = new Map<number, ChainConfigurationTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainLinks = new Map<number, ChainLinkTO>(),\n        public chainDecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"DAVIT\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(\n            //         DavitVersionMigrator02.migrate(\n            //             DavitVersionMigrator01.migrate(dataStoreObject),\n            //         )\n            //     );\n            //     break;\n            // case 0.1:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(\n            //         DavitVersionMigrator02.migrate(dataStoreObject));\n            //     break;\n            // case 0.2:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            sequenceConfigurations: [],\n            chainConfigurations: [],\n            chains: [],\n            chainLinks: [],\n            chainDecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        // if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n        //     objectStore = DavitVersionManager.updateProject(objectStore);\n        // }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            sequenceConfigurations: Array.from(this.data!.sequenceConfigurations.values()),\n            chainConfigurations: Array.from(this.data!.chainConfigurations.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainLinks: Array.from(this.data!.chainLinks.values()),\n            chainDecisions: Array.from(this.data!.chainDecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceStateConstraintCheck(sequenceStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingSequenceState: boolean = Array.from(dataStore.decisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === sequenceStateId));\n        if (decisionIsUsingSequenceState) {\n            throw new Error(`Sequence state.error! state with id: ${sequenceStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteChainStateConstraintCheck(chainStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingChainState: boolean = Array.from(dataStore.chainDecisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === chainStateId));\n        if (decisionIsUsingChainState) {\n            throw new Error(`Sequence state.error! state with id: ${chainStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainLinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainLinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public sequenceConfigurationFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\nimport { InitDataTO } from \"./InitDataTO\";\n\nexport interface SequenceStateValue{\n    sequenceStateFk: number;\n    value: boolean;\n}\n\nexport class SequenceConfigurationTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public note: string = \"\",\n        public sequenceFk: number = -1,\n        public initDatas: InitDataTO[] = [],\n        public stateValues: SequenceStateValue[] = [],\n        ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainLinkTO } from \"../to/ChainLinkTO\";\nimport { SequenceConfigurationTO } from \"../to/SequenceConfigurationTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainLinkCTO {\n    constructor(\n        public chainLink: ChainLinkTO = new ChainLinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public sequenceConfiguration: SequenceConfigurationTO = new SequenceConfigurationTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainConfigurationTO } from \"../access/to/ChainConfigurationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainConfigurationRepository = {\n    find(chainFk: number): ChainConfigurationTO | undefined {\n        return dataStore.getDataStore().chainConfigurations.get(chainFk);\n    },\n\n    findAll(): ChainConfigurationTO[] {\n        return Array.from(dataStore.getDataStore().chainConfigurations.values());\n    },\n\n    save(chainConfiguration: ChainConfigurationTO) {\n        CheckHelper.nullCheck(chainConfiguration, \"ChainConfiguration\");\n        let chainConfigurationTO: ChainConfigurationTO;\n        if (chainConfiguration.id === -1) {\n            chainConfigurationTO = {\n                ...chainConfiguration,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainConfigurationTO = {...chainConfiguration};\n        }\n        dataStore.getDataStore().chainConfigurations.set(chainConfigurationTO.id!, chainConfigurationTO);\n        return chainConfigurationTO;\n    },\n\n    delete(chainConfiguration: ChainConfigurationTO): ChainConfigurationTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().chainConfigurations.delete(chainConfiguration.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chainConfiguration;\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chainDecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chainDecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chainDecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chainDecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainLinkTO } from \"../access/to/ChainLinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainLinkTO | undefined {\n        return dataStore.getDataStore().chainLinks.get(id);\n    },\n\n    findAll(): ChainLinkTO[] {\n        return Array.from(dataStore.getDataStore().chainLinks.values());\n    },\n\n    findAllForChain(id: number): ChainLinkTO[] {\n        const all: ChainLinkTO[] = this.findAll();\n        return all.filter((link) => link.chainFk === id);\n    },\n\n    delete(step: ChainLinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainLinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainLinkTO): ChainLinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainLinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainLinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainStateConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { SequenceConfigurationTO } from \"../access/to/SequenceConfigurationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceConfigurationRepository = {\n    find(sequenceConfigurationFk: number): SequenceConfigurationTO | undefined {\n        return dataStore.getDataStore().sequenceConfigurations.get(sequenceConfigurationFk);\n    },\n\n    findAll(): SequenceConfigurationTO[] {\n        return Array.from(dataStore.getDataStore().sequenceConfigurations.values());\n    },\n\n    save(sequenceConfiguration: SequenceConfigurationTO) {\n        CheckHelper.nullCheck(sequenceConfiguration, \"sequenceConfiguration\");\n        let sequenceConfigurationTO: SequenceConfigurationTO;\n        if (sequenceConfiguration.id === -1) {\n            sequenceConfigurationTO = {\n                ...sequenceConfiguration,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceConfigurationTO = {...sequenceConfiguration};\n        }\n        dataStore.getDataStore().sequenceConfigurations.set(sequenceConfigurationTO.id!, sequenceConfigurationTO);\n        return sequenceConfigurationTO;\n    },\n\n    delete(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().sequenceConfigurations.delete(sequenceConfigurationTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequenceConfigurationTO;\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceStateConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"../access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainConfigurationRepository } from \"../repositories/ChainConfigurationRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { SequenceConfigurationRepository } from \"../repositories/SequenceConfigurationRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainLinkTO | ChainDecisionTO {\n        let root: ChainLinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainLinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Sequence Configuration -------------------------------------------\n\n    findAllSequenceConfigurations(): SequenceConfigurationTO[] {\n        return SequenceConfigurationRepository.findAll();\n    },\n\n    findSequenceConfigurationTO(sequenceConfigurationFk: number): SequenceConfigurationTO {\n        const sequenceConfiguration: SequenceConfigurationTO | undefined = SequenceConfigurationRepository.find(sequenceConfigurationFk);\n        if (!sequenceConfiguration) {\n            throw new Error(\"Could not find Sequence configuration with ID: \" + sequenceConfigurationFk);\n        } else {\n            return sequenceConfiguration;\n        }\n    },\n\n    saveSequenceConfigurationTO(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        CheckHelper.nullCheck(sequenceConfigurationTO, \"sequenceConfiguration\");\n        return SequenceConfigurationRepository.save(sequenceConfigurationTO);\n    },\n\n    deleteSequenceConfiguration(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        CheckHelper.nullCheck(sequenceConfigurationTO, \"sequenceConfiguration\");\n        SequenceConfigurationRepository.delete(sequenceConfigurationTO);\n        return sequenceConfigurationTO;\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainLinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainLinkTO): ChainLinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainLinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainLinkTO): ChainLinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainLinkTO {\n        const link: ChainLinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n\n    // --------------------------------------------- Chain Configuration --------------------------------------------\n    findAllChainConfigurations(): ChainConfigurationTO[] {\n        return ChainConfigurationRepository.findAll();\n    },\n\n    findChainConfigurationTO(chainFk: number): ChainConfigurationTO {\n        const chainConfiguration: ChainConfigurationTO | undefined = ChainConfigurationRepository.find(chainFk);\n        if (chainConfiguration) {\n            return chainConfiguration;\n        } else {\n            throw Error(\"Try to find chain configuration: Could not find chain configuration with ID: \" + chainFk);\n        }\n    },\n\n    deleteChainConfiguration(chainConfiguration: ChainConfigurationTO): ChainConfigurationTO {\n        return ChainConfigurationRepository.delete(chainConfiguration);\n    },\n\n    saveChainConfigurationTO(chainConfiguration: ChainConfigurationTO): ChainConfigurationTO {\n        return ChainConfigurationRepository.save(chainConfiguration);\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainLinkTO | undefined): ChainLinkCTO => {\n    CheckHelper.nullCheck(link, \"ChainLink\");\n\n    const chainLinkCTO: ChainLinkCTO = new ChainLinkCTO();\n    chainLinkCTO.chainLink = link!;\n\n    const sequenceConfiguration: SequenceConfigurationTO | undefined = SequenceConfigurationRepository.find(link!.sequenceConfigurationFk);\n\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n\n    if (sequenceTO) {\n        chainLinkCTO.sequence = createSequenceCTO(sequenceTO);\n    }\n\n    if (sequenceConfiguration) {\n        chainLinkCTO.sequenceConfiguration = sequenceConfiguration;\n    } else {\n        chainLinkCTO.sequenceConfiguration = new SequenceConfigurationTO(\"\", \"\", sequenceTO?.id || -1, [], []);\n    }\n\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainLinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainLinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"./access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"./access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { SequenceConfigurationTO } from \"./access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= SEQUENCE CONFIGURATION =========================================\n\n    findAllSequenceConfigurations(): DataAccessResponse<SequenceConfigurationTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceConfigurations);\n    },\n\n    findSequenceConfiguration(sequenceConfigurationFk: number): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceConfigurationTO(sequenceConfigurationFk));\n    },\n\n    deleteSequenceConfiguration(sequenceConfiguration: SequenceConfigurationTO): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceConfiguration(sequenceConfiguration));\n    },\n\n    saveSequenceConfigurationTO(sequenceConfigurationTO: SequenceConfigurationTO): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceConfigurationTO(sequenceConfigurationTO));\n    },\n\n    // ========================================= CHAIN CONFIGURATION =========================================\n\n    findAllChainConfigurations(): DataAccessResponse<ChainConfigurationTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainConfigurations);\n    },\n\n    findChainConfiguration(chainFk: number): DataAccessResponse<ChainConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainConfigurationTO(chainFk));\n    },\n\n    deleteChainConfiguration(chainConfiguration: ChainConfigurationTO): DataAccessResponse<ChainConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainConfiguration(chainConfiguration));\n    },\n\n    saveChainConfigurationTO(chainConfiguration: ChainConfigurationTO): DataAccessResponse<ChainConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainConfigurationTO(chainConfiguration));\n    },\n\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainLinkTO): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainLinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainLinkTO): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainLinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faComment, faCommentDots, faPencilAlt, faPlay, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faSave } from \"@fortawesome/free-solid-svg-icons/faSave\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n    play: faPlay,\n    noteEmpty: faComment,\n    noteFilled: faCommentDots,\n    save: faSave,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainConfigurationTO } from \"../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../dataAccess/access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    sequenceConfigurations: SequenceConfigurationTO[];\n    chains: ChainTO[];\n    chainLinks: ChainLinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n    chainConfigurations: ChainConfigurationTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    sequenceConfigurations: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n    chainConfigurations: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setSequenceConfigurations: (state, action: PayloadAction<SequenceConfigurationTO[]>) => {\n            state.sequenceConfigurations = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainLinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        },\n        setChainConfigurations: (state, action: PayloadAction<ChainConfigurationTO[]>) => {\n            state.chainConfigurations = action.payload;\n        },\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceConfigurationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO[]> = DataAccess.findAllSequenceConfigurations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceConfigurations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainConfigurationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainConfigurationTO[]> = DataAccess.findAllChainConfigurations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainConfigurations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadSequenceConfigurationsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n    dispatch(loadChainConfigurationsFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainLinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectSequenceConfigurations: (state: RootState): SequenceConfigurationTO[] => state.masterData.sequenceConfigurations,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectSequenceConfigurationsBySequenceId: (sequenceId: number | undefined) => (state: RootState): SequenceConfigurationTO[] => {\n        if (sequenceId !== undefined) {\n            return state.masterData.sequenceConfigurations.filter(config => config.sequenceFk !== sequenceId);\n        } else {\n            return state.masterData.sequenceConfigurations;\n        }\n    },\n\n    selectChainConfigurationsByChainId: (chainId: number | undefined) => (state: RootState): ChainConfigurationTO[] => {\n        if (chainId !== undefined) {\n            return state.masterData.chainConfigurations.filter(config => config.chainFk !== chainId);\n        } else {\n            return state.masterData.chainConfigurations;\n        }\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectSequenceConfigurationToById: (id: number) => {\n        return (state: RootState): SequenceConfigurationTO | null => {\n            return state.masterData.sequenceConfigurations.find((config) => config.id === id) || null;\n        };\n    },\n\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadSequenceConfigurationsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadChainConfigurationsFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateValue } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors: errors, falseStates: [], trueStates: []};\n    },\n\n    executeDecisionCheck(\n        decision: DecisionTO,\n        actorDatas: ActorData[],\n        states: SequenceStateTO[],\n        stateValues: SequenceStateValue[]\n    ): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        const falseStates: SequenceStateTO[] = [];\n        const trueStates: SequenceStateTO[] = [];\n\n        const configuredStates: SequenceStateTO[] = states.map(state => {\n            stateValues.forEach(stateValue => {\n                if(state.id === stateValue.sequenceStateFk){\n                    state.isState = stateValue.value;\n                }\n            });\n            return state;\n        });\n\n        decision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n            const stateToCheck: SequenceStateTO | undefined = configuredStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n            if (stateToCheck) {\n                if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                    falseStates.push(stateToCheck);\n                    goTo = decision.elseGoTo;\n                } else {\n                    trueStates.push(stateToCheck);\n                }\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo, falseStates: falseStates, trueStates: trueStates};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        configuration: SequenceConfigurationTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && configuration) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = configuration.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                            sequence.sequenceStates,\n                            configuration.stateValues,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                        falseStates: terminalResult.falseStates,\n                        trueStates: terminalResult.trueStates,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {\n        stepId: \"root\",\n        actorDatas: result.actorDatas,\n        type: \"INIT\",\n        errors: result.errors,\n        falseStates: result.falseStates,\n        trueStates: result.trueStates,\n    };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../dataAccess/access/cto/ChainLinkCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\nexport enum ViewLevel {\n    sequence = \"sequence\",\n    chain = \"chain\",\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedSequenceConfiguration: SequenceConfigurationTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n    selectedChainConfiguration: ChainConfigurationTO | null;\n    viewLevel: ViewLevel;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedSequenceConfiguration: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n    selectedChainConfiguration: null,\n    viewLevel: ViewLevel.sequence,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setViewLevel: (state, action: PayloadAction<ViewLevel>) => {\n            state.viewLevel = action.payload;\n        },\n\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedSequenceConfiguration) {\n                calcSequenceAndSetState(action.payload, state.selectedSequenceConfiguration, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedSequenceConfiguration) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedSequenceConfiguration, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedSequenceConfiguration = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setSelectedChainConfiguration: (state, action: PayloadAction<ChainConfigurationTO | null>) => {\n            state.selectedChainConfiguration = action.payload;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedSequenceConfiguration: (state, action: PayloadAction<SequenceConfigurationTO | null>) => {\n            state.selectedSequenceConfiguration = action.payload;\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, sequenceConfiguration: SequenceConfigurationTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, sequenceConfiguration);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst setViewLevelThunk = (viewLevel: ViewLevel): AppThunk => (dispatch, getState) => {\n    switch (viewLevel) {\n        case ViewLevel.chain:\n            if (getState().sequenceModel.selectedChain !== null) {\n                dispatch(SequenceModelSlice.actions.setViewLevel(viewLevel));\n            }\n            break;\n        case ViewLevel.sequence:\n            if (getState().sequenceModel.selectedSequenceModel !== null) {\n                dispatch(SequenceModelSlice.actions.setViewLevel(viewLevel));\n            }\n            break;\n    }\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getState().sequenceModel.selectedChainConfiguration !== null && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst setSelectedSequenceByIdThunk = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    }\n};\n\nconst setSelectedSequenceByIdWithStatesThunk = (sequenceId: number, states: SequenceStateTO[]): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        // set states\n        const sequence: SequenceCTO = response.object;\n        sequence.sequenceStates = states;\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(sequence));\n    }\n};\n\nconst getSequenceConfigurationFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.findSequenceConfiguration(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequenceConfiguration(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst resetAll = (): AppThunk => (dispatch) => {\n    dispatch(SequenceModelSlice.actions.setSelectedSequenceConfiguration(null));\n    dispatch(SequenceModelSlice.actions.setCurrentStepIndex(-1));\n    dispatch(SequenceModelSlice.actions.setSelectedSequence(null));\n    dispatch(SequenceModelSlice.actions.setSelectedChain(null));\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainLinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n\n    selectViewLevel: (state: RootState): ViewLevel => {\n        return state.sequenceModel.viewLevel;\n    },\n\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectSequenceConfiguration: (state: RootState): SequenceConfigurationTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentSequenceConfiguration(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedSequenceConfiguration && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedSequenceConfiguration?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n\n    selectFalseStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.falseStates || [];\n    },\n\n    selectTrueStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.trueStates || [];\n    },\n\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentSequenceConfiguration(state: SequenceModelState): SequenceConfigurationTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequenceConfiguration || null\n        : state.selectedSequenceConfiguration;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: SequenceModelSlice.actions.setSelectedSequence,\n    setCurrentSequenceById: setSelectedSequenceByIdThunk,\n    setCurrentSequenceByIdWithStates: setSelectedSequenceByIdWithStatesThunk,\n    setCurrentSequenceConfigurationById: getSequenceConfigurationFromBackend,\n    setCurrentSequenceConfiguration: SequenceModelSlice.actions.setSelectedSequenceConfiguration,\n    resetCurrentSequenceConfiguration: SequenceModelSlice.actions.setSelectedSequenceConfiguration(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    resetAll: resetAll(),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    setCurrentChainConfiguration: SequenceModelSlice.actions.setSelectedChainConfiguration,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n    setViewLevel: setViewLevelThunk,\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../dataAccess/access/cto/ChainLinkCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    sequenceConfiguration: SequenceConfigurationTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainLinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainLinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainLinkCTO = step as ChainLinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.sequenceConfiguration,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            sequenceConfiguration: link.sequenceConfiguration,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainLinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas, sequenceChain.chainStates);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[], chainStates: ChainStateTO[]): GoToChain => {\n    let goTo: GoToChain | undefined;\n    // check conditions\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n\n    // check states\n    chainDecision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n        const stateToCheck: ChainStateTO | undefined = chainStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n        if (stateToCheck) {\n            if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                goTo = chainDecision.elseGoTo;\n            }\n        }\n    });\n\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainLinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainLinkCTO | null => {\n    let rootLink: ChainLinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainLinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainLinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainLinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainLinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainLinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    VIEW_CONFIGURATION = \"VIEW_CONFIGURATION\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | SequenceConfigurationTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainLinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | ChainConfigurationTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainConfiguration: (state, action: PayloadAction<ChainConfigurationTO>) => {\n            if (state.mode === Mode.VIEW_CONFIGURATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain configuration to edit, in mode: \" + state.mode);\n            }\n        },\n        setChainLinkToEdit: (state, action: PayloadAction<ChainLinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceConfigurationToEdit: (state, action: PayloadAction<SequenceConfigurationTO>) => {\n            if (state.mode === Mode.VIEW_CONFIGURATION) {\n                (state.objectToEdit as SequenceConfigurationTO) = action.payload;\n            } else {\n                console.warn(\"Try to set Sequence Configuration to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(response.object));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainLinkTO,\n    from?: ChainLinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainLinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditSequenceConfigurationThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.VIEW_CONFIGURATION));\n    if (id) {\n        const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.findSequenceConfiguration(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceConfigurationToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(SequenceModelActions.resetCurrentSequence);\n        dispatch(SequenceModelActions.resetCurrentSequenceConfiguration);\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainConfiguration: (state: RootState): ChainConfigurationTO | null => {\n        return state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as ChainConfigurationTO).stateValues\n            ? (state.edit.objectToEdit as ChainConfigurationTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainLinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainLinkTO).sequenceConfigurationFk\n            ? (state.edit.objectToEdit as ChainLinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        if ((state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)) {\n            return (state.edit.objectToEdit as SequenceTO);\n        }\n\n        if ((state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO))) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        return null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectSequenceConfigurationToEdit: (state: RootState): SequenceConfigurationTO | null => {\n\n        if (state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO).stateValues) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        if (state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO).stateValues) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        return null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editSequenceConfiguration: setModeToEditSequenceConfigurationThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        editConfiguration: setModeToEditSequenceConfigurationThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainLinkTO, from?: ChainLinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainLinkTO).sequenceConfigurationFk !== undefined) {\n                (from as ChainLinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainLinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainLinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainLinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainLinkTO => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainLinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainLinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainLinkTO).sequenceConfigurationFk !== undefined) {\n                (from as ChainLinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainLinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\",) {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequenceById(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n    active?: boolean;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled, active} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className + \" \" + (active ? \"activeButton\" : \"\")}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\nimport \"./DavitIconButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n    size?: ElementSize;\n    iconColor?: string;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children, iconLeft, iconColor} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && iconLeft && <FontAwesomeIcon className={children ? \"iconButtonIcon\" : \"\"}\n                                                      icon={iconName}\n                                                      color={iconColor}\n            />}\n            {children}\n            {iconName && !iconLeft && <FontAwesomeIcon className={children ? \"iconButtonIcon\" : \"\"}\n                                                       icon={iconName}\n                                                       color={iconColor}\n            />}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps {\n    onClick: (show: boolean) => void;\n    show?: boolean;\n    className?: string;\n    size?: ElementSize;\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show, className, size} = props;\n\n    return <DavitIconButton onClick={() => onClick(!show)}\n                            size={size ? size : ElementSize.tiny}\n                            iconName={show ? faAngleDown : faAngleRight}\n                            className={className}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainLinkTO } from \"../../../dataAccess/access/to/ChainLinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainLinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainLinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainLinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainLinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainLinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainLinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton, DavitNoteModal } from \"../atomic\";\nimport { DavitIcons } from \"../atomic/icons/IconSet\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? DavitIcons.noteEmpty : DavitIcons.noteFilled}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                                         show={showMenu}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around align-center height-fluid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\nimport { StateFkAndStateCondition } from \"./DecisionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainLinkTO) => {\n        let chainLinkToEdit: ChainLinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainLinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editChain());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveStateFkAndStateCondition = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveStateFkAndStateCondition(newChainState);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    const saveNote = (note: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChain: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChain.note = note;\n            dispatch(EditChain.save(copyChain));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        editChain,\n        saveStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        note: selectedChain?.note || \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates,\n        note,\n        saveNote,\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport {\n    ActorDropDownLabel,\n    ChainDropDownButton,\n    DataLabelDropDown,\n    RelationLabelDropDown,\n    SequenceLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport interface StateFkAndStateCondition {\n    stateFk: number,\n    stateCondition: boolean,\n}\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveSequenceState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createSequenceState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveSequenceState(newSequenceState);\n        }\n    };\n\n    const deleteSequenceState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveSequenceState,\n        deleteSequenceState,\n        createSequenceState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ChainStateDropDownProps {\n    onSelect: (chainState: ChainStateTO | undefined) => void;\n    chainFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const ChainStateDropDown: FunctionComponent<ChainStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainFk} = props;\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(chainFk));\n\n    const chainStateToDavitDropDownItem = (chainState: ChainStateTO): DavitDropDownItemProps => {\n        return {key: chainState.id, value: chainState.id.toString(), text: chainState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={chainStates.map(chainStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(chainStates.find(chainState => chainState.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"../atomic\";\n\ninterface ToggleButtonProps {\n    toggleCallback: (isLeft: boolean) => void;\n    isLeft: boolean;\n    leftLabel: string;\n    rightLabel: string;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\n    const {toggleCallback, isLeft, leftLabel, rightLabel} = props;\n\n    return (\n        <div className=\"flex flex-center\">\n            <DavitButton\n                className={isLeft ? \" activeButton\" : \"\"}\n                onClick={() => toggleCallback(true)}\n            >{leftLabel}</DavitButton>\n            <DavitButton\n                className={isLeft ? \"\" : \" activeButton\"}\n                onClick={() => toggleCallback(false)}\n            >{rightLabel}</DavitButton>\n        </div>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { ChainStateDropDown } from \"../../../../../../../atomic/dropdowns/ChainStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectChainState = (chainState: ChainStateTO | undefined, index: number) => {\n        if (chainState) {\n            updateStateFkAndStateCondition({stateFk: chainState.id, stateCondition: chainState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndStateCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndStateCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <ChainStateDropDown onSelect={(stateFkAndStateCondition) => selectChainState(stateFkAndStateCondition, index)}\n                                            chainFk={chainId}\n                                            value={stateFkAndStateCondition.stateFk.toString()}\n                                            placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndStateCondition, index, is)}\n                                      isLeft={stateFkAndStateCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FLASE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndStateCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainLinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainLinkTO = new ChainLinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateChainDecision(copyDecision);\n            }\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                {/*    TODO: add sequence configuration drop down*/}\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceConfigurationTO } from \"../../../../../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainLinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainLinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainLinkTO = new ChainLinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (sequenceConfigurationTO?: SequenceConfigurationTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequenceConfigurationTO) {\n                copyChainLinkToEdit.sequenceConfigurationFk = sequenceConfigurationTO.id;\n            } else {\n                copyChainLinkToEdit.sequenceConfigurationFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentSequenceConfiguration: chainLinkToEdit?.sequenceConfigurationFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport { ToggleButton } from \"../../../../../../../../molecules/ToggleButton\";\nimport \"./StateList.css\";\n\ninterface StateListProps {\n    statesToEdit: StateTO[];\n    stateColumnName: string;\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n    changeName?: (name: string, stateId: number) => void;\n    removeStateCallback?: (stateId: number) => void;\n    addStateCallback?: () => void;\n}\n\nexport const StateList: FunctionComponent<StateListProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback} = props;\n\n    const trueLabel: string = \"TRUE\";\n    const falseLabel: string = \"FALSE\";\n\n    const buildTableRow = (state: StateTO, index: number): JSX.Element[] => {\n\n        const getLabel = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"a\"}\n                >\n            {changeName\n                ? <DavitTextInput\n                    onChangeCallback={(name) => changeName ? changeName(name, state.id) : {}}\n                    placeholder=\"State Name\"\n                    value={state.label}\n                    focus\n                />\n                : <label>{state.label}</label>}\n                </span>);\n        };\n\n        const getToggleButton = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"b\"}\n                >\n                <ToggleButton\n                    toggleCallback={(is) => setActiveCallback(state, is)}\n                    isLeft={state.isState}\n                    leftLabel={trueLabel}\n                    rightLabel={falseLabel}\n                />\n                </span>\n            );\n        };\n\n        const getDeleteButton = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"c\"}\n                >\n\n            {removeStateCallback\n                ?\n                <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                   noConfirm\n                />\n                : undefined}\n                </span>\n            );\n        };\n\n        return [getLabel(), getToggleButton(), getDeleteButton()];\n    };\n\n    return (\n        <div id=\"stateList\"\n             className=\"gridContainer\"\n        >\n\n            <div className=\"header gridItem\"><label>Name</label></div>\n            <div className=\"header gridItem\"><label>State</label></div>\n            <div className=\"header gridItem\">{addStateCallback && <DavitAddButton onClick={addStateCallback} />}</div>\n            {statesToEdit.map(buildTableRow)}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateList } from \"./fragments/StateList\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {\n        saveStateFkAndStateCondition,\n        editChain,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        id\n    } = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveStateFkAndStateCondition);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveStateFkAndStateCondition(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveStateFkAndStateCondition(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <div className=\"width-fluid\">\n                    <StateList statesToEdit={chainStates}\n                               stateColumnName=\"Default\"\n                               addStateCallback={createStateFkAndStateCondition}\n                               removeStateCallback={deleteStateFkAndStateCondition}\n                               setActiveCallback={setIsState}\n                               changeName={changeName}\n                    />\n                </div>\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceStateDropDownProps {\n    onSelect: (sequenceState: SequenceStateTO | undefined) => void;\n    sequenceFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const SequenceStateDropDown: FunctionComponent<SequenceStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, sequenceFk} = props;\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(sequenceFk));\n\n    const sequenceStateToDavitDropDownItem = (sequenceState: SequenceStateTO): DavitDropDownItemProps => {\n        return {key: sequenceState.id, value: sequenceState.id.toString(), text: sequenceState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequenceStates.map(sequenceStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(sequenceStates.find(state => state.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionDropDown,\n    Form,\n    GoToOptionDropDown,\n    InstanceDropDown,\n    StepDropDown\n} from \"../../../../../../../atomic\";\nimport { SequenceStateDropDown } from \"../../../../../../../atomic/dropdowns/SequenceStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        sequenceFk,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectSequenceState = (sequenceState: SequenceStateTO | undefined, index: number) => {\n        if (sequenceState) {\n            updateStateFkAndStateCondition({stateFk: sequenceState.id, stateCondition: sequenceState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <SequenceStateDropDown onSelect={(selectedState) => selectSequenceState(selectedState, index)}\n                                               sequenceFk={sequenceFk}\n                                               value={stateFkAndCondition.stateFk.toString()}\n                                               placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndCondition, index, is)}\n                                      isLeft={stateFkAndCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FALSE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>Actor</td>\n                            <td>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO, StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateDecision(copyDecision);\n            }\n        }\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateDecision(copyDecision);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateDecision(copyDecision);\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        deleteStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        sequenceFk: decisionToEdit?.sequenceFk || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateList } from \"./fragments/StateList\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {\n        saveSequenceState,\n        editSequence,\n        createSequenceState,\n        deleteSequenceState,\n        id,\n    } = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveSequenceState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveSequenceState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveSequenceState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <div className=\"width-fluid\">\n                    <StateList statesToEdit={sequenceStates}\n                               stateColumnName=\"Default\"\n                               addStateCallback={createSequenceState}\n                               removeStateCallback={deleteSequenceState}\n                               setActiveCallback={setIsState}\n                               changeName={changeName}\n                    />\n                </div>\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic\";\nimport { DavitBackButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic\";\nimport { DavitEditButton } from \"../../../../../../../atomic\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic\";\nimport { DecisionDropDown } from \"../../../../../../../atomic\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic\";\nimport { StepDropDown } from \"../../../../../../../atomic\";\nimport { Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td className=\"flex flex-end\">\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className=\"border\"\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr className=\"flex content-space-between align-center\">\n                    <td>Action</td>\n                    <td>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"./IconSet\";\n\ninterface NoteIconProps {\n    size?:\n        | \"1x\"\n        | \"2x\"\n        | \"3x\"\n        | \"4x\"\n        | \"5x\"\n        | \"6x\"\n        | \"7x\"\n        | \"8x\"\n        | \"9x\"\n        | \"10x\";\n\n    className?: string;\n}\n\nexport const NoteIcon: FunctionComponent<NoteIconProps> = (props) => {\n    const {size, className} = props;\n\n    return (\n        <FontAwesomeIcon icon={DavitIcons.noteEmpty}\n                         size={size ? size : \"1x\"}\n                         className={className}\n        />\n    );\n};\n\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { FlowChartlabel } from \"../../../../../../../domains/overview/flowChartModel/fragments/FlowChartlabel\";\nimport { ViewLevel } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { useStepAndLinkNavigation } from \"../../../../../../../utils/WindowUtil\";\nimport { DavitButton } from \"../../../../../../atomic\";\nimport { NoteIcon } from \"../../../../../../atomic/icons/NoteIcon\";\nimport { ControlPanel } from \"../../edit/common/ControlPanel\";\nimport { OptionField } from \"../../edit/common/OptionField\";\nimport { useViewViewModel } from \"../viewmodels/ViewViewModel\";\nimport \"./ControlPanelCalculationView.css\";\nimport { ViewNavigator } from \"./ViewNavigator\";\n\nexport interface ControlPanelViewProps {\n\n}\n\nexport const ControlPanelCalculationView: FunctionComponent<ControlPanelViewProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectedChainName,\n        selectedSequenceName,\n        getSequenceNote,\n        getChainNote,\n        viewLevel,\n        setViewLevelToChain,\n        setViewLevelToSequence,\n    } = useViewViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <>\n            <ControlPanel>\n                <OptionField>\n                    <div>\n                        {selectedChainName !== \"\" && <FlowChartlabel label=\"CHAIN:\"\n                                                                     text={selectedChainName}\n                        />}\n                        <FlowChartlabel label=\"SEQU.:\"\n                                        text={selectedSequenceName}\n                        />\n                    </div>\n                    {selectedChainName !== \"\" && (\n                        <div className=\"flex-column\">\n                            <DavitButton onClick={setViewLevelToChain}\n                                         active={viewLevel === ViewLevel.chain}\n                            >Show</DavitButton>\n                            <DavitButton onClick={setViewLevelToSequence}\n                                         active={viewLevel === ViewLevel.sequence}\n                            >Show</DavitButton>\n                        </div>\n                    )}\n                </OptionField>\n\n                <OptionField>\n                    {/*------ note -----*/}\n                    <NoteIcon size=\"2x\"\n                              className=\"margin-medium padding-small border border-medium\"\n                    />\n                    <textarea className=\"noteTextarea border border-medium padding-medium width-fluid\"\n                              value={viewLevel === ViewLevel.chain ? getChainNote() : getSequenceNote()}\n                              readOnly\n                    />\n\n                </OptionField>\n\n                <OptionField>\n\n                </OptionField>\n\n            </ControlPanel>\n            <div className=\"viewNavigatorWrapper\">\n                <div className=\"animator\">\n                    <ViewNavigator fastBackward={linkBack}\n                                   fastForward={linkNext}\n                                   backward={stepBack}\n                                   forward={stepNext}\n                                   index={getIndex()}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../slices/EditSlice\";\nimport {\n    SequenceModelActions,\n    sequenceModelSelectors,\n    ViewLevel\n} from \"../../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\n\nexport const useViewViewModel = () => {\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const viewLevel: ViewLevel = useSelector(sequenceModelSelectors.selectViewLevel);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const getSequenceNote = (): string => {\n        let note: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedSequence)) {\n            note = selectedSequence!.sequenceTO.note;\n        }\n        return note;\n    };\n\n    const getChainNote = (): string => {\n        let note: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            note = selectedChain!.note;\n        }\n        return note;\n    };\n\n    const setViewLevelToChain = () => {\n        dispatch(SequenceModelActions.setViewLevel(ViewLevel.chain));\n    };\n\n    const setViewLevelToSequence = () => {\n        dispatch(SequenceModelActions.setViewLevel(ViewLevel.sequence));\n    };\n\n    return {\n        sequence: selectedSequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        currentSequence: selectedSequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n        selectedSequenceName: selectedSequence?.sequenceTO.name || \"\",\n        selectedChainName: selectedChain?.name || \"\",\n        editConfiguration: () => dispatch(EditActions.setMode.editConfiguration()),\n        getSequenceNote,\n        getChainNote,\n        viewLevel,\n        setViewLevelToSequence,\n        setViewLevelToChain,\n    };\n};","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\nimport { InitDataTO } from \"./InitDataTO\";\n\nexport interface ChainStateValue{\n    chainStateFk: number;\n    value: boolean\n}\n\nexport class ChainConfigurationTO extends AbstractTO{\n    public constructor(\n        public name: string = \"\",\n        public note: string = \"\",\n        public chainFk: number = -1,\n        public initDatas: InitDataTO[] = [],\n        public stateValues: ChainStateValue[] = [],\n    ) {\n        super();\n        }\n\n}","import { ChainConfigurationTO } from \"../../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createChainConfigurationThunk = (chainId: number): AppThunk => (dispatch) => {\n\n    const chainConfiguration: ChainConfigurationTO = new ChainConfigurationTO();\n    chainConfiguration.chainFk = chainId;\n\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStatesByChainFk(chainId);\n\n    if (response.code === 200) {\n        chainConfiguration.stateValues = response.object.map(state => {\n            return {chainStateFk: state.id, value: state.isState};\n        });\n    }\n\n    dispatch(setChainConfigurationThunk(chainConfiguration));\n};\n\nconst setChainConfigurationThunk = (chainConfiguration: ChainConfigurationTO): AppThunk => (dispatch) => {\n    dispatch(editActions.setChainConfiguration(chainConfiguration));\n};\n\nconst deleteChainConfigurationThunk = (chainConfiguration: ChainConfigurationTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainConfigurationTO> = DataAccess.deleteChainConfiguration(chainConfiguration);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainConfigurationsFromBackend());\n};\n\nexport const EditChainConfiguration = {\n    update: setChainConfigurationThunk,\n    create: createChainConfigurationThunk,\n    delete: deleteChainConfigurationThunk,\n};\n","import { SequenceConfigurationTO } from \"../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createSequenceConfigurationThunk = (sequenceId: number): AppThunk => (dispatch) => {\n    const sequenceConfigurationTO: SequenceConfigurationTO = new SequenceConfigurationTO();\n\n    sequenceConfigurationTO.sequenceFk = sequenceId;\n    // sequenceConfigurationTO.name = \"New configuration\";\n\n    // load and set sequence default states\n    const sequenceStates: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStatesBySequenceFk(sequenceId);\n\n    if (sequenceStates.code === 200) {\n        sequenceConfigurationTO.stateValues = sequenceStates.object.map(state => {\n            return {sequenceStateFk: state.id, value: state.isState};\n        });\n    }\n\n    dispatch(setSequenceConfigurationThunk(sequenceConfigurationTO));\n};\n\nconst saveSequenceConfigurationThunk = (sequenceConfigurationTO: SequenceConfigurationTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.saveSequenceConfigurationTO(sequenceConfigurationTO);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceConfigurationsFromBackend());\n    dispatch(EditSequenceConfiguration.update(response.object));\n};\n\nconst deleteSequenceConfigurationThunk = (sequenceConfigurationTO: SequenceConfigurationTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.deleteSequenceConfiguration(sequenceConfigurationTO);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceConfigurationsFromBackend());\n};\n\nconst setSequenceConfigurationThunk = (sequenceConfiguration: SequenceConfigurationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.VIEW_CONFIGURATION) {\n        dispatch(editActions.setSequenceConfigurationToEdit(sequenceConfiguration));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set Sequence Configuration to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequenceConfiguration = {\n    save: saveSequenceConfigurationThunk,\n    delete: deleteSequenceConfigurationThunk,\n    update: setSequenceConfigurationThunk,\n    create: createSequenceConfigurationThunk,\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitToggleButton.css\";\n\ninterface DavitToggleButtonProps {\n    toggle: () => void;\n    value: boolean;\n}\n\nexport const DavitToggleButton: FunctionComponent<DavitToggleButtonProps> = (props) => {\n    const {toggle, value} = props;\n\n    return (\n        <label className=\"switch\">\n            <input type=\"checkbox\"\n                   onChange={toggle}\n                   checked={value}\n            />\n            <span className=\"slider round\"/>\n        </label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainConfigurationTO } from \"../../../dataAccess/access/to/ChainConfigurationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ChainConfigurationDropDownProps {\n    chainId?: number;\n    selectedChainConfiguration?: number;\n    onSelectCallback: (chainConfiguration: ChainConfigurationTO | undefined) => void;\n}\n\nexport const ChainConfigurationDropDown: FunctionComponent<ChainConfigurationDropDownProps> = (props) => {\n    const {chainId, onSelectCallback, selectedChainConfiguration} = props;\n\n    const chainConfigurations: ChainConfigurationTO[] = useSelector(masterDataSelectors.selectChainConfigurationsByChainId(chainId));\n\n    const onSelectChainConfiguration = (dropDownItem: DavitDropDownItemProps | undefined) => {\n        let selectedChainConfiguration: ChainConfigurationTO | undefined;\n\n        if (dropDownItem !== undefined) {\n            selectedChainConfiguration = chainConfigurations.find(config => config.id === Number(dropDownItem.value));\n        }\n\n        onSelectCallback(selectedChainConfiguration);\n    };\n\n    const buildDropDownItemFromSequenceConfiguration = (chainConfiguration: ChainConfigurationTO): DavitDropDownItemProps => {\n        return {\n            value: chainConfiguration.id.toString(),\n            key: chainConfiguration.id,\n            text: chainConfiguration.name\n        };\n    };\n\n    return (\n        <DavitDropDown onSelect={onSelectChainConfiguration}\n                       dropdownItems={chainConfigurations.map(buildDropDownItemFromSequenceConfiguration)}\n                       clearable\n                       placeholder={chainConfigurations.length === 0 ? \"No configuration available\" : \"Select configuration\"}\n                       value={selectedChainConfiguration ? selectedChainConfiguration.toString() : undefined}\n        />\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceConfigurationTO } from \"../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceConfigurationDropDownProps {\n    sequenceId?: number;\n    selectedSequenceConfiguration?: number;\n    onSelectCallback: (sequenceConfiguration: SequenceConfigurationTO | undefined) => void;\n}\n\nexport const SequenceConfigurationDropDown: FunctionComponent<SequenceConfigurationDropDownProps> = (props) => {\n    const {sequenceId, onSelectCallback, selectedSequenceConfiguration} = props;\n\n    const sequenceConfigurations: SequenceConfigurationTO[] = useSelector(masterDataSelectors.selectSequenceConfigurationsBySequenceId(sequenceId));\n\n    const onSelectSequenceConfiguration = (dropDownItem: DavitDropDownItemProps | undefined) => {\n        let selectedSequenceConfiguration: SequenceConfigurationTO | undefined;\n\n        if (dropDownItem !== undefined) {\n            selectedSequenceConfiguration = sequenceConfigurations.find(config => config.id === Number(dropDownItem.value));\n        }\n\n        onSelectCallback(selectedSequenceConfiguration);\n    };\n\n    const buildDropDownItemFromSequenceConfiguration = (sequenceConfiguration: SequenceConfigurationTO): DavitDropDownItemProps => {\n        return {\n            value: sequenceConfiguration.id.toString(),\n            key: sequenceConfiguration.id,\n            text: sequenceConfiguration.name\n        };\n    };\n\n    return (\n        <DavitDropDown onSelect={onSelectSequenceConfiguration}\n                       dropdownItems={sequenceConfigurations.map(buildDropDownItemFromSequenceConfiguration)}\n                       clearable\n                       placeholder={sequenceConfigurations.length === 0 ? \"No configuration available\" : \"Select configuration\"}\n                       value={selectedSequenceConfiguration ? selectedSequenceConfiguration.toString() : undefined}\n        />\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"../../../atomic\";\n\ninterface ConfigurationSelectButtonProps {\n    label: string;\n    onClick: () => void;\n    isSelected: boolean;\n}\n\nexport const ConfigurationSelectButton: FunctionComponent<ConfigurationSelectButtonProps> = (props) => {\n    const {label, onClick, isSelected} = props;\n\n    return (\n        <DavitButton className=\"width-fluid\"\n                     onClick={onClick}\n                     active={isSelected}\n        >\n            <h2>{label}</h2>\n        </DavitButton>\n    );\n};\n\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitButton, DavitModal, DavitTextInput, Form } from \"../../../atomic\";\nimport { FormBody } from \"../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../atomic/forms/fragments/FormHeader\";\n\ninterface SaveConfigurationModalProps {\n    onSaveCallback: (name: string) => void;\n    onCloseCallback: () => void;\n    name: string;\n}\n\nexport const SaveConfigurationModal: FunctionComponent<SaveConfigurationModalProps> = (props) => {\n    const {name, onSaveCallback, onCloseCallback} = props;\n\n    const [editName, setEditName] = useState<string>(\"\");\n\n    useEffect(() => {\n        setEditName(name);\n    }, [name]);\n\n    return (\n        <DavitModal>\n            <Form>\n                <FormHeader>\n                    <h2>Save Configuration</h2>\n                </FormHeader>\n\n                <FormBody>\n                    <DavitTextInput onChangeCallback={setEditName}\n                                    focus\n                                    value={editName}\n                    />\n                </FormBody>\n\n                <FormFooter>\n                    <DavitButton onClick={onCloseCallback}>Cancel</DavitButton>\n                    <DavitButton onClick={() => {\n                        onSaveCallback(editName);\n                        onCloseCallback();\n                    }}\n                    >Save</DavitButton>\n                </FormFooter>\n            </Form>\n        </DavitModal>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../dataAccess/access/to/StateTO\";\nimport { StateList } from \"../../controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateList\";\n\ninterface StateConfigurationViewProps {\n    states: StateTO[];\n    setStateCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateConfigurationView: FunctionComponent<StateConfigurationViewProps> = (props) => {\n\n    const {states, setStateCallback} = props;\n\n    const HEADER: string = \"State\";\n\n    return (\n        <StateList\n            statesToEdit={states}\n            stateColumnName={HEADER}\n            setActiveCallback={setStateCallback}\n        />\n    );\n};\n\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainConfigurationTO } from \"../../../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../../../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../dataAccess/access/to/StateTO\";\nimport { editActions, EditActions, editSelectors } from \"../../../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { EditChainConfiguration } from \"../../../slices/thunks/ChainConfigurationThunks\";\nimport { EditSequenceConfiguration } from \"../../../slices/thunks/SequenceConfigurationThunks\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDropDown,\n    DavitAddButton,\n    DavitDeleteButton,\n    DavitIconButton,\n    DavitShowMoreButton,\n    InstanceDropDown,\n    SequenceDropDown,\n} from \"../../atomic\";\nimport { DavitToggleButton } from \"../../atomic/buttons/DavitToggleButton\";\nimport { ChainConfigurationDropDown } from \"../../atomic/dropdowns/ChainConfigurationDropDown\";\nimport { SequenceConfigurationDropDown } from \"../../atomic/dropdowns/SequenceConfigurationDropDown\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport { NoteIcon } from \"../../atomic/icons/NoteIcon\";\nimport \"./Configuration.css\";\nimport { ConfigurationSelectButton } from \"./fragments/ConfigurationSelectButton\";\nimport { SaveConfigurationModal } from \"./fragments/SaveConfigurationModal\";\nimport { StateConfigurationView } from \"./fragments/StateConfigurationView\";\n\nexport interface ConfigurationPanelProps {\n\n}\n\nexport const ConfigurationPanel: FunctionComponent<ConfigurationPanelProps> = () => {\n\n    const dispatch = useDispatch();\n\n    const [sequenceOptions, setSequenceOptions] = useState<boolean>(false);\n    const [showMore, setShowMore] = useState<boolean>(true);\n    const [showSaveConfiguration, setShowSaveConfiguration] = useState<boolean>(false);\n\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const sequenceConfigurationToEdit: SequenceConfigurationTO | null = useSelector(editSelectors.selectSequenceConfigurationToEdit);\n\n    const selectedChain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n    const chainConfigurationToEdit: ChainConfigurationTO | null = useSelector(editSelectors.selectChainConfiguration);\n\n    const runCalc = () => {\n        if (selectedSequence !== null && sequenceConfigurationToEdit !== null) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(selectedSequence.sequenceTO.id));\n            dispatch(SequenceModelActions.setCurrentSequenceConfiguration(sequenceConfigurationToEdit));\n            dispatch(EditActions.setMode.view());\n        }\n\n        if (selectedChain !== null && chainConfigurationToEdit !== null) {\n            const copyChainTO: ChainTO = DavitUtil.deepCopy(selectedChain.chain);\n            dispatch(SequenceModelActions.setCurrentChainConfiguration(chainConfigurationToEdit));\n            dispatch(EditActions.setMode.view());\n            dispatch(SequenceModelActions.setCurrentChain(copyChainTO));\n        }\n    };\n\n    // ------------------------------- sequence ------------------------------\n\n    const newSequenceConfiguration = (sequenceId: number) => {\n        dispatch(EditSequenceConfiguration.create(sequenceId));\n    };\n\n    const setSequenceConfiguration = (sequenceConfiguration: SequenceConfigurationTO | undefined) => {\n        if (sequenceConfiguration === undefined) {\n            if (sequenceConfigurationToEdit !== null && sequenceConfigurationToEdit.name === \"\") {\n                deleteSequenceConfiguration();\n            } else {\n                newSequenceConfiguration(selectedSequence!.sequenceTO.id);\n            }\n        } else {\n            dispatch(EditSequenceConfiguration.update(sequenceConfiguration));\n        }\n    };\n\n    const saveSequenceConfiguration = (name?: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (sequenceConfigurationToEdit!.name !== \"\" || (name !== \"\" && name !== undefined)) {\n                const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n                // set new name if given\n                if (name !== \"\" && name !== undefined) {\n                    copySequenceConfiguration.name = name;\n                }\n                // remove empty init data's\n                copySequenceConfiguration.initDatas = copySequenceConfiguration.initDatas.filter(initD => initD.actorFk !== -1 && initD.dataFk !== -1 && initD.instanceFk !== -1);\n                // save sequence configuration\n                dispatch(EditSequenceConfiguration.save(copySequenceConfiguration));\n            } else {\n                deleteSequenceConfiguration();\n            }\n        }\n    };\n\n    const deleteSequenceConfiguration = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequenceConfiguration.delete(sequenceConfigurationToEdit!));\n            newSequenceConfiguration(selectedSequence!.sequenceTO.id);\n        }\n    };\n\n    const setIsStateInSequenceConfiguration = (stateToToggle: StateTO, is: boolean) => {\n        if (sequenceConfigurationToEdit) {\n            const updatedSequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            updatedSequenceConfiguration.stateValues.forEach(sv => {\n                if (sv.sequenceStateFk === stateToToggle.id) {\n                    sv.value = is;\n                }\n                return sv;\n            });\n            dispatch(EditSequenceConfiguration.update(updatedSequenceConfiguration));\n        }\n    };\n\n    const setSequence = (sequenceId: number | undefined) => {\n        if (sequenceId !== undefined) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(sequenceId));\n            newSequenceConfiguration(sequenceId);\n        } else {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n            dispatch(SequenceModelActions.resetCurrentSequenceConfiguration);\n            dispatch(editActions.clearObjectToEdit());\n        }\n    };\n\n    const getUpdateStatesByConfiguration = (states: SequenceStateTO[]): SequenceStateTO[] => {\n        const statesToUpdate: SequenceStateTO[] = DavitUtil.deepCopy(states);\n        if (selectedSequence && sequenceConfigurationToEdit) {\n            statesToUpdate.map(state => {\n                sequenceConfigurationToEdit.stateValues.forEach(sv => {\n                    if (sv.sequenceStateFk === state.id) {\n                        state.isState = sv.value;\n                    }\n                });\n                return state;\n            });\n        }\n        return statesToUpdate;\n    };\n\n\n    const createSequenceInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas.push(new InitDataTO());\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const deleteSequenceInitData = (index: number) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas = copySequenceConfiguration.initDatas.filter((iData, iex) => iex !== index);\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const saveSequenceInitData = (initData: InitDataTO, index: number) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas[index] = initData;\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const buildSequenceActorDataTableRow = (initData: InitDataTO, index: number): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={index}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveSequenceInitData(copyInitData, index);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveSequenceInitData(copyInitData, index);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        <DavitDeleteButton onClick={() => {\n                            deleteSequenceInitData(index);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    // ------------------------------- chain ------------------------------\n\n    const setChain = (chain: ChainTO | undefined) => {\n        if (chain !== undefined) {\n            const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n            dispatch(SequenceModelActions.setCurrentChain(copyChain));\n            dispatch(EditChainConfiguration.create(copyChain.id));\n        } else {\n            dispatch(SequenceModelActions.resetCurrentChain);\n            dispatch(editActions.clearObjectToEdit());\n        }\n    };\n\n    const newChainConfiguration = (chainId: number) => {\n        dispatch(EditChainConfiguration.create(chainId));\n    };\n\n    const setChainConfiguration = (chainConfiguration: ChainConfigurationTO | undefined) => {\n        if (chainConfiguration === undefined) {\n            if (chainConfigurationToEdit !== null && chainConfigurationToEdit.name === \"\") {\n                deleteSequenceConfiguration();\n            } else {\n                newChainConfiguration(selectedSequence!.sequenceTO.id);\n            }\n        } else {\n            dispatch(EditChainConfiguration.update(chainConfiguration));\n        }\n    };\n\n    const deleteChainConfiguration = () => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainConfiguration.delete(chainConfigurationToEdit!));\n            newSequenceConfiguration(selectedChain!.chain.id);\n        }\n    };\n\n    const getUpdateChainStatesByConfiguration = (states: ChainStateTO[]): ChainStateTO[] => {\n        const statesToUpdate: ChainStateTO[] = DavitUtil.deepCopy(states);\n        if (selectedChain && chainConfigurationToEdit) {\n            statesToUpdate.map(state => {\n                chainConfigurationToEdit.stateValues.forEach(sv => {\n                    if (sv.chainStateFk === state.id) {\n                        state.isState = sv.value;\n                    }\n                });\n                return state;\n            });\n        }\n        return statesToUpdate;\n    };\n\n    const setIsStateInChainConfiguration = (stateToToggle: StateTO, is: boolean) => {\n        if (sequenceConfigurationToEdit) {\n            const updatedChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            updatedChainConfiguration.stateValues.forEach(sv => {\n                if (sv.chainStateFk === stateToToggle.id) {\n                    sv.value = is;\n                }\n                return sv;\n            });\n            dispatch(EditChainConfiguration.update(updatedChainConfiguration));\n        }\n    };\n\n    const createChainInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas.push(new InitDataTO());\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const deleteChainInitData = (index: number) => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas = copyChainConfiguration.initDatas.filter((iData, iex) => iex !== index);\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const saveChainInitData = (initData: InitDataTO, index: number) => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas[index] = initData;\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const buildChainActorDataTableRow = (initData: InitDataTO, index: number): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={index}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveChainInitData(copyInitData, index);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveChainInitData(copyInitData, index);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        <DavitDeleteButton onClick={() => {\n                            deleteChainInitData(index);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    // ---------------------------- ui parts ----------------------------\n\n    const toggleSequenceChain = (toggleValue?: boolean) => {\n        setSequenceOptions((toggleValue !== undefined) ? toggleValue : (!sequenceOptions));\n        dispatch(SequenceModelActions.resetAll);\n    };\n\n    const getSequenceStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedSequence) && !DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n\n            if (selectedSequence!.sequenceStates.length > 0) {\n                return (\n                    <StateConfigurationView states={getUpdateStatesByConfiguration(selectedSequence!.sequenceStates || [])}\n                                            setStateCallback={setIsStateInSequenceConfiguration}\n                    />\n                );\n            }\n\n            if (selectedSequence!.sequenceStates.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no states declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getChainStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && !DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n\n            if (chainConfigurationToEdit!.stateValues.length > 0) {\n                return (\n                    <StateConfigurationView states={getUpdateChainStatesByConfiguration(selectedChain!.chainStates || [])}\n                                            setStateCallback={setIsStateInChainConfiguration}\n                    />\n                );\n            }\n\n            if (chainConfigurationToEdit!.stateValues.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no states declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getSequenceInitDatas = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n\n            if (sequenceConfigurationToEdit!.initDatas.length > 0) {\n                return sequenceConfigurationToEdit!.initDatas.map(buildSequenceActorDataTableRow);\n            }\n\n            if (sequenceConfigurationToEdit!.initDatas.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no init datas declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getChainInitDatas = () => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n\n            if (chainConfigurationToEdit!.initDatas.length > 0) {\n                return chainConfigurationToEdit!.initDatas.map(buildChainActorDataTableRow);\n            }\n\n            if (chainConfigurationToEdit!.initDatas.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no init datas declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getNote = (): string => {\n        let noteToReturn: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedSequence)) {\n            noteToReturn = selectedSequence!.sequenceTO!.note;\n        }\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            noteToReturn = selectedChain!.chain.note;\n        }\n        return noteToReturn;\n    };\n\n// ===============================================================================================================\n\n    return (\n        <div className=\"configurationPanel border border-medium\">\n\n            {/*----- Header -----*/}\n            <div className=\"configurationPanelHeader content-space-around align-center padding-medium\">\n\n                <div className=\"flex align-center\">\n                    <h3 className={sequenceOptions ? \"clickAble\" : \"selectedColor\"}\n                        onClick={() => toggleSequenceChain(false)}\n                    >Chain</h3>\n                    <div className=\"padding-horizontal-m\">\n\n                        <DavitToggleButton\n                            toggle={() => toggleSequenceChain()}\n                            value={sequenceOptions}\n                        />\n                    </div>\n                    <h3 className={sequenceOptions ? \"selectedColor\" : \"clickAble\"}\n                        onClick={() => toggleSequenceChain(true)}\n                    >Sequence</h3>\n                </div>\n\n                {sequenceOptions && <SequenceDropDown onSelect={(sequence) => {\n                    setSequence(sequence?.id);\n                }}\n                                                      value={selectedSequence?.sequenceTO.id}\n\n                />}\n                {!sequenceOptions && <ChainDropDown onSelect={setChain}\n                                                    value={selectedChain?.chain.id}\n                />}\n\n                {(selectedSequence !== null || selectedChain !== null)\n                && < DavitShowMoreButton onClick={setShowMore}\n                                         show={showMore}\n                                         size={ElementSize.medium}\n                />}\n\n            </div>\n\n            {/* --------------- Body ---------------*/}\n            {selectedSequence && showMore &&\n            <div className=\"configurationBody flex border-top border-medium\">\n\n                <div className=\"configurationStateColumn flex flex-column width-fluid\">\n\n                    {/*------ configuration ------*/}\n                    <div className=\"flex content-space-around align-center padding-small border-bottom border-medium\">\n\n                        <h2>Configuration</h2>\n\n                        {selectedSequence && <SequenceConfigurationDropDown\n                            onSelectCallback={setSequenceConfiguration}\n                            sequenceId={selectedSequence?.sequenceTO?.id}\n                            selectedSequenceConfiguration={sequenceConfigurationToEdit?.id}\n                        />}\n\n                        {sequenceConfigurationToEdit?.id !== -1 &&\n                        <DavitDeleteButton onClick={deleteSequenceConfiguration} />}\n\n                    </div>\n\n                    {/*------ note -----*/}\n                    <div className=\"flex flex-center padding-small\">\n                        <NoteIcon size=\"2x\"\n                                  className=\"margin-medium padding-small border border-medium\"\n                        />\n                        <textarea className=\"noteTextarea border border-medium padding-medium\"\n                                  value={getNote()}\n                                  readOnly\n                        />\n                    </div>\n\n                    <div>\n                        {/*/!*----- States -----*!/*/}\n                        <div className=\"configurationHeader flex flex-center align-center\">\n                            <h1 className=\"padding-medium\">{selectedSequence ? \"Sequence States\" : \"Chain States\"}</h1>\n                        </div>\n\n                        {/*    State*/}\n                        <div className=\"configList padding-bottom-l\">\n                            {getSequenceStates()}\n                            {getChainStates()}\n                        </div>\n\n                    </div>\n\n                    <div className=\"flex-inline flex-wrap flex-column\">\n                        {/*    Data setup*/}\n                        <div className=\"configurationHeader flex flex-center align-center\">\n                            <h1 className=\"padding-medium\">Data-Setup</h1>\n                        </div>\n\n                        <div className=\"configurationPanelHeader content-space-around align-center border-bottom border-medium\">\n                            <label>Actor</label>\n                            <label>Data Instance</label>\n                            <DavitAddButton onClick={selectedSequence ? createSequenceInitData : createChainInitData} />\n                        </div>\n\n                        <div className=\"configList padding-bottom-l\">\n                            {getSequenceInitDatas()}\n                            {getChainInitDatas()}\n                        </div>\n\n                    </div>\n                    <div className=\"flex content-space-around padding-small border-top border-medium\">\n\n                        <DavitIconButton onClick={() => setShowSaveConfiguration(true)}\n                                         iconLeft={false}\n                                         iconName={DavitIcons.save}\n                                         className=\"greenBorder\"\n                        >Save Config</DavitIconButton>\n\n                        <DavitIconButton onClick={runCalc}\n                                         iconLeft={false}\n                                         iconName={DavitIcons.play}\n                                         className=\"calcButton\"\n                        >Calculate</DavitIconButton>\n                    </div>\n                </div>\n            </div>}\n\n            {selectedChain && showMore &&\n\n            <div className=\"configurationBody flex-column border-top border-medium\">\n\n\n                {/*------ configuration ------*/}\n                <div className=\"flex content-space-around align-center padding-small border-bottom border-medium\">\n\n                    <h2>Configuration</h2>\n\n                    {selectedChain && <ChainConfigurationDropDown\n                        onSelectCallback={setChainConfiguration}\n                        chainId={selectedChain.chain.id}\n                        selectedChainConfiguration={chainConfigurationToEdit?.id}\n                    />}\n\n                    {chainConfigurationToEdit?.id !== -1 &&\n                    <DavitDeleteButton onClick={deleteChainConfiguration} />}\n\n                </div>\n\n                {/*------ note -----*/}\n                <div className=\"flex flex-center padding-small\">\n                    <NoteIcon size=\"2x\"\n                              className=\"margin-medium padding-small border border-medium\"\n                    />\n                    <textarea className=\"noteTextarea border border-medium padding-medium\"\n                              value={getNote()}\n                              readOnly\n                    />\n                </div>\n\n                <div className=\"flex border-top border-medium\">\n\n                    <div id=\"column1\"\n                         className=\"configurationSequenceChainColumn\"\n                    >\n\n                        {/*---- overview -----*/}\n                        <ConfigurationSelectButton label=\"Overview\"\n                                                   onClick={() => {\n                                                   }}\n                                                   isSelected={false}\n                        />\n\n                        {/*---- chain -----*/}\n                        <ConfigurationSelectButton label={selectedChain.chain.name}\n                                                   onClick={() => {\n                                                   }}\n                                                   isSelected={false}\n                        />\n\n                        {/*---- links -----*/}\n                        {selectedChain.links.map((link, index) => {\n                            return (<ConfigurationSelectButton key={index}\n                                                               label={link.chainLink.name}\n                                                               onClick={() => {\n                                                               }}\n                                                               isSelected={false}\n                            />);\n                        })}\n\n                        {/*---- decisions -----*/}\n                        {selectedChain.decisions.map((decision, index) => {\n                            return (<ConfigurationSelectButton key={index}\n                                                               label={decision.name}\n                                                               onClick={() => {\n                                                               }}\n                                                               isSelected={false}\n                            />);\n                        })}\n\n                    </div>\n\n                    <div id=\"column2\"\n                         className=\"border-left border-medium\"\n                    >\n\n                        <div>\n                            {/*/!*----- States -----*!/*/}\n                            <div className=\"configurationHeader flex flex-center align-center\">\n                                <h1 className=\"padding-medium\">{selectedSequence ? \"Sequence States\" : \"Chain States\"}</h1>\n                            </div>\n\n                            {/*    State*/}\n                            <div className=\"configList padding-bottom-l\">\n                                {getSequenceStates()}\n                                {getChainStates()}\n                            </div>\n\n                        </div>\n\n                        <div className=\"flex-inline flex-wrap flex-column\">\n                            {/*    Data setup*/}\n                            <div className=\"configurationHeader flex flex-center align-center\">\n                                <h1 className=\"padding-medium\">Data-Setup</h1>\n                            </div>\n\n                            <div className=\"configurationPanelHeader content-space-around align-center border-bottom border-medium\">\n                                <label>Actor</label>\n                                <label>Data Instance</label>\n                                <DavitAddButton onClick={selectedSequence ? createSequenceInitData : createChainInitData} />\n                            </div>\n\n                            <div className=\"configList padding-bottom-l\">\n                                {getSequenceInitDatas()}\n                                {getChainInitDatas()}\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n                <div className=\"flex content-space-around padding-small border-top border-medium\">\n\n                    <DavitIconButton onClick={() => setShowSaveConfiguration(true)}\n                                     iconLeft={false}\n                                     iconName={DavitIcons.save}\n                                     className=\"greenBorder\"\n                    >Save Config</DavitIconButton>\n\n                    <DavitIconButton onClick={runCalc}\n                                     iconLeft={false}\n                                     iconName={DavitIcons.play}\n                                     className=\"calcButton\"\n                    >Calculate</DavitIconButton>\n                </div>\n            </div>}\n\n            {showSaveConfiguration && <SaveConfigurationModal onSaveCallback={saveSequenceConfiguration}\n                                                              onCloseCallback={() => setShowSaveConfiguration(false)}\n                                                              name={sequenceConfigurationToEdit?.name || \"\"}\n            />}\n        </div>);\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConfigurationPanel } from \"../../../../../configurationPanel/Configuration\";\nimport { ControlPanel } from \"../../edit/common/ControlPanel\";\n\nexport interface ControlPanelConfigurationProps {\n\n}\n\nexport const ControlPanelConfiguration: FunctionComponent<ControlPanelConfigurationProps> = () => {\n\n    return (\n        <ControlPanel>\n            <ConfigurationPanel />\n        </ControlPanel>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelCalculationView } from \"./fragments/ControlPanelCalculationView\";\nimport { ControlPanelConfiguration } from \"./fragments/ControlPanelConfiguration\";\n\nexport interface ControlPanelViewControllerProps {\n    mode: Mode;\n}\n\nexport const ControlPanelViewController: FunctionComponent<ControlPanelViewControllerProps> = (props) => {\n\n    const {mode} = props;\n\n    const getViewByMode = (mode: Mode) => {\n        switch (mode) {\n            case Mode.VIEW_CONFIGURATION:\n                return <ControlPanelConfiguration />;\n            case Mode.VIEW:\n                return <ControlPanelCalculationView />;\n            default:\n                return <ControlPanelConfiguration />;\n        }\n    };\n\n    return (getViewByMode(mode));\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewController } from \"./fragments/view/ControllPanelViewController\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewController mode={mode} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editSequenceConfiguration());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToConfiguration, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + ((mode.includes(Mode.EDIT.toString()) && mode !== Mode.VIEW_CONFIGURATION) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW || mode === Mode.VIEW_CONFIGURATION ? \" active\" : \"\")}\n                             onClick={setModeToConfiguration}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToConfiguration = () => {\n        dispatch(EditActions.setMode.editConfiguration());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToConfiguration,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        // const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n        //     return {\n        //         parentId: initData.actorFk,\n        //         name: getDataNameById(initData.dataFk, initData.instanceFk),\n        //         state: ActorDataState.NEW,\n        //     };\n        // };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        // const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n        //     return {\n        //         parentId:\n        //             initData.instanceFk > -1\n        //                 ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n        //                 : initData.dataFk,\n        //         name: getActorNameById(initData.actorFk),\n        //         state: ActorDataState.NEW,\n        //     };\n        // };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../dataAccess/access/to/StateTO\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { DavitShowMoreButton } from \"../atomic\";\nimport \"./StateView.css\";\n\ninterface StateViewProps {\n    showChain: boolean;\n}\n\nexport const StateView: FunctionComponent<StateViewProps> = (props) => {\n    const {showChain} = props;\n\n    const sequenceStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectSequence)?.sequenceStates || [];\n    const chainStates: ChainStateTO[] = useSelector(sequenceModelSelectors.selectChainCTO)?.chainStates || [];\n\n    const falseStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectFalseStates);\n    const trueStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectTrueStates);\n\n    const HEADER: string = \"State\";\n    const [showStates, setShowStates] = useState<boolean>(false);\n\n    const buildStateRow = (state: StateTO, index: number): JSX.Element => {\n\n            const stateIsTrue: boolean = trueStates.some(trueState => trueState.id === state.id);\n            const stateIsFalse: boolean = falseStates.some(falseState => falseState.id === state.id);\n\n            return (\n                <div key={index}\n                     className={\"stateViewState flex content-space-between \" + (index !== 0 ? \"stateViewBorder\" : \"\")}\n                >\n                    <div className=\"flex flex-start align-center padding-small\">\n                        <label>{state.label}</label>\n                    </div>\n\n                    <div className=\"flex flex-end align-center padding-small\">\n                        <svg className=\"stateViewSvgField\">\n                            <line className={state.isState ? \"stateViewIsTrue\" : \"stateViewIsFalse\"}\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"1rem\"\n                                  y2=\"0\"\n                            />\n                        </svg>\n                        {stateIsTrue && <div className=\"gg-check-o\" />}\n                        {stateIsFalse && <div className=\"gg-close-o\" />}\n                        {!stateIsFalse && !stateIsTrue && <div className=\"stateViewSpacer\" />}\n                    </div>\n                </div>\n            );\n        }\n    ;\n\n    return (\n        <div className=\"stateView flex flex-column border border-small\">\n            <div className=\"stateViewHeader flex content-space-between padding-small\">\n                <label>{HEADER}</label>\n                <DavitShowMoreButton show={showStates}\n                                     onClick={setShowStates}\n                />\n            </div>\n            {showStates && <div className=\"flex flex-column\">\n                {!showChain && sequenceStates.map((state, index) => buildStateRow(state, index))}\n                {showChain && chainStates.map((state, index) => buildStateRow(state, index))}\n            </div>}\n\n        </div>\n    );\n};\n\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { StateView } from \"../../../components/molecules/StateView\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors, ViewLevel } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport \"./FlowChart.css\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainLineColor,\n            viewLevel,\n            setViewLevelToChain,\n            setViewLevelToSequence,\n        } = useFlowChartViewModel();\n\n        // const [showChain, setShowChain] = useState<boolean>(false);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        const parentRef = useRef<HTMLDivElement>(null);\n\n        useEffect(() => {\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                setViewLevelToChain();\n            } else {\n                setViewLevelToSequence();\n            }\n        }, [chain, setViewLevelToChain, setViewLevelToSequence]);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() &&\n                <div className=\"flowChart padding-small\"\n                     style={{height: tableHeight}}\n                >\n                    <div className=\"flowChartHeader\">\n                        <StateView showChain={viewLevel === ViewLevel.chain} />\n                    </div>\n                    {viewLevel === ViewLevel.sequence && sequence && buildFlowChart()}\n                    {viewLevel === ViewLevel.chain && chain && buildChainFlowChart()}\n                </div>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainLinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n        const viewLevel: ViewLevel = useSelector(sequenceModelSelectors.selectViewLevel);\n\n        const dispatch = useDispatch();\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainLinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainLinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainLinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainLinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainLinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainLinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        const setViewLevelToChain = () => {\n            dispatch(SequenceModelActions.setViewLevel(ViewLevel.chain));\n        };\n\n        const setViewLevelToSequence = () => {\n            dispatch(SequenceModelActions.setViewLevel(ViewLevel.sequence));\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n            viewLevel,\n            setViewLevelToChain,\n            setViewLevelToSequence,\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./TabFragment.css\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab activeTabFragment\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./TabGroupFragment.css\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div className=\"flex\">{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Error Actions\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.sequenceConfiguration.name || \"Sequence Configuration name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainLinkCTO } from \"../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainLinkCTO,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.sequenceConfiguration.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceConfigurationTO } from \"../../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: SequenceConfigurationTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editSequenceConfiguration(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentSequenceConfigurationById(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: SequenceConfigurationTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequenceById(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: SequenceConfigurationTO[] = useSelector(masterDataSelectors.selectSequenceConfigurations);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainLinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}