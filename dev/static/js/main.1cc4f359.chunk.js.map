{"version":3,"sources":["assets/exxcellent_logo_200.png","dataAccess/access/cto/DataStoreCTO.ts","DavitConstants.ts","dataAccess/migration/DavitVersionManager.ts","dataAccess/DataStore.ts","dataAccess/access/types/GoToType.ts","utils/DavitUtil.ts","dataAccess/ConstraintsHelper.ts","dataAccess/access/types/GoToTypeChain.ts","dataAccess/util/CheckHelper.ts","dataAccess/util/DataAccessUtil.ts","dataAccess/repositories/ActorRepository.ts","dataAccess/repositories/GroupRepository.ts","dataAccess/repositories/DesignRepository.ts","dataAccess/repositories/GeometricalDataRepository.ts","dataAccess/repositories/PositionRepository.ts","dataAccess/repositories/ProjectRepository.ts","dataAccess/services/TechnicalDataAccessService.ts","dataAccess/services/ActorDataAccessService.ts","dataAccess/repositories/DataConnectionRepository.ts","dataAccess/repositories/DataRepository.ts","dataAccess/services/DataDataAccessService.ts","dataAccess/access/to/AbstractTO.ts","dataAccess/access/to/ChainLinkTO.ts","dataAccess/access/to/SequenceConfigurationTO.ts","dataAccess/access/to/SequenceTO.ts","dataAccess/access/cto/SequenceCTO.ts","dataAccess/access/cto/ChainLinkCTO.ts","dataAccess/repositories/ActionRepository.ts","dataAccess/repositories/ChainDecisionRepository.ts","dataAccess/repositories/ChainLinkRepository.ts","dataAccess/repositories/ChainRepository.ts","dataAccess/repositories/ChainStateRepository.ts","dataAccess/repositories/DecisionRepository.ts","dataAccess/repositories/SequenceConfigurationRepository.ts","dataAccess/repositories/SequenceRepository.ts","dataAccess/repositories/SequenceStateRepository.ts","dataAccess/repositories/SequenceStepRepository.ts","dataAccess/services/SequenceDataAccessService.ts","dataAccess/DataAccess.ts","slices/GlobalSlice.ts","components/molecules/notifications/DavitNotification.tsx","components/atomic/icons/IconSet.ts","dataAccess/access/to/DataRelationTO.ts","components/molecules/notifications/ErrorNotification.tsx","components/atomic/svg/DavitPath.tsx","dataAccess/access/types/ActionType.ts","dataAccess/access/to/ConditionTO.ts","dataAccess/access/to/DataInstanceTO.ts","slices/MasterDataSlice.ts","viewDataTypes/ActorDataState.ts","reducer/SequenceActionReducer.ts","services/SequenceService.ts","services/SequenceChainService.ts","slices/SequenceModelSlice.ts","slices/EditSlice.ts","dataAccess/access/to/ActorTO.ts","dataAccess/access/to/DesignTO.ts","dataAccess/access/to/GeometricalDataTO.ts","dataAccess/access/to/PositionTO.ts","dataAccess/access/cto/GeometraicalDataCTO.ts","dataAccess/access/cto/ActorCTO.ts","slices/thunks/ActorThunks.ts","slices/thunks/ChainLinkThunks.ts","slices/thunks/ChainDecisionThunks.ts","dataAccess/access/to/ChainTO.ts","slices/thunks/ChainThunks.ts","dataAccess/access/to/DataTO.ts","dataAccess/access/cto/DataCTO.ts","slices/thunks/DataThunks.ts","slices/thunks/StepThunks.ts","slices/thunks/DecisionThunks.ts","dataAccess/access/to/GroupTO.ts","slices/thunks/GroupThunks.ts","slices/thunks/RelationThunks.ts","slices/thunks/SequenceThunks.ts","style/Theme.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine.tsx","components/atomic/buttons/DavitButton.tsx","components/atomic/buttons/DavitIconButton.tsx","components/atomic/buttons/DavitAddButton.tsx","components/atomic/buttons/DavitBackButton.tsx","components/atomic/buttons/DavitEditButton.tsx","components/atomic/buttons/DavitShowMoreButton.tsx","components/atomic/buttons/DavitDeleteButton.tsx","components/atomic/dropdowns/DavitDropDown.tsx","components/atomic/dropdowns/ActionTypeDropDown.tsx","components/atomic/dropdowns/ActorDropDown.tsx","components/atomic/dropdowns/ChainDecisionDropDown.tsx","components/atomic/dropdowns/ChainDropDown.tsx","components/atomic/dropdowns/ChainLinkDropDown.tsx","components/atomic/dropdowns/DataDropDown.tsx","components/atomic/dropdowns/DecisionDropDown.tsx","components/atomic/dropdowns/GoToChainOptionDropDown.tsx","components/atomic/dropdowns/GoToOptionDropDown.tsx","components/atomic/dropdowns/InstanceDropDown.tsx","components/atomic/dropdowns/RelationDropDown.tsx","components/atomic/dropdowns/SequenceDropDown.tsx","components/atomic/dropdowns/StepDropDown.tsx","utils/WindowUtil.tsx","components/atomic/textinput/DavitTextInput.tsx","components/atomic/forms/fragments/FormFooter.tsx","components/atomic/forms/fragments/FormHeader.tsx","components/atomic/forms/DavitDownloadForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider.tsx","components/organisms/dndBox/DnDBox.tsx","components/atomic/forms/fragments/FormBody.tsx","components/atomic/forms/DavitNoteForm.tsx","components/atomic/forms/Form.tsx","components/atomic/modals/DavitModal.tsx","components/atomic/modals/DavitDownlaodModal.tsx","components/organisms/dndBox/fragments/DnDWrapper.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLabel.tsx","components/atomic/modals/DavitDraggableModal.tsx","components/atomic/modals/DavitNoteModal.tsx","components/molecules/AddOrEdit.tsx","components/molecules/DavitCommentButton.tsx","viewDataTypes/ViewFragment.tsx","components/molecules/card/DavitCard.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/ControlPanel.tsx","components/organisms/controllPanel/presentation/fragments/edit/common/OptionField.tsx","dataAccess/access/to/ChainDecisionTO.ts","dataAccess/access/to/StateTO.ts","dataAccess/access/to/ChainStateTO.ts","slices/thunks/ChainStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditChain.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditMenu.tsx","dataAccess/access/to/SequenceStepTO.ts","dataAccess/access/cto/SequenceStepCTO.ts","dataAccess/access/to/DecisionTO.ts","dataAccess/access/to/SequenceStateTO.ts","slices/thunks/SequenceStateThunk.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/SequenceViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/ControlPanelEditSequence.tsx","dataAccess/access/to/ActionTO.ts","slices/thunks/ActionThunks.ts","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ActorForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ActorViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditActorModal.tsx","components/atomic/dropdowns/ChainStateDropDown.tsx","components/molecules/ToggleButton.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainDecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainDecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainLinkForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/ChainLinkViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainLinkModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateList.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/ChainStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditChainStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DataRelationForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DataRelationViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDataRelationModal.tsx","components/atomic/dropdowns/SequenceStateDropDown.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/DecisionForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/DecisionViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditDecisionModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/SequenceStateForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditSequenceStateModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/forms/StepForm.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/viewmodels/StepViewModel.tsx","components/organisms/controllPanel/presentation/fragments/edit/fragments/modals/EditStepModal.tsx","components/organisms/controllPanel/presentation/fragments/edit/ControlPanelEditController.tsx","components/organisms/controllPanel/presentation/fragments/file/ControlPanelFileController.tsx","components/organisms/controllPanel/presentation/fragments/tabs/ControlPanelTabController.tsx","domains/overview/flowChartModel/fragments/FlowChartlabel.tsx","components/atomic/icons/NoteIcon.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ViewNavigator.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ControlPanelCalculationView.tsx","components/organisms/controllPanel/presentation/fragments/view/viewmodels/ViewViewModel.tsx","dataAccess/access/to/InitDataTO.ts","dataAccess/access/to/ChainConfigurationTO.tsx","slices/thunks/ChainConfigurationThunks.ts","slices/thunks/SequenceConfigurationThunks.ts","components/atomic/buttons/DavitToggleButton.tsx","components/atomic/dropdowns/SequenceConfigurationDropDown.tsx","components/organisms/configurationPanel/fragments/SaveConfigurationModal.tsx","components/organisms/configurationPanel/fragments/StateConfigurationView.tsx","components/organisms/configurationPanel/Configuration.tsx","components/organisms/controllPanel/presentation/fragments/view/fragments/ControlPanelConfiguration.tsx","components/organisms/controllPanel/presentation/fragments/view/ControllPanelViewController.tsx","components/organisms/controllPanel/presentation/ControlPanelController.tsx","components/organisms/sidePanel/SidePanelController.tsx","domains/actor/ActorModelController.tsx","domains/datamodel/DataModelController.tsx","components/molecules/StateView.tsx","domains/overview/flowChartModel/FlowChartController.tsx","components/organisms/table/DavitTable.tsx","domains/overview/tableModel/fragments/TabFragment.tsx","domains/overview/tableModel/fragments/TabGroupFragment.tsx","domains/overview/tableModel/fragments/TabPanel.tsx","domains/overview/tableModel/tables/calculated/CalcErrorActions.tsx","domains/overview/tableModel/tables/calculated/CalcLink.ts","domains/overview/tableModel/tables/calculated/CalcSequence.tsx","domains/overview/tableModel/tables/model/ModelChain.ts","domains/overview/tableModel/util/TableUtil.ts","domains/overview/tableModel/tables/model/ModelChainDecision.ts","domains/overview/tableModel/tables/model/ModelChainLink.ts","domains/overview/tableModel/tables/model/ModelDataSetup.ts","domains/overview/tableModel/tables/model/ModelSequence.ts","domains/overview/tableModel/tables/model/ModelSequenceCondition.ts","domains/overview/tableModel/tables/model/ModelSequenceDecision.ts","domains/overview/tableModel/tables/model/ModelSequenceStep.ts","domains/overview/tableModel/tables/model/ModelSequenceStepAction.ts","domains/overview/tableModel/presentation/TableModelController.tsx","pages/Davit.tsx","serviceWorker.ts","store.ts","utils/StorageListener.ts","middlewares/StateSync.ts","index.tsx"],"names":["module","exports","DataStoreCTO","projectName","version","actorZoom","dataZoom","actors","Map","groups","positions","designs","geometricalDatas","sequences","steps","actions","decisions","datas","dataConnections","sequenceConfigurations","chainConfigurations","chains","chainLinks","chainDecisions","sequenceStates","chainStates","DavitVersionManager","dataStoreObject","console","info","project","isSameVersion","undefined","warn","DataStore","data","instance","this","readDataFromStorage","dataObjectString","localStorage","getItem","objectStore","JSON","parse","storeFileData","stringify","setItem","readData","Object","entries","forEach","key","value","Error","Array","isArray","dataEntry","find","abstractTO","set","id","getDataStoreObject","toString","Number","from","values","fileData","dataStr","dataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","click","removeItem","saveData","GoToTypes","dataStore","DavitUtil","isNullOrUndefined","object","deepCopy","isValidName","name","valid","GoToTypesChain","ConstraintsHelper","sequenceStateId","some","decision","stateFkAndStateConditions","stateFkAndCondition","stateFk","chainStateId","dataId","dataRelationExists","relation","data1Fk","data2Fk","actionExist","actorData","dataFk","decisionExists","conditions","condition","chainDecisionExists","chainDecision","instanceId","actionExists","action","instanceFk","actorId","sendingActorFk","receivingActorFk","actorFk","stepToDelete","errorMessagePrefix","errorMessageSuffix","constraintStep","step","goto","type","STEP","constraintAction","sequenceStepFk","actionType","constraintDecision","ifGoTo","elseGoTo","length","sequenceId","stepExists","sequenceFk","dec","geometDataId","actorExists","actor","geometricalDataFk","dataExists","positionId","geoData","positionFk","designId","designFk","groupId","groupFks","CheckHelper","DataAccessUtil","determineNewId","abstractTOs","Math","max","map","abstract","Infinity","getOrCreateId","idToCheck","ActorRepository","getDataStore","get","findAll","delete","save","actorTO","GroupRepository","group","groupTO","DesignRepository","design","designTO","GeometricalDataRepository","geometricalData","success","geometricalDataTO","PositionRepository","position","positionTO","ProjectRepository","zoom","TechnicalDataAccessService","geometricalDataCTO","savedPosition","copyGeometricalDataCTO","isDeletedGeoData","ActorDataAccessService","createActorCTO","findCTO","findAllGroups","deleteGroup","filter","saveCTO","actorCTO","copy","savedDesign","savedGeometricalData","saveGroup","DataConnectionRepository","dataConnectionId","dataRelation","dataRelationTO","DataRepository","instances","checkDeleteInstancesConstraint","dataTO","checkOrsetNewDataId","checkOrSetNewInstanceId","copyInstance","dataTOs","copyDataTO","originalData","dt","inst","DataDataAccessService","findData","findDataCTO","createDataCTO","findAllDatas","saveDataCTO","dataCTO","copyDataCTO","deleteDataCTO","findAllDataRelationCTOs","deleteDataRelationCTO","findAllDataRelationTOs","createDataRelationCTO","saveDataRelation","dataCTO1","dataCTO2","AbstractTO","ChainLinkTO","sequenceConfigurationFk","ERROR","root","chainFk","SequenceConfigurationTO","note","initDatas","stateValues","SequenceTO","SequenceCTO","sequenceTO","sequenceStepCTOs","ChainLinkCTO","chainLink","sequence","sequenceConfiguration","ActionRepository","actionId","findAllForStep","stepId","actionTO","ChainDecisionRepository","findAllForChain","chainDecisionTO","ChainLinkRepository","link","chainlinkTO","ChainRepository","saveTO","chain","chainTO","ChainStateRepository","findAllByChainId","chainId","state","chainState","chainStateToSave","chainMockId","DecisionRepository","findAllForSequence","cond","decisionTO","copyDecisionToSave","SequenceConfigurationRepository","dataSetup","dataSetupTO","sequenceConfigurationTO","SequenceRepository","SequenceStateRepository","sequenceState","sequenceStateTOtoSave","sequenceMock","SequenceStepRepository","sequenceStepId","sequenceStep","sequenceStepTO","SequenceDataAccessService","findSequenceCTO","createSequenceCTO","saveSequenceCTO","saveSequenceStep","saveSequenceTO","deleteSequenceTO","tempCTO","deleteSequenceCTO","DEC","saveDecision","deleteDecision","deleteSequenceStep","setRoot","isDecision","copyDecisions","copySteps","setChainRoot","cDCTO","cptd","savedStep","createSequenceStepCTO","seqSteps","sort","a","b","index","findSequenceStepCTO","findDecision","saveActionTO","copyAction","deleteAction","findAllSequenceConfigurations","findSequenceConfigurationTO","saveSequenceConfigurationTO","deleteSequenceConfiguration","findAllSequenceStates","findAllSequenceStatesBySequenceFk","saveSequenceState","deleteSequenceState","sequenceStateToDelete","findSequenceState","findAllChainStates","findAllChainStatesByChainFk","saveChainState","deleteChainState","chainStateToDelete","findChainState","findAllChains","getChainCTO","crateChainCTO","saveChainTO","deleteChain","linksToDelete","decisionsToDelete","saveChainLink","findAllChainLinks","deleteChainTO","saveChainDecision","findAllChainDecisions","deleteChainDecision","findChainLink","findChainDecision","step1","step2","copyChain","chainLinkTOs","chainLinkCTOs","chainLinkCTO","sequenceCTO","createChainLinkCTO","links","DataAccess","response","message","code","error","createNewProject","makeTransactional","downloadData","dataRelationCTO","callback","commitChanges","roleBack","NotificationLevel","globalSlice","createSlice","initialState","errors","reducers","handleError","push","payload","clearErrors","removeErrorAtIndex","setActorZoom","setDataZoom","GlobalActions","storefileData","dispatch","window","location","reload","actorZoomIn","getState","newZoom","global","actorZoomOut","dataZoomIn","dataZoomOut","loadActorZoomFromBackend","loadDataZoomFromBackend","globalSelectors","globalReducer","reducer","DavitIcons","wrench","faWrench","handPointer","faHandPointer","plus","faPlus","back","faReply","trash","faTrashAlt","angleDown","faAngleDown","angleUp","faAngleUp","faFilter","pencil","faPencilAlt","file","faFile","eye","faEye","warning","faExclamationTriangle","faMinusCircle","faInfoCircle","play","faPlay","noteEmpty","faComment","noteFilled","faCommentDots","faSave","Direction","RelationType","DavitNotification","props","header","text","level","onCloseCallback","className","onClick","icon","getNotificationIcon","size","ErrorNotification","errorMessages","useSelector","useDispatch","buildMessage","ArrowType","DavitPathTypes","DavitPathHead","DataRelationTO","label1","label2","direction1","RIGHT","direction2","LEFT","type1","OUT","type2","IN","ActionType","DavitPath","xSource","ySource","xTarget","yTarget","sourceWidth","sourceHeight","targetHeight","targetWidth","labels","sourceDirection","targetDirection","stroked","head","lineType","lineColor","INTERFACE_INPUT","x","y","INTERFACE_OUTPUT","getDirectionOffset","direction","TOP","BOTTOM","getDirectionPoint","point","width","height","getMiddleValue","val1","val2","setOutPutOffset","offset","startDir","setInputPutOffset","plusPoint","point1","point2","getMiddlePoint","startPoint","endPoint","getCurvRefPoint","curveStartPoint","curveEndPoint","svg","ARROW","markerWidth","markerHeight","refX","refY","orient","strokeWidth","d","SMOOTH","x1","y1","x2","y2","endDir","offsetStartPoint","middlePoint","curveRefPoint","offsetStartSign","offsetEndSign","markerEnd","style","stroke","strokeDasharray","label","createSmoothLine","GRID","offset1","offset2","offsetPoint1","offsetPoint2","fill","createGridLine","createPath","ConditionTO","decisionFk","DataInstanceTO","ActorDataState","MasterDataSlice","relations","setActors","setGroups","setDatas","setRelations","setSequences","setSequenceConfigurations","setChains","setChainLinks","setChainDecisions","setSequenceStates","setChainStates","loadGroupsFromBackend","loadActorsFromBackend","loadDatasFromBackend","loadRelationsFromBackend","loadSequencesFromBackend","loadSequenceConfigurationsFromBackend","loadChainsFromBackend","loadChainLinksFromBackend","loadChainDecisionsFromBackend","loadChainStatesFromBackend","loadSequenceStatesFromBackend","MasterDataReducer","masterDataSelectors","masterData","config","isFirst","MasterDataActions","SequenceActionReducer","actorDatas","newActorDatas","isTransiantState","PERSISTENT","indexActorDataReceiving","findActorDataIndex","indexActorDataSending","ADD","actorDataIsPresent","UPDATED_TO","UPDATED_FROM","NEW","DELETE","DELETED","SEND","SENT","SEND_AND_DELETE","falseStates","trueStates","states","updatedActorDatas","goTo","actorDataToCheck","CHECKED","CHECK_FAILED","configuredStates","stateValue","sequenceStateFk","isState","stateFkAndStateCondition","stateToCheck","stateCondition","findIndex","indexActorDataToEdit","SequenceService","configuration","persistentDatas","calcSequence","sequenceModel","stepIds","calculatedSteps","terminal","loopStartingStep","dataSetupActions","triggerText","dataSetupResult","getInitStep","getRoot","stepOrDecision","getType","isLooping","result","calculateStep","checkForLoop","modelElementFk","getNext","terminalResult","loopStartingStepIndex","nextStepOrDecisionOrTerminal","getStepFromSequence","getDecisionFromSequence","FIN","IDLE","stepOrDecisionOrTerminal","calcStep","cp","rcp","SequenceChainService","sequenceChain","calcSequenceChain","calcLinks","linkIds","LINK","newLinkId","chainLinkId","flat","executeChainDecisionCheck","newCondID","loopStartingIndex","cd","rootLink","linkId","getLinkFromChain","getDecisionFromChain","calcLink","SequenceModelSlice","selectedSequenceModel","selectedSequenceConfiguration","calcChain","currentStepIndex","currentLinkIndex","errorActions","activeFilter","selectedChain","selectedChainConfiguration","setSelectedSequence","calcSequenceAndSetState","resetState","recalcSequence","setCurrentLinkIndex","setSelectedChain","setSelectedChainConfiguration","setCalcChain","setSelectedSequenceConfiguration","addDataFilter","removeDataFilter","filt","addActorFilters","removeActorFilter","setCurrentStepIndex","filteredSteps","getCurrentCalcSequence","filterSteps","getCurrentSequenceModel","newStepIndex","newLinkIndex","newFilteredSteps","setErrorActions","setActions","setActorDatas","setFilter","modelSteps","currentFilter","modelStep","mapActionsToArrows","arrows","sourceGeometricalData","targetGeometricalData","comp","dataLabels","TRIGGER","dataLabel","includes","existingArrow","arrow","SequenceModelReducer","sequenceModelSelectors","edit","mode","Mode","VIEW","currentSequence","getFilteredSteps","initDatasFormDataSetup","mapInitDataToActorData","stepFks","stepFk","allArrows","arr","rootState","stp","getArrowsForStepFk","concat","initData","SequenceModelActions","setCurrentSequence","setCurrentSequenceById","setCurrentSequenceByIdWithStates","setCurrentSequenceConfigurationById","dataSetupId","setCurrentSequenceConfiguration","resetCurrentSequenceConfiguration","resetCurrentStepIndex","resetCurrentSequence","resetCurrentChain","resetAll","handleActorClickEvent","handleDataClickEvent","stepNext","currentIndex","stepBack","linkBack","linkNext","setCurrentChain","chainCTO","setCurrentChainConfiguration","addDataFilters","removeDataFilters","ActorTO","DesignTO","color","GeometricalDataTO","PositionTO","GeometricalDataCTO","ActorCTO","setActorToEditThunk","EDIT_ACTOR","editActions","setActorToEdit","EditActor","log","saveChainLinkThunk","setChainLinkToEditThunk","EDIT_CHAIN_LINK","setChainLinkToEdit","EditChainLink","create","ifGoTO","EditChainDecision","saveChainDecisionThunk","setChainDecisionToEditThunk","EDIT_CHAIN_DECISION","EDIT_CHAIN_DECISION_CONDITION","setChainDecisionToEdit","update","ChainTO","EditChain","rootId","DataTO","dataConnectionFks","DataCTO","setDataToEdit","EDIT_DATA","EDIT_DATA_INSTANCE","EditData","saveSequenceStepThunk","setStepToEditThunk","startsWith","EDIT_SEQUENCE_STEP","setStepToEdit","EditStep","copySequence","item","EditDecision","saveDecisionThunk","findDecisionTOThunk","decisionId","setDecisionToEditThunk","EDIT_SEQUENCE_DECISION","EDIT_SEQUENCE_DECISION_CONDITION","setDecisionToEdit","GroupTO","setGroupToEditThunk","setGroupToEdit","EditGroup","setRelationToEditThunk","EDIT_RELATION","setRelationToEdit","EditRelation","saveSequenceThunk","setSequenceToEditThunk","getSequenceCTOById","EDIT_SEQUENCE","setSequenceToEdit","EditSequence","sequenceCTOToDelete","ElementSize","ElementVariant","getInitialState","objectToEdit","EDIT","EditSlice","setChainConfiguration","VIEW_CONFIGURATION","setInstanceId","setInstanceToEdit","setActionToEdit","EDIT_SEQUENCE_STEP_ACTION","setSequenceConfigurationToEdit","EDIT_GROUP","setConditionToEdit","clearObjectToEdit","setMode","setModeWithStorageThunk","setModeToEditStepThunk","stepCTO","setModeToEditSequenceConfigurationThunk","EditReducer","editSelectors","EDIT_SEQUENCE_STATES","actionToEdit","sourceComp","targetComp","sequenceStepCTO","EditActions","editActor","editActorById","act","editData","editDataById","editDataInstance","copyData","newInstance","editInstanceById","editGroup","editRelation","editSequence","editSequenceStates","editSequenceConfiguration","editStep","editDecision","editCondition","copyDecision","newCondition","editAction","editChain","EDIT_CHAIN","editChainStates","EDIT_CHAIN_STATES","editChainLink","editChainDecision","editChainCondition","editConfiguration","stepIndex","view","FILE","tab","TAB","FormLinePosition","Theme","children","DavitButton","medium","disabled","active","DavitIconButton","iconName","iconLeft","iconColor","DavitAddButton","DavitBackButton","DavitEditButton","DavitShowMoreButton","show","tiny","faAngleRight","DavitDeleteButton","noConfirm","useState","fluid","setFluid","useEffect","setTimeout","DavitDropDown","dropdownItems","onSelect","placeholder","clearable","classPrefix","classNamePrefix","isClearable","getSelectedValue","options","toLowerCase","localeCompare","dropdownItemToOption","onChange","handleOnChange","DavitLabelDropDown","isSearchable","dropdownItem","selectedValue","option","ActionTypeDropDown","getActionTypeLabel","ActorDropDown","useActorDropDownViewModel","actorToOption","selectActor","ActorDropDownLabel","ChainDecisionDropDownButton","exclude","useChainDecisionDropDownViewModel","createDecisionOptions","selectChainDecision","ChainDecisionDropDown","chainDecisionToOption","ChainDropDown","useChainDropDownViewModel","chainToOption","selectChain","ChainDropDownButton","ChainLinkDropDown","useChainStepDropDownViewModel","linkOptions","selectChainLink","ChainLinkDropDownButton","chainlinks","chainStepToOption","copyLinks","DataDropDown","useDataDropDownViewModel","selectData","dataToOption","DataLabelDropDown","DecisionLabelDropDown","useDecisionDropDownViewModel","sequenceToEdit","decisionOptions","selectDecision","DecisionDropDown","decisionToOption","copyDec","GoToChainOptionDropDown","goToToOption","gotoType","GoToOptionDropDown","InstanceDropDown","useInstanceDropDownViewModel","selectInstance","createOptions","optionItemString","instanceToOption","optionItem","optionLabel","selectInstances","optionItemStrings","dataAndInstanceIds","op","dataInst","dropdownItemas","RelationLabelDropDown","useRelationDropDownViewModel","selectDataRelation","relationToOption","getDataName","relationId","SequenceDropDown","useSequenceDropDownViewModel","selectSequence","sequenceToOption","SequenceLabelDropDown","StepLabelDropDown","useStepDropDownViewModel","stepOptions","selectSequenceStep","StepDropDown","stepToOption","getWidth","innerWidth","documentElement","clientWidth","body","getHeight","innerHeight","clientHeight","useEscHook","escButtonCall","event","addEventListener","removeEventListener","useEnterHook","DavitTextInput","onChangeCallback","onBlur","focus","setStateValue","inputRef","useRef","current","ref","target","FormFooter","FormHeader","DavitDownloadForm","setProjectName","onSubmit","FormDivider","DnDBoxType","FormLine","center","FormBody","DavitNoteForm","subHeader","onCancel","textAreRef","noteText","setNoteText","e","Form","DavitModal","DavitDownloadModal","closeCallback","DnDWrapper","dragConstraintsRef","initX","initY","onPositionUpdate","shadow","onGeoUpdate","geoId","useMotionValue","useInvertedScale","scaleX","scaleY","offsetWidth","offsetHeight","getBoundingClientRect","div","drag","dragConstraints","dragMomentum","dragElastic","onDragEnd","toFixed","boxShadow","FormlabelAlign","DnDBox","fullScreen","toDnDElements","zoomIn","zoomOut","svgElements","useDnDBoxViewModel","constraintsRef","paths","mouseOver","setMouseOver","zoomCallBacks","hover","handleKeyDown","wheelEvent","ctrlKey","preventDefault","deltaY","zoomInCallBack","zoomOutCallBack","checkZoom","passive","useCustomZoomEvent","onMouseEnter","onMouseLeave","maxWidth","toDnDElement","onPositionUpdateCallBack","updateGeo","element","round","createDavitPath","setKey","setPaths","newWindowHeight","setWidth","resizeListener","useCurrentWitdh","newWindowWitdh","setHeight","useCurrentHeight","handleResize","prevState","newPaths","updatedSvg","DavitDraggableModal","form","fullscreen","DavitNoteModal","saveTextCallback","AddOrEdit","addCallBack","dropDown","DavitCommentButton","onSaveCallback","comment","showForm","setShowForm","createViewFragment","actorDataFragmentProps","getCheckFeeld","backgroundColor","DavitCard","initName","initWidth","initHeight","dataFragments","zoomFactor","useDavitCardViewModel","onClickEdit","onClickFilter","showMenu","setShowMenu","isActiveFilter","minWidth","minHeight","fontSize","small","instanceName","createInstances","parentId","activeFilters","currentId","currentType","ControlPanel","OptionField","divider","toUpperCase","ChainDecisionTO","StateTO","ChainStateTO","EditChainState","useChainViewModel","isCreateAnother","setIsCreateAnother","saveStateFkAndStateCondition","stateToSave","changeName","copyChainToEdit","saveChain","newMode","validateInput","createAnother","updateSequence","editOrAddChainDecision","decisionToEdit","editOrAddChainLink","chainLinkToEdit","editStates","createStateFkAndStateCondition","newChainState","deleteStateFkAndStateCondition","stateToDeleteId","saveNote","ControlPanelEditChain","ControlPanelEditMenu","useControlPanelEditMenuViewModel","editOrAddActor","editOrAddData","editOrAddRelation","editOrAddSequence","editOrAddChain","SequenceStepTO","SequenceStepCTO","DecisionTO","SequenceStateTO","EditSequenceState","stateId","useSequenceViewModel","selectedSequence","copySequenceToEdit","saveSequence","deleteSequence","editOrAddSequenceStep","stepToEdit","editOrAddDecision","createSequenceState","newSequenceState","ControlPanelEditSequence","ActionTO","EditAction","actionIndex","stepToUpdateActionIndexes","useActionViewModel","getActorName","setActor","sending","copyActionToEdit","setAction","newActionType","setData","sendingActorId","receivingActorId","deleteActionToEdit","validAction","newAction","setDataAndInstance","dataAndInstance","setTriggerLabel","triggerLabel","getOptionText","FormLabel","align","justifyContent","ActionForm","EditActionModal","ActorForm","actorToEdit","saveActor","deleteActor","copyActor","updateActor","copyActorToEdit","useActorViewModel","EditActorModal","ChainStateDropDown","ToggleButton","toggleCallback","isLeft","leftLabel","rightLabel","ChainDecisionForm","currentIfGoTo","setCurrentIfGoTo","currentElseGoTo","setCurrentElseGoTo","updateChainDecision","saveGoToType","copyDecisionToEdit","handleType","newGoToType","gType","setGoToTypeStep","newGoTo","setGoToTypeDecision","createGoToStep","goToLink","createGoToDecision","goToDecision","decId","chainConditions","goBack","saveCondition","conditionToSave","filteredConditions","deleteCondition","conditionId","createCondition","updateStateFkAndStateCondition","newState","stateFkToRemove","stateFkStateCondition","useChainDecisionViewModel","buildStateTableRow","selectChainState","is","copyStateFkAndStateCondition","setStateCondition","textAlign","maxHeight","copyCondition","display","gt","EditChainDecisionModal","ChainLinkForm","currentGoTo","setCurrentGoTo","copyChainlink","copyChainLink","deleteChainLink","isRoot","currentSequenceConfiguration","setDataSetup","copyChainLinkToEdit","setSequenceModel","setNextLink","setNextDecision","createNewChainLink","newChainLink","copyLinkToEdit","useChainLinkViewModel","seqModel","EditChainLinkModal","StateList","statesToEdit","addStateCallback","removeStateCallback","setActiveCallback","ChainStateForm","stateColumnName","stateToToggle","copyStateToToggle","stateToChangeName","copyStateToChangeName","EditChainStateModal","DataForm","dataToEdit","deleteData","copyDataToEdit","updateData","changeInstanceName","instanceIndex","createInstance","deleteInstance","indexToDelete","splice","useDataViewModel","alignItems","newName","EditDataModal","DataRelationForm","relationToEdit","deleteRelation","directionOptions","typeOptions","data1","data2","setLabel","isSnd","relationCopy","setType","relationType","setDirection","saveRelation","cancel","dataOptions","validRelation","updateRelation","copyRelationToEdit","useDataRelationViewModel","EditDataRelationModal","SequenceStateDropDown","DecisionForm","updateDecision","newDecision","checkGoTos","copyGoto","copyConditionToEdit","validStep","goToStep","copyStepToEdit","saveAndGoBack","useDecisionViewModel","selectedState","selectSequenceState","EditDecisionModal","SequenceStateForm","copyStatToChangeName","EditSequenceStateModal","StepForm","copySequenceStep","editOrAddAction","updateStep","switchIndexesAndSave","indexToUpdate","increment","newIndex","copyStep","action1","action2","useStepViewModel","showActions","setShowActions","overflow","createActionRow","buildActionTable","start","EditStepModal","ControlPanelEditController","currentMode","getViewByMode","ControlPanelFileController","inputFileRef","createRef","faCloudUploadAlt","hidden","files","fileReader","FileReader","readAsText","onload","readFileToString","faDownload","ControlPanelTabController","useFileOptionModelView","showActorPage","showDataPage","showFlowChartPage","showTablePage","faShare","open","ModuleRoutes","table","flowChart","FlowChartlabel","NoteIcon","ViewNavigator","fastBackward","fastForward","backward","forward","faFastBackward","faArrowLeft","faArrowRight","faFastForward","ControlPanelCalculationView","linkIndex","currentChain","selectedSequenceName","selectedChainName","getSequenceNote","getChainNote","useViewViewModel","isModeView","handleArrowKeyEvent","useStepAndLinkNavigation","showChain","setShowChain","readOnly","InitDataTO","dataSetupFk","ChainConfigurationTO","EditChainConfiguration","chainConfiguration","chainStateFk","setSequenceConfigurationThunk","EditSequenceConfiguration","DavitToggleButton","toggle","checked","SequenceConfigurationDropDown","onSelectCallback","dropDownItem","SaveConfigurationModal","editName","setEditName","StateConfigurationView","setStateCallback","ConfigurationPanel","sequenceOptions","setSequenceOptions","showMore","setShowMore","showSaveConfiguration","setShowSaveConfiguration","sequenceConfigurationToEdit","chainConfigurationToEdit","newSequenceConfiguration","setIsStateInSequenceConfiguration","updatedSequenceConfiguration","sv","getUpdateStatesByConfiguration","statesToUpdate","saveSequenceInitData","copySequenceConfiguration","buildSequenceActorDataTableRow","copyInitData","iData","iex","deleteSequenceInitData","getUpdateChainStatesByConfiguration","setIsStateInChainConfiguration","updatedChainConfiguration","saveChainInitData","copyChainConfiguration","buildChainActorDataTableRow","deleteChainInitData","toggleSequenceChain","toggleValue","noteToReturn","getNote","getSequenceStates","getChainStates","getSequenceInitDatas","getChainInitDatas","copyChainTO","initD","ControlPanelConfiguration","ControlPanelViewController","ControlPanelController","useControlPanelViewModel","useGetViewByMode","onClickNavItem","SidePanelController","useSidePanelViewModel","setModeToEdit","setModeToFile","setModeToConfiguration","large","bottom","src","logo","alt","setModeToTab","ActorModelController","useViewModel","getArrows","onGeometricalDataUpdate","actorCTOToEdit","conditionToEdit","editArrow","editStepArrows","currentActorDatas","React","getActorDatas","getActorDatasFromView","getActorDatasFromEdit","actorDatasFromErros","mapErrorToActorDatas","actorDatasFromCurrentActorDatas","mapActorDataToViewFragment","actorDataFromActorData","actorDataExists","actorDatasFromStepToEdit","mapActionToActorDatas","actorDataFromActionToEdit","actorDataFromDecisionToEdit","mapDecisionToActorData","mapConditionToActorData","propOne","propTwo","actionItem","viewFragmentProps","mapActionTypeToViewFragmentState","getDataNameById","errorItem","mapErrorTypeToViewFragmentState","ERROR_SEND","dataName","cdState","ERROR_ADD","ERROR_DELETE","actorToCard","copyActorCTO","arrowsToDraw","arrowProps","arrowToDraw","dndBoxElements","actorr","actorsToDnDElements","DataModelController","useMetaDataModelViewModel","getRelations","dataZoomFactor","dataCTOToEdit","dataRelations","dataRelationToEdit","getActorNameById","actorDatasFromActions","actorDataFromAction","actDat","actorDataFromCurrentActorDatas","dataId1","instanceId1","dataId2","instanceId2","dataToCard","getGeometricalData","relationToDavitPath","isEdit","isRelationReadyToDraw","dataa","dataToDnDElements","dataRelationsProps","copyDataRelations","rel","StateView","showStates","setShowStates","buildStateRow","stateIsTrue","trueState","stateIsFalse","falseState","FlowChartController","useFlowChartViewModel","nodeModelTree","calcSteps","calcLinkIds","currentStepId","nodeModelChainTree","currentLinkId","chainLineColor","parentRef","tableHeight","setTableHeight","renderFlowChart","noCurves","arrowLength","buildSequenceChart","node","targetId","targetAnchor","sourceAnchor","strokeColor","margin","leafType","childs","buildChainChart","terminalStep","setGoToAsNode","parentIds","nodeModel","prefix","buildNodeModelTree","isLoop","rootStep","rootCond","getDataSetup","setGoToAsNodeChain","buildNodeModelChainTree","getChainRoot","chainName","sequenceName","DavitTable","bodyData","addFunction","mapValue","createButton","disable","createEmptyRow","numberOfElements","_","trClass","filledRows","numberOfColumns","emptyRows","i","fillWithEmptyRows","TabFragment","isActive","TabGroupFragment","TabPanel","activeTab","setActiveTab","showCalcChainTab","showCalcSequenceTab","showChainModelTab","showSequenceModelTabs","showErrorTab","tabDefinitions","tabs","identifier","ActiveTab","errorAction","getSequenceModelTabGroupDefinition","chainModel","sequenceModels","getTabsKey","tabGroup","createCalcErrorActionColumn","toActorName","fromActorName","createCalcLinkColumn","chainIndex","dataSetupName","createCalcSequenceStepColumn","loopStepStartIndex","clickEvent","hasError","getModelElementName","createChainModelColumn","editCallback","selectCallback","getChainGotoName","selectedChainlinks","selectedChainDecisions","gotoName","createChainDecisionColumn","createLinkColumn","createModelDataSetupColumn","createSequenceModelColumn","createConditionColumn","actorName","marked","createDecisionColumn","getGotoName","createModelStepColumn","createModelActionColumn","arrayIndex","indexIncrementCallback","indexDecrementCallback","arrayLength","TableModelController","useSequenceTableViewModel","activeTableData","selectedStep","dataSetups","chainModels","selectedActionToEdit","selectedDecisionToEdit","selectedConditionToEdit","selectedErrors","newActiveTab","dataSetupData","useGetDataSetupTableData","modelSequenceData","useGetSequenceModelsTableBody","modelSequenceDecisionData","useGetModelSequenceDecisionTableData","modelSequenceConditionData","decisionToShow","useGetModelSequenceConditionTableData","modelSequenceStepData","list","useGetStepTableData","modelStepActionData","useGetStepActionTableData","stepToShow","getStep","modelChainData","useGetChainModelsTableData","modelChainDecisionData","selectedChainLinks","useGetModelChainDecisionTableData","modelChainLinkData","useGetModelChainLinkTableData","calcSequenceData","useGetCalcSequenceTableData","calcLinkData","useGetCalcLinkTableData","calcErrorAction","useGetCalcErrorActionsTableData","setTabelHeihgt","getActiveTableData","home","Davit","exact","path","Boolean","hostname","match","store","middleware","getDefaultMiddleware","next","source","wrappedAction","assign","Date","configureStore","stringFromStorage","actionString","split","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1cc4f359.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exxcellent_logo_200.d20fbb57.png\";","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM } from \"../../../DavitConstants\";\nimport { ActionTO } from \"../to/ActionTO\";\nimport { ActorTO } from \"../to/ActorTO\";\nimport { ChainConfigurationTO } from \"../to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../to/ChainLinkTO\";\nimport { ChainStateTO } from \"../to/ChainStateTO\";\nimport { ChainTO } from \"../to/ChainTO\";\nimport { DataRelationTO } from \"../to/DataRelationTO\";\nimport { DataTO } from \"../to/DataTO\";\nimport { DecisionTO } from \"../to/DecisionTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { GroupTO } from \"../to/GroupTO\";\nimport { PositionTO } from \"../to/PositionTO\";\nimport { SequenceConfigurationTO } from \"../to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\n\nexport class DataStoreCTO {\n    constructor(\n        public projectName: string = DEFAULT_PROJECT_NAME,\n        public version: number = DAVIT_VERISON,\n        public actorZoom: number = DEFAULT_ZOOM,\n        public dataZoom: number = DEFAULT_ZOOM,\n        // Actors\n        public actors = new Map<number, ActorTO>(),\n        public groups = new Map<number, GroupTO>(),\n        // Technical\n        public positions = new Map<number, PositionTO>(),\n        public designs = new Map<number, DesignTO>(),\n        public geometricalDatas = new Map<number, GeometricalDataTO>(),\n        // Sequence\n        public sequences = new Map<number, SequenceTO>(),\n        public steps = new Map<number, SequenceStepTO>(),\n        public actions = new Map<number, ActionTO>(),\n        public decisions = new Map<number, DecisionTO>(),\n        // Data\n        public datas = new Map<number, DataTO>(),\n        public dataConnections = new Map<number, DataRelationTO>(),\n        // Configuration\n        public sequenceConfigurations = new Map<number, SequenceConfigurationTO>(),\n        public chainConfigurations = new Map<number, ChainConfigurationTO>(),\n        // Chain\n        public chains = new Map<number, ChainTO>(),\n        public chainLinks = new Map<number, ChainLinkTO>(),\n        public chainDecisions = new Map<number, ChainDecisionTO>(),\n        // Mock\n        public sequenceStates = new Map<number, SequenceStateTO>(),\n        public chainStates = new Map<number, ChainStateTO>(),\n    ) {\n    }\n}\n","// window referenc number.\nexport const WINDOW_FACTOR: number = 100;\n// 16:9 Aspect Ratio (divide 9 by 16 = 0.5625)\nexport const ASPECT_RATIO: number = 56.25;\n\nexport const STORE_ID = \"DAVIT\";\n\nexport const DAVIT_VERISON: number = 0.3;\n\nexport const DEFAULT_PROJECT_NAME = \"New project\";\n\nexport const DEFAULT_ZOOM: number = 1;\n","import { DAVIT_VERISON } from \"../../DavitConstants\";\nimport { StoreTO } from \"../access/to/StoreTO\";\n\nexport const DavitVersionManager = {\n    updateProject(dataStoreObject: StoreTO): StoreTO {\n        console.info(\"Call davit version manager.\");\n        let migratedDataStoreObject: StoreTO = {} as StoreTO;\n\n        switch (dataStoreObject.version) {\n            case undefined:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(\n            //         DavitVersionMigrator02.migrate(\n            //             DavitVersionMigrator01.migrate(dataStoreObject),\n            //         )\n            //     );\n            //     break;\n            // case 0.1:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(\n            //         DavitVersionMigrator02.migrate(dataStoreObject));\n            //     break;\n            // case 0.2:\n            //     migratedDataStoreObject = DavitVersionMigrator03.migrate(dataStoreObject);\n        }\n\n        return migratedDataStoreObject;\n    },\n\n    projectVersionIsEqualDavitVersion(project: StoreTO): boolean {\n        let isSameVersion: boolean = false;\n        if (project.version !== undefined && project.version === DAVIT_VERISON) {\n            isSameVersion = true;\n        } else {\n            console.warn(`!!!WARNING!!! DAVIT Project has different version (${project.version})!`);\n        }\n        return isSameVersion;\n    },\n};\n","import { DAVIT_VERISON, DEFAULT_PROJECT_NAME, DEFAULT_ZOOM, STORE_ID } from \"../DavitConstants\";\nimport { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { StoreTO } from \"./access/to/StoreTO\";\nimport { DavitVersionManager } from \"./migration/DavitVersionManager\";\n\nclass DataStore {\n    static instance: DataStore;\n    private data: DataStoreCTO | undefined;\n\n    public constructor() {\n        if (!DataStore.instance || !DataStore.instance.data) {\n            this.readDataFromStorage();\n        }\n        if (DataStore.instance) {\n            return DataStore.instance;\n        }\n        DataStore.instance = this;\n    }\n\n    private readDataFromStorage() {\n        const dataObjectString: string | null = localStorage.getItem(STORE_ID);\n        let objectStore: StoreTO = {\n            version: DAVIT_VERISON,\n            projectName: DEFAULT_PROJECT_NAME,\n            actorZoom: DEFAULT_ZOOM,\n            dataZoom: DEFAULT_ZOOM,\n            actors: [],\n            groups: [],\n            geometricalDatas: [],\n            positions: [],\n            designs: [],\n            sequences: [],\n            steps: [],\n            actions: [],\n            decisions: [],\n            datas: [],\n            dataConnections: [],\n            sequenceConfigurations: [],\n            chainConfigurations: [],\n            chains: [],\n            chainLinks: [],\n            chainDecisions: [],\n            sequenceStates: [],\n            chainStates: [],\n        } as StoreTO;\n        if (!dataObjectString) {\n            localStorage.setItem(STORE_ID, JSON.stringify(objectStore));\n        } else {\n            objectStore = JSON.parse(dataObjectString);\n            if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n                objectStore = DavitVersionManager.updateProject(objectStore);\n                this.storeFileData(JSON.stringify(objectStore));\n            }\n        }\n        this.readData(objectStore);\n    }\n\n    private readData(objectStore: StoreTO) {\n        this.data = new DataStoreCTO();\n        // if (!DavitVersionManager.projectVersionIsEqualDavitVersion(objectStore)) {\n        //     objectStore = DavitVersionManager.updateProject(objectStore);\n        // }\n        Object.entries(objectStore).forEach(([key, value]) => {\n            if (value !== undefined) {\n                if (Array.isArray(value)) {\n                    const dataEntry = Object.entries(this.data!).find(([dataKey]) => dataKey === key);\n                    if (dataEntry) {\n                        value.forEach((abstractTO: any) => {\n                            dataEntry[1].set(abstractTO.id, abstractTO);\n                        });\n                    } else {\n                        console.warn(`Data has wrong format: key ${key}, value ${value}`);\n                        throw new Error(`Data has wrong format: key ${key}, value ${value}`);\n                    }\n                }\n                this.data!.projectName = objectStore.projectName;\n\n                // If zoom is not set, fall back to default 100%\n                this.data!.actorZoom = objectStore.actorZoom ? objectStore.actorZoom : 1;\n                this.data!.dataZoom = objectStore.dataZoom ? objectStore.dataZoom : 1;\n            } else {\n                throw new Error(`No value found for key ${key}`);\n            }\n        });\n    }\n\n    private saveData(): void {\n        localStorage.setItem(STORE_ID, JSON.stringify(this.getDataStoreObject()));\n    }\n\n    private getDataStoreObject(): StoreTO {\n        return {\n            projectName: this.data!.projectName.toString(),\n            version: DAVIT_VERISON,\n            actorZoom: Number(this.data!.actorZoom),\n            dataZoom: Number(this.data!.dataZoom),\n            actors: Array.from(this.data!.actors.values()),\n            groups: Array.from(this.data!.groups.values()),\n            designs: Array.from(this.data!.designs.values()),\n            geometricalDatas: Array.from(this.data!.geometricalDatas.values()),\n            positions: Array.from(this.data!.positions.values()),\n            sequences: Array.from(this.data!.sequences.values()),\n            steps: Array.from(this.data!.steps.values()),\n            actions: Array.from(this.data!.actions.values()),\n            datas: Array.from(this.data!.datas.values()),\n            dataConnections: Array.from(this.data!.dataConnections.values()),\n            sequenceConfigurations: Array.from(this.data!.sequenceConfigurations.values()),\n            chainConfigurations: Array.from(this.data!.chainConfigurations.values()),\n            decisions: Array.from(this.data!.decisions.values()),\n            chains: Array.from(this.data!.chains.values()),\n            chainLinks: Array.from(this.data!.chainLinks.values()),\n            chainDecisions: Array.from(this.data!.chainDecisions.values()),\n            sequenceStates: Array.from(this.data!.sequenceStates.values()),\n            chainStates: Array.from(this.data!.chainStates.values()),\n        };\n    }\n\n    public storeFileData(fileData: string) {\n        const objectStore: StoreTO = JSON.parse(fileData);\n        this.readData(objectStore);\n        localStorage.setItem(STORE_ID, fileData);\n    }\n\n    public downloadData(projectName: string) {\n        const dataStr = JSON.stringify(this.getDataStoreObject());\n        const dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n        const linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", projectName + \".json\");\n        linkElement.click();\n    }\n\n    public createNewProject() {\n        localStorage.removeItem(STORE_ID);\n        this.readDataFromStorage();\n    }\n\n    public commitChanges(): void {\n        this.saveData();\n        this.readDataFromStorage();\n    }\n\n    public roleBack(): void {\n        console.warn(\"Data Store: role back.\");\n        this.readDataFromStorage();\n    }\n\n    public getDataStore(): DataStoreCTO {\n        if (!this.data) {\n            this.readDataFromStorage();\n        }\n        return this.data!;\n    }\n}\n\nconst dataStore = new DataStore();\n\nexport default dataStore;\n","export type GoTo = Intermediate | Terminal;\nexport type Intermediate = { type: GoToTypes.STEP | GoToTypes.DEC; id: number };\nexport type Terminal = { type: GoToTypes.FIN | GoToTypes.ERROR | GoToTypes.IDLE };\n\nexport enum GoToTypes {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    IDLE = \"IDLE\",\n    STEP = \"STEP\",\n    DEC = \"DEC\",\n}\n","export const DavitUtil = {\n    isNullOrUndefined(object: any): boolean {\n        return object === null || object === undefined;\n    },\n\n    deepCopy(object: any) {\n        return DavitUtil.isNullOrUndefined(object) ? object : JSON.parse(JSON.stringify(object));\n    },\n\n    isValidName(name: string): boolean {\n        let valid: boolean = false;\n        if (!this.isNullOrUndefined(name)) {\n            // TODO: define rules for a valid name.\n            valid = name !== \"\";\n        }\n        return valid;\n    },\n};\n","import { DataStoreCTO } from \"./access/cto/DataStoreCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { GoToTypes } from \"./access/types/GoToType\";\n\nexport const ConstraintsHelper = {\n\n    deleteSequenceStateConstraintCheck(sequenceStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingSequenceState: boolean = Array.from(dataStore.decisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === sequenceStateId));\n        if (decisionIsUsingSequenceState) {\n            throw new Error(`Sequence state.error! state with id: ${sequenceStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteChainStateConstraintCheck(chainStateId: number, dataStore: DataStoreCTO) {\n        const decisionIsUsingChainState: boolean = Array.from(dataStore.chainDecisions.values())\n            .some(decision => decision.stateFkAndStateConditions.some(stateFkAndCondition => stateFkAndCondition.stateFk === chainStateId));\n        if (decisionIsUsingChainState) {\n            throw new Error(`Sequence state.error! state with id: ${chainStateId} is still connected to decisions(s)!`);\n        }\n    },\n\n    deleteDataConstraintCheck(dataId: number, dataStore: DataStoreCTO) {\n        const dataRelationExists: boolean = Array.from(dataStore.dataConnections.values()).some(\n            (relation) => relation.data1Fk === dataId || relation.data2Fk === dataId,\n        );\n\n        const actionExist: boolean = Array.from(dataStore.actions.values()).some(\n            (actorData) => actorData.dataFk === dataId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some((condition) => condition.dataFk === dataId),\n        );\n\n        if (dataRelationExists || actionExist || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! data with id: ${dataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteDataInstanceConstraintCheck(dataId: number, instanceId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.dataFk === dataId && action.instanceFk === instanceId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.dataFk === dataId && condition.instanceFk === instanceId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some((chainDecision) =>\n            chainDecision.conditions.some(\n                (condition) => condition.dataFk === dataId && condition.instanceFk === instanceId,\n            ),\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! data instance with id: ${instanceId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteActorConstraintCheck(actorId: number, dataStore: DataStoreCTO) {\n        const actionExists: boolean = Array.from(dataStore.actions.values()).some(\n            (action) => action.sendingActorFk === actorId || action.receivingActorFk === actorId,\n        );\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some((decision) =>\n            decision.conditions.some((condition) => condition.actorFk === actorId),\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some(\n            (chainDecision) => chainDecision.conditions.some(condition => condition.actorFk === actorId),\n        );\n\n        if (actionExists || decisionExists || chainDecisionExists) {\n            throw new Error(`delete.error! actor with id: ${actorId} is still connected to Object(s)!`);\n        }\n    },\n\n    deleteStepConstraintCheck(stepToDelete: SequenceStepTO, dataStore: DataStoreCTO) {\n        let errorMessagePrefix: string = `delete.error! step: ${stepToDelete.name} with id: ${stepToDelete.id} is still connected to: \\n`;\n        let errorMessageSuffix: string = \"\";\n\n        const constraintStep: SequenceStepTO | undefined = Array.from(dataStore.steps.values()).find(\n            (step) => step.goto.type === GoToTypes.STEP && step.goto.id === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix + (constraintStep ? `step: ${constraintStep.name} with id: ${constraintStep.id}!` : \"\");\n\n        const constraintAction: ActionTO | undefined = Array.from(dataStore.actions.values()).find(\n            (action) => action.sequenceStepFk === stepToDelete.id,\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintAction ? `\\n action: ${constraintAction.actionType} with id: ${constraintAction.id}!` : \"\");\n\n        const constraintDecision: DecisionTO | undefined = Array.from(dataStore.decisions.values()).find(\n            (decision) =>\n                (decision.ifGoTo.type === GoToTypes.STEP && decision.ifGoTo.id === stepToDelete.id) ||\n                (decision.elseGoTo.type === GoToTypes.STEP && decision.elseGoTo.id === stepToDelete.id),\n        );\n\n        errorMessageSuffix =\n            errorMessageSuffix +\n            (constraintDecision ? `\\n decision: ${constraintDecision.name} with id: ${constraintDecision.id}!` : \"\");\n\n        if (errorMessageSuffix.length > 0) {\n            throw new Error(errorMessagePrefix + errorMessageSuffix);\n        }\n    },\n\n    deleteSequenceConstraintCheck(sequenceId: number, dataStore: DataStoreCTO) {\n        const stepExists: boolean = Array.from(dataStore.steps.values()).some((step) => step.sequenceFk === sequenceId);\n\n        const decisionExists: boolean = Array.from(dataStore.decisions.values()).some(\n            (dec) => dec.sequenceFk === sequenceId,\n        );\n        if (stepExists || decisionExists) {\n            throw new Error(`delete.error! sequence: ${sequenceId} is still connected to step(s) or decision(s)!`);\n        }\n    },\n\n    deleteChainConstraintCheck(chainId: number, dataStore: DataStoreCTO) {\n        const linkExists: boolean = Array.from(dataStore.chainLinks.values()).some(\n            (chainlink) => chainlink.chainFk === chainId,\n        );\n\n        const chainDecisionExists: boolean = Array.from(dataStore.chainDecisions.values()).some(\n            (chainDecision) => chainDecision.chainFk === chainId,\n        );\n\n        if (linkExists || chainDecisionExists) {\n            throw new Error(`delete.error! chain: ${chainId} is still connected to link(s) or chain decision(s)!`);\n        }\n    },\n\n    deleteGeometricalDataConstraintCheck(geometDataId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some(\n            (actor) => actor.geometricalDataFk === geometDataId,\n        );\n        const dataExists: boolean = Array.from(dataStore.datas.values()).some(\n            (data) => data.geometricalDataFk === geometDataId,\n        );\n        if (actorExists || dataExists) {\n            throw new Error(`delete.error! geometrical data with id: ${geometDataId} is still connected to Object(s)!`);\n        }\n    },\n\n    deletePositionConstraintCheck(positionId: number, dataStore: DataStoreCTO) {\n        const geometricalDataExists: boolean = Array.from(dataStore.geometricalDatas.values()).some(\n            (geoData) => geoData.positionFk === positionId,\n        );\n        if (geometricalDataExists) {\n            throw new Error(`delete.error! position with id: ${positionId} is still connected to GeometricalData(s)!`);\n        }\n    },\n\n    deleteDesignConstraintCheck(designId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.designFk === designId);\n        if (actorExists) {\n            throw new Error(`delete.error! design with id: ${designId} is still connected to Actor(s)!`);\n        }\n    },\n\n    deleteGroupConstraintCheck(groupId: number, dataStore: DataStoreCTO) {\n        const actorExists: boolean = Array.from(dataStore.actors.values()).some((actor) => actor.groupFks === groupId);\n        if (actorExists) {\n            throw new Error(`delete.error! group with id: ${groupId} is still connected to Actor(s)!`);\n        }\n    },\n};\n","export type GoToChain = IntermediateChain | TerminalChain;\nexport type IntermediateChain = { type: GoToTypesChain.LINK | GoToTypesChain.DEC; id: number };\nexport type TerminalChain = { type: GoToTypesChain.FIN | GoToTypesChain.ERROR };\n\nexport enum GoToTypesChain {\n    FIN = \"FIN\",\n    ERROR = \"ERROR\",\n    LINK = \"LINK\",\n    DEC = \"DEC\",\n}\n","import { DavitUtil } from \"../../utils/DavitUtil\";\n\nexport const CheckHelper = {\n    nullCheck(object: any, name: string) {\n        if (DavitUtil.isNullOrUndefined(object)) {\n            console.warn(`${name} must not be null or undefined`);\n            throw new Error(`null.error! ${name} must not be null or undefined`);\n        }\n    },\n};\n","import { AbstractTO } from \"../access/to/AbstractTO\";\n\nexport const DataAccessUtil = {\n    determineNewId(abstractTOs: AbstractTO[]): number {\n        let id = Math.max(...abstractTOs.map((abstract) => abstract.id)) + 1;\n        if (id === -Infinity) {\n            id = 1;\n        }\n        return id;\n    },\n\n    getOrCreateId(id: number, abstractTOs: AbstractTO[]): number {\n        let idToCheck: number = id;\n\n        if (idToCheck === -1) {\n            idToCheck = this.determineNewId(abstractTOs);\n        }\n\n        return idToCheck;\n    }\n};\n","import { ActorTO } from \"../access/to/ActorTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActorRepository = {\n    find(id: number): ActorTO | undefined {\n        return dataStore.getDataStore().actors.get(id);\n    },\n\n    findAll(): ActorTO[] {\n        return Array.from(dataStore.getDataStore().actors.values());\n    },\n\n    delete(actor: ActorTO): ActorTO {\n        ConstraintsHelper.deleteActorConstraintCheck(actor.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().actors.delete(actor.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return actor;\n    },\n\n    save(actor: ActorTO): ActorTO {\n        CheckHelper.nullCheck(actor, \"actor\");\n        let actorTO: ActorTO;\n        if (actor.id === -1) {\n            actorTO = {\n                ...actor,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actorTO = {...actor};\n        }\n        dataStore.getDataStore().actors.set(actorTO.id!, actorTO);\n        return actorTO;\n    },\n};\n","import { GroupTO } from \"../access/to/GroupTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GroupRepository = {\n    find(id: number): GroupTO | undefined {\n        return dataStore.getDataStore().groups.get(id);\n    },\n\n    findAll(): GroupTO[] {\n        return Array.from(dataStore.getDataStore().groups.values());\n    },\n\n    delete(group: GroupTO): GroupTO {\n        ConstraintsHelper.deleteGroupConstraintCheck(group.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().groups.delete(group.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return group;\n    },\n\n    save(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"actor\");\n        let groupTO: GroupTO;\n        if (group.id === -1) {\n            groupTO = {\n                ...group,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + groupTO.id);\n        } else {\n            groupTO = {...group};\n        }\n        dataStore.getDataStore().groups.set(groupTO.id!, groupTO);\n        return groupTO;\n    },\n};\n","import { DesignTO } from \"../access/to/DesignTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DesignRepository = {\n    find(id: number): DesignTO | undefined {\n        return dataStore.getDataStore().designs.get(id);\n    },\n\n    findAll(): DesignTO[] {\n        return Array.from(dataStore.getDataStore().designs.values());\n    },\n\n    delete(design: DesignTO): DesignTO {\n        ConstraintsHelper.deleteDesignConstraintCheck(design.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().designs.delete(design.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return design;\n    },\n\n    save(design: DesignTO): DesignTO {\n        let designTO: DesignTO;\n        if (design.id === -1) {\n            designTO = {\n                ...design,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            designTO = {...design};\n        }\n        dataStore.getDataStore().designs.set(designTO.id!, designTO);\n        return designTO;\n    },\n};\n","import { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const GeometricalDataRepository = {\n    find(id: number): GeometricalDataTO | undefined {\n        return dataStore.getDataStore().geometricalDatas.get(id);\n    },\n\n    findAll(): GeometricalDataTO[] {\n        return Array.from(dataStore.getDataStore().geometricalDatas.values());\n    },\n\n    delete(geometricalData: GeometricalDataTO): boolean {\n        ConstraintsHelper.deleteGeometricalDataConstraintCheck(geometricalData.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().geometricalDatas.delete(geometricalData.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(geometricalData: GeometricalDataTO): GeometricalDataTO {\n        let geometricalDataTO: GeometricalDataTO;\n        if (geometricalData.id === -1) {\n            geometricalDataTO = {\n                ...geometricalData,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            geometricalDataTO = {...geometricalData};\n        }\n        dataStore.getDataStore().geometricalDatas.set(geometricalDataTO.id!, geometricalDataTO);\n        return geometricalDataTO;\n    },\n};\n","import { PositionTO } from \"../access/to/PositionTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const PositionRepository = {\n    find(id: number): PositionTO | undefined {\n        return dataStore.getDataStore().positions.get(id);\n    },\n\n    findAll(): PositionTO[] {\n        return Array.from(dataStore.getDataStore().positions.values());\n    },\n\n    delete(position: PositionTO): boolean {\n        ConstraintsHelper.deletePositionConstraintCheck(position.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().positions.delete(position.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return success;\n    },\n\n    save(position: PositionTO): PositionTO {\n        let positionTO: PositionTO;\n        if (position.id === -1) {\n            positionTO = {\n                ...position,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            positionTO = {...position};\n        }\n        dataStore.getDataStore().positions.set(positionTO.id!, positionTO);\n        return positionTO;\n    },\n};\n","import dataStore from \"../DataStore\";\n\nexport const ProjectRepository = {\n    saveProjectName(name: string): string {\n        dataStore.getDataStore().projectName = name;\n        return name;\n    },\n\n    saveActionZoom(zoom: number): number {\n        dataStore.getDataStore().actorZoom = zoom;\n        return zoom;\n    },\n\n    saveDataZoom(zoom: number): number {\n        dataStore.getDataStore().dataZoom = zoom;\n        return zoom;\n    },\n\n    getActorZoom(): number {\n        return dataStore.getDataStore().actorZoom;\n    },\n\n    getDataZoom(): number {\n        return dataStore.getDataStore().dataZoom;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GeometricalDataTO } from \"../access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../access/to/PositionTO\";\nimport { DesignRepository } from \"../repositories/DesignRepository\";\nimport { GeometricalDataRepository } from \"../repositories/GeometricalDataRepository\";\nimport { PositionRepository } from \"../repositories/PositionRepository\";\nimport { ProjectRepository } from \"../repositories/ProjectRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const TechnicalDataAccessService = {\n    findPosition(id: number): PositionTO | undefined {\n        return PositionRepository.find(id);\n    },\n\n    findGeometricalDataCTO(id: number): GeometricalDataCTO | undefined {\n        const geometricalData = GeometricalDataRepository.find(id);\n        CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n        const position = PositionRepository.find(geometricalData!.positionFk!);\n        CheckHelper.nullCheck(position, \"position\");\n        return {geometricalData: geometricalData!, position: position!};\n    },\n\n    findGeometricalData(id: number): GeometricalDataTO | undefined {\n        return GeometricalDataRepository.find(id);\n    },\n\n    findDesign(id: number): DesignTO | undefined {\n        return DesignRepository.find(id);\n    },\n\n    saveGeometricalData(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        CheckHelper.nullCheck(geometricalDataCTO.position, \"position\");\n        const savedPosition = PositionRepository.save(geometricalDataCTO.position);\n        const copyGeometricalDataCTO: GeometricalDataCTO = DavitUtil.deepCopy(geometricalDataCTO);\n        copyGeometricalDataCTO.geometricalData.positionFk = savedPosition.id;\n        const savedGeometricalData = GeometricalDataRepository.save(copyGeometricalDataCTO.geometricalData);\n        return {\n            position: savedPosition,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    saveDesign(design: DesignTO): DesignTO {\n        CheckHelper.nullCheck(design, \"design\");\n        return DesignRepository.save(design);\n    },\n\n    deleteGeometricalDataCTO(geometricalDataCTO: GeometricalDataCTO): GeometricalDataCTO {\n        CheckHelper.nullCheck(geometricalDataCTO, \"geometricalDataCTO\");\n        const isDeletedGeoData = GeometricalDataRepository.delete(geometricalDataCTO.geometricalData);\n        const isdeletedPosition = PositionRepository.delete(geometricalDataCTO.position);\n        if (!(isdeletedPosition && isDeletedGeoData)) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return geometricalDataCTO;\n    },\n\n    deleteDesign(design: DesignTO): DesignTO {\n        const isDeleted = DesignRepository.delete(design);\n        if (!isDeleted) {\n            throw new Error(\"Couldn't delete\");\n        }\n        return design;\n    },\n\n    saveActorZoom(zoom: number): number {\n        return ProjectRepository.saveActionZoom(zoom);\n    },\n\n    saveDataZoom(zoom: number): number {\n        return ProjectRepository.saveDataZoom(zoom);\n    },\n\n    saveProjectName(projectName: string): string {\n        return ProjectRepository.saveProjectName(projectName);\n    },\n\n    getActorZoom(): number {\n        return ProjectRepository.getActorZoom();\n    },\n\n    getDataZoom(): number {\n        return ProjectRepository.getDataZoom();\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorCTO } from \"../access/cto/ActorCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { ActorTO } from \"../access/to/ActorTO\";\nimport { DesignTO } from \"../access/to/DesignTO\";\nimport { GroupTO } from \"../access/to/GroupTO\";\nimport { ActorRepository } from \"../repositories/ActorRepository\";\nimport { GroupRepository } from \"../repositories/GroupRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const ActorDataAccessService = {\n    findAll(): ActorCTO[] {\n        return ActorRepository.findAll().map((actor) => createActorCTO(actor));\n    },\n\n    findCTO(id: number): ActorCTO {\n        return createActorCTO(ActorRepository.find(id));\n    },\n\n    find(id: number): ActorTO | undefined {\n        return ActorRepository.find(id);\n    },\n\n    findAllGroups(): GroupTO[] {\n        return GroupRepository.findAll();\n    },\n\n    delete(actor: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actor.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(actor.design, \"DesignTO\");\n        CheckHelper.nullCheck(actor.actor, \"ActorTO\");\n        ActorRepository.delete(actor.actor);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(actor.geometricalData);\n        TechnicalDataAccessService.deleteDesign(actor.design);\n        return actor;\n    },\n\n    deleteGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        const actorsToClean: ActorCTO[] = this.findAll().filter((actor) => actor.actor.groupFks === group.id);\n        actorsToClean.forEach((actor) => {\n            actor.actor.groupFks = -1;\n            this.saveCTO(actor);\n        });\n        GroupRepository.delete(group);\n        return group;\n    },\n\n    saveCTO(actorCTO: ActorCTO): ActorCTO {\n        CheckHelper.nullCheck(actorCTO, \"ActorCTO\");\n        const copy: ActorCTO = DavitUtil.deepCopy(actorCTO);\n        const savedDesign = TechnicalDataAccessService.saveDesign(copy.design);\n        copy.actor.designFk = savedDesign.id;\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(copy.geometricalData);\n        copy.actor.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedActor = ActorRepository.save(copy.actor);\n        return {\n            actor: savedActor,\n            geometricalData: savedGeometricalData,\n            design: savedDesign,\n        };\n    },\n\n    saveGroup(group: GroupTO): GroupTO {\n        CheckHelper.nullCheck(group, \"group\");\n        return GroupRepository.save(group);\n    },\n};\n\nconst createActorCTO = (actor: ActorTO | undefined): ActorCTO => {\n    CheckHelper.nullCheck(actor, \"actor\");\n    const design: DesignTO | undefined = TechnicalDataAccessService.findDesign(actor!.designFk!);\n    CheckHelper.nullCheck(design, \"design\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        actor!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        actor: actor!,\n        geometricalData: geometricalData!,\n        design: design!,\n    };\n};\n","import { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataConnectionRepository = {\n    find(dataConnectionId: number): DataRelationTO | undefined {\n        return dataStore.getDataStore().dataConnections.get(dataConnectionId);\n    },\n    findAll(): DataRelationTO[] {\n        return Array.from(dataStore.getDataStore().dataConnections.values());\n    },\n    save(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataConnection\");\n        let dataRelationTO: DataRelationTO;\n        if (dataRelation.id === -1) {\n            dataRelationTO = {\n                ...dataRelation,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n            console.info(\"set new actor id: \" + dataRelationTO.id);\n        } else {\n            dataRelationTO = {...dataRelation};\n        }\n        dataStore.getDataStore().dataConnections.set(dataRelationTO.id!, dataRelationTO);\n        return dataRelationTO;\n    },\n\n    delete(dataRelation: DataRelationTO) {\n        CheckHelper.nullCheck(dataRelation, \"dataRelationTO\");\n        const success = dataStore.getDataStore().dataConnections.delete(dataRelation.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataRelation;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataStoreCTO } from \"../access/cto/DataStoreCTO\";\nimport { DataInstanceTO } from \"../access/to/DataInstanceTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DataRepository = {\n    find(dataId: number): DataTO | undefined {\n        return dataStore.getDataStore().datas.get(dataId);\n    },\n\n    findAll(): DataTO[] {\n        return Array.from(dataStore.getDataStore().datas.values());\n    },\n\n    save(data: DataTO) {\n        CheckHelper.nullCheck(data, \"data\");\n\n        if (data.instances.length <= 0) {\n            throw new Error(`dataTO with id: ${data.id} has no instances!`);\n        }\n\n        checkDeleteInstancesConstraint(data, this.findAll(), dataStore.getDataStore());\n\n        let dataTO: DataTO = {...data};\n\n        dataTO = checkOrsetNewDataId(this.findAll(), dataTO);\n        dataTO.instances = data.instances.map((instance) => checkOrSetNewInstanceId(data.instances, instance));\n\n        dataStore.getDataStore().datas.set(dataTO.id!, dataTO);\n        return dataTO;\n    },\n\n    delete(dataTO: DataTO): DataTO {\n        ConstraintsHelper.deleteDataConstraintCheck(dataTO.id, dataStore.getDataStore());\n        dataTO.instances.forEach((instance) =>\n            ConstraintsHelper.deleteDataInstanceConstraintCheck(dataTO.id, instance.id, dataStore.getDataStore()),\n        );\n        const success = dataStore.getDataStore().datas.delete(dataTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return dataTO;\n    },\n};\n\nconst checkOrSetNewInstanceId = (instances: DataInstanceTO[], instance: DataInstanceTO): DataInstanceTO => {\n    const copyInstance: DataInstanceTO = DavitUtil.deepCopy(instance);\n    if (instance.id === -1) {\n        copyInstance.id = DataAccessUtil.determineNewId(instances);\n    }\n    return copyInstance;\n};\n\nconst checkOrsetNewDataId = (dataTOs: DataTO[], dataTO: DataTO): DataTO => {\n    const copyDataTO: DataTO = DavitUtil.deepCopy(dataTO);\n    if (copyDataTO.id === -1) {\n        copyDataTO.id = DataAccessUtil.determineNewId(dataTOs);\n    }\n    return copyDataTO;\n};\n\nconst checkDeleteInstancesConstraint = (data: DataTO, datas: DataTO[], dataStore: DataStoreCTO) => {\n    if (data.id !== -1) {\n        const originalData: DataTO | undefined = datas.find((dt) => dt.id === data.id);\n        if (originalData) {\n            const deletedInstances: DataInstanceTO[] = originalData.instances.filter(\n                (instance) => !data.instances.some((inst) => inst.id === instance.id),\n            );\n            deletedInstances.forEach((instance) =>\n                ConstraintsHelper.deleteDataInstanceConstraintCheck(data.id, instance.id, dataStore),\n            );\n        }\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DataCTO } from \"../access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../access/cto/GeometraicalDataCTO\";\nimport { DataRelationTO } from \"../access/to/DataRelationTO\";\nimport { DataTO } from \"../access/to/DataTO\";\nimport { DataConnectionRepository } from \"../repositories/DataConnectionRepository\";\nimport { DataRepository } from \"../repositories/DataRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { TechnicalDataAccessService } from \"./TechnicalDataAccessService\";\n\nexport const DataDataAccessService = {\n    // ====================================================== DATA ======================================================\n\n    findData(id: number): DataTO | undefined {\n        return DataRepository.find(id);\n    },\n\n    findDataCTO(id: number): DataCTO {\n        return createDataCTO(DataRepository.find(id));\n    },\n\n    findAllDatas(): DataCTO[] {\n        return DataRepository.findAll().map((data) => createDataCTO(data));\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO, \"dataCTO\");\n        const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n        const savedGeometricalData = TechnicalDataAccessService.saveGeometricalData(dataCTO.geometricalData);\n        copyDataCTO.data.geometricalDataFk = savedGeometricalData.geometricalData.id;\n        const savedDataTO = DataRepository.save(copyDataCTO.data);\n        return {\n            data: savedDataTO,\n            geometricalData: savedGeometricalData,\n        };\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataCTO {\n        CheckHelper.nullCheck(dataCTO.geometricalData, \"GeometricalDataCTO\");\n        CheckHelper.nullCheck(dataCTO.data, \"DataTO\");\n        const relations: DataRelationTO[] = this.findAllDataRelationCTOs();\n        const relationsToDelete: DataRelationTO[] | undefined = relations.filter(\n            (relation) => relation.data1Fk === dataCTO.data.id || relation.data2Fk === dataCTO.data.id,\n        );\n        relationsToDelete.forEach((relation) => this.deleteDataRelationCTO(relation));\n        DataRepository.delete(dataCTO.data);\n        TechnicalDataAccessService.deleteGeometricalDataCTO(dataCTO.geometricalData);\n        return dataCTO;\n    },\n\n    // ====================================================== RELATIONS ======================================================\n\n    findAllDataRelationTOs(): DataRelationTO[] {\n        return DataConnectionRepository.findAll();\n    },\n\n    findAllDataRelationCTOs(): DataRelationTO[] {\n        return DataDataAccessService.findAllDataRelationTOs().map(createDataRelationCTO);\n    },\n\n    saveDataRelation(dataRelation: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelation, \"dataRelation\");\n        const saveDataConnection = DataConnectionRepository.save(dataRelation);\n        return saveDataConnection;\n    },\n\n    deleteDataRelationCTO(dataRelationTO: DataRelationTO): DataRelationTO {\n        CheckHelper.nullCheck(dataRelationTO, \"dataRelationCTO\");\n        DataConnectionRepository.delete(dataRelationTO);\n        return dataRelationTO;\n    },\n};\n\n// ====================================================== PRIVATE ======================================================\n\nconst createDataRelationCTO = (dataRelationTO: DataRelationTO): DataRelationTO => {\n    CheckHelper.nullCheck(dataRelationTO, \"DataRelationTO\");\n    const dataCTO1: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data1Fk));\n    CheckHelper.nullCheck(dataCTO1, \"dataTO1\");\n    const dataCTO2: DataCTO | undefined = createDataCTO(DataDataAccessService.findData(dataRelationTO.data2Fk));\n    CheckHelper.nullCheck(dataCTO2, \"dataTO2\");\n    return dataRelationTO;\n};\n\nconst createDataCTO = (data: DataTO | undefined): DataCTO => {\n    CheckHelper.nullCheck(data, \"data\");\n    const geometricalData: GeometricalDataCTO | undefined = TechnicalDataAccessService.findGeometricalDataCTO(\n        data!.geometricalDataFk!,\n    );\n    CheckHelper.nullCheck(geometricalData, \"geometricalData\");\n    return {\n        data: data!,\n        geometricalData: geometricalData!,\n    };\n};\n","export class AbstractTO {\n    constructor(public id: number = -1) {\n    }\n}\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainLinkTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public sequenceConfigurationFk: number = -1,\n        public goto: GoToChain = {type: GoToTypesChain.ERROR},\n        public root: boolean = false,\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\nimport { InitDataTO } from \"./InitDataTO\";\n\nexport interface SequenceStateValue{\n    sequenceStateFk: number;\n    value: boolean;\n}\n\nexport class SequenceConfigurationTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public note: string = \"\",\n        public sequenceFk: number = -1,\n        public initDatas: InitDataTO[] = [],\n        public stateValues: SequenceStateValue[] = [],\n        ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\") {\n        super();\n    }\n}\n","import { DecisionTO } from \"../to/DecisionTO\";\nimport { SequenceStateTO } from \"../to/SequenceStateTO\";\nimport { SequenceTO } from \"../to/SequenceTO\";\nimport { SequenceStepCTO } from \"./SequenceStepCTO\";\n\nexport class SequenceCTO {\n    constructor(\n        public sequenceTO: SequenceTO = new SequenceTO(),\n        public sequenceStepCTOs: SequenceStepCTO[] = [],\n        public decisions: DecisionTO[] = [],\n        public sequenceStates: SequenceStateTO[] = [],\n    ) {\n    }\n}\n","import { ChainLinkTO } from \"../to/ChainLinkTO\";\nimport { SequenceConfigurationTO } from \"../to/SequenceConfigurationTO\";\nimport { SequenceCTO } from \"./SequenceCTO\";\n\nexport class ChainLinkCTO {\n    constructor(\n        public chainLink: ChainLinkTO = new ChainLinkTO(),\n        public sequence: SequenceCTO = new SequenceCTO(),\n        public sequenceConfiguration: SequenceConfigurationTO = new SequenceConfigurationTO(),\n    ) {\n    }\n}\n","import { ActionTO } from \"../access/to/ActionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ActionRepository = {\n    find(actionId: number): ActionTO | undefined {\n        return dataStore.getDataStore().actions.get(actionId);\n    },\n\n    findAll(): ActionTO[] {\n        return Array.from(dataStore.getDataStore().actions.values());\n    },\n\n    findAllForStep(stepId: number): ActionTO[] {\n        return this.findAll().filter((action) => action.sequenceStepFk === stepId);\n    },\n\n    save(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actorData\");\n        let actionTO: ActionTO;\n        if (action.id === -1) {\n            actionTO = {\n                ...action,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            actionTO = {...action};\n        }\n        dataStore.getDataStore().actions.set(actionTO.id, actionTO);\n        return actionTO;\n    },\n\n    delete(id: number) {\n        const sucess: boolean = dataStore.getDataStore().actions.delete(id);\n        if (!sucess) {\n            throw Error(\"could not delete action with id: \" + id);\n        }\n    },\n};\n","import { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainDecisionRepository = {\n    find(id: number): ChainDecisionTO | undefined {\n        return dataStore.getDataStore().chainDecisions.get(id);\n    },\n\n    findAll(): ChainDecisionTO[] {\n        return Array.from(dataStore.getDataStore().chainDecisions.values());\n    },\n\n    findAllForChain(id: number): ChainDecisionTO[] {\n        const all: ChainDecisionTO[] = this.findAll();\n        return all.filter((dec) => dec.chainFk === id);\n    },\n\n    delete(decision: ChainDecisionTO) {\n        const success = dataStore.getDataStore().chainDecisions.delete(decision.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return decision;\n    },\n\n    save(decision: ChainDecisionTO): ChainDecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let chainDecisionTO: ChainDecisionTO;\n        if (decision.id === -1) {\n            chainDecisionTO = {\n                ...decision,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainDecisionTO = {...decision};\n        }\n        dataStore.getDataStore().chainDecisions.set(chainDecisionTO.id!, chainDecisionTO);\n        return chainDecisionTO;\n    },\n};\n","import { ChainLinkTO } from \"../access/to/ChainLinkTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainLinkRepository = {\n    find(id: number): ChainLinkTO | undefined {\n        return dataStore.getDataStore().chainLinks.get(id);\n    },\n\n    findAll(): ChainLinkTO[] {\n        return Array.from(dataStore.getDataStore().chainLinks.values());\n    },\n\n    findAllForChain(id: number): ChainLinkTO[] {\n        const all: ChainLinkTO[] = this.findAll();\n        return all.filter((link) => link.chainFk === id);\n    },\n\n    delete(step: ChainLinkTO) {\n        // ConstraintsHelper.deleteStepConstraintCheck(step.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chainLinks.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(chainLink: ChainLinkTO): ChainLinkTO {\n        CheckHelper.nullCheck(chainLink, \"chainlink\");\n        let chainlinkTO: ChainLinkTO;\n        if (chainLink.id === -1) {\n            chainlinkTO = {\n                ...chainLink,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainlinkTO = {...chainLink};\n        }\n        dataStore.getDataStore().chainLinks.set(chainlinkTO.id!, chainlinkTO);\n        return chainlinkTO;\n    },\n};\n","import { ChainTO } from \"../access/to/ChainTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainRepository = {\n    find(id: number): ChainTO | undefined {\n        return dataStore.getDataStore().chains.get(id);\n    },\n\n    findAll(): ChainTO[] {\n        return Array.from(dataStore.getDataStore().chains.values());\n    },\n\n    saveTO(chain: ChainTO): ChainTO {\n        CheckHelper.nullCheck(chain, \"chain\");\n        let chainTO: ChainTO;\n        if (chain.id === -1) {\n            chainTO = {\n                ...chain,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            chainTO = {...chain};\n        }\n        dataStore.getDataStore().chains.set(chainTO.id!, chainTO);\n        return chainTO;\n    },\n\n    delete(chain: ChainTO): ChainTO {\n        // ConstraintsHelper.deleteSequenceConstraintCheck(chain.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().chains.delete(chain.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return chain;\n    },\n};\n","import { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const ChainStateRepository = {\n    findAll(): ChainStateTO[] {\n        return Array.from(dataStore.getDataStore().chainStates.values());\n    },\n\n    findAllByChainId(chainId: number): ChainStateTO[] {\n        return this.findAll().filter(state => state.chainFk === chainId);\n    },\n\n    find(id: number): ChainStateTO | undefined {\n        return dataStore.getDataStore().chainStates.get(id);\n    },\n\n    save(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        let chainStateToSave: ChainStateTO;\n        let chainMockId: number = chainState.id;\n\n        chainMockId = DataAccessUtil.getOrCreateId(chainMockId, this.findAll());\n\n        chainStateToSave = {\n            ...chainState,\n            id: chainMockId,\n        };\n\n        dataStore.getDataStore().chainStates.set(chainMockId, chainStateToSave);\n\n        return chainStateToSave;\n    },\n\n    delete(chainState: ChainStateTO): ChainStateTO {\n        ConstraintsHelper.deleteChainStateConstraintCheck(chainState.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().chainStates.delete(chainState.id);\n\n        if (!success) {\n            throw new Error(`Try to delete chain state: Chain state with ID: ${chainState.id} dos not exists in data store!`);\n        }\n\n        return chainState;\n    }\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const DecisionRepository = {\n    find(id: number): DecisionTO | undefined {\n        return dataStore.getDataStore().decisions.get(id);\n    },\n\n    findAll(): DecisionTO[] {\n        return Array.from(dataStore.getDataStore().decisions.values());\n    },\n\n    findAllForSequence(id: number): DecisionTO[] {\n        return this.findAll().filter((cond) => cond.sequenceFk === id);\n    },\n\n    save(decision: DecisionTO): DecisionTO {\n        CheckHelper.nullCheck(decision, \"decision\");\n        let decisionTO: DecisionTO;\n\n        // Give condition a UID.\n        const copyDecisionToSave: DecisionTO = DavitUtil.deepCopy(decision);\n        copyDecisionToSave.conditions.map((condition) => {\n            if (condition.id === -1) {\n                condition.id = DataAccessUtil.determineNewId(decision.conditions);\n            }\n            return condition;\n        });\n\n        if (copyDecisionToSave.id === -1) {\n            decisionTO = {\n                ...copyDecisionToSave,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            decisionTO = {...copyDecisionToSave};\n        }\n        dataStore.getDataStore().decisions.set(decisionTO.id, decisionTO);\n        return decisionTO;\n    },\n\n    delete(decision: DecisionTO) {\n        const success: boolean = dataStore.getDataStore().decisions.delete(decision.id);\n        if (!success) {\n            throw Error(\"could not delete decision with id: \" + decision.id);\n        } else {\n            return decision;\n        }\n    },\n};\n","import { SequenceConfigurationTO } from \"../access/to/SequenceConfigurationTO\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceConfigurationRepository = {\n    find(sequenceConfigurationFk: number): SequenceConfigurationTO {\n        const sequenceConfiguration: SequenceConfigurationTO | undefined = dataStore.getDataStore().sequenceConfigurations.get(sequenceConfigurationFk);\n\n        if (sequenceConfiguration === undefined) {\n            throw new Error(\"Could not find Sequence Configuration with ID: \" + sequenceConfigurationFk);\n        } else {\n            return sequenceConfiguration;\n        }\n    },\n\n    findAll(): SequenceConfigurationTO[] {\n        return Array.from(dataStore.getDataStore().sequenceConfigurations.values());\n    },\n\n    save(dataSetup: SequenceConfigurationTO) {\n        CheckHelper.nullCheck(dataSetup, \"dataSetup\");\n        let dataSetupTO: SequenceConfigurationTO;\n        if (dataSetup.id === -1) {\n            dataSetupTO = {\n                ...dataSetup,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            dataSetupTO = {...dataSetup};\n        }\n        dataStore.getDataStore().sequenceConfigurations.set(dataSetupTO.id!, dataSetupTO);\n        return dataSetupTO;\n    },\n\n    delete(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        // TODO: add constraint helper.\n        const success = dataStore.getDataStore().sequenceConfigurations.delete(sequenceConfigurationTO.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequenceConfigurationTO;\n    },\n};\n","import { SequenceTO } from \"../access/to/SequenceTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceRepository = {\n    find(sequenceId: number): SequenceTO | undefined {\n        return dataStore.getDataStore().sequences.get(sequenceId);\n    },\n\n    findAll(): SequenceTO[] {\n        return Array.from(dataStore.getDataStore().sequences.values());\n    },\n\n    save(sequence: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequence, \"sequence\");\n        let sequenceTO: SequenceTO;\n        if (sequence.id === -1) {\n            sequenceTO = {\n                ...sequence,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceTO = {...sequence};\n        }\n        dataStore.getDataStore().sequences.set(sequenceTO.id!, sequenceTO);\n        return sequenceTO;\n    },\n\n    delete(sequence: SequenceTO): SequenceTO {\n        ConstraintsHelper.deleteSequenceConstraintCheck(sequence.id, dataStore.getDataStore());\n        const success = dataStore.getDataStore().sequences.delete(sequence.id!);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return sequence;\n    },\n};\n","import { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStateRepository = {\n    findAll(): SequenceStateTO[] {\n        return Array.from(dataStore.getDataStore().sequenceStates.values());\n    },\n\n    findAllForSequence(sequenceId: number): SequenceStateTO[] {\n        return this.findAll().filter(state => state.sequenceFk === sequenceId);\n    },\n\n    find(id: number): SequenceStateTO | undefined {\n        return dataStore.getDataStore().sequenceStates.get(id);\n    },\n\n    save(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        let sequenceStateTOtoSave: SequenceStateTO;\n        let sequenceStateId: number = sequenceState.id;\n\n        sequenceStateId = DataAccessUtil.getOrCreateId(sequenceStateId, this.findAll());\n\n        sequenceStateTOtoSave = {\n            ...sequenceState,\n            id: sequenceStateId,\n        };\n\n        dataStore.getDataStore().sequenceStates.set(sequenceStateId, sequenceStateTOtoSave);\n\n        return sequenceStateTOtoSave;\n    },\n\n    delete(sequenceMock: SequenceStateTO): SequenceStateTO {\n        ConstraintsHelper.deleteSequenceStateConstraintCheck(sequenceMock.id, dataStore.getDataStore());\n\n        const success = dataStore.getDataStore().sequenceStates.delete(sequenceMock.id);\n\n        if (!success) {\n            throw new Error(`Try to delete Sequence state: Sequence state with ID: ${sequenceMock.id} dos not exists in data store!`);\n        }\n\n        return sequenceMock;\n    }\n};\n","import { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { ConstraintsHelper } from \"../ConstraintsHelper\";\nimport dataStore from \"../DataStore\";\nimport { CheckHelper } from \"../util/CheckHelper\";\nimport { DataAccessUtil } from \"../util/DataAccessUtil\";\n\nexport const SequenceStepRepository = {\n    find(stepId: number): SequenceStepTO | undefined {\n        return dataStore.getDataStore().steps.get(stepId);\n    },\n\n    findAll(): SequenceStepTO[] {\n        return Array.from(dataStore.getDataStore().steps.values());\n    },\n\n    findAllForSequence(sequenceStepId: number) {\n        return this.findAll().filter((step) => step.sequenceFk === sequenceStepId);\n    },\n\n    delete(step: SequenceStepTO) {\n        ConstraintsHelper.deleteStepConstraintCheck(step, dataStore.getDataStore());\n        const success = dataStore.getDataStore().steps.delete(step.id);\n        if (!success) {\n            throw new Error(\"dataAccess.repository.error.notExists\");\n        }\n        return step;\n    },\n\n    save(sequenceStep: SequenceStepTO): SequenceStepTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        let sequenceStepTO: SequenceStepTO;\n        if (sequenceStep.id === -1) {\n            sequenceStepTO = {\n                ...sequenceStep,\n                id: DataAccessUtil.determineNewId(this.findAll()),\n            };\n        } else {\n            sequenceStepTO = {...sequenceStep};\n        }\n        dataStore.getDataStore().steps.set(sequenceStepTO.id!, sequenceStepTO);\n        return sequenceStepTO;\n    },\n};\n","import { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ChainCTO } from \"../access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../access/to/ChainStateTO\";\nimport { ChainTO } from \"../access/to/ChainTO\";\nimport { DecisionTO } from \"../access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"../access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../access/to/SequenceTO\";\nimport { GoToTypes } from \"../access/types/GoToType\";\nimport { ActionRepository } from \"../repositories/ActionRepository\";\nimport { ChainDecisionRepository } from \"../repositories/ChainDecisionRepository\";\nimport { ChainLinkRepository } from \"../repositories/ChainLinkRepository\";\nimport { ChainRepository } from \"../repositories/ChainRepository\";\nimport { ChainStateRepository } from \"../repositories/ChainStateRepository\";\nimport { DecisionRepository } from \"../repositories/DecisionRepository\";\nimport { SequenceConfigurationRepository } from \"../repositories/SequenceConfigurationRepository\";\nimport { SequenceRepository } from \"../repositories/SequenceRepository\";\nimport { SequenceStateRepository } from \"../repositories/SequenceStateRepository\";\nimport { SequenceStepRepository } from \"../repositories/SequenceStepRepository\";\nimport { CheckHelper } from \"../util/CheckHelper\";\n\nexport const SequenceDataAccessService = {\n    // ---------------------------------------------- Sequence ---------------------------------------------\n\n    findSequenceCTO(sequenceId: number): SequenceCTO {\n        return createSequenceCTO(SequenceRepository.find(sequenceId));\n    },\n\n    findAll(): SequenceTO[] {\n        return SequenceRepository.findAll();\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence, \"sequenceCTO\");\n        const sequenceTO: SequenceTO = SequenceRepository.save(sequence.sequenceTO);\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.sequenceFk === -1) {\n                step.sequenceStepTO.sequenceFk = sequenceTO.id;\n            }\n            this.saveSequenceStep(step);\n        });\n        return createSequenceCTO(sequenceTO);\n    },\n\n    saveSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        return SequenceRepository.save(sequenceTO);\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): SequenceTO {\n        CheckHelper.nullCheck(sequenceTO, \"sequenceTO\");\n        const tempCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        tempCTO.sequenceStepCTOs.forEach((step) => SequenceStepRepository.delete(step.sequenceStepTO));\n        tempCTO.decisions.forEach((cond) => DecisionRepository.delete(cond));\n        return SequenceRepository.delete(sequenceTO);\n    },\n\n    deleteSequenceCTO(sequence: SequenceCTO): SequenceCTO {\n        CheckHelper.nullCheck(sequence.sequenceTO, \"sequenceTO\");\n\n        // Remove all goto id's (FK's)\n        sequence.decisions.forEach((decision) => {\n            if (decision.ifGoTo.type === GoToTypes.STEP || decision.ifGoTo.type === GoToTypes.DEC) {\n                decision.ifGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n            if (decision.elseGoTo.type === GoToTypes.STEP || decision.elseGoTo.type === GoToTypes.DEC) {\n                decision.elseGoTo.id = -1;\n                this.saveDecision(decision);\n            }\n        });\n\n        sequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.STEP || step.sequenceStepTO.goto.type === GoToTypes.DEC) {\n                step.sequenceStepTO.goto.id = -1;\n                this.saveSequenceStep(step);\n            }\n        });\n\n        // Delete decisions and steps\n        sequence.decisions.forEach(this.deleteDecision);\n        sequence.sequenceStepCTOs.forEach(this.deleteSequenceStep);\n\n        this.deleteSequenceTO(sequence.sequenceTO);\n        return sequence;\n    },\n\n    // ----------------------------------------------- ROOT -------------------------------------------------\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): SequenceStepTO | DecisionTO {\n        let root: SequenceStepTO | DecisionTO | null = null;\n        const copyDecisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequenceId);\n        const copySteps: SequenceStepTO[] = SequenceStepRepository.findAllForSequence(sequenceId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            decision.root = false;\n            if (isDecision) {\n                if (decision.id === id) {\n                    decision.root = true;\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => DecisionRepository.save(decision));\n        copySteps.forEach((step) => SequenceStepRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): ChainLinkTO | ChainDecisionTO {\n        let root: ChainLinkTO | ChainDecisionTO | null = null;\n        const copyDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chainId);\n        const copySteps: ChainLinkTO[] = ChainLinkRepository.findAllForChain(chainId);\n        // set root\n        copyDecisions.forEach((decision) => {\n            if (isDecision) {\n                if (decision.id === id) {\n                    root = decision;\n                }\n            }\n        });\n        copySteps.forEach((step) => {\n            step.root = false;\n            if (!isDecision) {\n                if (step.id === id) {\n                    step.root = true;\n                    root = step;\n                }\n            }\n        });\n        // save\n        copyDecisions.forEach((decision) => ChainDecisionRepository.save(decision));\n        copySteps.forEach((step) => ChainLinkRepository.save(step));\n\n        if (root === null) {\n            throw Error(\"no root is set!\");\n        } else {\n            return root;\n        }\n    },\n\n    // ------------------------------------------ Sequence step ----------------------------------------\n\n    saveSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"sequenceStep\");\n        // TODO: move this in a CheckSaveDecision class.\n        if (sequenceStep.sequenceStepTO.sequenceFk === -1) {\n            throw new Error(\"Sequence step sequenceFk is '-1'!\");\n        }\n        const persistedActions: ActionTO[] = ActionRepository.findAllForStep(sequenceStep.sequenceStepTO.id);\n        const actionsToDelete: ActionTO[] = persistedActions.filter(\n            (action) => !sequenceStep.actions.some((cDCTO) => cDCTO.id === action.id),\n        );\n        actionsToDelete.map((cptd) => cptd.id).forEach(ActionRepository.delete);\n\n        const savedStep: SequenceStepTO = SequenceStepRepository.save(sequenceStep.sequenceStepTO);\n\n        sequenceStep.actions.forEach((action) => {\n            // action.sequenceStepFk = savedStep.id;\n            ActionRepository.save(action);\n        });\n        return createSequenceStepCTO(savedStep);\n    },\n\n    deleteSequenceStep(sequenceStep: SequenceStepCTO): SequenceStepCTO {\n        CheckHelper.nullCheck(sequenceStep, \"step\");\n        sequenceStep.actions.map((action) => ActionRepository.delete(action.id));\n        SequenceStepRepository.delete(sequenceStep.sequenceStepTO);\n        const seqSteps: SequenceStepTO[] = DavitUtil.deepCopy(\n            SequenceStepRepository.findAllForSequence(sequenceStep.sequenceStepTO.sequenceFk),\n        );\n        seqSteps.sort((a, b) => a.index - b.index);\n        seqSteps.forEach((step, index) => (step.index = index + 1));\n        seqSteps.forEach(SequenceStepRepository.save);\n        return sequenceStep;\n    },\n\n    findSequenceStepCTO(id: number): SequenceStepCTO {\n        const step: SequenceStepTO | undefined = SequenceStepRepository.find(id);\n        return createSequenceStepCTO(step);\n    },\n\n    // ------------------------------------------- Decision ---------------------------------------------\n\n    saveDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.save(decision);\n    },\n\n    deleteDecision(decision: DecisionTO): DecisionTO {\n        return DecisionRepository.delete(decision);\n    },\n\n    findDecision(id: number): DecisionTO {\n        const decision: DecisionTO | undefined = DecisionRepository.find(id);\n        if (decision === undefined) {\n            throw Error(\"Decision with id: \" + id + \" dos not exists!\");\n        }\n        return decision;\n    },\n\n    // ----------------------------------------------- Action -----------------------------------------------\n\n    saveActionTO(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"actionTO\");\n        const copyAction: ActionTO = DavitUtil.deepCopy(action);\n        return ActionRepository.save(copyAction);\n    },\n\n    deleteAction(action: ActionTO): ActionTO {\n        CheckHelper.nullCheck(action, \"action\");\n        ActionRepository.delete(action.id);\n        return action;\n    },\n\n    // --------------------------------------------- Data Setup -------------------------------------------\n\n    findAllSequenceConfigurations(): SequenceConfigurationTO[] {\n        return SequenceConfigurationRepository.findAll();\n    },\n\n    findSequenceConfigurationTO(sequenceConfigurationFk: number): SequenceConfigurationTO {\n        return SequenceConfigurationRepository.find(sequenceConfigurationFk);\n    },\n\n    saveSequenceConfigurationTO(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        CheckHelper.nullCheck(sequenceConfigurationTO, \"sequenceConfiguration\");\n        return SequenceConfigurationRepository.save(sequenceConfigurationTO);\n    },\n\n    deleteSequenceConfiguration(sequenceConfigurationTO: SequenceConfigurationTO): SequenceConfigurationTO {\n        CheckHelper.nullCheck(sequenceConfigurationTO, \"sequenceConfiguration\");\n        SequenceConfigurationRepository.delete(sequenceConfigurationTO);\n        return sequenceConfigurationTO;\n    },\n\n    // --------------------------------------------------- Sequence State ------------------------------------------------\n\n    findAllSequenceStates(): SequenceStateTO[] {\n        return SequenceStateRepository.findAll();\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): SequenceStateTO[] {\n        return SequenceStateRepository.findAllForSequence(sequenceFk);\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceState, \"sequenceState\");\n        return SequenceStateRepository.save(sequenceState);\n    },\n\n    deleteSequenceState(sequenceStateId: number): SequenceStateTO {\n        CheckHelper.nullCheck(sequenceStateId, \"SequenceStateId\");\n        const sequenceStateToDelete: SequenceStateTO = this.findSequenceState(sequenceStateId);\n        return SequenceStateRepository.delete(sequenceStateToDelete);\n    },\n\n    findSequenceState(id: number): SequenceStateTO {\n        const sequenceState: SequenceStateTO | undefined = SequenceStateRepository.find(id);\n\n        if (!sequenceState) {\n            throw new Error(\"Could not find Sequence State with ID: \" + id);\n        } else {\n            return sequenceState;\n        }\n    },\n\n    // --------------------------------------------------- Chain state ------------------------------------------------\n\n    findAllChainStates(): ChainStateTO[] {\n        return ChainStateRepository.findAll();\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): ChainStateTO[] {\n        return ChainStateRepository.findAllByChainId(chainFk);\n    },\n\n    saveChainState(chainState: ChainStateTO): ChainStateTO {\n        CheckHelper.nullCheck(chainState, \"chainState\");\n        return ChainStateRepository.save(chainState);\n    },\n\n    deleteChainState(chainStateId: number): ChainStateTO {\n        CheckHelper.nullCheck(chainStateId, \"chainStateId\");\n        const chainStateToDelete: ChainStateTO = this.findChainState(chainStateId);\n        return ChainStateRepository.delete(chainStateToDelete);\n    },\n\n    findChainState(id: number): ChainStateTO {\n        const chainState: ChainStateTO | undefined = ChainStateRepository.find(id);\n\n        if (!chainState) {\n            throw new Error(\"Could not find Chain State with ID: \" + id);\n        } else {\n            return chainState;\n        }\n    },\n\n    // --------------------------------------------------- Chain ------------------------------------------------\n    findAllChains(): ChainTO[] {\n        return ChainRepository.findAll();\n    },\n\n    getChainCTO(chain: ChainTO): ChainCTO {\n        return crateChainCTO(chain);\n    },\n\n    saveChainTO(chain: ChainTO): ChainTO {\n        return ChainRepository.saveTO(chain);\n    },\n\n    deleteChain(chain: ChainTO): ChainTO {\n        const linksToDelete: ChainLinkTO[] = ChainLinkRepository.findAllForChain(chain.id);\n        const decisionsToDelete: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(chain.id);\n        linksToDelete.forEach((link) => ChainLinkRepository.delete(link));\n        decisionsToDelete.forEach((dec) => ChainDecisionRepository.delete(dec));\n        return ChainRepository.delete(chain);\n    },\n\n    saveChainLink(link: ChainLinkTO): ChainLinkTO {\n        return ChainLinkRepository.save(link);\n    },\n\n    findAllChainLinks(): ChainLinkTO[] {\n        return ChainLinkRepository.findAll();\n    },\n\n    deleteChainTO(chainLink: ChainLinkTO): ChainLinkTO {\n        return ChainLinkRepository.delete(chainLink);\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.save(decision);\n    },\n\n    findAllChainDecisions(): ChainDecisionTO[] {\n        return ChainDecisionRepository.findAll();\n    },\n\n    deleteChainDecision(decision: ChainDecisionTO): ChainDecisionTO {\n        return ChainDecisionRepository.delete(decision);\n    },\n\n    findChainLink(id: number): ChainLinkTO {\n        const link: ChainLinkTO | undefined = ChainLinkRepository.find(id);\n        if (link) {\n            return link;\n        } else {\n            throw Error(\"Try to find chain link: Could not find chain link with ID: \" + id);\n        }\n    },\n\n    findChainDecision(id: number): ChainDecisionTO {\n        const decision: ChainDecisionTO | undefined = ChainDecisionRepository.find(id);\n        if (decision) {\n            return decision;\n        } else {\n            throw Error(\"Try to find chain decision: Could not find chain decision with ID: \" + id);\n        }\n    },\n};\n// ================================================== PRIVATE ====================================================\n\nconst createSequenceCTO = (sequence: SequenceTO | undefined): SequenceCTO => {\n    CheckHelper.nullCheck(sequence, \"sequence\");\n\n    const sequenceStepCTOs: SequenceStepCTO[] = SequenceStepRepository.findAllForSequence(sequence!.id).map(createSequenceStepCTO);\n\n    sequenceStepCTOs.sort((step1, step2) => step1.sequenceStepTO.index - step2.sequenceStepTO.index);\n\n    const decisions: DecisionTO[] = DecisionRepository.findAllForSequence(sequence!.id);\n\n    const sequenceStates: SequenceStateTO[] = SequenceStateRepository.findAllForSequence(sequence!.id);\n\n    return {\n        sequenceTO: sequence!,\n        sequenceStepCTOs: sequenceStepCTOs,\n        decisions: decisions,\n        sequenceStates: sequenceStates\n    };\n};\n\nconst createSequenceStepCTO = (sequenceStepTO: SequenceStepTO | undefined): SequenceStepCTO => {\n    CheckHelper.nullCheck(sequenceStepTO, \"sequenceStepTO\");\n    const actionTOs: ActionTO[] = ActionRepository.findAllForStep(sequenceStepTO!.id);\n    const sortByIndexActions: ActionTO[] = actionTOs.sort(function (a, b) {\n        return a.index - b.index;\n    });\n    return {\n        sequenceStepTO: sequenceStepTO!,\n        actions: sortByIndexActions,\n    };\n};\n\nconst createChainLinkCTO = (link: ChainLinkTO | undefined): ChainLinkCTO => {\n    CheckHelper.nullCheck(link, \"chainlink\");\n    const chainLinkCTO: ChainLinkCTO = new ChainLinkCTO();\n    chainLinkCTO.chainLink = link!;\n    const sequenceConfiguration: SequenceConfigurationTO | undefined = SequenceConfigurationRepository.find(link!.sequenceConfigurationFk);\n    const sequenceTO: SequenceTO | undefined = SequenceRepository.find(link!.sequenceFk);\n    if (sequenceConfiguration && sequenceTO) {\n        const sequenceCTO: SequenceCTO = createSequenceCTO(sequenceTO);\n        chainLinkCTO.sequenceConfiguration = sequenceConfiguration;\n        chainLinkCTO.sequence = sequenceCTO;\n    }\n    return chainLinkCTO;\n};\n\nconst crateChainCTO = (chain: ChainTO): ChainCTO => {\n    CheckHelper.nullCheck(chain, \"chainTO\");\n\n    const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n\n    const chainLinkTOs: ChainLinkTO[] | undefined = ChainLinkRepository.findAllForChain(copyChain.id);\n\n    let chainLinkCTOs: ChainLinkCTO[] = [];\n\n    if (chainLinkTOs) {\n        chainLinkCTOs = chainLinkTOs.map((link) => createChainLinkCTO(link));\n    }\n\n    const chainDecisions: ChainDecisionTO[] = ChainDecisionRepository.findAllForChain(copyChain.id);\n\n    const chainStates: ChainStateTO[] = ChainStateRepository.findAllByChainId(chain!.id);\n\n    return {chain: copyChain, links: chainLinkCTOs, decisions: chainDecisions, chainStates: chainStates};\n};\n","import { ActorCTO } from \"./access/cto/ActorCTO\";\nimport { ChainCTO } from \"./access/cto/ChainCTO\";\nimport { DataCTO } from \"./access/cto/DataCTO\";\nimport { SequenceCTO } from \"./access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"./access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"./access/to/ActionTO\";\nimport { ChainDecisionTO } from \"./access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"./access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"./access/to/ChainStateTO\";\nimport { ChainTO } from \"./access/to/ChainTO\";\nimport { DataRelationTO } from \"./access/to/DataRelationTO\";\nimport { DecisionTO } from \"./access/to/DecisionTO\";\nimport { GroupTO } from \"./access/to/GroupTO\";\nimport { SequenceConfigurationTO } from \"./access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"./access/to/SequenceStateTO\";\nimport { SequenceStepTO } from \"./access/to/SequenceStepTO\";\nimport { SequenceTO } from \"./access/to/SequenceTO\";\nimport { DataAccessResponse } from \"./DataAccessResponse\";\nimport dataStore from \"./DataStore\";\nimport { ActorDataAccessService } from \"./services/ActorDataAccessService\";\nimport { DataDataAccessService } from \"./services/DataDataAccessService\";\nimport { SequenceDataAccessService } from \"./services/SequenceDataAccessService\";\nimport { TechnicalDataAccessService } from \"./services/TechnicalDataAccessService\";\n\nexport const DataAccess = {\n    // ========================================= FILE =========================================\n\n    storeFileData(fileData: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.storeFileData(fileData);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    createNewProject(): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        try {\n            dataStore.createNewProject();\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    downloadData(projectName: string): DataAccessResponse<void> {\n        const response: DataAccessResponse<void> = {\n            object: undefined,\n            message: \"\",\n            code: 500,\n        };\n        makeTransactional(() => TechnicalDataAccessService.saveProjectName(projectName));\n        try {\n            dataStore.downloadData(projectName);\n            return {...response, code: 200};\n        } catch (error) {\n            return {...response, message: error.message};\n        }\n    },\n\n    // ========================================= ZOOM =========================================\n\n    setActorZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveActorZoom(zoom));\n    },\n\n    setDataZoom(zoom: number): DataAccessResponse<number> {\n        return makeTransactional(() => TechnicalDataAccessService.saveDataZoom(zoom));\n    },\n\n    loadActorZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getActorZoom);\n    },\n\n    loadDataZoom(): DataAccessResponse<number> {\n        return makeTransactional(TechnicalDataAccessService.getDataZoom);\n    },\n\n    // ========================================= ACTOR =========================================\n\n    findAllActors(): DataAccessResponse<ActorCTO[]> {\n        return makeTransactional(ActorDataAccessService.findAll);\n    },\n\n    saveActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.saveCTO(actor));\n    },\n\n    deleteActorCTO(actor: ActorCTO): DataAccessResponse<ActorCTO> {\n        return makeTransactional(() => ActorDataAccessService.delete(actor));\n    },\n\n    // ========================================= SEQUENCE =========================================\n\n    deleteSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceCTO(sequence));\n    },\n\n    deleteSequenceTO(sequenceTO: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceTO(sequenceTO));\n    },\n\n    findAllSequences(): DataAccessResponse<SequenceTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAll);\n    },\n\n    findSequenceCTO(sequenceId: number): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceCTO(sequenceId));\n    },\n\n    saveSequenceCTO(sequence: SequenceCTO): DataAccessResponse<SequenceCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceCTO(sequence));\n    },\n\n    saveSequenceTO(sequence: SequenceTO): DataAccessResponse<SequenceTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceTO(sequence));\n    },\n\n    setRoot(sequenceId: number, id: number, isDecision: boolean): DataAccessResponse<SequenceStepTO | DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setRoot(sequenceId, id, isDecision));\n    },\n\n    // ========================================= STEP =========================================\n\n    saveSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceStep(sequenceStep));\n    },\n\n    deleteSequenceStepCTO(sequenceStep: SequenceStepCTO): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceStep(sequenceStep));\n    },\n\n    findSequenceStepCTO(id: number): DataAccessResponse<SequenceStepCTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceStepCTO(id));\n    },\n\n    // ========================================= DATA SETUP =========================================\n\n    findAllSequenceConfigurations(): DataAccessResponse<SequenceConfigurationTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceConfigurations);\n    },\n\n    findSequenceConfiguration(sequenceConfigurationFk: number): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceConfigurationTO(sequenceConfigurationFk));\n    },\n\n    deleteSequenceConfiguration(sequenceConfiguration: SequenceConfigurationTO): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceConfiguration(sequenceConfiguration));\n    },\n\n    saveSequenceConfigurationTO(sequenceConfigurationTO: SequenceConfigurationTO): DataAccessResponse<SequenceConfigurationTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceConfigurationTO(sequenceConfigurationTO));\n    },\n\n    // ========================================= DATA =========================================\n\n    findAllDatas(): DataAccessResponse<DataCTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDatas);\n    },\n\n    saveDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataCTO(dataCTO));\n    },\n\n    deleteDataCTO(dataCTO: DataCTO): DataAccessResponse<DataCTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataCTO(dataCTO));\n    },\n\n    // ========================================= RELATION =========================================\n\n    deleteDataRelation(dataRelationCTO: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.deleteDataRelationCTO(dataRelationCTO));\n    },\n\n    findAllDataRelations(): DataAccessResponse<DataRelationTO[]> {\n        return makeTransactional(DataDataAccessService.findAllDataRelationTOs);\n    },\n\n    saveDataRelationCTO(dataRelation: DataRelationTO): DataAccessResponse<DataRelationTO> {\n        return makeTransactional(() => DataDataAccessService.saveDataRelation(dataRelation));\n    },\n\n    // ========================================= GROUP =========================================\n\n    findAllGroups(): DataAccessResponse<GroupTO[]> {\n        return makeTransactional(ActorDataAccessService.findAllGroups);\n    },\n\n    saveGroup(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.saveGroup(group));\n    },\n\n    deleteGroupTO(group: GroupTO): DataAccessResponse<GroupTO> {\n        return makeTransactional(() => ActorDataAccessService.deleteGroup(group));\n    },\n\n    // ========================================= ACTION =========================================\n\n    deleteActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteAction(action));\n    },\n\n    saveActionTO(action: ActionTO): DataAccessResponse<ActionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveActionTO(action));\n    },\n\n    // ========================================= DECISION =========================================\n\n    saveDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveDecision(decision));\n    },\n\n    deleteDecision(decision: DecisionTO): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteDecision(decision));\n    },\n\n    findDecision(id: number): DataAccessResponse<DecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findDecision(id));\n    },\n\n    // ========================================= CHAIN =========================================\n\n    findAllChains(): DataAccessResponse<ChainTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChains);\n    },\n\n    getChainCTO(chain: ChainTO): DataAccessResponse<ChainCTO> {\n        return makeTransactional(() => SequenceDataAccessService.getChainCTO(chain));\n    },\n\n    saveChainTO(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainTO(chain));\n    },\n\n    deleteChain(chain: ChainTO): DataAccessResponse<ChainTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChain(chain));\n    },\n\n    saveChainlink(link: ChainLinkTO): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainLink(link));\n    },\n\n    findAllChainLinks(): DataAccessResponse<ChainLinkTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainLinks);\n    },\n\n    deleteChainLink(step: ChainLinkTO): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainTO(step));\n    },\n\n    saveChainDecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainDecision(decision));\n    },\n\n    findAllChainDecisions(): DataAccessResponse<ChainDecisionTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainDecisions);\n    },\n\n    deleteChaindecision(decision: ChainDecisionTO): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainDecision(decision));\n    },\n\n    setChainRoot(chainId: number, id: number, isDecision: boolean): DataAccessResponse<ChainLinkTO | ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.setChainRoot(chainId, id, isDecision));\n    },\n\n    findChainDecision(id: number): DataAccessResponse<ChainDecisionTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainDecision(id));\n    },\n\n    findChainLink(id: number): DataAccessResponse<ChainLinkTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainLink(id));\n    },\n\n    // ========================================= Sequence State =========================================\n\n    findAllSequenceStates(): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllSequenceStates);\n    },\n\n    findAllSequenceStatesBySequenceFk(sequenceFk: number): DataAccessResponse<SequenceStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllSequenceStatesBySequenceFk(sequenceFk));\n    },\n\n    findSequenceState(id: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findSequenceState(id));\n    },\n\n    saveSequenceState(sequenceState: SequenceStateTO): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveSequenceState(sequenceState));\n    },\n\n    deleteSequenceState(sequenceStateId: number): DataAccessResponse<SequenceStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteSequenceState(sequenceStateId));\n    },\n\n    // ========================================= Chain State =========================================\n\n    findAllChainStates(): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(SequenceDataAccessService.findAllChainStates);\n    },\n\n    findChainState(id: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.findChainState(id));\n    },\n\n    saveChainState(chainState: ChainStateTO): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.saveChainState(chainState));\n    },\n\n    deleteChainState(chainStateId: number): DataAccessResponse<ChainStateTO> {\n        return makeTransactional(() => SequenceDataAccessService.deleteChainState(chainStateId));\n    },\n\n    findAllChainStatesByChainFk(chainFk: number): DataAccessResponse<ChainStateTO[]> {\n        return makeTransactional(() => SequenceDataAccessService.findAllChainStatesByChainFk(chainFk));\n    },\n\n};\n\n// ========================================= PRIVATE =========================================\n\nfunction makeTransactional<T>(callback: () => T): DataAccessResponse<T> {\n    const response: DataAccessResponse<T> = {\n        object: {} as T,\n        message: \"\",\n        code: 500,\n    };\n    try {\n        const object = callback();\n        response.object = typeof object === \"undefined\" ? undefined : JSON.parse(JSON.stringify(object));\n        response.code = 200;\n        dataStore.commitChanges();\n    } catch (error) {\n        console.warn(error);\n        response.message = error.message;\n        dataStore.roleBack();\n    }\n    return response;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\n\ninterface GlobalState {\n    errors: string[];\n    actorZoom: number;\n    dataZoom: number;\n}\n\nconst getInitialState = (): GlobalState => {\n    return {\n        errors: [],\n        actorZoom: 1,\n        dataZoom: 1,\n    };\n};\n\nconst ZOOM_FACTOR: number = 0.1;\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: getInitialState(),\n    reducers: {\n        handleError: (state, action: PayloadAction<string>) => {\n            state.errors.push(action.payload);\n        },\n        clearErrors: (state) => {\n            state.errors = [];\n        },\n        removeErrorAtIndex: (state, action: PayloadAction<number>) => {\n            if (action.payload > -1 && action.payload < state.errors.length) {\n                state.errors = state.errors.filter((error, index) => index !== action.payload);\n            }\n        },\n        setActorZoom: (state, action: PayloadAction<number>) => {\n            state.actorZoom = action.payload;\n        },\n        setDataZoom: (state, action: PayloadAction<number>) => {\n            state.dataZoom = action.payload;\n        },\n    },\n});\n\n// ---------------------------------------- Thunks ----------------------------------------\n\nconst storefileData = (fileData: string): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<void> = await DataAccess.storeFileData(fileData);\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst createNewProject = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.createNewProject();\n    if (response.code === 200) {\n        window.location.reload();\n    } else {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst downloadData = (projectName: string): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<void> = DataAccess.downloadData(projectName);\n    if (response.code !== 200) {\n        dispatch(globalSlice.actions.handleError(response.message));\n    }\n};\n\nconst zoomInAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveActorZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.actorZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setActorZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomInAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom + ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst zoomOutAndSaveDataZoom = (): AppThunk => (dispatch, getState) => {\n    const newZoom: number = getState().global.dataZoom - ZOOM_FACTOR;\n    const response: DataAccessResponse<number> = DataAccess.setDataZoom(newZoom);\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(newZoom));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadActorZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadActorZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setActorZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\nconst loadDataZoomFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<number> = DataAccess.loadDataZoom();\n    if (response.code === 200) {\n        dispatch(globalSlice.actions.setDataZoom(response.object));\n    } else {\n        dispatch(globalSlice.actions.handleError(\"Could not save zoom!\"));\n    }\n};\n\n// ------------------------------------- Public Actions -------------------------------------\n\nexport const GlobalActions = {\n    storefileData,\n    createNewProject,\n    downloadData,\n    actorZoomIn: zoomInAndSaveActorZoom,\n    actorZoomOut: zoomOutAndSaveActorZoom,\n    dataZoomIn: zoomInAndSaveDataZoom,\n    dataZoomOut: zoomOutAndSaveDataZoom,\n    loadActorZoomFromBackend,\n    loadDataZoomFromBackend,\n    handleError: globalSlice.actions.handleError\n};\n\n// -------------------------------------- Selectors --------------------------------------\n\nexport const globalSelectors = {\n    selectGlobalErrorState: (state: RootState): string[] => {\n        return state.global.errors;\n    },\n\n    selectActorZoomFactor: (state: RootState): number => {\n        return state.global.actorZoom;\n    },\n    selectDataZoomFactor: (state: RootState): number => {\n        return state.global.dataZoom;\n    },\n};\n\nexport const globalReducer = globalSlice.reducer;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitNotification.css\";\n\nexport enum NotificationLevel {\n    info = \"info\",\n    warning = \"warning\",\n    error = \"error\"\n}\n\nexport interface DavitNotificationProps {\n    header: string;\n    text: string;\n    level: NotificationLevel;\n    onCloseCallback: () => void;\n}\n\nexport const DavitNotification: FunctionComponent<DavitNotificationProps> = (props) => {\n    const {header, text, level, onCloseCallback} = props;\n\n    const getNotificationIcon = (): IconDefinition => {\n        switch (level) {\n            case \"info\":\n                return DavitIcons.info;\n            case \"warning\":\n                return DavitIcons.warning;\n            case \"error\":\n                return DavitIcons.error;\n            default:\n                return faInfoCircle;\n        }\n    };\n\n    return (\n        <div className={\"notificationCard \" + level}\n        >\n            <button className={level + \" margin-medium\"}\n                    onClick={() => onCloseCallback()}\n            >\n                <FontAwesomeIcon icon={getNotificationIcon()}\n                                 size={\"2x\"}\n                                 className={level}\n                />\n            </button>\n            <div>\n                <h3 className={level}>{header}</h3>\n                <label>{text}</label>\n            </div>\n        </div>\n    );\n};\n","import { faComment, faCommentDots, faPencilAlt, faPlay, faPlus, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons/faExclamationTriangle\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faFile } from \"@fortawesome/free-solid-svg-icons/faFile\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons/faFilter\";\nimport { faHandPointer } from \"@fortawesome/free-solid-svg-icons/faHandPointer\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faMinusCircle } from \"@fortawesome/free-solid-svg-icons/faMinusCircle\";\nimport { faSave } from \"@fortawesome/free-solid-svg-icons/faSave\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons/faTrashAlt\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\n\nexport const DavitIcons = {\n    wrench: faWrench,\n    handPointer: faHandPointer,\n    plus: faPlus,\n    back: faReply,\n    trash: faTrashAlt,\n    angleDown: faAngleDown,\n    angleUp: faAngleUp,\n    filter: faFilter,\n    pencil: faPencilAlt,\n    file: faFile,\n    eye: faEye,\n    warning: faExclamationTriangle,\n    error: faMinusCircle,\n    info: faInfoCircle,\n    play: faPlay,\n    noteEmpty: faComment,\n    noteFilled: faCommentDots,\n    save: faSave,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport enum Direction {\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n}\n\nexport enum RelationType {\n    IN = \"IN\",\n    OUT = \"OUT\",\n}\n\nexport class DataRelationTO extends AbstractTO {\n    constructor(\n        public data1Fk: number = -1,\n        public data2Fk: number = -1,\n        public label1: string = \"\",\n        public label2: string = \"\",\n        public direction1: Direction = Direction.RIGHT,\n        public direction2: Direction = Direction.LEFT,\n        public type1: RelationType = RelationType.OUT,\n        public type2: RelationType = RelationType.IN,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { globalSelectors, globalSlice } from \"../../../slices/GlobalSlice\";\nimport { DavitNotification, NotificationLevel } from \"./DavitNotification\";\n\nexport interface ErrorNotificationProps {\n}\n\nexport const ErrorNotification: FunctionComponent<ErrorNotificationProps> = () => {\n        const errorMessages: string[] = useSelector(globalSelectors.selectGlobalErrorState);\n        const dispatch = useDispatch();\n\n        const buildMessage = (message: string, index: number): JSX.Element => {\n            return <DavitNotification key={index}\n                                      header={\"Error\"}\n                                      text={message}\n                                      level={NotificationLevel.error}\n                                      onCloseCallback={() => dispatch(globalSlice.actions.removeErrorAtIndex(index))}\n            />;\n        };\n\n        return (\n            <>\n                {\n                    errorMessages.length > 0 &&\n                    errorMessages.map((error, index) => buildMessage(error, index))\n                }\n            </>\n        );\n\n    }\n;\n","import { motion, Point } from \"framer-motion\";\nimport React, { FunctionComponent } from \"react\";\nimport { GeometricalDataCTO } from \"../../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { Direction } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport \"./DavitPath.css\";\n\nexport interface Arrow {\n    sourceGeometricalData: GeometricalDataCTO;\n    targetGeometricalData: GeometricalDataCTO;\n    dataLabels: string[];\n    type: ArrowType;\n}\n\nexport enum ArrowType {\n    SEND = \"SEND\",\n    TRIGGER = \"TRIGGER\",\n}\n\nexport enum DavitPathTypes {\n    SMOOTH = \"SMOOTH\",\n    GRID = \"GRID\",\n}\n\nexport enum DavitPathHead {\n    ARROW = \"ARROW\",\n}\n\nexport interface DavitPathProps {\n    xSource: number;\n    ySource: number;\n    xTarget: number;\n    yTarget: number;\n    sourceHeight: number;\n    sourceWidth: number;\n    targetHeight: number;\n    targetWidth: number;\n    id: number;\n    labels: string[];\n    lineType: DavitPathTypes;\n    head?: DavitPathHead;\n    sourceDirection?: Direction;\n    targetDirection?: Direction;\n    stroked?: boolean;\n    lineColor?: string;\n    key?: any;\n}\n\nexport const DavitPath: FunctionComponent<DavitPathProps> = (props) => {\n    const {\n        xSource,\n        ySource,\n        xTarget,\n        yTarget,\n        sourceWidth,\n        sourceHeight,\n        targetHeight,\n        targetWidth,\n        id,\n        labels,\n        sourceDirection,\n        targetDirection,\n        stroked,\n        head,\n        lineType,\n        lineColor,\n    } = props;\n\n    const INTERFACE_INPUT: Point = {x: 0, y: targetHeight / 2};\n    const INTERFACE_OUTPUT: Point = {x: 0, y: sourceHeight / 2};\n    const OFFSET: number = 10;\n    const MARKER_WIDTH: number = 20;\n    const TEXT_OFFSET: number = 25;\n\n    const createSmoothLine = (x1: number, y1: number, x2: number, y2: number) => {\n        const startDir: \"LEFT\" | \" RIGHT\" = x2 < x1 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const endDir: \"LEFT\" | \" RIGHT\" = x1 < x2 + sourceWidth / 2 ? \"LEFT\" : \" RIGHT\";\n        const xStart = startDir === \"LEFT\" ? x1 : x1 + sourceWidth;\n        const xEnd = endDir === \"LEFT\" ? x2 : x2 + targetWidth + OFFSET + MARKER_WIDTH;\n        let startPoint: Point = {x: xStart, y: y1};\n        let endPoint: Point = {x: xEnd, y: y2};\n        // set interfaces\n        startPoint = plusPoint(startPoint, INTERFACE_OUTPUT);\n        endPoint = plusPoint(endPoint, INTERFACE_INPUT);\n        // add object offset\n        const offsetStartPoint = setOutPutOffset(startPoint, OFFSET, startDir);\n        endPoint = setInputPutOffset(endPoint, OFFSET);\n\n        const middlePoint = getMiddlePoint(offsetStartPoint, endPoint);\n        const curveRefPoint = getCurvRefPoint(offsetStartPoint, middlePoint);\n        const offsetStartSign = startDir === \"LEFT\" ? \"-\" : \"\";\n        const offsetEndSign = endDir === \"LEFT\" ? \"\" : \"-\";\n\n        return (\n            <>\n                <path\n                    d={`M ${startPoint.x},${startPoint.y} \n        l ${offsetStartSign}10,0\n        Q ${curveRefPoint.x}, \n        ${curveRefPoint.y} \n        ${middlePoint.x}, \n        ${middlePoint.y}\n        T ${endPoint.x}, ${endPoint.y}\n        l ${offsetEndSign}10,0\n        `}\n                    className={\"carvPath \"}\n                    markerEnd=\"url(#arrow)\"\n                    style={{stroke: lineColor ? lineColor : \"black\", strokeDasharray: stroked ? 5.5 : \"\"}}\n                />\n                {labels.map((label, index) => {\n                    return (\n                        <>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowTextBG\"\n                            >\n                                {label}\n                            </text>\n                            <text\n                                x={middlePoint.x - TEXT_OFFSET}\n                                y={middlePoint.y + index * 20}\n                                className=\"davitArrowText\"\n                            >\n                                {label}\n                            </text>\n                        </>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const createGridLine = () => {\n        const startPoint: Point = getDirectionPoint(\n            {x: xSource, y: ySource},\n            sourceWidth,\n            sourceHeight,\n            sourceDirection,\n        );\n        const endPoint: Point = getDirectionPoint(\n            {x: xTarget, y: yTarget},\n            targetWidth,\n            targetHeight,\n            targetDirection,\n        );\n\n        // set interfaces\n        const offset1 = getDirectionOffset(sourceDirection);\n        const offset2 = getDirectionOffset(targetDirection);\n\n        const offsetPoint1 = plusPoint(startPoint, offset1);\n        const offsetPoint2 = plusPoint(endPoint, offset2);\n\n        return (\n            <path\n                d={`M ${startPoint.x},${startPoint.y} \n        L ${offsetPoint1.x},${offsetPoint1.y}\n        L ${offsetPoint2.x},${offsetPoint2.y}\n        L ${endPoint.x},${endPoint.y}\n        `}\n                style={{\n                    strokeDasharray: stroked ? \"5,5\" : 0,\n                    strokeWidth: \"2px\",\n                    fill: \"transparent\",\n                    stroke: \"black\",\n                }}\n                id={id.toString()}\n            />\n        );\n    };\n\n    const getDirectionOffset = (direction?: Direction): Point => {\n        const offset = 25;\n        switch (direction) {\n            case Direction.TOP:\n                return {x: 0, y: -offset};\n            case Direction.LEFT:\n                return {x: -offset, y: 0};\n            case Direction.RIGHT:\n                return {x: offset, y: 0};\n            case Direction.BOTTOM:\n                return {x: 0, y: offset};\n            case undefined:\n                return {x: 0, y: 0};\n        }\n    };\n\n    const getDirectionPoint = (point: Point, width: number, height: number, direction?: Direction): Point => {\n        switch (direction) {\n            case Direction.TOP:\n                point.x = point.x + width / 2;\n                break;\n            case Direction.LEFT:\n                point.y = point.y + height / 2;\n                break;\n            case Direction.RIGHT:\n                point.x = point.x + width;\n                point.y = point.y + height / 2;\n                break;\n            case Direction.BOTTOM:\n                point.x = point.x + width / 2;\n                point.y = point.y + height;\n                break;\n        }\n        return point;\n    };\n\n    const getMiddleValue = (val1: number, val2: number): number => {\n        return (val2 - val1) / 2 + val1;\n    };\n\n    const setOutPutOffset = (point: Point, offset: number, startDir: \"LEFT\" | \" RIGHT\"): Point => {\n        return startDir === \"LEFT\" ? {x: point.x - offset, y: point.y} : {x: point.x + offset, y: point.y};\n    };\n\n    const setInputPutOffset = (point: Point, offset: number): Point => {\n        return {x: point.x - offset, y: point.y};\n    };\n\n    const plusPoint = (point1: Point, point2: Point): Point => {\n        return {x: point1.x + point2.x, y: point1.y + point2.y};\n    };\n\n    const getMiddlePoint = (startPoint: Point, endPoint: Point): Point => {\n        return {\n            x: getMiddleValue(startPoint.x, endPoint.x),\n            y: getMiddleValue(startPoint.y, endPoint.y),\n        };\n    };\n\n    const getCurvRefPoint = (curveStartPoint: Point, curveEndPoint: Point): Point => {\n        return {\n            x: getMiddleValue(curveStartPoint.x, curveEndPoint.x),\n            y: curveStartPoint.y,\n        };\n    };\n\n    const createPath = (type: DavitPathTypes) => {\n        switch (type) {\n            case DavitPathTypes.SMOOTH:\n                return createSmoothLine(xSource, ySource, xTarget, yTarget);\n            case DavitPathTypes.GRID:\n                return createGridLine();\n        }\n    };\n\n    return (\n        <motion.svg className=\"componentSVGArea\">\n            {head === DavitPathHead.ARROW && (\n                <defs>\n                    <marker\n                        id=\"arrow\"\n                        markerWidth=\"10\"\n                        markerHeight=\"10\"\n                        refX=\"8\"\n                        refY=\"3\"\n                        orient=\"auto\"\n                        strokeWidth=\"0\"\n                    >\n                        <path d=\"M0,0 L0,6 L9,3 z\"\n                              className=\"carvArrowMarker\"\n                        />\n                    </marker>\n                </defs>\n            )}\n            {createPath(lineType)}\n        </motion.svg>\n    );\n};\n","export enum ActionType {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    SEND = \"SEND\",\n    SEND_AND_DELETE = \"SEND_AND_DELETE\",\n    TRIGGER = \"TRIGGER\",\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ConditionTO extends AbstractTO {\n    constructor(\n        public decisionFk: number = -1,\n        public actorFk: number = -1,\n        public dataFk: number = -1,\n        public instanceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DataInstanceTO extends AbstractTO {\n    constructor(public name: string = \"\") {\n        super();\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../dataAccess/access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\ninterface MasterDataState {\n    actors: ActorCTO[];\n    groups: GroupTO[];\n    datas: DataCTO[];\n    relations: DataRelationTO[];\n    sequences: SequenceTO[];\n    sequenceConfigurations: SequenceConfigurationTO[];\n    chains: ChainTO[];\n    chainLinks: ChainLinkTO[];\n    chainDecisions: ChainDecisionTO[];\n    sequenceState: SequenceStateTO[];\n    chainState: ChainStateTO[];\n}\n\nconst getInitialState: MasterDataState = {\n    actors: [],\n    groups: [],\n    datas: [],\n    relations: [],\n    sequences: [],\n    sequenceConfigurations: [],\n    chains: [],\n    chainLinks: [],\n    chainDecisions: [],\n    sequenceState: [],\n    chainState: [],\n};\n\nconst MasterDataSlice = createSlice({\n    name: \"masterData\",\n    initialState: getInitialState,\n    reducers: {\n        setActors: (state, action: PayloadAction<ActorCTO[]>) => {\n            state.actors = action.payload;\n        },\n        setGroups: (state, action: PayloadAction<GroupTO[]>) => {\n            state.groups = action.payload;\n        },\n        setDatas: (state, action: PayloadAction<DataCTO[]>) => {\n            state.datas = action.payload;\n        },\n        setRelations: (state, action: PayloadAction<DataRelationTO[]>) => {\n            state.relations = action.payload;\n        },\n        setSequences: (state, action: PayloadAction<SequenceTO[]>) => {\n            state.sequences = action.payload;\n        },\n        setSequenceConfigurations: (state, action: PayloadAction<SequenceConfigurationTO[]>) => {\n            state.sequenceConfigurations = action.payload;\n        },\n        setChains: (state, action: PayloadAction<ChainTO[]>) => {\n            state.chains = action.payload;\n        },\n        setChainLinks: (state, action: PayloadAction<ChainLinkTO[]>) => {\n            state.chainLinks = action.payload;\n        },\n        setChainDecisions: (state, action: PayloadAction<ChainDecisionTO[]>) => {\n            state.chainDecisions = action.payload;\n        },\n        setSequenceStates: (state, action: PayloadAction<SequenceStateTO[]>) => {\n            state.sequenceState = action.payload;\n        },\n        setChainStates: (state, action: PayloadAction<ChainStateTO[]>) => {\n            state.chainState = action.payload;\n        }\n    },\n});\n\n// =============================================== THUNKS ===============================================\n\nconst loadGroupsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<GroupTO[]> = await DataAccess.findAllGroups();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setGroups(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadActorsFromBackend = (): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO[]> = await DataAccess.findAllActors();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setActors(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadDatasFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO[]> = DataAccess.findAllDatas();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setDatas(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadRelationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO[]> = DataAccess.findAllDataRelations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setRelations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequencesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO[]> = DataAccess.findAllSequences();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequences(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceConfigurationsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO[]> = DataAccess.findAllSequenceConfigurations();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceConfigurations(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO[]> = DataAccess.findAllChains();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChains(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainLinksFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO[]> = DataAccess.findAllChainLinks();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainLinks(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainDecisionsFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO[]> = DataAccess.findAllChainDecisions();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainDecisions(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadChainStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setChainStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst loadSequenceStatesFromBackend = (): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStates();\n    if (response.code === 200) {\n        dispatch(MasterDataSlice.actions.setSequenceStates(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst findSequenceStepCTO = (id: number): SequenceStepCTO | undefined => {\n    let step: SequenceStepCTO | undefined;\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.findSequenceStepCTO(id);\n    if (response.code === 200) {\n        step = DavitUtil.deepCopy(response.object);\n    }\n    return step;\n};\n\nconst loadAll = (): AppThunk => (dispatch) => {\n    dispatch(loadGroupsFromBackend());\n    dispatch(loadActorsFromBackend());\n    dispatch(loadSequenceConfigurationsFromBackend());\n    dispatch(loadRelationsFromBackend());\n    dispatch(loadSequencesFromBackend());\n    dispatch(loadDatasFromBackend());\n    dispatch(loadChainsFromBackend());\n    dispatch(loadChainLinksFromBackend());\n    dispatch(loadChainDecisionsFromBackend());\n    dispatch(loadChainStatesFromBackend());\n    dispatch(loadSequenceStatesFromBackend());\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const MasterDataReducer = MasterDataSlice.reducer;\n\nexport const masterDataSelectors = {\n    selectActors: (state: RootState): ActorCTO[] => state.masterData.actors,\n    selectGroups: (state: RootState): GroupTO[] => state.masterData.groups,\n    selectDatas: (state: RootState): DataCTO[] => state.masterData.datas,\n    selectRelations: (state: RootState): DataRelationTO[] => state.masterData.relations,\n    selectSequences: (state: RootState): SequenceTO[] => state.masterData.sequences,\n    selectChains: (state: RootState): ChainTO[] => state.masterData.chains,\n    selectChainLinks: (state: RootState): ChainLinkTO[] => state.masterData.chainLinks,\n    selectChainDecisions: (state: RootState): ChainDecisionTO[] => state.masterData.chainDecisions,\n    selectSequenceConfigurations: (state: RootState): SequenceConfigurationTO[] => state.masterData.sequenceConfigurations,\n\n    selectSequenceTOById: (id: number) => (state: RootState): SequenceTO | undefined => {\n        return state.masterData.sequences.find((sequence) => sequence.id === id);\n    },\n\n    selectSequenceConfigurationsBySequenceId: (sequenceId: number | undefined) => (state: RootState): SequenceConfigurationTO[] => {\n        if (sequenceId !== undefined) {\n            return state.masterData.sequenceConfigurations.filter(config => config.sequenceFk !== sequenceId);\n        } else {\n            return state.masterData.sequenceConfigurations;\n        }\n    },\n\n    selectActorById: (id: number) => {\n        return (state: RootState): ActorCTO | null => {\n            return state.masterData.actors.find((actor) => actor.actor.id === id) || null;\n        };\n    },\n\n    selectSequenceStateBySequenceId: (sequenceId: number) => {\n        return (state: RootState): SequenceStateTO[] => {\n            return state.masterData.sequenceState.filter(state => state.sequenceFk === sequenceId);\n        };\n    },\n\n    selectChainStateByChainId: (chainId: number) => {\n        return (state: RootState): ChainStateTO[] => {\n            return state.masterData.chainState.filter(state => state.chainFk === chainId);\n        };\n    },\n\n    selectDataCTOById: (id: number) => {\n        return (state: RootState): DataCTO | null => {\n            return state.masterData.datas.find((data) => data.data.id === id) || null;\n        };\n    },\n\n    selectSequenceConfigurationToById: (id: number) => {\n        return (state: RootState): SequenceConfigurationTO | null => {\n            return state.masterData.sequenceConfigurations.find((config) => config.id === id) || null;\n        };\n    },\n\n    isFirstChainElement: (id: number) => {\n        return (state: RootState): boolean => {\n            let isFirst: boolean = true;\n            if (state.masterData.chainLinks.some((link) => link.chainFk === id)) {\n                isFirst = false;\n            }\n            if (state.masterData.chainDecisions.some((dec) => dec.chainFk === id)) {\n                isFirst = false;\n            }\n            return isFirst;\n        };\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const MasterDataActions = {\n    loadChainsFromBackend,\n    loadChainLinksFromBackend,\n    loadChainDecisionsFromBackend,\n    loadChainStatesFromBackend,\n    loadGroupsFromBackend,\n    loadActorsFromBackend,\n    loadSequenceConfigurationsFromBackend,\n    loadRelationsFromBackend,\n    loadSequencesFromBackend,\n    loadSequenceStatesFromBackend,\n    loadDatasFromBackend,\n    loadAll,\n    find: {\n        findSequenceStepCTO,\n    },\n};\n","export enum ActorDataState {\n    NEW = \"NEW\",\n    UPDATED_TO = \"UPDATED_TO\",\n    UPDATED_FROM = \"UPDATED_FROM\",\n    SENT = \"SENT\",\n    PERSISTENT = \"PERSISTENT\",\n    DELETED = \"DELETED\",\n    CHECKED = \"CHECKED\",\n    CHECK_FAILED = \"CHECK_FAILED\",\n    ERROR_ADD = \"ERROR_ADD\",\n    ERROR_CHECK = \"ERROR_CHECK\",\n    ERROR_SEND = \"ERROR_SEND\",\n    ERROR_DELETE = \"ERROR_DELETE\",\n}\n","import { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateValue } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo } from \"../dataAccess/access/types/GoToType\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------------\n\nexport interface SequenceActionResult {\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface SequenceDecisionResult {\n    actorDatas: ActorData[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n    goto: GoTo;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------------\n\nexport const SequenceActionReducer = {\n    executeActionsOnActorDatas(actions: ActionTO[], actorDatas: ActorData[]): SequenceActionResult {\n        // copy actorDatas and set all to state PERSISTENT\n        const newActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n        const errors: ActionTO[] = [];\n\n        actions.forEach((action) => {\n            const indexActorDataReceiving: number = findActorDataIndex(\n                action.receivingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            const indexActorDataSending: number = findActorDataIndex(\n                action.sendingActorFk,\n                action.dataFk,\n                newActorDatas,\n            );\n\n            switch (action.actionType) {\n                case ActionType.ADD:\n                    if (!actorDataIsPresent(indexActorDataReceiving)) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.NEW,\n                        });\n                    } else if (newActorDatas[indexActorDataReceiving].instanceFk !== action.instanceFk) {\n                        newActorDatas.push({\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: action.instanceFk,\n                            state: ActorDataState.UPDATED_TO,\n                        });\n                        newActorDatas[indexActorDataReceiving] = {\n                            ...newActorDatas[indexActorDataReceiving],\n                            state: ActorDataState.UPDATED_FROM,\n                        };\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.DELETE:\n                    actorDataIsPresent(indexActorDataReceiving)\n                        ? (newActorDatas[indexActorDataReceiving].state = ActorDataState.DELETED)\n                        : errors.push(action);\n                    break;\n                case ActionType.SEND:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.SENT;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas.push({\n                                actorFk: action.receivingActorFk,\n                                dataFk: action.dataFk,\n                                instanceFk: newActorDatas[indexActorDataReceiving].instanceFk,\n                                state: ActorDataState.UPDATED_FROM,\n                            });\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    if (actorDataIsPresent(indexActorDataSending)) {\n                        const actorData: ActorData = {\n                            actorFk: action.receivingActorFk,\n                            dataFk: action.dataFk,\n                            instanceFk: newActorDatas[indexActorDataSending].instanceFk,\n                            state: ActorDataState.SENT,\n                        };\n                        newActorDatas[indexActorDataSending].state = ActorDataState.DELETED;\n                        if (actorDataIsPresent(indexActorDataReceiving)) {\n                            newActorDatas[indexActorDataReceiving] = {...actorData, state: ActorDataState.UPDATED_TO};\n                        } else {\n                            newActorDatas.push(actorData);\n                        }\n                    } else {\n                        errors.push(action);\n                    }\n                    break;\n            }\n        });\n        return {actorDatas: newActorDatas, errors: errors, falseStates: [], trueStates: []};\n    },\n\n    executeDecisionCheck(\n        decision: DecisionTO,\n        actorDatas: ActorData[],\n        states: SequenceStateTO[],\n        stateValues: SequenceStateValue[]\n    ): SequenceDecisionResult {\n        /**\n         * Remove with status \"deleted\" and \"check failed\"\n         * Change rest to status \"persistent\".\n         * */\n        let updatedActorDatas: ActorData[] = actorDatas\n            .filter((actorData) => !isTransiantState(actorData.state))\n            .map((actorData) => {\n                return {...actorData, state: ActorDataState.PERSISTENT};\n            });\n\n        let goTo = decision.ifGoTo;\n\n        decision.conditions.forEach((condition) => {\n            const actorDataToCheck: ActorData | undefined = updatedActorDatas.find(\n                (actorData) => actorData.actorFk === condition.actorFk && actorData.dataFk === condition.dataFk && actorData.instanceFk === condition.instanceFk,\n            );\n\n            if (actorDataToCheck) {\n                actorDataToCheck.state = ActorDataState.CHECKED;\n            } else {\n                updatedActorDatas.push({\n                    actorFk: condition.actorFk,\n                    dataFk: condition.dataFk,\n                    instanceFk: condition.instanceFk,\n                    state: ActorDataState.CHECK_FAILED,\n                });\n                goTo = decision.elseGoTo;\n            }\n        });\n\n        const falseStates: SequenceStateTO[] = [];\n        const trueStates: SequenceStateTO[] = [];\n\n        const configuredStates: SequenceStateTO[] = states.map(state => {\n            stateValues.forEach(stateValue => {\n                if(state.id === stateValue.sequenceStateFk){\n                    state.isState = stateValue.value;\n                }\n            });\n            return state;\n        });\n\n        decision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n            const stateToCheck: SequenceStateTO | undefined = configuredStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n            if (stateToCheck) {\n                if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                    falseStates.push(stateToCheck);\n                    goTo = decision.elseGoTo;\n                } else {\n                    trueStates.push(stateToCheck);\n                }\n            }\n        });\n\n        return {actorDatas: updatedActorDatas, goto: goTo, falseStates: falseStates, trueStates: trueStates};\n    },\n};\n\n// ------------------------------------------------------------ PRIVATE FUNCTIONS ------------------------------------------------------------\n\nconst findActorDataIndex = (actorId: number, dataId: number, actorDatas: ActorData[]): number => {\n    return actorDatas.findIndex(\n        (actorData) =>\n            actorData.actorFk === actorId && actorData.dataFk === dataId && !isTransiantState(actorData.state),\n    );\n};\n\nconst isTransiantState = (state: ActorDataState) => {\n    return (\n        state === ActorDataState.DELETED ||\n        state === ActorDataState.UPDATED_FROM ||\n        state === ActorDataState.CHECK_FAILED\n    );\n};\n\nfunction actorDataIsPresent(indexActorDataToEdit: number) {\n    return indexActorDataToEdit !== -1;\n}\n","import { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { GoTo, GoToTypes, Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { SequenceActionReducer, SequenceActionResult, SequenceDecisionResult } from \"../reducer/SequenceActionReducer\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\n\n// ----------------------------------------------------- INTERFACES ----------------------------------------------------\nexport interface CalculatedStep {\n    type: \"STEP\" | \"DECISION\" | \"INIT\" | \"TERMINAL\";\n    modelElementFk?: number;\n    stepId: string;\n    actorDatas: ActorData[];\n    errors: ActionTO[];\n    falseStates: SequenceStateTO[];\n    trueStates: SequenceStateTO[];\n}\n\nexport interface CalcSequence {\n    sequenceModel: SequenceCTO | null;\n    stepIds: string[];\n    calculatedSteps: CalculatedStep[];\n    terminal: Terminal;\n    loopStartingStepIndex?: number;\n}\n\n// ----------------------------------------------------- PUBLIC FUNCTION -----------------------------------------------\n\nexport const SequenceService = {\n    calculateSequence: (\n        sequence: SequenceCTO | null,\n        configuration: SequenceConfigurationTO,\n        persistentDatas?: ActorData[],\n    ): CalcSequence => {\n        const calcSequence: CalcSequence = {\n            sequenceModel: sequence,\n            stepIds: [],\n            calculatedSteps: [],\n            terminal: {type: GoToTypes.ERROR},\n        };\n        const stepIds: string[] = [];\n        let loopStartingStep: number = -1;\n\n        /**  Start calculation if sequence and data setup are selected */\n        if (sequence && configuration) {\n            /** Execute data setup */\n            const dataSetupActions: ActionTO[] = configuration.initDatas.map((data, index) => {\n                return {\n                    actionType: ActionType.ADD,\n                    receivingActorFk: data.actorFk,\n                    dataFk: data.dataFk,\n                    instanceFk: data.instanceFk,\n                    id: -1,\n                    sequenceStepFk: -1,\n                    sendingActorFk: -1,\n                    triggerText: \"\",\n                    index: index,\n                };\n            });\n\n            const dataSetupResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                dataSetupActions,\n                persistentDatas || [],\n            );\n\n            calcSequence.calculatedSteps.push(getInitStep(dataSetupResult));\n            let actorDatas: ActorData[] = DavitUtil.deepCopy(dataSetupResult.actorDatas);\n\n            /** Find root and start calculating sequence */\n            const root: SequenceStepCTO | DecisionTO | undefined = getRoot(sequence);\n\n            if (root !== undefined) {\n                let stepOrDecision: SequenceStepCTO | DecisionTO | Terminal = root;\n                let type = getType(stepOrDecision);\n                let stepId: string = \"root\";\n\n                // calc next step or decision if not looping.\n                while (!isLooping(loopStartingStep) && (type === GoToTypes.STEP || type === GoToTypes.DEC)) {\n                    // calc next step.\n                    if (type === GoToTypes.STEP) {\n                        const step: SequenceStepCTO = stepOrDecision as SequenceStepCTO;\n                        const result: SequenceActionResult = calculateStep(step, actorDatas);\n                        actorDatas = result.actorDatas;\n\n                        loopStartingStep = checkForLoop(calcSequence, step, result);\n\n                        const newStepId = \"_STEP_\" + step.sequenceStepTO.id;\n                        stepId = stepId + newStepId;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: result.errors,\n                            modelElementFk: step.sequenceStepTO.id,\n                            type: \"STEP\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            stepOrDecision = getNext((stepOrDecision as SequenceStepCTO).sequenceStepTO.goto, sequence);\n                            type = getType(stepOrDecision);\n                        }\n                    }\n\n                    // calc next decision\n                    if (type === GoToTypes.DEC) {\n                        const decision: DecisionTO = stepOrDecision as DecisionTO;\n\n                        const result: SequenceDecisionResult = SequenceActionReducer.executeDecisionCheck(\n                            decision,\n                            actorDatas,\n                            sequence.sequenceStates,\n                            configuration.stateValues,\n                        );\n                        actorDatas = result.actorDatas;\n\n                        stepOrDecision = getNext(result.goto, sequence);\n                        type = getType(stepOrDecision);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId + newCondID;\n                        stepIds.push(stepId);\n\n                        calcSequence.calculatedSteps.push({\n                            stepId: stepId,\n                            actorDatas: actorDatas,\n                            errors: [],\n                            modelElementFk: decision.id,\n                            type: \"DECISION\",\n                            falseStates: result.falseStates,\n                            trueStates: result.trueStates,\n                        });\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequence.terminal = stepOrDecision as Terminal;\n                    const terminalResult: SequenceActionResult = SequenceActionReducer.executeActionsOnActorDatas(\n                        [],\n                        actorDatas,\n                    );\n                    calcSequence.calculatedSteps.push({\n                        stepId: stepId + \"_\" + (stepOrDecision as Terminal).type,\n                        actorDatas: terminalResult.actorDatas,\n                        type: \"TERMINAL\",\n                        errors: terminalResult.errors,\n                        falseStates: terminalResult.falseStates,\n                        trueStates: terminalResult.trueStates,\n                    });\n\n                    stepIds.push(stepId + \"_\" + (stepOrDecision as Terminal).type);\n                }\n            }\n        }\n        return {\n            ...calcSequence,\n            stepIds: stepIds,\n            loopStartingStepIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined,\n        };\n    },\n};\n\n// ------------------------------------------ PRIVATE FUNCTIONS --------------------------------------\n\nconst getInitStep = (result: SequenceActionResult): CalculatedStep => {\n    return {\n        stepId: \"root\",\n        actorDatas: result.actorDatas,\n        type: \"INIT\",\n        errors: result.errors,\n        falseStates: result.falseStates,\n        trueStates: result.trueStates,\n    };\n};\n\nconst getStepFromSequence = (stepId: number, sequence: SequenceCTO): SequenceStepCTO | undefined => {\n    return sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n};\n\nconst getDecisionFromSequence = (id: number, sequence: SequenceCTO): DecisionTO | undefined => {\n    return sequence.decisions.find((cond) => cond.id === id);\n};\n\nconst getRoot = (sequence: SequenceCTO): SequenceStepCTO | DecisionTO | undefined => {\n    const step: SequenceStepCTO | undefined = sequence.sequenceStepCTOs.find((step) => step.sequenceStepTO.root);\n    const cond: DecisionTO | undefined = sequence.decisions.find((cond) => cond.root);\n    return step ? step : cond ? cond : undefined;\n};\n\nconst getNext = (goTo: GoTo, sequence: SequenceCTO): SequenceStepCTO | DecisionTO | Terminal => {\n    let nextStepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal;\n    switch (goTo.type) {\n        case GoToTypes.STEP:\n            nextStepOrDecisionOrTerminal = getStepFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromSequence(goTo.id, sequence) || {type: GoToTypes.ERROR};\n            break;\n        case GoToTypes.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.FIN};\n            break;\n        case GoToTypes.IDLE:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.IDLE};\n            break;\n        default:\n            nextStepOrDecisionOrTerminal = {type: GoToTypes.ERROR};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst calculateStep = (step: SequenceStepCTO, actorDatas: ActorData[]): SequenceActionResult => {\n    return SequenceActionReducer.executeActionsOnActorDatas(step.actions, actorDatas);\n};\n\nconst getType = (stepOrDecisionOrTerminal: SequenceStepCTO | DecisionTO | Terminal): GoToTypes => {\n    if ((stepOrDecisionOrTerminal as SequenceStepCTO).sequenceStepTO) {\n        return GoToTypes.STEP;\n    } else if ((stepOrDecisionOrTerminal as DecisionTO).elseGoTo) {\n        return GoToTypes.DEC;\n    } else if ((stepOrDecisionOrTerminal as Terminal).type) {\n        return (stepOrDecisionOrTerminal as Terminal).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequence: CalcSequence, step: SequenceStepCTO, result: SequenceActionResult): number => {\n    return calcSequence.calculatedSteps.findIndex(\n        (calcStep) =>\n            calcStep.modelElementFk === step.sequenceStepTO.id &&\n            calcStep.actorDatas.length === result.actorDatas.length &&\n            !calcStep.actorDatas.some(\n                (cp) => !result.actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../dataAccess/access/cto/ChainLinkCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainStateTO } from \"../dataAccess/access/to/ChainStateTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { CalcSequence, SequenceService } from \"./SequenceService\";\n\nexport interface CalcChainLink {\n    name: string;\n    chainLinkId: number;\n    stepId: string;\n    sequenceConfiguration: SequenceConfigurationTO;\n    sequence: CalcSequence;\n    errors: ActionTO[];\n}\n\nexport interface CalcChain {\n    calcLinks: CalcChainLink[];\n    linkIds: string[];\n    loopStartingIndex?: number;\n    terminal: TerminalChain;\n}\n\nexport const SequenceChainService = {\n    calculateChain: (sequenceChain: ChainCTO | null): CalcChain => {\n        const calcSequenceChain: CalcChain = {calcLinks: [], linkIds: [], terminal: {type: GoToTypesChain.ERROR}};\n        let loopStartingStep: number = -1;\n        let actorDatas: ActorData[] = [];\n\n        if (sequenceChain) {\n            const root: ChainLinkCTO | null = getRoot(sequenceChain);\n\n            if (root) {\n                let step: ChainLinkCTO | ChainDecisionTO | TerminalChain = root;\n                let type = getType(step);\n                let stepId: string = \"\";\n\n                while (!isLooping(loopStartingStep) && (type === GoToTypesChain.LINK || type === GoToTypesChain.DEC)) {\n                    if (type === GoToTypesChain.LINK) {\n                        const link: ChainLinkCTO = step as ChainLinkCTO;\n\n                        loopStartingStep = checkForLoop(calcSequenceChain, link, actorDatas);\n\n                        const result: CalcSequence = SequenceService.calculateSequence(\n                            link.sequence,\n                            link.sequenceConfiguration,\n                            actorDatas,\n                        );\n\n                        actorDatas =\n                            result.calculatedSteps.length > 0\n                                ? result.calculatedSteps[result.calculatedSteps.length - 1].actorDatas\n                                : [];\n\n                        // STEP ID\n                        const newLinkId = \"_LINK_\" + link.chainLink.id;\n                        stepId = stepId === \"\" ? link.chainLink.id.toString() : stepId + newLinkId;\n                        calcSequenceChain.linkIds.push(stepId);\n\n                        calcSequenceChain.calcLinks.push({\n                            name: link.chainLink.name,\n                            chainLinkId: link.chainLink.id,\n                            stepId: stepId,\n                            sequence: result,\n                            sequenceConfiguration: link.sequenceConfiguration,\n                            errors: result.calculatedSteps.map((step) => step.errors).flat(1),\n                        });\n\n                        if (!isLooping(loopStartingStep)) {\n                            // set next object.\n                            step = getNext((step as ChainLinkCTO).chainLink.goto, sequenceChain);\n                            type = getType(step);\n                        }\n                    }\n\n                    if (type === GoToTypesChain.DEC) {\n                        const decision: ChainDecisionTO = step as ChainDecisionTO;\n\n                        const goTo: GoToChain = executeChainDecisionCheck(decision, actorDatas, sequenceChain.chainStates);\n                        step = getNext(goTo, sequenceChain);\n                        type = getType(step);\n\n                        const newCondID = \"_DEC_\" + decision.id;\n                        stepId = stepId === \"\" ? \"root\" : stepId + newCondID;\n                        calcSequenceChain.linkIds.push(stepId);\n                    }\n                }\n                if (!isLooping(loopStartingStep)) {\n                    calcSequenceChain.terminal = step as TerminalChain;\n                    calcSequenceChain.linkIds.push(stepId + \"_\" + (step as TerminalChain).type);\n                }\n            }\n        }\n        return {...calcSequenceChain, loopStartingIndex: isLooping(loopStartingStep) ? loopStartingStep : undefined};\n    },\n};\n\nconst executeChainDecisionCheck = (chainDecision: ChainDecisionTO, actorDatas: ActorData[], chainStates: ChainStateTO[]): GoToChain => {\n    let goTo: GoToChain | undefined;\n    // check conditions\n    if (chainDecision.conditions !== []) {\n        chainDecision.conditions.forEach((condition) => {\n            const isIncluded: boolean = actorDatas.some(\n                (cd) => cd.dataFk === condition.dataFk && cd.instanceFk === condition.instanceFk && cd.actorFk === condition.actorFk,\n            );\n            if (!isIncluded) {\n                goTo = chainDecision.elseGoTo;\n            }\n        });\n    }\n\n    // check states\n    chainDecision.stateFkAndStateConditions.forEach(stateFkAndStateCondition => {\n        const stateToCheck: ChainStateTO | undefined = chainStates.find(state => state.id === stateFkAndStateCondition.stateFk);\n        if (stateToCheck) {\n            if (stateToCheck.isState !== stateFkAndStateCondition.stateCondition) {\n                goTo = chainDecision.elseGoTo;\n            }\n        }\n    });\n\n    return goTo || chainDecision.ifGoTo;\n};\n\nconst getLinkFromChain = (linkId: number, chain: ChainCTO): ChainLinkCTO | undefined => {\n    return chain.links.find((link) => link.chainLink.id === linkId);\n};\n\nconst getDecisionFromChain = (id: number, chain: ChainCTO): ChainDecisionTO | undefined => {\n    return chain.decisions.find((decision) => decision.id === id);\n};\n\nexport const getRoot = (chain: ChainCTO | null): ChainLinkCTO | null => {\n    let rootLink: ChainLinkCTO | null = null;\n    if (!DavitUtil.isNullOrUndefined(chain)) {\n        rootLink = chain!.links.find((link) => link.chainLink.root) || null;\n    }\n    return rootLink;\n};\n\nconst getNext = (goTo: GoToChain, chain: ChainCTO): ChainLinkCTO | ChainDecisionTO | TerminalChain => {\n    let nextStepOrDecisionOrTerminal: ChainLinkCTO | ChainDecisionTO | TerminalChain = {type: GoToTypesChain.ERROR};\n    switch (goTo.type) {\n        case GoToTypesChain.LINK:\n            nextStepOrDecisionOrTerminal = getLinkFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.DEC:\n            nextStepOrDecisionOrTerminal = getDecisionFromChain(goTo.id, chain) || {type: GoToTypesChain.ERROR};\n            break;\n        case GoToTypesChain.FIN:\n            nextStepOrDecisionOrTerminal = {type: GoToTypesChain.FIN};\n    }\n    return nextStepOrDecisionOrTerminal;\n};\n\nconst getType = (step: ChainLinkCTO | ChainDecisionTO | TerminalChain): GoToTypesChain => {\n    if ((step as ChainLinkCTO).chainLink) {\n        return GoToTypesChain.LINK;\n    } else if ((step as ChainDecisionTO).elseGoTo) {\n        return GoToTypesChain.DEC;\n    } else if ((step as TerminalChain).type) {\n        return (step as TerminalChain).type;\n    } else {\n        throw Error(\"Illegal Type in Sequence\");\n    }\n};\n\nconst checkForLoop = (calcSequenceChain: CalcChain, step: ChainLinkCTO, actorDatas: ActorData[]): number => {\n    return calcSequenceChain.calcLinks.findIndex(\n        (calcLink) =>\n            calcLink.chainLinkId === step.chainLink.id &&\n            calcLink.sequence.calculatedSteps[0].actorDatas.length === actorDatas.length &&\n            !calcLink.sequence.calculatedSteps[0].actorDatas.some(\n                (cp) => !actorDatas.some((rcp) => rcp.actorFk === cp.actorFk && rcp.dataFk === cp.dataFk),\n            ),\n    );\n};\n\nconst isLooping = (loopStartingStep: number) => {\n    return loopStartingStep > -1;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ChainCTO } from \"../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../dataAccess/access/cto/ChainLinkCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../dataAccess/access/to/SequenceStateTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { Terminal } from \"../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { CalcChain, getRoot, SequenceChainService } from \"../services/SequenceChainService\";\nimport { CalcSequence, CalculatedStep, SequenceService } from \"../services/SequenceService\";\nimport { AppThunk, RootState } from \"../store\";\nimport { ActorData } from \"../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../viewDataTypes/ActorDataState\";\nimport { Mode } from \"./EditSlice\";\nimport { GlobalActions } from \"./GlobalSlice\";\n\nexport interface Filter {\n    type: \"ACTOR\" | \"DATA\";\n    id: number;\n}\n\ninterface SequenceModelState {\n    selectedSequenceModel: SequenceCTO | null;\n    selectedSequenceConfiguration: SequenceConfigurationTO | null;\n    calcSequence: CalcSequence | null;\n    calcChain: CalcChain | null;\n    currentStepIndex: number;\n    currentLinkIndex: number;\n    errorActions: ActionTO[];\n    actions: ActionTO[];\n    actorDatas: ActorData[];\n    activeFilter: Filter[];\n    selectedChain: ChainCTO | null;\n    selectedChainConfiguration: ChainConfigurationTO | null;\n}\n\nconst getInitialState: SequenceModelState = {\n    selectedSequenceModel: null,\n    selectedSequenceConfiguration: null,\n    calcSequence: null,\n    calcChain: null,\n    currentStepIndex: 0,\n    currentLinkIndex: 0,\n    errorActions: [],\n    actions: [],\n    actorDatas: [],\n    activeFilter: [],\n    selectedChain: null,\n    selectedChainConfiguration: null,\n};\n\nconst SequenceModelSlice = createSlice({\n    name: \"sequenceModel\",\n    initialState: getInitialState,\n    reducers: {\n        setSelectedSequence: (state, action: PayloadAction<SequenceCTO | null>) => {\n            state.selectedSequenceModel = action.payload;\n            // TODO: in extra method und nur ausführen wenn sequence und datasetup gestezt sind sonst reset.\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n            if (action.payload && state.selectedSequenceConfiguration) {\n                calcSequenceAndSetState(action.payload, state.selectedSequenceConfiguration, state);\n            } else {\n                resetState(state);\n            }\n        },\n        recalcSequence: (state) => {\n            if (state.selectedSequenceModel && state.selectedSequenceConfiguration) {\n                calcSequenceAndSetState(state.selectedSequenceModel, state.selectedSequenceConfiguration, state);\n            }\n        },\n        setCurrentLinkIndex: (state, action: PayloadAction<number>) => {\n            state.currentStepIndex = 0;\n            // on decrement we first set the step index to 0 and only if it is 0 we decrement the link index\n            if (state.calcChain && state.calcChain.calcLinks.length > action.payload && action.payload >= 0) {\n                state.currentLinkIndex = action.payload;\n            } else if (state.calcChain && action.payload < 0) {\n                state.currentLinkIndex = state.calcChain.calcLinks.length - 1;\n            } else {\n                state.currentLinkIndex = 0;\n            }\n        },\n        setSelectedChain: (state, action: PayloadAction<ChainCTO | null>) => {\n            state.selectedChain = action.payload;\n            resetState(state);\n            state.selectedSequenceModel = null;\n            state.selectedSequenceConfiguration = null;\n            state.currentLinkIndex = 0;\n            state.currentStepIndex = 0;\n        },\n        setSelectedChainConfiguration: (state, action: PayloadAction<ChainConfigurationTO | null>) => {\n          state.selectedChainConfiguration = action.payload;\n          state.currentLinkIndex = 0;\n          state.currentStepIndex = 0;\n        },\n        setCalcChain: (state, action: PayloadAction<CalcChain | null>) => {\n            state.calcChain = action.payload;\n        },\n        setSelectedSequenceConfiguration: (state, action: PayloadAction<SequenceConfigurationTO | null>) => {\n            state.selectedSequenceConfiguration = action.payload;\n            state.selectedChain = null;\n            state.calcChain = null;\n            state.currentLinkIndex = 0;\n\n            if (action.payload && state.selectedSequenceModel) {\n                calcSequenceAndSetState(state.selectedSequenceModel, action.payload, state);\n            } else {\n                resetState(state);\n            }\n        },\n        addDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"DATA\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeDataFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"DATA\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        addActorFilters: (state, action: PayloadAction<number>) => {\n            state.activeFilter = [...state.activeFilter, {type: \"ACTOR\", id: action.payload}];\n            state.currentStepIndex = 0;\n        },\n        removeActorFilter: (state, action: PayloadAction<number>) => {\n            state.activeFilter = state.activeFilter.filter(\n                (filt) => !(filt.type === \"ACTOR\" && filt.id === action.payload),\n            );\n            state.currentStepIndex = 0;\n        },\n        setCurrentStepIndex: (state, action: PayloadAction<number>) => {\n            let filteredSteps: CalculatedStep[] = [];\n            if (getCurrentCalcSequence(state)) {\n                filteredSteps = filterSteps(\n                    getCurrentCalcSequence(state)?.calculatedSteps || [],\n                    state.activeFilter,\n                    getCurrentSequenceModel(state)?.sequenceStepCTOs || [],\n                );\n            }\n            const newStepIndex = action.payload;\n            if (getCurrentCalcSequence(state) && newStepIndex >= 0 && newStepIndex < filteredSteps.length) {\n                state.currentStepIndex = action.payload;\n            } else if (state.calcChain && newStepIndex === filteredSteps.length) {\n                if (state.currentLinkIndex < state.calcChain.calcLinks.length - 1) {\n                    state.currentLinkIndex = state.currentLinkIndex + 1;\n                    state.currentStepIndex = 0;\n                } else {\n                    state.currentLinkIndex = 0;\n                    state.currentStepIndex = 0;\n                }\n            } else if (state.calcChain && newStepIndex === -1) {\n                const newLinkIndex =\n                    state.currentLinkIndex > 0 ? state.currentLinkIndex - 1 : state.calcChain.calcLinks.length - 1;\n                const newFilteredSteps = filterSteps(\n                    state.calcChain.calcLinks[newLinkIndex].sequence.calculatedSteps || [],\n                    state.activeFilter,\n                    state.calcChain.calcLinks[newLinkIndex].sequence.sequenceModel?.sequenceStepCTOs || [],\n                );\n                state.currentStepIndex = newFilteredSteps.length - 1;\n                state.currentLinkIndex = newLinkIndex;\n            } else {\n                state.currentStepIndex = 0;\n            }\n        },\n        setErrorActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.errorActions = action.payload;\n        },\n        setActions: (state, action: PayloadAction<ActionTO[]>) => {\n            state.actions = action.payload;\n        },\n        setActorDatas: (state, action: PayloadAction<ActorData[]>) => {\n            state.actorDatas = action.payload;\n        },\n        setFilter: (state, action: PayloadAction<Filter[]>) => {\n            state.activeFilter = action.payload;\n            state.currentStepIndex = 0;\n        },\n    },\n});\n\nfunction calcSequenceAndSetState(sequenceModel: SequenceCTO, sequenceConfiguration: SequenceConfigurationTO, state: SequenceModelState) {\n    const result: CalcSequence = SequenceService.calculateSequence(sequenceModel, sequenceConfiguration);\n    state.currentStepIndex = 0;\n    state.errorActions = result.calculatedSteps[state.currentStepIndex]?.errors || [];\n    state.actorDatas = result.calculatedSteps[state.currentStepIndex]?.actorDatas || [];\n    state.calcSequence = result;\n}\n\nfunction resetState(state: SequenceModelState) {\n    state.errorActions = [];\n    state.actorDatas = [];\n    state.calcSequence = null;\n    state.activeFilter = [];\n}\n\n// =============================================== THUNKS ===============================================\n\nconst stepNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex + 1));\n};\n\nconst stepBack = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentStepIndex(currentIndex - 1));\n};\n\nconst linkNext = (currentIndex: number): AppThunk => (dispatch) => {\n    dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex + 1));\n};\n\nconst linkBack = (currentIndex: number): AppThunk => (dispatch, getState) => {\n    const stepIndex: number = getState().sequenceModel.currentStepIndex;\n    if (stepIndex > 0) {\n        dispatch(SequenceModelSlice.actions.setCurrentStepIndex(0));\n    } else {\n        dispatch(SequenceModelActions.setCurrentLinkIndex(currentIndex - 1));\n    }\n};\n\nconst setSelectedChainThunk = (chain: ChainTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        const chainCTO: ChainCTO = response.object;\n        dispatch(SequenceModelSlice.actions.setSelectedChain(chainCTO));\n        if (chainCTO && mode === Mode.VIEW && getState().sequenceModel.selectedChainConfiguration !== null && getRoot(chainCTO)) {\n            dispatch(SequenceModelSlice.actions.setCalcChain(SequenceChainService.calculateChain(chainCTO)));\n        }\n    }\n};\n\nconst setSelectedSequenceByIdThunk = (sequenceId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(response.object));\n    }\n};\n\nconst setSelectedSequenceByIdWithStatesThunk = (sequenceId: number, states: SequenceStateTO[]): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    } else {\n        // set states\n        const sequence: SequenceCTO = response.object;\n        sequence.sequenceStates = states;\n        dispatch(SequenceModelSlice.actions.setSelectedSequence(sequence));\n    }\n};\n\nconst getSequenceConfigurationFromBackend = (dataSetupId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.findSequenceConfiguration(dataSetupId);\n    if (response.code === 200) {\n        dispatch(SequenceModelSlice.actions.setSelectedSequenceConfiguration(response.object));\n    } else {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst resetAll = (): AppThunk => (dispatch) => {\n    dispatch(SequenceModelSlice.actions.setSelectedSequenceConfiguration(null));\n    dispatch(SequenceModelSlice.actions.setCurrentStepIndex(-1));\n    dispatch(SequenceModelSlice.actions.setSelectedSequence(null));\n    dispatch(SequenceModelSlice.actions.setSelectedChain(null));\n};\n\nconst handleActorClickEvent = (actorId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"ACTOR\", id: actorId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst handleDataClickEvent = (dataId: number): AppThunk => (dispatch) => {\n    const filter: Filter[] = [];\n    filter.push({type: \"DATA\", id: dataId});\n    dispatch(SequenceModelSlice.actions.setFilter(filter));\n};\n\nconst filterSteps = (steps: CalculatedStep[], filter: Filter[], modelSteps: SequenceStepCTO[]): CalculatedStep[] => {\n    if (filter.length === 0) {\n        return steps;\n    }\n    return steps.filter((step) =>\n        filter.some((currentFilter) => {\n            const actions: ActionTO[] =\n                modelSteps.find((modelStep) => modelStep.sequenceStepTO.id === step.modelElementFk)?.actions || [];\n            switch (currentFilter.type) {\n                case \"ACTOR\":\n                    return actions.some((action) => action.receivingActorFk === currentFilter.id);\n                case \"DATA\":\n                    return actions.some((action) => action.dataFk === currentFilter.id);\n                default:\n                    return false;\n            }\n        }),\n    );\n};\n\nconst getArrowsForStepFk = (stepFk: number, sequenceStepCTOs: SequenceStepCTO[], rootState: RootState): Arrow[] => {\n    let arrows: Arrow[] = [];\n    let step: SequenceStepCTO | undefined;\n    if (stepFk && sequenceStepCTOs) {\n        step = sequenceStepCTOs.find((stp) => stp.sequenceStepTO.id === stepFk);\n    }\n    if (step) {\n        arrows = mapActionsToArrows(step.actions, rootState);\n    }\n    return arrows;\n};\n\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (actor) => actor.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\n\nexport const SequenceModelReducer = SequenceModelSlice.reducer;\nexport const sequenceModelSelectors = {\n    activeFilters: (state: RootState): Filter[] => state.sequenceModel.activeFilter,\n    selectSequence: (state: RootState): SequenceCTO | null => getCurrentSequenceModel(state.sequenceModel),\n    selectChain: (state: RootState): ChainTO | null => state.sequenceModel.selectedChain?.chain || null,\n    selectChainCTO: (state: RootState): ChainCTO | null => state.sequenceModel.selectedChain || null,\n    selectCurrentChainLinks: (state: RootState): ChainLinkCTO[] => state.sequenceModel.selectedChain?.links || [],\n    selectCurrentChainDecisions: (state: RootState): ChainDecisionTO[] =>\n        state.sequenceModel.selectedChain?.decisions || [],\n    selectCalcChain: (state: RootState): CalcChain | null => state.sequenceModel.calcChain || null,\n    selectCalcSteps: (state: RootState): CalculatedStep[] => {\n        if (state.edit.mode === Mode.VIEW) {\n            const currentSequence: SequenceCTO | null = getCurrentSequenceModel(state.sequenceModel);\n            const calcSequence: CalcSequence | null = getCurrentCalcSequence(state.sequenceModel);\n            return filterSteps(\n                calcSequence?.calculatedSteps || [],\n                state.sequenceModel.activeFilter,\n                currentSequence?.sequenceStepCTOs || [],\n            );\n        } else {\n            return [];\n        }\n    },\n    selectCalcStepIds: (state: RootState): string[] =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.stepIds || [] : [],\n    selectTerminalStep: (state: RootState): Terminal | null =>\n        state.edit.mode === Mode.VIEW ? getCurrentCalcSequence(state.sequenceModel)?.terminal || null : null,\n    selectSequenceConfiguration: (state: RootState): SequenceConfigurationTO | null => {\n        if (state.edit.mode === Mode.VIEW) {\n            return getCurrentSequenceConfiguration(state.sequenceModel);\n        } else {\n            return null;\n        }\n    },\n    selectActorData: (state: RootState): ActorData[] => {\n        let actorDatas: ActorData[] = [];\n        // Get step actor-data's if calculation is present\n        if (state.sequenceModel.calcSequence || state.sequenceModel.calcChain) {\n            const filteredSteps = getFilteredSteps(state);\n            actorDatas.push(...filteredSteps[state.sequenceModel.currentStepIndex]?.actorDatas || []);\n        }\n        // Get date-setup init data's if NO calculation is present\n        if (state.sequenceModel.selectedSequenceConfiguration && !state.sequenceModel.calcSequence && !state.sequenceModel.calcChain) {\n            const initDatasFormDataSetup = state.sequenceModel.selectedSequenceConfiguration?.initDatas || [];\n            actorDatas.push(...initDatasFormDataSetup.map(mapInitDataToActorData));\n        }\n\n        return actorDatas;\n    },\n    selectErrors: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.errors || [];\n    },\n\n    selectFalseStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.falseStates || [];\n    },\n\n    selectTrueStates: (state: RootState): SequenceStateTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        return filteredSteps[state.sequenceModel.currentStepIndex]?.trueStates || [];\n    },\n\n    selectActions: (state: RootState): ActionTO[] => {\n        const filteredSteps = getFilteredSteps(state);\n        const stepId: number | undefined = filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk;\n        return stepId\n            ? getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs.find(\n            (step) => step.sequenceStepTO.id === stepId,\n        )?.actions || []\n            : [];\n    },\n    selectCurrentStepIndex: (state: RootState): number => state.sequenceModel.currentStepIndex,\n    selectCurrentStepId: (state: RootState): string => {\n        return (\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps[state.sequenceModel.currentStepIndex]\n                ?.stepId || \"\"\n        );\n    },\n    selectCurrentLinkIndex: (state: RootState): number => state.sequenceModel.currentLinkIndex,\n    selectCurrentLinkId: (state: RootState): string =>\n        state.sequenceModel.calcChain?.calcLinks[state.sequenceModel.currentLinkIndex]?.stepId || \"\",\n    selectCurrentArrows: (state: RootState): Arrow[] => {\n        const arrows: Arrow[] = [];\n        const filteredSteps = getFilteredSteps(state);\n        const stepFks: number[] = [];\n\n        const stepFk: number | undefined =\n            filteredSteps[state.sequenceModel.currentStepIndex]?.type === \"STEP\"\n                ? filteredSteps[state.sequenceModel.currentStepIndex]?.modelElementFk\n                : undefined;\n        if (stepFk) {\n            stepFks.push(stepFk);\n        }\n        let allArrows: Arrow[] = [];\n        stepFks.forEach((stepFk) => {\n            const arr: Arrow[] = getArrowsForStepFk(\n                stepFk,\n                getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n                state,\n            );\n            allArrows = allArrows.concat(arr);\n        });\n        allArrows.forEach((arrow) => {\n            if (arrow) arrows.push(arrow);\n        });\n        return arrows;\n    },\n    selectLoopStepStartIndex: (state: RootState): number | null =>\n        getCurrentCalcSequence(state.sequenceModel)?.loopStartingStepIndex || null,\n};\n\n\nfunction getFilteredSteps(state: RootState): CalculatedStep[] {\n    return state.edit.mode === Mode.VIEW\n        ? filterSteps(\n            getCurrentCalcSequence(state.sequenceModel)?.calculatedSteps || [],\n            state.sequenceModel.activeFilter,\n            getCurrentSequenceModel(state.sequenceModel)?.sequenceStepCTOs || [],\n        )\n        : [];\n}\n\nfunction getCurrentCalcSequence(state: SequenceModelState): CalcSequence | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence || null\n        : state.calcSequence;\n}\n\nfunction getCurrentSequenceModel(state: SequenceModelState): SequenceCTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequence.sequenceModel || null\n        : state.selectedSequenceModel;\n}\n\nfunction getCurrentSequenceConfiguration(state: SequenceModelState): SequenceConfigurationTO | null {\n    return state.selectedChain\n        ? state.calcChain?.calcLinks[state.currentLinkIndex].sequenceConfiguration || null\n        : state.selectedSequenceConfiguration;\n}\n\nconst mapInitDataToActorData = (initData: InitDataTO): ActorData => {\n    return {\n        state: ActorDataState.PERSISTENT,\n        actorFk: initData.actorFk,\n        dataFk: initData.dataFk,\n        instanceFk: initData.instanceFk,\n    };\n};\n// =============================================== ACTIONS ===============================================\n\nexport const SequenceModelActions = {\n    setCurrentSequence: SequenceModelSlice.actions.setSelectedSequence,\n    setCurrentSequenceById: setSelectedSequenceByIdThunk,\n    setCurrentSequenceByIdWithStates: setSelectedSequenceByIdWithStatesThunk,\n    setCurrentSequenceConfigurationById: getSequenceConfigurationFromBackend,\n    setCurrentSequenceConfiguration: SequenceModelSlice.actions.setSelectedSequenceConfiguration,\n    resetCurrentSequenceConfiguration: SequenceModelSlice.actions.setSelectedSequenceConfiguration(null),\n    resetCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex(-1),\n    resetCurrentSequence: SequenceModelSlice.actions.setSelectedSequence(null),\n    resetCurrentChain: SequenceModelSlice.actions.setSelectedChain(null),\n    resetAll: resetAll(),\n    setCurrentStepIndex: SequenceModelSlice.actions.setCurrentStepIndex,\n    setCurrentLinkIndex: SequenceModelSlice.actions.setCurrentLinkIndex,\n    handleActorClickEvent: handleActorClickEvent,\n    handleDataClickEvent,\n    stepNext,\n    stepBack,\n    linkBack,\n    linkNext,\n    setCurrentChain: setSelectedChainThunk,\n    setCurrentChainConfiguration: SequenceModelSlice.actions.setSelectedChainConfiguration,\n    addDataFilters: SequenceModelSlice.actions.addDataFilter,\n    removeDataFilters: SequenceModelSlice.actions.removeDataFilter,\n    addActorFilters: SequenceModelSlice.actions.addActorFilters,\n    removeActorFilter: SequenceModelSlice.actions.removeActorFilter,\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Arrow, ArrowType } from \"../components/atomic/svg/DavitPath\";\nimport { ActorCTO } from \"../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../dataAccess/access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../dataAccess/access/to/ActionTO\";\nimport { ChainConfigurationTO } from \"../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainDecisionTO } from \"../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../dataAccess/access/to/ConditionTO\";\nimport { DataInstanceTO } from \"../dataAccess/access/to/DataInstanceTO\";\nimport { DataRelationTO } from \"../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../dataAccess/access/to/DecisionTO\";\nimport { GroupTO } from \"../dataAccess/access/to/GroupTO\";\nimport { InitDataTO } from \"../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../dataAccess/access/to/SequenceTO\";\nimport { ActionType } from \"../dataAccess/access/types/ActionType\";\nimport { DataAccess } from \"../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../dataAccess/DataAccessResponse\";\nimport { AppThunk, RootState } from \"../store\";\nimport { DavitUtil } from \"../utils/DavitUtil\";\nimport { GlobalActions } from \"./GlobalSlice\";\nimport { masterDataSelectors } from \"./MasterDataSlice\";\nimport { SequenceModelActions } from \"./SequenceModelSlice\";\nimport { EditActor } from \"./thunks/ActorThunks\";\nimport { EditChainDecision } from \"./thunks/ChainDecisionThunks\";\nimport { EditChainLink } from \"./thunks/ChainLinkThunks\";\nimport { EditChain } from \"./thunks/ChainThunks\";\nimport { EditData } from \"./thunks/DataThunks\";\nimport { EditDecision } from \"./thunks/DecisionThunks\";\nimport { EditGroup } from \"./thunks/GroupThunks\";\nimport { EditRelation } from \"./thunks/RelationThunks\";\nimport { EditSequence } from \"./thunks/SequenceThunks\";\nimport { EditStep } from \"./thunks/StepThunks\";\n\nexport enum Mode {\n    TAB = \"TAB\",\n    FILE = \"FILE\",\n    VIEW = \"VIEW\",\n    VIEW_CONFIGURATION = \"VIEW_CONFIGURATION\",\n    EDIT = \"EDIT\",\n    EDIT_ACTOR = \"EDIT_ACTOR\",\n    EDIT_GROUP = \"EDIT_GROUP\",\n    EDIT_DATA = \"EDIT_DATA\",\n    EDIT_DATA_INSTANCE = \"EDIT_DATA_INSTANCE\",\n    EDIT_RELATION = \"EDIT_RELATION\",\n    EDIT_CHAIN = \"EDIT_CHAIN\",\n    EDIT_CHAIN_STATES = \"EDIT_CHAIN_STATES\",\n    EDIT_CHAIN_DECISION = \"EDIT_CHAIN_DECISION\",\n    EDIT_CHAIN_DECISION_CONDITION = \"EDIT_CHAIN_DECISION_CONDITION\",\n    EDIT_CHAIN_LINK = \"EDIT_CHAIN_LINK\",\n    EDIT_SEQUENCE = \"EDIT_SEQUENCE\",\n    EDIT_SEQUENCE_STATES = \"EDIT_SEQUENCE_STATES\",\n    EDIT_SEQUENCE_DECISION = \"EDIT_SEQUENCE_DECISION\",\n    EDIT_SEQUENCE_DECISION_CONDITION = \"EDIT_SEQUENCE_DECISION_CONDITION\",\n    EDIT_SEQUENCE_STEP = \"EDIT_SEQUENCE_STEP\",\n    EDIT_SEQUENCE_STEP_ACTION = \"EDIT_SEQUENCE_STEP_ACTION\",\n}\n\nconst MODE_LOCAL_STORAGE = \"MODE\";\n\nexport interface StepAction {\n    step: SequenceStepCTO;\n    actionTO: ActionTO;\n}\n\nexport interface EmptyObjectToEdit {\n}\n\ninterface EditState {\n    mode: Mode;\n    objectToEdit:\n        | ActorCTO\n        | DataCTO\n        | DataRelationTO\n        | SequenceTO\n        | SequenceStepCTO\n        | StepAction\n        | SequenceConfigurationTO\n        | InitDataTO\n        | GroupTO\n        | DecisionTO\n        | ChainLinkTO\n        | ChainDecisionTO\n        | ActionTO\n        | ConditionTO\n        | ChainConfigurationTO\n        | EmptyObjectToEdit;\n    instanceId: number;\n}\n\nconst getInitialState: EditState = {\n    objectToEdit: {} as EmptyObjectToEdit,\n    mode: Mode.EDIT,\n    instanceId: -1,\n};\n\nconst EditSlice = createSlice({\n    name: \"edit\",\n    initialState: getInitialState,\n    reducers: {\n        setChainConfiguration: (state, action: PayloadAction<ChainConfigurationTO>) => {\n            if (state.mode === Mode.VIEW_CONFIGURATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain configuration to edit, in mode: \" + state.mode);\n            }\n        },\n        setChainLinkToEdit: (state, action: PayloadAction<ChainLinkTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_LINK) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceId: (state, action: PayloadAction<number>) => {\n            state.instanceId = action.payload;\n        },\n        setChainDecisionToEdit: (state, action: PayloadAction<ChainDecisionTO>) => {\n            if (state.mode === Mode.EDIT_CHAIN_DECISION || state.mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set chain step to edit in mode: \" + state.mode);\n            }\n        },\n        setActorToEdit: (state, action: PayloadAction<ActorCTO>) => {\n            if (state.mode === Mode.EDIT_ACTOR) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set actor to edit in mode: \" + state.mode);\n            }\n        },\n        setDataToEdit: (state, action: PayloadAction<DataCTO>) => {\n            if (state.mode === Mode.EDIT_DATA || state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setInstanceToEdit: (state, action: PayloadAction<DataInstanceTO>) => {\n            if (state.mode === Mode.EDIT_DATA_INSTANCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set data to edit in mode: \" + state.mode);\n            }\n        },\n        setRelationToEdit: (state, action: PayloadAction<DataRelationTO>) => {\n            if (state.mode === Mode.EDIT_RELATION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set relation to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceToEdit: (state, action: PayloadAction<SequenceTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set sequence to edit in mode: \" + state.mode);\n            }\n        },\n        setStepToEdit: (state, action: PayloadAction<SequenceStepCTO>) => {\n            if (state.mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set step to edit in mode: \" + state.mode);\n            }\n        },\n        setActionToEdit: (state, action: PayloadAction<ActionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set action to edit in mode: \" + state.mode);\n            }\n        },\n        setSequenceConfigurationToEdit: (state, action: PayloadAction<SequenceConfigurationTO>) => {\n            if (state.mode === Mode.VIEW_CONFIGURATION) {\n                (state.objectToEdit as SequenceConfigurationTO) = action.payload;\n            } else {\n                console.warn(\"Try to set Sequence Configuration to edit in mode: \" + state.mode);\n            }\n        },\n        setGroupToEdit: (state, action: PayloadAction<GroupTO>) => {\n            if (state.mode === Mode.EDIT_GROUP) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set group to edit in mode: \" + state.mode);\n            }\n        },\n        setDecisionToEdit: (state, action: PayloadAction<DecisionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        setConditionToEdit: (state, action: PayloadAction<ConditionTO>) => {\n            if (state.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n                state.objectToEdit = action.payload;\n            } else {\n                console.warn(\"Try to set decision to edit in mode: \" + state.mode);\n            }\n        },\n        clearObjectToEdit: (state) => {\n            state.objectToEdit = {} as EmptyObjectToEdit;\n        },\n        setMode: (state, action: PayloadAction<Mode>) => {\n            state.mode = action.payload;\n        },\n    },\n});\n\nexport const editActions = EditSlice.actions;\n\n// =============================================== THUNKS ===============================================\n\n// ----------------------------------------------- SET MODE -----------------------------------------------\nconst setModeWithStorageThunk = (mode: Mode): AppThunk => (dispatch, getState) => {\n    if (mode !== getState().edit.mode) {\n        localStorage.setItem(MODE_LOCAL_STORAGE, mode);\n        dispatch(EditSlice.actions.setMode(mode));\n    }\n};\n\nconst setModeToFileThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.FILE));\n};\n\nconst setModeToTabThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.TAB));\n};\n\nconst setModeToViewThunk = (): AppThunk => (dispatch) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    dispatch(setModeWithStorageThunk(Mode.VIEW));\n};\n\nconst setModeToEditThunk = (): AppThunk => (dispatch, getState) => {\n    dispatch(EditSlice.actions.clearObjectToEdit());\n    if (getState().edit.mode !== Mode.VIEW) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    } else {\n        const stepIndex: number | null = getState().sequenceModel.currentStepIndex;\n        if (stepIndex !== null && stepIndex > 0) {\n            const step:\n                | SequenceStepCTO\n                | undefined = getState().sequenceModel.selectedSequenceModel?.sequenceStepCTOs.find(\n                (step) => step.sequenceStepTO.id === stepIndex,\n            );\n            if (step) {\n                dispatch(setModeToEditStepThunk(step));\n            } else {\n                dispatch(setModeWithStorageThunk(Mode.EDIT));\n            }\n        } else {\n            dispatch(setModeWithStorageThunk(Mode.EDIT));\n        }\n    }\n};\n\nconst setModeToEditActorThunk = (actor?: ActorCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n    if (actor === undefined) {\n        dispatch(EditActor.create());\n    } else {\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\n\nconst setModeToEditActorByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const actor: ActorCTO | undefined = getState().masterData.actors.find((act) => act.actor.id === id);\n    if (actor) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_ACTOR));\n        dispatch(EditSlice.actions.setActorToEdit(actor));\n    }\n};\nconst setModeToEditDataByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    const data: DataCTO | undefined = getState().masterData.datas.find((data) => data.data.id === id);\n    if (data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst editDataInstanceByIdThunk = (id: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n        dispatch(EditSlice.actions.setInstanceId(id));\n    } else {\n        dispatch(setModeWithStorageThunk(Mode.EDIT));\n    }\n};\n\nconst setModeToEditDataThunk = (data?: DataCTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_DATA));\n    if (data === undefined) {\n        dispatch(EditData.create());\n    } else {\n        dispatch(EditSlice.actions.setDataToEdit(data));\n    }\n};\n\nconst setModeToEditDataInstanceThunk = (id?: number): AppThunk => (dispatch, getState) => {\n    if ((getState().edit.objectToEdit as DataCTO).data) {\n        if (id === undefined) {\n            const copyData: DataCTO = DavitUtil.deepCopy(getState().edit.objectToEdit as DataCTO);\n            const newInstance: DataInstanceTO = new DataInstanceTO();\n            newInstance.id = copyData.data.instances.length;\n            copyData.data.instances.push(newInstance);\n            dispatch(EditSlice.actions.setDataToEdit(copyData));\n            id = newInstance.id;\n        }\n        dispatch(EditSlice.actions.setInstanceId(id));\n        dispatch(setModeWithStorageThunk(Mode.EDIT_DATA_INSTANCE));\n    }\n};\n\nconst setModeToEditRelationThunk = (relation?: DataRelationTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_RELATION));\n    if (relation === undefined) {\n        dispatch(EditRelation.create());\n    } else {\n        dispatch(EditSlice.actions.setRelationToEdit(relation));\n    }\n};\n\nconst setModeToEditSequenceStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STATES));\n};\n\nconst setModeToEditSequenceThunk = (sequenceId?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE));\n    if (sequenceId) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceToEdit(DavitUtil.deepCopy(response.object.sequenceTO)));\n            dispatch(SequenceModelActions.setCurrentSequence(response.object));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(EditSequence.create());\n    }\n};\n\nconst setModeToEditChainThunk = (chain?: ChainTO): AppThunk => (dispatch) => {\n    if (!chain) {\n        dispatch(EditChain.create());\n    } else {\n        dispatch(SequenceModelActions.setCurrentChain(chain));\n    }\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN));\n};\n\nconst setModeToEditChainLinkThunk = (\n    chainLink: ChainLinkTO,\n    from?: ChainLinkTO | ChainDecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_LINK));\n    dispatch(EditChainLink.create(chainLink, from, ifGoTo));\n};\n\nconst setModeEditChainDecisionThunk = (\n    chainDecision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainLinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION));\n    dispatch(EditChainDecision.create(chainDecision, from, ifGoTO));\n};\n\nconst setModeToEditChainConditionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    if (decision !== null && decision !== undefined) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_DECISION_CONDITION));\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\nconst setModeToEditChainStatesThunk = (): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_CHAIN_STATES));\n};\n\nconst setModeToEditStepThunk = (\n    stepCTO: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP));\n    dispatch(EditStep.create(stepCTO, from, ifGoTo));\n};\n\nconst setModeToEditActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_STEP_ACTION));\n    dispatch(EditSlice.actions.setActionToEdit(action));\n};\n\nconst setModeToEditGroupThunk = (group?: GroupTO): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_GROUP));\n    if (group === undefined) {\n        dispatch(EditGroup.create());\n    } else {\n        dispatch(EditSlice.actions.setGroupToEdit(group));\n    }\n};\n\nconst setModeToEditSequenceConfigurationThunk = (id?: number): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.VIEW_CONFIGURATION));\n    if (id) {\n        const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.findSequenceConfiguration(id);\n        if (response.code === 200) {\n            dispatch(EditSlice.actions.setSequenceConfigurationToEdit(DavitUtil.deepCopy(response.object)));\n        } else {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n    } else {\n        dispatch(SequenceModelActions.resetCurrentSequence);\n        dispatch(SequenceModelActions.resetCurrentSequenceConfiguration);\n    }\n};\n\nconst setModeToEditDecisionThunk = (\n    decision: DecisionTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTo?: Boolean,\n): AppThunk => (dispatch) => {\n    dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION));\n    dispatch(EditDecision.create(decision, from, ifGoTo));\n};\n\nconst setModeToEditConditionThunk = (decision: DecisionTO, condition?: ConditionTO): AppThunk => (dispatch) => {\n    if (!DavitUtil.isNullOrUndefined(decision)) {\n        dispatch(setModeWithStorageThunk(Mode.EDIT_SEQUENCE_DECISION_CONDITION));\n        if (condition) {\n            dispatch(editActions.setConditionToEdit(condition));\n        } else {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decision);\n            // create new condition\n            let newCondition: ConditionTO | undefined = new ConditionTO();\n            newCondition.decisionFk = decision.id;\n            copyDecision.conditions.push(newCondition);\n            // save decision\n            dispatch(EditDecision.save(copyDecision));\n            // get new decision with new id.\n            const updatedDecision: DecisionTO = EditDecision.find(copyDecision.id);\n\n            // get new condition with new id.\n            newCondition = updatedDecision.conditions.find(\n                (condition) => condition.actorFk === -1 && condition.dataFk === -1,\n            );\n\n            if (newCondition) {\n                dispatch(editActions.setConditionToEdit(newCondition));\n            }\n        }\n    } else {\n        dispatch(GlobalActions.handleError(\"Edit Condition: 'Decision is null or undefined'.\"));\n    }\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and mage the other reachable in both slices\nconst getArrowsForStepFk = (sequenceStepCTO: SequenceStepCTO, rootState: RootState): Arrow[] => {\n    let arrows: Arrow[];\n    arrows = mapActionsToArrows(sequenceStepCTO.actions, rootState);\n    return arrows;\n};\n\n// TODO: this method is copied from sequencemodelslice! remove one and make the other reachable in both slices\nconst mapActionsToArrows = (actions: ActionTO[], state: RootState): Arrow[] => {\n    const arrows: Arrow[] = [];\n\n    actions.forEach((action) => {\n        const sourceGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.sendingActorFk,\n        )?.geometricalData;\n\n        const targetGeometricalData: GeometricalDataCTO | undefined = state.masterData.actors.find(\n            (comp) => comp.actor.id === action.receivingActorFk,\n        )?.geometricalData;\n\n        const dataLabels: string[] = [];\n        if (action.actionType === ActionType.TRIGGER) {\n            dataLabels.push(action.triggerText);\n        } else {\n            const dataLabel: string | undefined = state.masterData.datas.find((data) => data.data.id === action.dataFk)\n                ?.data.name;\n            if (dataLabel) {\n                dataLabels.push(dataLabel);\n            }\n        }\n\n        const type: ArrowType = action.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n        if (sourceGeometricalData && targetGeometricalData) {\n            const existingArrow: Arrow | undefined = arrows.find(\n                (arrow) =>\n                    arrow.sourceGeometricalData.geometricalData.id === sourceGeometricalData.geometricalData.id &&\n                    arrow.targetGeometricalData.geometricalData.id === targetGeometricalData.geometricalData.id,\n            );\n\n            if (existingArrow) {\n                existingArrow.dataLabels.push(...dataLabels);\n            } else {\n                arrows.push({\n                    sourceGeometricalData,\n                    targetGeometricalData,\n                    dataLabels,\n                    type,\n                });\n            }\n        }\n    });\n    return arrows;\n};\n\n// =============================================== SELECTORS ===============================================\nexport const EditReducer = EditSlice.reducer;\n/**\n * To make it easy to select the right obejct to edit we have selectors that ensure that the right object to edit is returned for the mode\n * Since the object to edit is a sumtype we ensure the right type by checking for a unqiue field\n */\nexport const editSelectors = {\n    selectMode: (state: RootState): Mode => state.edit.mode,\n    selectActorToEdit: (state: RootState): ActorCTO | null => {\n        return state.edit.mode === Mode.EDIT_ACTOR && (state.edit.objectToEdit as ActorCTO).actor\n            ? (state.edit.objectToEdit as ActorCTO)\n            : null;\n    },\n    selectChainConfiguration: (state: RootState): ChainConfigurationTO | null => {\n        return state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as ChainConfigurationTO).stateValues\n            ? (state.edit.objectToEdit as ChainConfigurationTO)\n            : null;\n    },\n    selectChainLinkToEdit: (state: RootState): ChainLinkTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_LINK && (state.edit.objectToEdit as ChainLinkTO).sequenceConfigurationFk\n            ? (state.edit.objectToEdit as ChainLinkTO)\n            : null;\n    },\n    selectChainDecisionToEdit: (state: RootState): ChainDecisionTO | null => {\n        return state.edit.mode === Mode.EDIT_CHAIN_DECISION ||\n        (state.edit.mode === Mode.EDIT_CHAIN_DECISION_CONDITION &&\n            (state.edit.objectToEdit as ChainDecisionTO).elseGoTo)\n            ? (state.edit.objectToEdit as ChainDecisionTO)\n            : null;\n    },\n    selectDataToEdit: (state: RootState): DataCTO | null => {\n        return state.edit.mode === Mode.EDIT_DATA ||\n        (Mode.EDIT_DATA_INSTANCE && (state.edit.objectToEdit as DataCTO).data)\n            ? (state.edit.objectToEdit as DataCTO)\n            : null;\n    },\n    selectGroupToEdit: (state: RootState): GroupTO | null => {\n        return state.edit.mode === Mode.EDIT_GROUP && (state.edit.objectToEdit as GroupTO).color\n            ? (state.edit.objectToEdit as GroupTO)\n            : null;\n    },\n    selectRelationToEdit: (state: RootState): DataRelationTO | null => {\n        return state.edit.mode === Mode.EDIT_RELATION && (state.edit.objectToEdit as DataRelationTO).direction1\n            ? (state.edit.objectToEdit as DataRelationTO)\n            : null;\n    },\n    selectSequenceToEdit: (state: RootState): SequenceTO | null => {\n        if ((state.edit.mode === Mode.EDIT_SEQUENCE || state.edit.mode === Mode.EDIT_SEQUENCE_STATES) && (state.edit.objectToEdit as SequenceTO)) {\n            return (state.edit.objectToEdit as SequenceTO);\n        }\n\n        if ((state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO))) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        return null;\n    },\n    selectEditActionArrow: (state: RootState): Arrow | null => {\n        if (\n            state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION &&\n            (state.edit.objectToEdit as ActionTO).receivingActorFk\n        ) {\n            const actionToEdit: ActionTO = state.edit.objectToEdit as ActionTO;\n\n            const sourceComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.sendingActorFk,\n            );\n\n            const targetComp: ActorCTO | undefined = state.masterData.actors.find(\n                (comp) => comp.actor.id === actionToEdit.receivingActorFk,\n            );\n\n            const dataLabel: string =\n                actionToEdit.actionType === ActionType.TRIGGER\n                    ? actionToEdit.triggerText\n                    : masterDataSelectors.selectDataCTOById(actionToEdit.dataFk)(state)?.data.name ||\n                    \"Could not find data\";\n\n            const type: ArrowType = actionToEdit.actionType.includes(\"SEND\") ? ArrowType.SEND : ArrowType.TRIGGER;\n\n            if (sourceComp && targetComp) {\n                return {\n                    sourceGeometricalData: sourceComp.geometricalData,\n                    targetGeometricalData: targetComp.geometricalData,\n                    dataLabels: [dataLabel],\n                    type: type,\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    },\n    selectEditStepArrows: (state: RootState): Arrow[] => {\n        let arrows: Arrow[] = [];\n\n        if (state.edit.mode === Mode.EDIT_SEQUENCE_STEP && (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO) {\n            arrows = getArrowsForStepFk(state.edit.objectToEdit as SequenceStepCTO, state);\n        }\n        return arrows;\n    },\n    selectSequenceConfigurationToEdit: (state: RootState): SequenceConfigurationTO | null => {\n\n        if (state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO).stateValues) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        if (state.edit.mode === Mode.VIEW_CONFIGURATION && (state.edit.objectToEdit as SequenceConfigurationTO).stateValues) {\n            return (state.edit.objectToEdit as SequenceConfigurationTO);\n        }\n\n        return null;\n    },\n    selectStepToEdit: (state: RootState): SequenceStepCTO | null => {\n        switch (state.edit.mode) {\n            case Mode.EDIT_SEQUENCE_STEP:\n                return (state.edit.objectToEdit as SequenceStepCTO).sequenceStepTO\n                    ? (state.edit.objectToEdit as SequenceStepCTO)\n                    : null;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return (state.edit.objectToEdit as StepAction).step\n                    ? (state.edit.objectToEdit as StepAction).step\n                    : null;\n            default:\n                return null;\n        }\n    },\n    selectActionToEdit: (state: RootState): ActionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_STEP_ACTION && (state.edit.objectToEdit as ActionTO).actionType\n            ? (state.edit.objectToEdit as ActionTO)\n            : null;\n    },\n    selectDecisionToEdit: (state: RootState): DecisionTO | null => {\n        return (state.edit.mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) &&\n        (state.edit.objectToEdit as DecisionTO).conditions\n            ? (state.edit.objectToEdit as DecisionTO)\n            : null;\n    },\n    selectConditionToEdit: (state: RootState): ConditionTO | null => {\n        return state.edit.mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION &&\n        (state.edit.objectToEdit as ConditionTO).decisionFk\n            ? (state.edit.objectToEdit as ConditionTO)\n            : null;\n    },\n    selectInstanceIdToEdit: (state: RootState): number => {\n        return state.edit.instanceId;\n    },\n};\n\n// =============================================== ACTIONS ===============================================\n\nexport const EditActions = {\n    setMode: {\n        editActor: setModeToEditActorThunk,\n        editActorById: setModeToEditActorByIdThunk,\n        editData: setModeToEditDataThunk,\n        editDataById: setModeToEditDataByIdThunk,\n        editDataInstance: setModeToEditDataInstanceThunk,\n        editInstanceById: editDataInstanceByIdThunk,\n        editGroup: setModeToEditGroupThunk,\n        editRelation: setModeToEditRelationThunk,\n        editSequence: setModeToEditSequenceThunk,\n        editSequenceStates: setModeToEditSequenceStatesThunk,\n        editSequenceConfiguration: setModeToEditSequenceConfigurationThunk,\n        editStep: setModeToEditStepThunk,\n        editDecision: setModeToEditDecisionThunk,\n        editCondition: setModeToEditConditionThunk,\n        editAction: setModeToEditActionThunk,\n        editChain: setModeToEditChainThunk,\n        editChainStates: setModeToEditChainStatesThunk,\n        editChainLink: setModeToEditChainLinkThunk,\n        editChainDecision: setModeEditChainDecisionThunk,\n        editChainCondition: setModeToEditChainConditionThunk,\n        editConfiguration: setModeToEditSequenceConfigurationThunk,\n        edit: setModeToEditThunk,\n        view: setModeToViewThunk,\n        file: setModeToFileThunk,\n        tab: setModeToTabThunk,\n    },\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ActorTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public designFk: number = -1,\n        public groupFks: number = -1,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class DesignTO extends AbstractTO {\n    constructor(public color: string = \"#3498db\") {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GeometricalDataTO extends AbstractTO {\n    constructor(public width: number = 100, public height: number = 30, public positionFk: number = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class PositionTO extends AbstractTO {\n    constructor(public x: number = 10, public y: number = 10) {\n        super();\n    }\n}\n","import { GeometricalDataTO } from \"../to/GeometricalDataTO\";\nimport { PositionTO } from \"../to/PositionTO\";\n\nexport class GeometricalDataCTO {\n    constructor(\n        public position: PositionTO = new PositionTO(),\n        public geometricalData: GeometricalDataTO = new GeometricalDataTO(),\n    ) {\n    }\n}\n","import { ActorTO } from \"../to/ActorTO\";\nimport { DesignTO } from \"../to/DesignTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class ActorCTO {\n    constructor(\n        public actor: ActorTO = new ActorTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n        public design: DesignTO = new DesignTO(),\n    ) {\n    }\n}\n","import { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createActorThunk = (): AppThunk => (dispatch) => {\n    const actor: ActorCTO = new ActorCTO();\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n    dispatch(setActorToEditThunk(response.object));\n};\n\nconst saveActorThunk = (actor: ActorCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = DataAccess.saveActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst deleteActorThunk = (actor: ActorCTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<ActorCTO> = await DataAccess.deleteActorCTO(actor);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setActorToEditThunk = (actor: ActorCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_ACTOR) {\n        dispatch(editActions.setActorToEdit(actor));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set actor to edit in mode: \" + mode));\n    }\n};\n\nexport const EditActor = {\n    save: saveActorThunk,\n    delete: deleteActorThunk,\n    update: setActorToEditThunk,\n    create: createActorThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainDecision } from \"./ChainDecisionThunks\";\n\nconst createChainLinkThunk = (link: ChainLinkTO, from?: ChainLinkTO | ChainDecisionTO, ifGoTO?: boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainLinkTO).sequenceConfigurationFk !== undefined) {\n                (from as ChainLinkTO).goto = {type: GoToTypesChain.LINK, id: response.object.id};\n                dispatch(saveChainLinkThunk(from as ChainLinkTO));\n            }\n            if ((from as ChainDecisionTO).ifGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.LINK, id: response.object.id};\n                }\n                dispatch(EditChainDecision.save(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainLinkToEditThunk(response.object));\n    }\n};\n\nconst saveChainLinkThunk = (link: ChainLinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.saveChainlink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst deleteChainLinkThunk = (link: ChainLinkTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.deleteChainLink(link);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst findChainLinkThunk = (id: number): ChainLinkTO => {\n    const response: DataAccessResponse<ChainLinkTO> = DataAccess.findChainLink(id);\n    if (response.code !== 200) {\n        // TODO: call this with \"disptach(GlobalActions.handleError)\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainLinkToEditThunk = (link: ChainLinkTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_LINK) {\n        dispatch(editActions.setChainLinkToEdit(link));\n    } else {\n        console.warn(\"Try to set chain step to edit in mode: \" + mode);\n    }\n};\n\nexport const EditChainLink = {\n    create: createChainLinkThunk,\n    save: saveChainLinkThunk,\n    delete: deleteChainLinkThunk,\n    find: findChainLinkThunk,\n};\n","import { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { GoToTypesChain } from \"../../dataAccess/access/types/GoToTypeChain\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditChainLink } from \"./ChainLinkThunks\";\n\nconst createChainDecisionThunk = (\n    decision: ChainDecisionTO,\n    from?: ChainDecisionTO | ChainLinkTO,\n    ifGoTO?: boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as ChainLinkTO).sequenceConfigurationFk !== undefined) {\n                (from as ChainLinkTO).goto = {type: GoToTypesChain.DEC, id: response.object.id};\n                dispatch(EditChainLink.save(from as ChainLinkTO));\n            }\n            if ((from as ChainDecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as ChainDecisionTO).ifGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                } else {\n                    (from as ChainDecisionTO).elseGoTo = {type: GoToTypesChain.DEC, id: response.object.id};\n                }\n                dispatch(saveChainDecisionThunk(from as ChainDecisionTO));\n            }\n        }\n        dispatch(setChainDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.saveChainDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst deleteChainDecisionThunk = (decision: ChainDecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.deleteChaindecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nconst findChainDecisionThunk = (id: number): ChainDecisionTO => {\n    const response: DataAccessResponse<ChainDecisionTO> = DataAccess.findChainDecision(id);\n    if (response.code !== 200) {\n        // TODO: This should be called with: \"dispatch(GlobalActions.handleError\".\n        console.warn(response.message);\n    }\n    return response.object;\n};\n\nconst setChainDecisionToEditThunk = (decision: ChainDecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_CHAIN_DECISION || mode === Mode.EDIT_CHAIN_DECISION_CONDITION) {\n        dispatch(editActions.setChainDecisionToEdit(decision));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set chain step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditChainDecision = {\n    create: createChainDecisionThunk,\n    save: saveChainDecisionThunk,\n    delete: deleteChainDecisionThunk,\n    find: findChainDecisionThunk,\n    update: setChainDecisionToEditThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class ChainTO extends AbstractTO {\n    constructor(public name: string = \"\", public note: string = \"\",) {\n        super();\n    }\n}\n","// ----------------------------------------------- CHAIN -----------------------------------------------\n\nimport { ChainCTO } from \"../../dataAccess/access/cto/ChainCTO\";\nimport { ChainDecisionTO } from \"../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../dataAccess/access/to/ChainTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createChainThunk = (): AppThunk => (dispatch) => {\n    const chain: ChainTO = new ChainTO();\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst getChainCTO = (chain: ChainTO): ChainCTO => {\n    const response: DataAccessResponse<ChainCTO> = DataAccess.getChainCTO(chain);\n    if (response.code !== 200) {\n        console.warn(response.message);\n    }\n    console.info(response.object);\n    return response.object;\n};\n\nconst saveChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.saveChainTO(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(SequenceModelActions.setCurrentChain(response.object));\n};\n\nconst deleteChainThunk = (chain: ChainTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainTO> = DataAccess.deleteChain(chain);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n};\n\nconst setChainRootThunk = (chainId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainLinkTO | ChainDecisionTO> = DataAccess.setChainRoot(\n        chainId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainsFromBackend());\n    dispatch(MasterDataActions.loadChainLinksFromBackend());\n    dispatch(MasterDataActions.loadChainDecisionsFromBackend());\n};\n\nexport const EditChain = {\n    create: createChainThunk,\n    save: saveChainThunk,\n    delete: deleteChainThunk,\n    setRoot: setChainRootThunk,\n    getCTO: getChainCTO,\n};\n","import { AbstractTO } from \"./AbstractTO\";\nimport { DataInstanceTO } from \"./DataInstanceTO\";\n\nexport class DataTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public geometricalDataFk: number = -1,\n        public dataConnectionFks: number[] = [],\n        public instances: DataInstanceTO[] = [{id: -1, name: \"default\"}],\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { DataTO } from \"../to/DataTO\";\nimport { GeometricalDataCTO } from \"./GeometraicalDataCTO\";\n\nexport class DataCTO {\n    constructor(\n        public data: DataTO = new DataTO(),\n        public geometricalData: GeometricalDataCTO = new GeometricalDataCTO(),\n    ) {\n    }\n}\n","import { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createDataThunk = (): AppThunk => (dispatch) => {\n    const data: DataCTO = new DataCTO();\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(setDataToEdit(response.object));\n};\n\nconst saveDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.saveDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n};\n\nconst deleteDataThunk = (data: DataCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DataCTO> = DataAccess.deleteDataCTO(data);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadDatasFromBackend());\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setDataToEdit = (data: DataCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setDataToEdit(data));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditData = {\n    save: saveDataThunk,\n    delete: deleteDataThunk,\n    update: setDataToEdit,\n    create: createDataThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditDecision } from \"./DecisionThunks\";\n\nconst createSequenceStepThunk = (\n    step: SequenceStepCTO,\n    from?: SequenceStepCTO | DecisionTO,\n    ifGoTO?: Boolean,\n): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from !== undefined) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {\n                    type: GoToTypes.STEP,\n                    id: response.object.sequenceStepTO.id,\n                };\n                dispatch(saveSequenceStepThunk(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTO) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.STEP, id: response.object.sequenceStepTO.id};\n                }\n                dispatch(EditDecision.save(from as DecisionTO));\n            }\n        }\n        dispatch(setStepToEditThunk(response.object));\n    }\n};\n\nconst deleteSequenceStepThunk = (step: SequenceStepCTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forent gotos.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((item) => {\n            if (\n                item.sequenceStepTO.goto.type === GoToTypes.STEP &&\n                item.sequenceStepTO.goto.id === step.sequenceStepTO.id\n            ) {\n                item.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(saveSequenceStepThunk(item));\n            }\n        });\n        // update decision\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.STEP && cond.ifGoTo.id === step.sequenceStepTO.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.STEP && cond.elseGoTo.id === step.sequenceStepTO.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(EditDecision.save(cond));\n            }\n        });\n    }\n    // delete step.\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.deleteSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst saveSequenceStepThunk = (step: SequenceStepCTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepCTO> = DataAccess.saveSequenceStepCTO(step);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setStepToEditThunk = (step: SequenceStepCTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode.startsWith(Mode.EDIT_SEQUENCE_STEP)) {\n        dispatch(editActions.setStepToEdit(step));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set step to edit in mode: \" + mode));\n    }\n};\n\nexport const EditStep = {\n    save: saveSequenceStepThunk,\n    delete: deleteSequenceStepThunk,\n    update: setStepToEditThunk,\n    create: createSequenceStepThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypes } from \"../../dataAccess/access/types/GoToType\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createDecisionThunk = (decision: DecisionTO, from?: SequenceStepCTO | DecisionTO, ifGoTo?: Boolean): AppThunk => (\n    dispatch,\n) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    } else {\n        if (from) {\n            if ((from as SequenceStepCTO).sequenceStepTO !== undefined) {\n                (from as SequenceStepCTO).sequenceStepTO.goto = {type: GoToTypes.DEC, id: response.object.id};\n                dispatch(EditStep.save(from as SequenceStepCTO));\n            }\n            if ((from as DecisionTO).elseGoTo !== undefined) {\n                if (ifGoTo) {\n                    (from as DecisionTO).ifGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                } else {\n                    (from as DecisionTO).elseGoTo = {type: GoToTypes.DEC, id: response.object.id};\n                }\n                dispatch(saveDecisionThunk(from as DecisionTO));\n            }\n        }\n        dispatch(setDecisionToEditThunk(response.object));\n    }\n};\n\nconst saveDecisionThunk = (decision: DecisionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.saveDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteDecisionThunk = (decision: DecisionTO, sequenceCTO?: SequenceCTO): AppThunk => (dispatch) => {\n    // update forwent goto.\n    if (sequenceCTO) {\n        const copySequence: SequenceCTO = DavitUtil.deepCopy(sequenceCTO);\n        // update steps\n        copySequence.sequenceStepCTOs.forEach((step) => {\n            if (step.sequenceStepTO.goto.type === GoToTypes.DEC && step.sequenceStepTO.goto.id === decision.id) {\n                step.sequenceStepTO.goto = {type: GoToTypes.ERROR};\n                dispatch(EditStep.save(step));\n            }\n        });\n        // update decisions\n        copySequence.decisions.forEach((cond) => {\n            if (cond.ifGoTo.type === GoToTypes.DEC && cond.ifGoTo.id === decision.id) {\n                cond.ifGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n            if (cond.elseGoTo.type === GoToTypes.DEC && cond.elseGoTo.id === decision.id) {\n                cond.elseGoTo = {type: GoToTypes.ERROR};\n                dispatch(saveDecisionThunk(cond));\n            }\n        });\n    }\n    // delete decision.\n    const response: DataAccessResponse<DecisionTO> = DataAccess.deleteDecision(decision);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst findDecisionTOThunk = (decisionId: number): DecisionTO => {\n    const response: DataAccessResponse<DecisionTO> = DataAccess.findDecision(decisionId);\n    if (response.code !== 200) {\n        // TODO: call GlobalActions.handleError.\n        console.warn(response.message);\n    }\n    return DavitUtil.deepCopy(response.object);\n};\n\nconst setDecisionToEditThunk = (decision: DecisionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE_DECISION || Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n        dispatch(editActions.setDecisionToEdit(findDecisionTOThunk(decision.id)));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set decision to edit in mode: \" + mode));\n    }\n};\n\nexport const EditDecision = {\n    create: createDecisionThunk,\n    update: setDecisionToEditThunk,\n    save: saveDecisionThunk,\n    delete: deleteDecisionThunk,\n    find: findDecisionTOThunk,\n};\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class GroupTO extends AbstractTO {\n    constructor(public name: string = \"\", public color: string = \"red\") {\n        super();\n    }\n}\n","import { GroupTO } from \"../../dataAccess/access/to/GroupTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createGroupThunk = (): AppThunk => (dispatch) => {\n    const group: GroupTO = new GroupTO();\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(setGroupToEditThunk(response.object));\n};\n\nconst saveGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.saveGroup(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n};\n\nconst deleteGroupThunk = (group: GroupTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<GroupTO> = DataAccess.deleteGroupTO(group);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadGroupsFromBackend());\n    dispatch(MasterDataActions.loadActorsFromBackend());\n};\n\nconst setGroupToEditThunk = (group: GroupTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_DATA || mode === Mode.EDIT_DATA_INSTANCE) {\n        dispatch(editActions.setGroupToEdit(group));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set data to edit in mode: \" + mode));\n    }\n};\n\nexport const EditGroup = {\n    save: saveGroupThunk,\n    delete: deleteGroupThunk,\n    update: setGroupToEditThunk,\n    create: createGroupThunk,\n};\n","import { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createRelationThunk = (): AppThunk => (dispatch) => {\n    const relation: DataRelationTO = new DataRelationTO();\n    const response: DataAccessResponse<DataRelationTO> = DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n    dispatch(setRelationToEditThunk(response.object));\n};\n\nconst saveRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.saveDataRelationCTO(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst deleteRelationThunk = (relation: DataRelationTO): AppThunk => async (dispatch) => {\n    const response: DataAccessResponse<DataRelationTO> = await DataAccess.deleteDataRelation(relation);\n    if (response.code !== 200) {\n        console.log(response);\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadRelationsFromBackend());\n};\n\nconst setRelationToEditThunk = (relation: DataRelationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_RELATION) {\n        dispatch(editActions.setRelationToEdit(relation));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set relation to edit in mode: \" + mode));\n    }\n};\n\nexport const EditRelation = {\n    save: saveRelationThunk,\n    delete: deleteRelationThunk,\n    create: createRelationThunk,\n    update: setRelationToEditThunk,\n};\n","import { SequenceCTO } from \"../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStepTO } from \"../../dataAccess/access/to/SequenceStepTO\";\nimport { SequenceTO } from \"../../dataAccess/access/to/SequenceTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { SequenceModelActions } from \"../SequenceModelSlice\";\n\nconst createSequenceThunk = (): AppThunk => (dispatch) => {\n    const sequence: SequenceTO = new SequenceTO();\n    dispatch(saveSequenceThunk(sequence));\n};\n\nconst saveSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceTO> = DataAccess.saveSequenceTO(sequence);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n    dispatch(setSequenceToEditThunk(response.object));\n    dispatch(SequenceModelActions.setCurrentSequenceById(response.object.id));\n};\n\nconst deleteSequenceThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const sequenceCTOToDelete: SequenceCTO | null = getSequenceCTOById(sequence.id);\n\n    if (sequenceCTOToDelete !== null) {\n        const response: DataAccessResponse<SequenceCTO> = DataAccess.deleteSequenceCTO(sequenceCTOToDelete);\n\n        if (response.code !== 200) {\n            dispatch(GlobalActions.handleError(response.message));\n        }\n\n        if (getState().sequenceModel.selectedSequenceModel?.sequenceTO?.id === sequence.id) {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n\n        dispatch(MasterDataActions.loadSequencesFromBackend());\n    }\n};\n\nconst getSequenceCTOById = (sequenceId: number): SequenceCTO | null => {\n    const response: DataAccessResponse<SequenceCTO> = DataAccess.findSequenceCTO(sequenceId);\n    if (response.code !== 200) {\n        return null;\n    }\n    return response.object;\n};\n\nconst setRootThunk = (sequenceId: number, rootId: number, isDecision: boolean): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStepTO | DecisionTO> = DataAccess.setRoot(\n        sequenceId,\n        rootId,\n        isDecision,\n    );\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setSequenceToEditThunk = (sequence: SequenceTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.EDIT_SEQUENCE) {\n        dispatch(editActions.setSequenceToEdit(sequence));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set sequence to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequence = {\n    save: saveSequenceThunk,\n    delete: deleteSequenceThunk,\n    update: setSequenceToEditThunk,\n    findCTO: getSequenceCTOById,\n    create: createSequenceThunk,\n    setRoot: setRootThunk,\n};","import React, { FunctionComponent } from \"react\";\n\nexport enum ElementSize {\n    \"large\", \"medium\", \"small\", \"tiny\"\n}\n\nexport enum ElementVariant {\n    \"solid\", \"outlined\", \"light\"\n}\n\ninterface ThemeProps {\n}\n\nexport const Theme: FunctionComponent<ThemeProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className=\"dark\">\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormLinePosition {\n    start = \"start\",\n    center = \"center\",\n    end = \"end\"\n}\n\nexport interface FormLineProps {\n    position?: FormLinePosition;\n}\n\nexport const FormLine: FunctionComponent<FormLineProps> = (props) => {\n    const {children, position} = props;\n\n    return (\n        <div className={\"flex flex-\" + (position ? position : FormLinePosition.center) + \" padding-horizontal-medium padding-vertical-tiny width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport \"./DavitButton.css\";\n\nexport interface DavitButtonProps {\n    onClick: () => void;\n    disabled?: boolean;\n    size?: ElementSize;\n    className?: string;\n    active?: boolean;\n}\n\nexport const DavitButton: FunctionComponent<DavitButtonProps> = (props) => {\n    const {onClick, size = ElementSize.medium, className, children, disabled, active} = props;\n\n    return (\n        <button onClick={onClick}\n                className={ElementSize[size] + \" \" + className + \" \" + (active ? \"activeButton\" : \"\")}\n                disabled={disabled}\n        >\n            {children}\n        </button>\n    );\n};\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitButton, DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitButton.css\";\nimport \"./DavitIconButton.css\";\n\ninterface DavitIconButtonProps extends DavitButtonProps {\n    iconName?: IconDefinition;\n    iconLeft?: boolean;\n    size?: ElementSize;\n    iconColor?: string;\n}\n\nexport const DavitIconButton: FunctionComponent<DavitIconButtonProps> = (props) => {\n    const {onClick, size, className = \"\", iconName, children, iconLeft, iconColor} = props;\n\n    return (\n        <DavitButton onClick={onClick}\n                     size={size}\n                     className={className}\n        >\n            {iconName && iconLeft && <FontAwesomeIcon className={children ? \"iconButtonIcon\" : \"\"}\n                                                      icon={iconName}\n                                                      color={iconColor}\n            />}\n            {children}\n            {iconName && !iconLeft && <FontAwesomeIcon className={children ? \"iconButtonIcon\" : \"\"}\n                                                       icon={iconName}\n                                                       color={iconColor}\n            />}\n        </DavitButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitAddButtonProps extends DavitButtonProps {\n}\n\nexport const DavitAddButton: FunctionComponent<DavitAddButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.plus}\n    />;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitBackButtonProps extends DavitButtonProps {\n}\n\nexport const DavitBackButton: FunctionComponent<DavitBackButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={DavitIcons.back}\n    />;\n};\n","import { faWrench } from \"@fortawesome/free-solid-svg-icons/faWrench\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitEditButtonProps extends DavitButtonProps {\n}\n\nexport const DavitEditButton: FunctionComponent<DavitEditButtonProps> = (props) => {\n    const {onClick} = props;\n\n    return <DavitIconButton onClick={onClick}\n                            iconName={faWrench}\n    />;\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitMoreButtonProps {\n    onClick: (show: boolean) => void;\n    show?: boolean;\n    className?: string;\n    size?: ElementSize;\n}\n\nexport const DavitShowMoreButton: FunctionComponent<DavitMoreButtonProps> = (props) => {\n    const {onClick, show, className, size} = props;\n\n    return <DavitIconButton onClick={() => onClick(!show)}\n                            size={size ? size : ElementSize.tiny}\n                            iconName={show ? faAngleDown : faAngleRight}\n                            className={className}\n    />;\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitIcons } from \"../icons/IconSet\";\nimport { DavitButtonProps } from \"./DavitButton\";\nimport \"./DavitDeleteButton.css\";\nimport { DavitIconButton } from \"./DavitIconButton\";\n\ninterface DavitDeleteButtonProps extends DavitButtonProps {\n    noConfirm?: boolean;\n}\n\nexport const DavitDeleteButton: FunctionComponent<DavitDeleteButtonProps> = (props) => {\n    const {onClick, disabled, noConfirm} = props;\n\n    const SHRINK_DELAY: number = 3000;\n\n    const [fluid, setFluid] = useState<boolean>(false);\n\n    // TODO: BUG JIRA => CARV2-227\n    useEffect(() => {\n        if (fluid) setTimeout(() => setFluid(false), SHRINK_DELAY);\n    }, [fluid]);\n\n    const clickEventHandler = () => {\n        if (fluid || noConfirm) {\n            onClick();\n        } else {\n            setFluid(true);\n        }\n    };\n\n    return (\n        <DavitIconButton\n            iconName={fluid ? undefined : DavitIcons.trash}\n            onClick={clickEventHandler}\n            className={fluid ? \"deleteButton fluid padding-vertical-small padding-horizontal-medium border\" : \"deleteButton\"}\n            disabled={disabled}\n        >\n            {fluid ? \"SURE\" : undefined}\n        </DavitIconButton>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport Select from \"react-select\";\nimport \"./DavitDropDown.css\";\n\nexport interface DavitDropDownItemProps {\n    key: number;\n    value: string;\n    text: string;\n}\n\nexport interface DavitDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    value?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    className?: string;\n    classPrefix?: string;\n}\n\nexport interface DavitLabelDropDownProps {\n    onSelect: (dropdownItem: DavitDropDownItemProps) => void;\n    dropdownItems: DavitDropDownItemProps[];\n    label: string;\n    className?: string;\n    classPrefix?: string;\n}\n\ninterface ReactSelectOption {\n    value: string;\n    label: string;\n}\n\nexport const DavitDropDown: FunctionComponent<DavitDropDownProps> = (props) => {\n    const {dropdownItems, onSelect, placeholder, value, clearable, classPrefix, className} = props;\n\n\n    return (\n        <Select\n            classNamePrefix={classPrefix ? classPrefix : \"react-select\"}\n            className={className ? className : \"react-select-container\"}\n            isClearable={clearable}\n            placeholder={placeholder}\n            value={getSelectedValue(value, dropdownItems)}\n            options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n            onChange={(value) => handleOnChange(value, onSelect)}\n        />\n    );\n};\n\nexport const DavitLabelDropDown: FunctionComponent<DavitLabelDropDownProps> = (props) => {\n        const {dropdownItems, onSelect, label, className, classPrefix} = props;\n\n        return (\n            <Select\n                classNamePrefix={classPrefix ? classPrefix : \"react-select-label\"}\n                className={className ? className : \"react-select-label-container\"}\n                value={{value: label, label: label}}\n                options={dropdownItems.sort((a, b) => a.text.toLowerCase().localeCompare(b.text.toLowerCase())).map(dropdownItemToOption)}\n                onChange={(value) => handleOnChange(value, onSelect)}\n                isSearchable={false}\n            />\n        );\n    }\n;\n\nconst parsDataToDavitDropDownItemProps = (data: ReactSelectOption): DavitDropDownItemProps => {\n    return {\n        key: -1,\n        text: data.label ? data.label : \"\",\n        value: data.value ? data.value : \"\",\n    };\n};\n\nconst dropdownItemToOption = (dropdownItem: DavitDropDownItemProps): ReactSelectOption => {\n    return {value: dropdownItem.value, label: dropdownItem.text};\n};\n\nconst handleOnChange = (value: any, onSelect: (dropdownItem: DavitDropDownItemProps) => void) => {\n    if (value !== null) {\n        const option: DavitDropDownItemProps = parsDataToDavitDropDownItemProps(value);\n        onSelect(option);\n    } else {\n        onSelect({key: -1, value: \"\", text: \"\"});\n    }\n};\n\nconst getSelectedValue = (value: string | undefined, dropdownItems: DavitDropDownItemProps[]): ReactSelectOption => {\n    let selectedValue: ReactSelectOption = {value: \"\", label: \"\"};\n\n    if (value) {\n\n        const option: DavitDropDownItemProps | undefined = dropdownItems.find(option => option.value === value);\n\n        if (option) {\n            selectedValue.value = option.value;\n            selectedValue.label = option.text;\n        }\n    }\n    return selectedValue;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../dataAccess/access/types/ActionType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ActionTypeDropDownnProps {\n    onSelect: (actionType: ActionType | undefined) => void;\n    placeholder?: string;\n    value?: ActionType;\n}\n\nexport const ActionTypeDropDown: FunctionComponent<ActionTypeDropDownnProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const actions: ActionType[] = Object.values(ActionType);\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const actionTypeToOption = (actionType: ActionType, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: actionType,\n            text: getActionTypeLabel(actionType),\n        };\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={actions.map((action, index) => actionTypeToOption(action, index))}\n            onSelect={(item) => onSelect(item.value as ActionType)}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../dataAccess/access/cto/ActorCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ActorDropDownProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ActorDropDownLabelProps {\n    onSelect: (actor: ActorCTO | undefined) => void;\n    label: string;\n}\n\nexport const ActorDropDown: FunctionComponent<ActorDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {actors, actorToOption, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nexport const ActorDropDownLabel: FunctionComponent<ActorDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {actorToOption, actors, selectActor} = useActorDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={actors.map((actor) => actorToOption(actor))}\n            onSelect={(item) => onSelect(selectActor(Number(item.value), actors))}\n            label={label}\n        />\n    );\n};\n\nconst useActorDropDownViewModel = () => {\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const actorToOption = (actor: ActorCTO): DavitDropDownItemProps => {\n        return {\n            key: actor.actor.id,\n            value: actor.actor.id.toString(),\n            text: actor.actor.name,\n        };\n    };\n\n    const selectActor = (actorId: number, actors: ActorCTO[]): ActorCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(actors) && !DavitUtil.isNullOrUndefined(actorId)) {\n            return actors.find((actor) => actor.actor.id === actorId);\n        }\n        return undefined;\n    };\n\n    return {actors, actorToOption, selectActor};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDecisionDropDownLabelProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainDecisionDropDownProps {\n    onSelect: (link: ChainDecisionTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainDecisionDropDownButton: FunctionComponent<ChainDecisionDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={createDecisionOptions()}\n            label={label}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n        />\n    );\n};\n\nexport const ChainDecisionDropDown: FunctionComponent<ChainDecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {createDecisionOptions, selectChainDecision} = useChainDecisionDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={createDecisionOptions()}\n            onSelect={(item) => onSelect(selectChainDecision(Number(item.value)))}\n            placeholder={placeholder}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useChainDecisionDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainDecisions: ChainDecisionTO[] = useSelector(masterDataSelectors.selectChainDecisions);\n\n    const chainDecisionToOption = (decision: ChainDecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const createDecisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions)) {\n            let copyDecision: ChainDecisionTO[] = DavitUtil.deepCopy(chainDecisions);\n            copyDecision = copyDecision.filter((dec) => dec.chainFk === chainId);\n            if (exclude) {\n                copyDecision = copyDecision.filter((dec) => dec.id !== exclude);\n            }\n            return copyDecision.map(chainDecisionToOption);\n        }\n        return [];\n    };\n\n    const selectChainDecision = (id: number): ChainDecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainDecisions) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainDecisions.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {createDecisionOptions, selectChainDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainDropDownProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface ChainDropDownLabelProps {\n    onSelect: (chain: ChainTO | undefined) => void;\n    label: string;\n}\n\nexport const ChainDropDown: FunctionComponent<ChainDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {chainToOption, chains, selectChain} = useChainDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(sequence) => onSelect(selectChain(Number(sequence.value)))}\n            placeholder={placeholder}\n            value={value ? value.toString() : undefined}\n            clearable={true}\n        />\n    );\n};\n\nexport const ChainDropDownButton: FunctionComponent<ChainDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {selectChain, chainToOption, chains} = useChainDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={chains.map(chainToOption)}\n            onSelect={(chain) => onSelect(selectChain(Number(chain.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainDropDownViewModel = () => {\n    const chains: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n\n    const selectChain = (id: number): ChainTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(id) && !DavitUtil.isNullOrUndefined(chains)) {\n            return chains.find((chain) => chain.id === id);\n        }\n        return undefined;\n    };\n\n    const chainToOption = (chain: ChainTO): DavitDropDownItemProps => {\n        return {\n            key: chain.id,\n            value: chain.id.toString(),\n            text: chain.name,\n        };\n    };\n\n    return {chainToOption, selectChain, chains};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainLinkTO } from \"../../../dataAccess/access/to/ChainLinkTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface ChainLinkDropDownLabelProps {\n    onSelect: (link: ChainLinkTO | undefined) => void;\n    chainId: number;\n    label: string;\n    exclude?: number;\n}\n\ninterface ChainLinkDropDownProps {\n    onSelect: (link: ChainLinkTO | undefined) => void;\n    chainId: number;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const ChainLinkDropDown: FunctionComponent<ChainLinkDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainId, exclude} = props;\n    const {linkOptions, selectChainLink} = useChainStepDropDownViewModel(chainId, exclude);\n\n    const validatedValue = (): string | undefined => {\n        return value ? (value === -1 ? undefined : value.toString()) : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={linkOptions()}\n            value={validatedValue()}\n            placeholder={placeholder}\n            onSelect={(chainLink) => onSelect(selectChainLink(Number(chainLink.value)))}\n        />\n    );\n};\n\nexport const ChainLinkDropDownButton: FunctionComponent<ChainLinkDropDownLabelProps> = (props) => {\n    const {onSelect, label, chainId, exclude} = props;\n    const {selectChainLink, linkOptions} = useChainStepDropDownViewModel(chainId, exclude);\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={linkOptions()}\n            onSelect={(link) => onSelect(selectChainLink(Number(link.value)))}\n            label={label}\n        />\n    );\n};\n\nconst useChainStepDropDownViewModel = (chainId: number, exclude?: number) => {\n    const chainlinks: ChainLinkTO[] = useSelector(masterDataSelectors.selectChainLinks);\n\n    const chainStepToOption = (link: ChainLinkTO): DavitDropDownItemProps => {\n        return {\n            key: link.id,\n            value: link.id.toString(),\n            text: link.name,\n        };\n    };\n\n    const linkOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks)) {\n            let copyLinks: ChainLinkTO[] = DavitUtil.deepCopy(chainlinks);\n            copyLinks = copyLinks.filter((link) => link.chainFk === chainId);\n            if (exclude) {\n                copyLinks = copyLinks.filter((link) => link.id !== exclude);\n            }\n            return copyLinks.map(chainStepToOption);\n        }\n        return [];\n    };\n\n    const selectChainLink = (id: number): ChainLinkTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(chainlinks) && !DavitUtil.isNullOrUndefined(id)) {\n            return chainlinks.find((step) => step.id === id);\n        }\n        return undefined;\n    };\n\n    return {linkOptions, selectChainLink};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DataDropDownProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface DataDropDownLabelProps {\n    onSelect: (data: DataCTO | undefined) => void;\n    label: string;\n}\n\nexport const DataDropDown: FunctionComponent<DataDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={datas.map(dataToOption)}\n            placeholder={placeholder}\n            value={value?.toString()}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n        />\n    );\n};\n\nexport const DataLabelDropDown: FunctionComponent<DataDropDownLabelProps> = (props) => {\n    const {onSelect, label} = props;\n    const {datas, selectData, dataToOption} = useDataDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={datas.map(dataToOption)}\n            onSelect={(data) => onSelect(selectData(Number(data.value), datas))}\n            label={label}\n        />\n    );\n};\n\nconst useDataDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectData = (dataId: number, datas: DataCTO[]): DataCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(dataId) && !DavitUtil.isNullOrUndefined(datas)) {\n            return datas.find((data) => data.data.id === dataId);\n        }\n        return undefined;\n    };\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            value: data.data.id.toString(),\n            text: data.data.name,\n        };\n    };\n\n    return {datas, selectData, dataToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface DecisionLabelDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    label: string;\n}\n\ninterface DecisionDropDownProps {\n    onSelect: (decision: DecisionTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const DecisionLabelDropDown: FunctionComponent<DecisionLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={decisionOptions()}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            label={label}\n        />\n    );\n};\n\nexport const DecisionDropDown: FunctionComponent<DecisionDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequenceToEdit, decisionOptions, selectDecision} = useDecisionDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={decisionOptions()}\n            placeholder={placeholder}\n            onSelect={(decision) => onSelect(selectDecision(Number(decision.value), sequenceToEdit))}\n            value={value?.toString()}\n        />\n    );\n};\n\nconst useDecisionDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const decisionToOption = (decision: DecisionTO): DavitDropDownItemProps => {\n        return {\n            key: decision.id,\n            value: decision.id.toString(),\n            text: decision.name,\n        };\n    };\n\n    const decisionOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copyDec: DecisionTO[] = DavitUtil.deepCopy(sequenceToEdit!.decisions);\n            if (exclude) {\n                copyDec = copyDec.filter((dec) => dec.id !== exclude);\n            }\n            return copyDec.map(decisionToOption);\n        }\n        return [];\n    };\n\n    const selectDecision = (decisionId: number, sequence: SequenceCTO | null): DecisionTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(decisionId)) {\n            return sequence!.decisions.find((decision) => decision.id === decisionId);\n        }\n        return undefined;\n    };\n\n    return {sequenceToEdit, decisionOptions, selectDecision};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToTypesChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToChainOptionDropDownProps {\n    onSelect: (gotoType: GoToTypesChain | undefined) => void;\n    value?: GoToTypesChain;\n}\n\nexport const GoToChainOptionDropDown: FunctionComponent<GoToChainOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypesChain).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypesChain, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypesChain | undefined => {\n        return gotoType ? (GoToTypesChain as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(goto) => onSelect(selectGotoType(goto.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypes } from \"../../../dataAccess/access/types/GoToType\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface GoToOptionDropDownProps {\n    onSelect: (gotoType: GoToTypes | undefined) => void;\n    value?: GoToTypes;\n}\n\nexport const GoToOptionDropDown: FunctionComponent<GoToOptionDropDownProps> = (props) => {\n    const {onSelect, value} = props;\n\n    const getOptions = (): DavitDropDownItemProps[] => {\n        return Object.values(GoToTypes).map((goto, index) => goToToOption(goto, index));\n    };\n\n    const goToToOption = (goTo: GoToTypes, key: number): DavitDropDownItemProps => {\n        return {\n            key: key,\n            value: goTo,\n            text: goTo,\n        };\n    };\n\n    const selectGotoType = (gotoType: string | undefined): GoToTypes | undefined => {\n        return gotoType ? (GoToTypes as any)[gotoType] : undefined;\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={getOptions()}\n            onSelect={(data) => onSelect(selectGotoType(data.value))}\n            value={value ? value : GoToTypes.ERROR}\n        />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\nexport interface DataAndInstanceId {\n    dataFk: number;\n    instanceId: number;\n}\n\ninterface InstanceDropDownProps {\n    onSelect: (dataAndInstance: DataAndInstanceId | undefined) => void;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const InstanceDropDown: FunctionComponent<InstanceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {selectInstance, createOptions} = useInstanceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={createOptions()}\n            placeholder={placeholder}\n            onSelect={(instance) => onSelect(selectInstance(instance.value))}\n            value={value !== \"\" ? value : undefined}\n        />\n    );\n};\n\n\nconst useInstanceDropDownViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const selectInstance = (optionItemString: string): DataAndInstanceId | undefined => {\n        if (optionItemString !== null && datas !== null) {\n            return JSON.parse(optionItemString);\n        }\n        return undefined;\n    };\n\n    const selectInstances = (optionItemStrings: string[] | undefined): DataAndInstanceId[] => {\n        const dataAndInstanceIds: DataAndInstanceId[] = [];\n        if (optionItemStrings) {\n            optionItemStrings.forEach((op) => {\n                const dataInst: DataAndInstanceId | undefined = selectInstance(op);\n                if (dataInst) {\n                    dataAndInstanceIds.push(dataInst);\n                }\n            });\n        }\n        return dataAndInstanceIds;\n    };\n\n    const createOptions = (): DavitDropDownItemProps[] => {\n        const dropdownItemas: DavitDropDownItemProps[] = [];\n        if (datas) {\n            datas.forEach((data) => {\n                data.data.instances.forEach((inst) => {\n                    dropdownItemas.push(instanceToOption(inst, data, data.data.id * 100 + inst.id));\n                });\n            });\n        }\n        return dropdownItemas;\n    };\n\n    const instanceToOption = (instance: DataInstanceTO, data: DataCTO, key: number): DavitDropDownItemProps => {\n        const optionItem: DataAndInstanceId = {dataFk: data.data.id, instanceId: instance.id};\n        const optionItemString: string = JSON.stringify(optionItem);\n        let optionLabel: string = data.data.name;\n        if (instance.id !== -1) {\n            optionLabel = optionLabel + \" - \" + instance.name;\n        }\n        return {\n            key: key,\n            value: optionItemString,\n            text: optionLabel,\n        };\n    };\n\n    return {selectInstance, selectInstances, createOptions};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO } from \"../../../dataAccess/access/to/DataRelationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface RelationDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    placeholder?: string;\n}\n\ninterface RelationLabelDropDownProps {\n    onSelect: (relation: DataRelationTO | undefined) => void;\n    label: string;\n}\n\nexport const RelationDropDown: FunctionComponent<RelationDropDownProps> = (props) => {\n    const {onSelect, placeholder} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={relations.map(relationToOption)}\n            placeholder={placeholder}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nexport const RelationLabelDropDown: FunctionComponent<RelationLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {relations, selectDataRelation, relationToOption} = useRelationDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={relations.map(relationToOption)}\n            label={label}\n            onSelect={(relation) => onSelect(selectDataRelation(Number(relation.value), relations))}\n        />\n    );\n};\n\nconst useRelationDropDownViewModel = () => {\n    const relations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        return datas.find((data) => data.data.id === dataId)?.data.name || \"\";\n    };\n\n    const selectDataRelation = (relationId: number, relations: DataRelationTO[]): DataRelationTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(relationId) && !DavitUtil.isNullOrUndefined(relations)) {\n            return relations.find((relation) => relation.id === relationId);\n        }\n        return undefined;\n    };\n\n    const relationToOption = (relation: DataRelationTO): DavitDropDownItemProps => {\n        const text: string = getDataName(relation.data1Fk, datas) + \" - \" + getDataName(relation.data2Fk, datas);\n        return {\n            key: relation.id,\n            value: relation.id.toString(),\n            text: text,\n        };\n    };\n\n    return {relations, selectDataRelation, relationToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceTO } from \"../../../dataAccess/access/to/SequenceTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface SequenceDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n}\n\ninterface SequenceLabelDropDownProps {\n    onSelect: (sequence: SequenceTO | undefined) => void;\n    label: string;\n}\n\nexport const SequenceDropDown: FunctionComponent<SequenceDropDownProps> = (props) => {\n    const {onSelect, placeholder, value} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            placeholder={placeholder}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n            value={value?.toString()}\n            clearable={true}\n        />\n    );\n};\n\nexport const SequenceLabelDropDown: FunctionComponent<SequenceLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequences, selectSequence, sequenceToOption} = useSequenceDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={sequences.map(sequenceToOption)}\n            label={label}\n            onSelect={(sequence) => onSelect(selectSequence(Number(sequence.value), sequences))}\n        />\n    );\n};\n\nconst useSequenceDropDownViewModel = () => {\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n\n    const selectSequence = (sequenceId: number, sequences: SequenceTO[]): SequenceTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequenceId) && !DavitUtil.isNullOrUndefined(sequences)) {\n            return sequences.find((sequence) => sequence.id === sequenceId);\n        }\n        return undefined;\n    };\n\n    const sequenceToOption = (sequence: SequenceTO): DavitDropDownItemProps => {\n        return {\n            key: sequence.id,\n            value: sequence.id.toString(),\n            text: sequence.name,\n        };\n    };\n\n    return {sequences, selectSequence, sequenceToOption};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport { DavitDropDown, DavitDropDownItemProps, DavitLabelDropDown } from \"./DavitDropDown\";\n\ninterface StepLabelDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    label: string;\n}\n\ninterface StepDropDownProps {\n    onSelect: (step: SequenceStepCTO | undefined) => void;\n    placeholder?: string;\n    value?: number;\n    exclude?: number;\n}\n\nexport const StepLabelDropDown: FunctionComponent<StepLabelDropDownProps> = (props) => {\n    const {onSelect, label} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel();\n\n    return (\n        <DavitLabelDropDown\n            dropdownItems={stepOptions()}\n            label={label}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n        />\n    );\n};\n\nexport const StepDropDown: FunctionComponent<StepDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, exclude} = props;\n    const {sequence, stepOptions, selectSequenceStep} = useStepDropDownViewModel(exclude);\n\n    return (\n        <DavitDropDown\n            dropdownItems={stepOptions()}\n            placeholder={placeholder}\n            onSelect={(step) => onSelect(selectSequenceStep(Number(step.value), sequence))}\n            value={value === -1 ? undefined : value?.toString()}\n        />\n    );\n};\n\nconst useStepDropDownViewModel = (exclude?: number) => {\n    const sequenceToEdit: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n\n    const stepToOption = (step: SequenceStepCTO): DavitDropDownItemProps => {\n        return {\n            key: step.sequenceStepTO.id,\n            value: step.sequenceStepTO.id.toString(),\n            text: step.sequenceStepTO.name,\n        };\n    };\n\n    const stepOptions = (): DavitDropDownItemProps[] => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let copySteps: SequenceStepCTO[] = DavitUtil.deepCopy(sequenceToEdit!.sequenceStepCTOs);\n            if (exclude) {\n                copySteps = copySteps.filter((step) => step.sequenceStepTO.id !== exclude);\n            }\n            return copySteps.map(stepToOption);\n        }\n        return [];\n    };\n\n    const selectSequenceStep = (stepId: number, sequence: SequenceCTO | null): SequenceStepCTO | undefined => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && !DavitUtil.isNullOrUndefined(stepId)) {\n            return sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === stepId);\n        }\n        return undefined;\n    };\n\n    return {sequence: sequenceToEdit, stepOptions, selectSequenceStep};\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../dataAccess/access/to/ChainTO\";\nimport { editSelectors, Mode } from \"../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"./DavitUtil\";\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\nconst getHeight = () => window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\nexport const useCurrentWitdh = () => {\n    // save current window width in the state object\n    const [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setWidth(getWidth()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return width;\n};\n\nexport const useCurrentHeight = () => {\n    // save current window width in the state object\n    const [height, setHeight] = useState(getHeight());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n        const resizeListener = () => {\n            setTimeout(() => setHeight(getHeight()), 150);\n        };\n        // set resize listener\n        window.addEventListener(\"resize\", resizeListener);\n\n        // clean up function\n        return () => {\n            // remove resize listener\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, []);\n\n    return height;\n};\n\nexport const useCustomZoomEvent = (\n    zoomCallBacks?: { zoomInCallBack: () => void; zoomOutCallBack: () => void },\n    hover?: boolean,\n) => {\n    const handleKeyDown = (wheelEvent: WheelEvent) => {\n        if (wheelEvent.ctrlKey) {\n            wheelEvent.preventDefault();\n            if (zoomCallBacks && hover) {\n                wheelEvent.deltaY < 0 && zoomCallBacks.zoomInCallBack();\n                wheelEvent.deltaY > 0 && zoomCallBacks.zoomOutCallBack();\n            }\n        }\n    };\n\n    const checkZoom = (event: KeyboardEvent) => {\n        if (event.ctrlKey) {\n            if (event.key === \"+\" || event.key === \"-\") {\n                event.preventDefault();\n            }\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"wheel\", handleKeyDown, {passive: false});\n        document.addEventListener(\"keydown\", checkZoom);\n\n        return () => {\n            document.removeEventListener(\"wheel\", handleKeyDown);\n            document.removeEventListener(\"keydown\", checkZoom);\n        };\n    });\n};\n\nexport const useStepAndLinkNavigation = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const isModeView = (): boolean => {\n        return mode === Mode.VIEW;\n    };\n\n    const stepBack = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepBack(stepIndex));\n        }\n    };\n\n    const stepNext = () => {\n        if (!DavitUtil.isNullOrUndefined(sequence) && isModeView()) {\n            dispatch(SequenceModelActions.stepNext(stepIndex));\n        }\n    };\n\n    const linkNext = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkNext(linkIndex));\n        }\n    };\n\n    const linkBack = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && isModeView()) {\n            dispatch(SequenceModelActions.linkBack(linkIndex));\n        }\n    };\n\n    const handleArrowKeyEvent = (event: KeyboardEvent) => {\n        if (event.key === \"ArrowLeft\") {\n            stepBack();\n        }\n        if (event.key === \"ArrowRight\") {\n            stepNext();\n        }\n        if (event.key === \"PageDown\") {\n            event.preventDefault();\n            linkNext();\n        }\n        if (event.key === \"PageUp\") {\n            event.preventDefault();\n            linkBack();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleArrowKeyEvent);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleArrowKeyEvent);\n        };\n    });\n\n    return {\n        stepNext,\n        stepBack,\n        linkNext,\n        linkBack,\n    };\n};\n\n/**\n * Execute the given callback if the \"Escape\" key is press.\n * @param callback\n */\nexport const useEscHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n\n/**\n * Execute the given callback if the \"Enter / Return\" key is press.\n * @param callback\n */\nexport const useEnterHook = (callback: () => void) => {\n\n    useEffect(() => {\n        const escButtonCall = (event: KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n                callback();\n            }\n        };\n\n        document.addEventListener(\"keydown\", escButtonCall, false);\n\n        return () => {\n            document.removeEventListener(\"keydown\", escButtonCall, false);\n        };\n    }, [callback]);\n};\n","import React, { FunctionComponent, Ref, useEffect, useRef, useState } from \"react\";\nimport \"./DavitTextInput.css\";\n\nexport interface DavitTextInputProps {\n    onChangeCallback: (value: string) => void;\n    focus?: boolean;\n    onBlur?: () => void;\n    placeholder?: string;\n    value?: string;\n    label?: string;\n}\n\nexport const DavitTextInput: FunctionComponent<DavitTextInputProps> = (props) => {\n    const {label, placeholder, value, onChangeCallback, onBlur, focus} = props;\n\n    const [stateValue, setStateValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        setStateValue(value ? value : \"\");\n    }, [value]);\n\n    const inputRef: Ref<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n    // focus on input field on render.\n    useEffect(() => {\n        if (inputRef !== null && inputRef.current !== null && focus) {\n            inputRef.current.focus();\n        }\n    }, [focus, inputRef]);\n\n    return (\n        <div className=\"flex\">\n            {label && <label className={\"inputLabel flex flex-center padding-small\"}>{label}</label>}\n            <input\n                className={label ? \"input label padding-small\" : \"padding-small\"}\n                type={\"text\"}\n                placeholder={placeholder}\n                value={stateValue}\n                ref={inputRef}\n                onChange={(event) => {\n                    setStateValue(event.target.value);\n                    onChangeCallback(event.target.value);\n                }}\n                onBlur={onBlur}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormFooterProps {\n\n}\n\nexport const FormFooter: FunctionComponent<FormFooterProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"width-fluid flex content-space-around padding-vertical-medium\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormHeaderProps {\n}\n\nexport const FormHeader: FunctionComponent<FormHeaderProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around padding-vertical-medium width-fluid\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GlobalActions } from \"../../../slices/GlobalSlice\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport { DavitTextInput } from \"../textinput/DavitTextInput\";\nimport \"./DavitDownloadForm.css\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitDownloadFormProps {\n    onCloseCallback: () => void;\n}\n\nexport const DavitDownloadForm: FunctionComponent<DavitDownloadFormProps> = (props) => {\n    const {onCloseCallback} = props;\n    const dispatch = useDispatch();\n    const [projectName, setProjectName] = useState<string>(\"\");\n\n    const onSubmit = () => {\n        dispatch(GlobalActions.downloadData(projectName !== \"\" ? projectName : \"project\"));\n        onCloseCallback();\n    };\n\n    // Close the form on ESC push.\n    useEscHook(onCloseCallback);\n    // Close and Submit on Enter\n    useEnterHook(onSubmit);\n\n    return (\n        <div className=\"downloadForm padding-medium\">\n            <FormHeader>\n                <DavitTextInput\n                    label=\"File name:\"\n                    placeholder=\"project name...\"\n                    onChangeCallback={(name: string) => setProjectName(name)}\n                    value={projectName}\n                />\n            </FormHeader>\n            <FormFooter>\n                <DavitButton onClick={() => onCloseCallback()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit()}>\n                    {\"download\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface FormDividerProps {\n\n}\n\nexport const FormDivider: FunctionComponent<FormDividerProps> = () => {\n\n    return (\n        <div className={\"flex border-top margin-medium width-fluid\"} />\n    );\n};\n","import { motion } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { GeometricalDataTO } from \"../../../dataAccess/access/to/GeometricalDataTO\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { ASPECT_RATIO, WINDOW_FACTOR } from \"../../../DavitConstants\";\nimport { useCurrentHeight, useCurrentWitdh, useCustomZoomEvent } from \"../../../utils/WindowUtil\";\nimport { DavitPath, DavitPathProps } from \"../../atomic/svg/DavitPath\";\nimport \"./DnDBox.css\";\nimport { createDnDItem } from \"./fragments/DnDWrapper\";\n\nexport interface DnDBoxElement {\n    element: JSX.Element;\n    position: PositionTO;\n    geometricalData?: GeometricalDataTO;\n}\n\nexport interface DnDBox {\n    toDnDElements: DnDBoxElement[];\n    svgElements: DavitPathProps[];\n    fullScreen?: boolean;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    zoomIn: () => void;\n    zoomOut: () => void;\n    zoom?: number;\n    type: DnDBoxType;\n}\n\nexport enum DnDBoxType {\n    actor = \"actorModel\",\n    data = \"dataModel\",\n    fullscreen = \"fullscreen\"\n}\n\nexport const DnDBox: FunctionComponent<DnDBox> = (props) => {\n    const {\n        fullScreen,\n        toDnDElements,\n        onPositionUpdate,\n        zoomIn,\n        zoomOut,\n        zoom,\n        type,\n        svgElements,\n        onGeoUpdate,\n    } = props;\n\n    const {key, constraintsRef, height, width, paths} = useDnDBoxViewModel(svgElements);\n\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n\n    useCustomZoomEvent({zoomInCallBack: zoomIn, zoomOutCallBack: zoomOut}, mouseOver);\n\n    const createDavitPath = (paths: DavitPathProps[]): JSX.Element[] => {\n        return paths.map((svg, index) => {\n            return <DavitPath {...svg} key={index} />;\n        });\n    };\n\n    const wrapItem = (toDnDElement: DnDBoxElement): JSX.Element => {\n        return createDnDItem(\n            toDnDElement.position,\n            onPositionUpdate,\n            constraintsRef,\n            toDnDElement.element,\n            undefined,\n            toDnDElement.geometricalData?.id || undefined,\n            onGeoUpdate,\n        );\n    };\n\n    return (\n        <motion.div\n            onMouseEnter={() => setMouseOver(true)}\n            onMouseLeave={() => setMouseOver(false)}\n            ref={constraintsRef}\n            style={fullScreen ? {height: height, maxWidth: width} : {}}\n            className={type.toString()}\n            key={key}\n        >\n            {toDnDElements.map(wrapItem)}\n            <motion.label className=\"zoomLabel\"\n                          key={zoom ? zoom : \"\"}\n            >\n                {zoom ? Math.round(zoom * 100) + \"%\" : \"\"}\n            </motion.label>\n            <motion.svg className=\"fluid\">{createDavitPath(paths)}</motion.svg>\n        </motion.div>\n    );\n};\n\nconst useDnDBoxViewModel = (svgElements: DavitPathProps[]) => {\n    const [key, setKey] = useState<number>(0);\n    const constraintsRef = useRef<HTMLInputElement>(null);\n\n    const [paths, setPaths] = useState<DavitPathProps[]>([]);\n\n    const currentWindowWitdh: number = useCurrentWitdh();\n    const currentWindowHeight: number = useCurrentHeight();\n    const newWindowHeight: number = (currentWindowWitdh / WINDOW_FACTOR) * ASPECT_RATIO;\n    const newWindowWitdh: number = (currentWindowHeight / ASPECT_RATIO) * WINDOW_FACTOR;\n\n    useEffect(() => {\n        const handleResize = () => setKey((prevState) => prevState + 1);\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (constraintsRef !== null && constraintsRef.current !== null) {\n            let newPaths: DavitPathProps[] = [];\n            svgElements.forEach((svg) => {\n                let updatedSvg: DavitPathProps = svg;\n                updatedSvg.xSource = svg.xSource * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.ySource = svg.ySource * (constraintsRef.current!.offsetHeight / 100);\n                updatedSvg.xTarget = svg.xTarget * (constraintsRef.current!.offsetWidth / 100);\n                updatedSvg.yTarget = svg.yTarget * (constraintsRef.current!.offsetHeight / 100);\n                newPaths.push(updatedSvg);\n            });\n            setPaths(newPaths);\n        }\n    }, [constraintsRef, svgElements]);\n\n    return {\n        constraintsRef,\n        height: newWindowHeight,\n        width: newWindowWitdh,\n        key,\n        paths,\n    };\n};\n","import React, { CSSProperties, FunctionComponent } from \"react\";\n\ninterface FormBodyProps {\n    style?: CSSProperties\n}\n\nexport const FormBody: FunctionComponent<FormBodyProps> = (props) => {\n    const {children, style} = props;\n\n    return (\n        <div className=\"flex-column flex-center\"\n             style={style}\n        >\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useEnterHook, useEscHook } from \"../../../utils/WindowUtil\";\nimport { FormDivider } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormDivider\";\nimport { FormLine } from \"../../organisms/controllPanel/presentation/fragments/edit/fragments/forms/fragments/FormLine\";\nimport { DavitButton } from \"../buttons/DavitButton\";\nimport \"./DavitNoteForm.css\";\nimport { FormBody } from \"./fragments/FormBody\";\nimport { FormFooter } from \"./fragments/FormFooter\";\nimport { FormHeader } from \"./fragments/FormHeader\";\n\ninterface DavitNoteFormProps {\n    subHeader?: string;\n    text?: string;\n    onSubmit: (nodeText: string) => void;\n    onCancel: () => void;\n}\n\nexport const DavitNoteForm: FunctionComponent<DavitNoteFormProps> = (props) => {\n    const {subHeader, onCancel, onSubmit, text} = props;\n    const textAreRef = useRef<HTMLTextAreaElement>(null);\n    const [noteText, setNoteText] = useState<string>(\"\");\n\n    useEffect(() => {\n        setNoteText(text ? text : \"\");\n        textAreRef.current!.focus();\n    }, [text]);\n\n    // Close the form on ESC push.\n    useEscHook(onCancel);\n\n    // Close and Submit on Enter\n    useEnterHook(() => onSubmit(noteText));\n\n    return (\n        <div className=\"noteForm padding-medium\">\n            <FormHeader>\n                <h1>Note</h1>\n            </FormHeader>\n\n            <FormDivider />\n\n            {subHeader && <FormLine><h2>{subHeader}</h2></FormLine>}\n\n            <FormBody>\n                <textarea\n                    className={\"noteTextarea border padding-medium\"}\n                    onChange={(e) => setNoteText(e.target.value)}\n                    value={noteText}\n                    ref={textAreRef}\n                />\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitButton onClick={() => onCancel()}>\n                    {\"cancel\"}\n                </DavitButton>\n                <DavitButton onClick={() => onSubmit(noteText)}>\n                    {\"save\"}\n                </DavitButton>\n            </FormFooter>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./Form.css\";\n\nexport interface FormProps {\n}\n\nexport const Form: FunctionComponent<FormProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"form padding-vertical-small padding-horizontal-medium border border-small\"}>\n            {children}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitModal.css\";\n\ninterface DavitModalProps {\n}\n\nexport const DavitModal: FunctionComponent<DavitModalProps> = (props) => {\n    const {children} = props;\n\n    return <div className=\"davitModal\">{children}</div>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDownloadForm } from \"../forms/DavitDownloadForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDownloadModalProps {\n    closeCallback: () => void;\n}\n\nexport const DavitDownloadModal: FunctionComponent<DavitDownloadModalProps> = (props) => {\n    const {closeCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitDownloadForm onCloseCallback={closeCallback} />\n        </DavitModal>\n    );\n};\n","import { motion, useInvertedScale, useMotionValue } from \"framer-motion\";\nimport React, { FunctionComponent, useEffect, useRef } from \"react\";\nimport { PositionTO } from \"../../../../dataAccess/access/to/PositionTO\";\nimport { WINDOW_FACTOR } from \"../../../../DavitConstants\";\nimport \"./DnDWrapper.css\";\n\nexport interface DnDWrapperProps {\n    dragConstraintsRef: any;\n    positionId: number;\n    initX: number;\n    initY: number;\n    onPositionUpdate: (x: number, y: number, positionId: number) => void;\n    shadow?: string;\n    onGeoUpdate?: (width: number, height: number, geoId: number) => void;\n    geoId?: number;\n}\n\nexport const DnDWrapper: FunctionComponent<DnDWrapperProps> = (props) => {\n    const {dragConstraintsRef, initX, initY, onPositionUpdate, positionId, shadow, onGeoUpdate, geoId} = props;\n\n    const x = useMotionValue(initX);\n    const y = useMotionValue(initY);\n    const {scaleX, scaleY} = useInvertedScale();\n\n    useEffect(() => {\n        x.set(initX * (dragConstraintsRef.current.offsetWidth / 100));\n        y.set(initY * (dragConstraintsRef.current.offsetHeight / 100));\n    }, [x, initX, y, initY, dragConstraintsRef]);\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref && ref.current && onGeoUpdate && geoId) {\n            onGeoUpdate(ref.current.getBoundingClientRect().width, ref.current.getBoundingClientRect().height, geoId);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ref?.current?.getBoundingClientRect().width, ref?.current?.getBoundingClientRect().height]);\n\n    return (\n        <motion.div\n            drag={true}\n            dragConstraints={dragConstraintsRef}\n            dragMomentum={false}\n            dragElastic={0}\n            onDragEnd={(event, info) => {\n                onPositionUpdate(\n                    /*\n          keine Nachkommastellen\n          Positioniert das DnD Element entsprechend der Fenster größe.\n          */\n                    Number(info.point.x.toFixed(0)) / (dragConstraintsRef.current.offsetWidth / WINDOW_FACTOR),\n                    Number(info.point.y.toFixed(0)) / (dragConstraintsRef.current.offsetHeight / WINDOW_FACTOR),\n                    positionId,\n                );\n            }}\n            className=\"dndWrapper\"\n            style={{\n                boxShadow: shadow ? \"3px 3px 3px \" + shadow : \"\",\n                x,\n                y,\n                scaleX,\n                scaleY,\n            }}\n            ref={ref}\n        >\n            {props.children}\n        </motion.div>\n    );\n};\n\nexport const createDnDItem = (\n    position: PositionTO,\n    onPositionUpdateCallBack: (x: number, y: number, positionId: number) => void,\n    dragConstraintsRef: any,\n    children: React.ReactNode,\n    shadow?: string,\n    geoId?: number,\n    updateGeo?: (width: number, heigth: number, geoId: number) => void,\n) => {\n    return (\n        <DnDWrapper\n            key={position.id}\n            onPositionUpdate={onPositionUpdateCallBack}\n            positionId={position.id}\n            initX={position.x}\n            initY={position.y}\n            dragConstraintsRef={dragConstraintsRef}\n            shadow={shadow}\n            onGeoUpdate={updateGeo}\n            geoId={geoId}\n        >\n            {children}\n        </DnDWrapper>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport enum FormlabelAlign {\n    start = \"flex-start\",\n    center = \"center\",\n    end = \"flex-end\"\n}\n\ninterface FormLabelProps {\n    className?: string\n    align?: FormlabelAlign\n}\n\nexport const FormLabel: FunctionComponent<FormLabelProps> = (props) => {\n    const {children, className, align} = props;\n\n    return (\n        <label className={className ? className : \"flex flex-start\"}\n               style={{justifyContent: align ? align : undefined}}\n        >{children}</label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { PositionTO } from \"../../../dataAccess/access/to/PositionTO\";\nimport { DnDBox, DnDBoxType } from \"../../organisms/dndBox/DnDBox\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitDraggableModalProps {\n    form: JSX.Element\n}\n\nexport const DavitDraggableModal: FunctionComponent<DavitDraggableModalProps> = (props) => {\n    const {form} = props;\n\n    return (\n        <DavitModal>\n            <DnDBox\n                onPositionUpdate={() => {\n                }}\n                toDnDElements={[\n                    {\n                        element: form,\n                        position: new PositionTO(30, 10),\n                    },\n                ]}\n                svgElements={[]}\n                zoomIn={() => {\n                }}\n                zoomOut={() => {\n                }}\n                type={DnDBoxType.fullscreen}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitNoteForm } from \"../forms/DavitNoteForm\";\nimport { DavitModal } from \"./DavitModal\";\n\ninterface DavitNoteModalProps {\n    text: string;\n    closeCallback: () => void;\n    saveTextCallback: (text: string) => void;\n}\n\nexport const DavitNoteModal: FunctionComponent<DavitNoteModalProps> = (props) => {\n    const {text, closeCallback, saveTextCallback} = props;\n\n    return (\n        <DavitModal>\n            <DavitNoteForm\n                text={text}\n                onSubmit={(text: string) => {\n                    closeCallback();\n                    saveTextCallback(text);\n                }}\n                onCancel={() => closeCallback()}\n            />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../style/Theme\";\nimport { DavitAddButton } from \"../atomic\";\n\ninterface AddOrEditProps {\n    addCallBack: () => void;\n    dropDown: JSX.Element;\n}\n\nexport const AddOrEdit: FunctionComponent<AddOrEditProps> = (props) => {\n    const {addCallBack, dropDown} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitAddButton onClick={() => addCallBack()}\n                            size={ElementSize.medium}\n            />\n            {dropDown}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitIconButton, DavitNoteModal } from \"../atomic\";\nimport { DavitIcons } from \"../atomic/icons/IconSet\";\n\nexport interface DavitCommentButtonProps {\n    onSaveCallback: (comment: string) => void;\n    comment: string;\n}\n\nexport const DavitCommentButton: FunctionComponent<DavitCommentButtonProps> = (props) => {\n    const {onSaveCallback, comment} = props;\n\n    const [showForm, setShowForm] = useState<boolean>(false);\n\n    return (\n        <>\n            <DavitIconButton onClick={() => setShowForm(true)}\n                             iconName={comment === \"\" ? DavitIcons.noteEmpty : DavitIcons.noteFilled}\n            />\n            {showForm &&\n            <DavitNoteModal text={comment}\n                            closeCallback={() => setShowForm(false)}\n                            saveTextCallback={onSaveCallback}\n            />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { ActorDataState } from \"./ActorDataState\";\nimport \"./ViewFragment.css\";\n\nexport interface ViewFragmentProps {\n    parentId: number | { dataId: number; instanceId?: number };\n    state: ActorDataState;\n    name: string;\n}\n\nconst getClassnameForViewFragmentState = (state: ActorDataState) => {\n    return `actorData ${state} flex flex-center`;\n};\n\nexport const createViewFragment = (actorDataFragmentProps: ViewFragmentProps, key: number) => {\n    const getCheckFeeld = (state: ActorDataState): JSX.Element | null => {\n        if (state === ActorDataState.CHECKED) {\n            return (\n                <div\n                    className={\"gg-check-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"green\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        if (state === ActorDataState.CHECK_FAILED) {\n            return (\n                <div\n                    className={\"gg-close-o\"}\n                    //TODO: css variablen nicht hier setzten\n                    style={{color: \"red\", backgroundColor: \"var(--data-persistent-color)\"}}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"viewFragment flex flex-center width-fluid\"\n             key={key}\n        >\n            <div className={getClassnameForViewFragmentState(actorDataFragmentProps.state)}\n                 key={key}\n            >\n                {actorDataFragmentProps.name}\n            </div>\n            {getCheckFeeld(actorDataFragmentProps.state) && getCheckFeeld(actorDataFragmentProps.state)}\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataInstanceTO } from \"../../../dataAccess/access/to/DataInstanceTO\";\nimport { EditActions } from \"../../../slices/EditSlice\";\nimport { Filter, SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { createViewFragment, ViewFragmentProps } from \"../../../viewDataTypes/ViewFragment\";\nimport { DavitIconButton, DavitShowMoreButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitCard.css\";\n\n/**\n *  Prop: initWidth / initHeight\n *  This is the default size of a card in this case.\n *  If the card's child shrinks, the card it self needs a default size to fall back.\n */\nexport interface DavitCardProps {\n    id: number;\n    initName: string;\n    initWidth: number;\n    initHeight: number;\n    dataFragments: ViewFragmentProps[];\n    instances?: DataInstanceTO[];\n    zoomFactor: number;\n    onClick?: (id: number) => void;\n    type: \"DATA\" | \"ACTOR\" | \"INSTANCE\";\n}\n\nexport const DavitCard: FunctionComponent<DavitCardProps> = (props) => {\n    const {id, initName, initWidth, initHeight, dataFragments, instances, zoomFactor, type} = props;\n\n    const {onClickEdit, onClickFilter, showMenu, setShowMenu, isActiveFilter} = useDavitCardViewModel(type, id);\n\n    const createInstances = (id: number, instanceName: string, actors: ViewFragmentProps[]) => {\n        return (\n            <DavitCard\n                id={id}\n                initName={instanceName}\n                dataFragments={actors}\n                initWidth={initWidth}\n                initHeight={initHeight}\n                zoomFactor={zoomFactor}\n                key={id}\n                type=\"INSTANCE\"\n            />\n        );\n    };\n\n    const getCardHeaderContent = (showOptions: boolean): JSX.Element => {\n        if (showOptions) {\n            return (\n                <div className=\"cardButtonGroup padding-tiny\">\n                    {type !== \"INSTANCE\" &&\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickEdit(id, type)}\n                            className={`padding-tiny border`}\n                            iconName={DavitIcons.wrench}\n                        />\n                    </div>}\n                    <div className=\"margin-tiny\">\n                        <DavitIconButton\n                            size={ElementSize.small}\n                            onClick={() => onClickFilter(id, type)}\n                            className={`padding-tiny border ${isActiveFilter ? \"activeButton\" : \"\"}`}\n                            iconName={DavitIcons.filter}\n                        />\n                    </div>\n                </div>);\n        } else {\n            return (<div className=\"cardLabelWrapper padding-small\">\n                <label>{initName}</label>\n            </div>);\n        }\n    };\n\n    return (\n        <div\n            className={isActiveFilter ? \"activeFilter card\" : \"card\"}\n            style={{\n                minWidth: initWidth * zoomFactor,\n                minHeight: initHeight * zoomFactor,\n                fontSize: `${zoomFactor}em`,\n            }}\n            onClick={props.onClick ? () => props.onClick!(props.id) : undefined}\n            key={id}\n        >\n            <div className=\"cardHeader\">\n\n                {getCardHeaderContent(showMenu)}\n\n                <div className=\"margin-tiny\">\n                    <DavitShowMoreButton className={\"button-tiny border border-small\"}\n                                         onClick={() => {\n                                             setShowMenu(!showMenu);\n                                         }}\n                                         show={showMenu}\n                    />\n                </div>\n            </div>\n\n            {instances && (\n                <div className=\"cardInstanceWrapper\">\n                    {instances.map((instance, index) =>\n                        createInstances(\n                            index,\n                            instance.name,\n                            dataFragments.filter(\n                                (actor) =>\n                                    (actor.parentId as {\n                                        dataId: number;\n                                        instanceId: number;\n                                    }).instanceId === instance.id,\n                            ),\n                        ),\n                    )}\n                </div>\n            )}\n\n            {(instances === undefined || instances?.length === 0) && dataFragments.map(createViewFragment)}\n\n        </div>\n    );\n};\n\nconst useDavitCardViewModel = (type: \"DATA\" | \"ACTOR\" | \"INSTANCE\", id: number) => {\n    const activeFilters: Filter[] = useSelector(sequenceModelSelectors.activeFilters);\n    const [showMenu, setShowMenu] = useState<boolean>(false);\n    const dispatch = useDispatch();\n\n    const onClickEdit = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                dispatch(EditActions.setMode.editActorById(currentId));\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editDataById(currentId));\n                break;\n            case \"INSTANCE\":\n                dispatch(EditActions.setMode.editInstanceById(currentId));\n        }\n        setShowMenu(false);\n    };\n    const onClickFilter = (currentId: number, currentType: \"DATA\" | \"ACTOR\" | \"INSTANCE\") => {\n        switch (currentType) {\n            case \"ACTOR\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeActorFilter(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addActorFilters(currentId));\n                }\n                break;\n            case \"DATA\":\n            case \"INSTANCE\":\n                if (isActiveFilter) {\n                    dispatch(SequenceModelActions.removeDataFilters(currentId));\n                    setShowMenu(false);\n                } else {\n                    dispatch(SequenceModelActions.addDataFilters(currentId));\n                }\n                break;\n        }\n    };\n\n    const isActiveFilter = activeFilters.some(\n        (filter) => (filter.type === type || (filter.type === \"DATA\" && type === \"INSTANCE\")) && filter.id === id,\n    );\n\n    return {\n        onClickEdit,\n        onClickFilter,\n        showMenu,\n        setShowMenu,\n        isActiveFilter: isActiveFilter,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\n\ninterface ControlPanelProps {\n}\n\nexport const ControlPanel: FunctionComponent<ControlPanelProps> = (props) => {\n    const {children} = props;\n\n    return (\n        <div className={\"flex content-space-around align-center height-fluid\"}>{children}</div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./OptionField.css\";\n\nexport interface OptionFieldProps {\n    label?: string;\n    divider?: boolean;\n}\n\nexport const OptionField: FunctionComponent<OptionFieldProps> = (props) => {\n    const {label, children, divider} = props;\n\n    return (\n        <div className={\"optionField\" + (divider ? \" columnDivider\" : \"\")}>\n            <div className={\"optionFieldChildArea\"}>{children}</div>\n            {label?.toUpperCase()}\n        </div>\n    );\n};\n","import { GoToChain, GoToTypesChain } from \"../types/GoToTypeChain\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\nimport { StateFkAndStateCondition } from \"./DecisionTO\";\n\nexport class ChainDecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public chainFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoToChain = {type: GoToTypesChain.FIN},\n        public elseGoTo: GoToChain = {type: GoToTypesChain.ERROR},\n    ) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\n\nexport class StateTO extends AbstractTO {\n    constructor(public label: string = \"\",\n                public isState: boolean = true,) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class ChainStateTO extends StateTO {\n    constructor(\n        public chainFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveChainStateThunk = (chainState: ChainStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.saveChainState(chainState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nconst deleteChainStateThunk = (chainStateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ChainStateTO> = DataAccess.deleteChainState(chainStateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadChainStatesFromBackend());\n};\n\nexport const EditChainState = {\n    save: saveChainStateThunk,\n    delete: deleteChainStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainState } from \"../../../../../../../../slices/thunks/ChainStateThunk\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainViewModel = () => {\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n    const isFirst: boolean = useSelector(masterDataSelectors.isFirstChainElement(selectedChain?.id || -1));\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(selectedChain)) {\n            console.warn(\"Tried to go to edit sequence without chain specified\" + selectedChain);\n            dispatch(EditActions.setMode.edit());\n        }\n        if (selectedChain?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [selectedChain, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChainToEdit: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChainToEdit.name = name;\n            dispatch(EditChain.save(copyChainToEdit));\n        }\n    };\n\n    const saveChain = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (selectedChain!.name !== \"\") {\n                dispatch(EditChain.save(selectedChain!));\n            } else {\n                dispatch(EditChain.delete(selectedChain!));\n            }\n            if (isCreateAnother && !newMode) {\n                dispatch(EditActions.setMode.editChain());\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChain.delete(selectedChain!));\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            return DavitUtil.isValidName(selectedChain!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddChainLink = (link?: ChainLinkTO) => {\n        let chainLinkToEdit: ChainLinkTO | undefined = link;\n        if (chainLinkToEdit === undefined) {\n            chainLinkToEdit = new ChainLinkTO();\n            chainLinkToEdit.chainFk = selectedChain?.id || -1;\n            chainLinkToEdit.root = isFirst;\n        }\n        dispatch(EditActions.setMode.editChainLink(chainLinkToEdit));\n    };\n\n    const editOrAddChainDecision = (decision?: ChainDecisionTO) => {\n        let decisionToEdit: ChainDecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new ChainDecisionTO();\n            decisionToEdit.chainFk = selectedChain?.id || -1;\n        }\n        dispatch(EditActions.setMode.editChainDecision(decisionToEdit));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editChain());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(selectedChain);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveStateFkAndStateCondition = (stateToSave: ChainStateTO) => {\n        dispatch(EditChainState.save(stateToSave));\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            let newChainState: ChainStateTO = new ChainStateTO();\n            newChainState.chainFk = selectedChain!.id;\n            saveStateFkAndStateCondition(newChainState);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateToDeleteId: number) => {\n        dispatch(EditChainState.delete(stateToDeleteId));\n    };\n\n    const editChain = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditActions.setMode.editChainStates());\n        }\n    };\n\n    const saveNote = (note: string) => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            const copyChain: ChainTO = DavitUtil.deepCopy(selectedChain);\n            copyChain.note = note;\n            dispatch(EditChain.save(copyChain));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\"),\n        name: selectedChain?.name,\n        id: selectedChain?.id ? selectedChain.id : -1,\n        changeName,\n        saveChain,\n        deleteChain,\n        validateInput,\n        createAnother,\n        updateSequence,\n        editOrAddChainDecision,\n        editOrAddChainLink,\n        editStates,\n        editChain,\n        saveStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        note: selectedChain?.note || \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    ChainDecisionDropDownButton,\n    ChainLinkDropDownButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useChainViewModel } from \"./viewmodels/ChainViewModel\";\n\nexport interface ControlPanelEditChainProps {\n}\n\nexport const ControlPanelEditChain: FunctionComponent<ControlPanelEditChainProps> = () => {\n    const {\n        name,\n        changeName,\n        createAnother,\n        editOrAddChainDecision,\n        saveChain,\n        deleteChain,\n        id,\n        editOrAddChainLink,\n        editStates,\n        note,\n        saveNote,\n    } = useChainViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Chain - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Chain Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                />\n\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Link\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainLink}\n                           dropDown={<ChainLinkDropDownButton\n                               onSelect={(link) => editOrAddChainLink(link)}\n                               label=\"Link\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Create / Edit | Chain - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddChainDecision}\n                           dropDown={<ChainDecisionDropDownButton\n                               onSelect={editOrAddChainDecision}\n                               label=\"Decision\"\n                               chainId={id}\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"Options\"\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n                <DavitButton onClick={createAnother}>\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChain} />\n                <DavitDeleteButton onClick={deleteChain} />\n            </OptionField>\n\n        </ControlPanel>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { DataRelationTO } from \"../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../../../slices/EditSlice\";\nimport {\n    ActorDropDownLabel,\n    ChainDropDownButton,\n    DataLabelDropDown,\n    RelationLabelDropDown,\n    SequenceLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\n\n\nexport interface ControlPanelEditMenuProps {\n}\n\nexport const ControlPanelEditMenu: FunctionComponent<ControlPanelEditMenuProps> = () => {\n\n    const {\n        editOrAddActor,\n        editOrAddData,\n        editOrAddRelation,\n        editOrAddSequence,\n        editOrAddChain,\n    } = useControlPanelEditMenuViewModel();\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"actor\">\n                <AddOrEdit\n                    addCallBack={() => editOrAddActor()}\n                    dropDown={<ActorDropDownLabel onSelect={editOrAddActor}\n                                                  label=\"Actor\"\n                    />}\n                />\n            </OptionField>\n            <OptionField label=\"Data\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddData()}\n                           dropDown={<DataLabelDropDown onSelect={editOrAddData}\n                                                        label=\"Data\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddRelation()}\n                           dropDown={<RelationLabelDropDown onSelect={editOrAddRelation}\n                                                            label=\"Relation\"\n                           />}\n                />\n            </OptionField>\n\n            <OptionField label=\"sequence\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={() => editOrAddSequence()}\n                           dropDown={<SequenceLabelDropDown\n                               onSelect={(sequenceTO) => editOrAddSequence(sequenceTO?.id)}\n                               label=\"Sequence\"\n                           />}\n                />\n                <AddOrEdit addCallBack={() => editOrAddChain()}\n                           dropDown={<ChainDropDownButton\n                               onSelect={(chain) => editOrAddChain(chain)}\n                               label=\"Chain\"\n                           />}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useControlPanelEditMenuViewModel = () => {\n    const dispatch = useDispatch();\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    return {\n        mode,\n        editOrAddActor: (actor?: ActorCTO) => dispatch(EditActions.setMode.editActor(actor)),\n        editOrAddData: (data?: DataCTO) => dispatch(EditActions.setMode.editData(data)),\n        editOrAddRelation: (relation?: DataRelationTO) => dispatch(EditActions.setMode.editRelation(relation)),\n        editOrAddSequence: (sequenceId?: number) => dispatch(EditActions.setMode.editSequence(sequenceId)),\n        editOrAddChain: (chain?: ChainTO) => dispatch(EditActions.setMode.editChain(chain)),\n    };\n};\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class SequenceStepTO extends AbstractTO {\n    constructor(\n        public name = \"\",\n        public index = -1,\n        public sequenceFk = -1,\n        public goto: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { ActionTO } from \"../to/ActionTO\";\nimport { SequenceStepTO } from \"../to/SequenceStepTO\";\n\nexport class SequenceStepCTO {\n    constructor(public sequenceStepTO: SequenceStepTO = new SequenceStepTO(), public actions: ActionTO[] = []) {\n    }\n}\n","import { GoTo, GoToTypes } from \"../types/GoToType\";\nimport { AbstractTO } from \"./AbstractTO\";\nimport { ConditionTO } from \"./ConditionTO\";\n\nexport interface StateFkAndStateCondition {\n    stateFk: number,\n    stateCondition: boolean,\n}\n\nexport class DecisionTO extends AbstractTO {\n    constructor(\n        public name: string = \"\",\n        public sequenceFk: number = -1,\n        public conditions: ConditionTO[] = [],\n        public stateFkAndStateConditions: StateFkAndStateCondition[] = [],\n        public ifGoTo: GoTo = {type: GoToTypes.FIN},\n        public elseGoTo: GoTo = {type: GoToTypes.ERROR},\n        public root: boolean = false,\n        public note: string = \"\",\n    ) {\n        super();\n    }\n}\n","import { StateTO } from \"./StateTO\";\n\nexport class SequenceStateTO extends StateTO {\n    constructor(\n        public sequenceFk: number = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst saveSequenceStateThunk = (sequenceState: SequenceStateTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.saveSequenceState(sequenceState);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nconst deleteSequenceStateThunk = (stateId: number): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceStateTO> = DataAccess.deleteSequenceState(stateId);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceStatesFromBackend());\n};\n\nexport const EditSequenceState = {\n    save: saveSequenceStateThunk,\n    delete: deleteSequenceStateThunk,\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditSequenceState } from \"../../../../../../../../slices/thunks/SequenceStateThunk\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useSequenceViewModel = () => {\n    const sequenceToEdit: SequenceTO | null = useSelector(editSelectors.selectSequenceToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [isCreateAnother, setIsCreateAnother] = useState<boolean>(false);\n\n    useEffect(() => {\n        // check if sequence to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence without sequenceToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (sequenceToEdit?.id !== -1) {\n            setIsCreateAnother(false);\n        }\n    }, [sequenceToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.name = name;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    const saveSequence = () => {\n        if (sequenceToEdit!.name !== \"\") {\n            dispatch(EditSequence.save(sequenceToEdit!));\n        } else {\n            dispatch(EditSequence.delete(sequenceToEdit!));\n        }\n        if (isCreateAnother) {\n            dispatch(EditActions.setMode.editSequence());\n        } else {\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const deleteSequence = () => {\n        dispatch(EditSequence.delete(sequenceToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const validateInput = (): boolean => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            return DavitUtil.isValidName(sequenceToEdit!.name);\n        } else {\n            return false;\n        }\n    };\n\n    const editOrAddSequenceStep = (step?: SequenceStepCTO) => {\n        let stepToEdit: SequenceStepCTO | undefined = step;\n        if (stepToEdit === undefined) {\n            stepToEdit = new SequenceStepCTO();\n            stepToEdit.sequenceStepTO.sequenceFk = sequenceToEdit?.id || -1;\n            stepToEdit.sequenceStepTO.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editStep(stepToEdit));\n    };\n\n    const editOrAddDecision = (decision?: DecisionTO) => {\n        let decisionToEdit: DecisionTO | undefined = decision;\n        if (decisionToEdit === undefined) {\n            decisionToEdit = new DecisionTO();\n            decisionToEdit.sequenceFk = sequenceToEdit?.id || -1;\n            decisionToEdit.root = isFirst();\n        }\n        dispatch(EditActions.setMode.editDecision(decisionToEdit));\n    };\n\n    const isFirst = (): boolean => {\n        return selectedSequence?.sequenceStepCTOs.length === 0 && selectedSequence.decisions.length === 0;\n    };\n\n    const copySequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        copySequence.name = sequenceToEdit?.name + \"-copy\";\n        copySequence.id = -1;\n        dispatch(EditSequence.update(copySequence));\n    };\n\n    const createAnother = () => {\n        dispatch(EditActions.setMode.editSequence());\n    };\n\n    const updateSequence = () => {\n        const copySequence: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n        dispatch(EditSequence.save(copySequence));\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            const copySequenceToEdit: SequenceTO = DavitUtil.deepCopy(sequenceToEdit);\n            copySequenceToEdit.note = text;\n            dispatch(EditSequence.save(copySequenceToEdit));\n        }\n    };\n\n    // ---------------------- STATE ----------------------\n\n    const saveSequenceState = (stateToSave: SequenceStateTO) => {\n        dispatch(EditSequenceState.save(stateToSave));\n    };\n\n    const createSequenceState = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            let newSequenceState: SequenceStateTO = new SequenceStateTO();\n            newSequenceState.sequenceFk = sequenceToEdit!.id;\n            saveSequenceState(newSequenceState);\n        }\n    };\n\n    const deleteSequenceState = (stateToDeleteId: number) => {\n        dispatch(EditSequenceState.delete(stateToDeleteId));\n    };\n\n    const editSequence = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequence(sequenceToEdit!.id));\n        }\n    };\n\n    const editStates = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceToEdit)) {\n            dispatch(EditActions.setMode.editSequenceStates());\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (sequenceToEdit?.name || \"\"),\n        name: sequenceToEdit?.name,\n        changeName,\n        saveSequence,\n        deleteSequence,\n        editOrAddSequenceStep,\n        validateInput,\n        copySequence,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        id: sequenceToEdit?.id || -1,\n        note: sequenceToEdit ? sequenceToEdit.note : \"\",\n        saveNote,\n        saveSequenceState,\n        deleteSequenceState,\n        createSequenceState,\n        editStates,\n        editSequence,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport {\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionLabelDropDown,\n    StepLabelDropDown\n} from \"../../../../../../atomic\";\nimport { AddOrEdit, DavitCommentButton } from \"../../../../../../molecules\";\nimport { ControlPanel } from \"../common/ControlPanel\";\nimport { OptionField } from \"../common/OptionField\";\nimport { useSequenceViewModel } from \"./viewmodels/SequenceViewModel\";\n\nexport interface ControlPanelEditSequenceProps {\n}\n\nexport const ControlPanelEditSequence: FunctionComponent<ControlPanelEditSequenceProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequence,\n        saveSequence,\n        editOrAddSequenceStep,\n        createAnother,\n        updateSequence,\n        editOrAddDecision,\n        note,\n        saveNote,\n        editStates,\n    } = useSequenceViewModel();\n\n    return (\n        <ControlPanel>\n\n            <OptionField label=\"Sequence - name\">\n                <DavitTextInput\n                    label=\"Name:\"\n                    placeholder=\"Sequence Name...\"\n                    onChangeCallback={(name: string) => changeName(name)}\n                    value={name}\n                    focus={true}\n                    onBlur={updateSequence}\n                />\n\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Step\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddSequenceStep}\n                           dropDown={<StepLabelDropDown onSelect={editOrAddSequenceStep}\n                                                        label=\"Step\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label=\"Create / Edit | Sequence - Decision\"\n                         divider={true}\n            >\n                <AddOrEdit addCallBack={editOrAddDecision}\n                           dropDown={<DecisionLabelDropDown onSelect={editOrAddDecision}\n                                                            label=\"Decision\"\n                           />}\n                />\n            </OptionField>\n            <OptionField label={\"options\"}\n                         divider={true}\n            >\n                <DavitButton onClick={editStates}>State</DavitButton>\n\n                <DavitButton onClick={createAnother}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequence} />\n                <DavitDeleteButton onClick={deleteSequence} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\n","import { ActionType } from \"../types/ActionType\";\nimport { AbstractTO } from \"./AbstractTO\";\n\nexport class ActionTO extends AbstractTO {\n    constructor(\n        public sequenceStepFk = -1,\n        public receivingActorFk = -1,\n        public sendingActorFk = -1,\n        public dataFk = -1,\n        public instanceFk = -1,\n        public actionType = ActionType.ADD,\n        public triggerText = \"\",\n        public index = -1,\n    ) {\n        super();\n    }\n}\n","import { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, EditActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\nimport { EditStep } from \"./StepThunks\";\n\nconst createActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(EditActions.setMode.editAction(response.object));\n};\n\nconst saveActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<ActionTO> = DataAccess.saveActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n};\n\nconst deleteActionThunk = (action: ActionTO): AppThunk => (dispatch) => {\n    const actionIndex: number = action.index;\n\n    const response: DataAccessResponse<ActionTO> = DataAccess.deleteActionTO(action);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n\n    const stepToUpdateActionIndexes: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n        action.sequenceStepFk,\n    );\n\n    if (stepToUpdateActionIndexes) {\n        stepToUpdateActionIndexes.actions.map((action) => {\n            if (action.index > actionIndex) {\n                action.index = action.index - 1;\n            }\n            return action;\n        });\n\n        dispatch(EditStep.save(stepToUpdateActionIndexes));\n    }\n\n    dispatch(MasterDataActions.loadSequencesFromBackend());\n};\n\nconst setActionToEditThunk = (action: ActionTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n    if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n        dispatch(editActions.setActionToEdit(action));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set action to edit in mode: \" + mode));\n    }\n};\n\nexport const EditAction = {\n    delete: deleteActionThunk,\n    update: setActionToEditThunk,\n    save: saveActionThunk,\n    create: createActionThunk,\n};\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DataAndInstanceId } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\n\n\nexport const useActionViewModel = () => {\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n\n    const [key, setKey] = useState<number>(0);\n\n    const deleteAction = (action: ActionTO) => {\n        if (action !== null) {\n            dispatch(EditAction.delete(action));\n\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                action.sequenceStepFk,\n            );\n\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                // should never happend but as fallback savty.\n                dispatch(GlobalActions.handleError(\"Step not found!\"));\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const deleteActionToEdit = () => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            deleteAction(actionToEdit!);\n        }\n    };\n\n    const setActor = (actor: ActorCTO | undefined, sending: boolean): void => {\n        if (actor !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            sending\n                ? (copyActionToEdit.sendingActorFk = actor.actor.id)\n                : (copyActionToEdit.receivingActorFk = actor.actor.id);\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setAction = (newActionType: ActionType | undefined): void => {\n        if (newActionType !== undefined && selectedSequence !== null && actionToEdit !== null) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.actionType = newActionType;\n            copyActionToEdit.sendingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.sendingActorFk : -1;\n            copyActionToEdit.receivingActorFk = newActionType.includes(\"SEND\") ? actionToEdit.receivingActorFk : -1;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setTriggerLabel = (text: string) => {\n        if (actionToEdit !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.triggerText = text;\n            dispatch(EditAction.update(copyActionToEdit));\n            // TODO: this can maybe removed, anyway would be better!\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setData = (data: DataCTO | undefined): void => {\n        if (data !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = data.data.id;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const setDataAndInstance = (dataAndInstance: DataAndInstanceId | undefined): void => {\n        if (dataAndInstance !== undefined) {\n            const copyActionToEdit: ActionTO = DavitUtil.deepCopy(actionToEdit);\n            copyActionToEdit.dataFk = dataAndInstance.dataFk;\n            copyActionToEdit.instanceFk = dataAndInstance.instanceId;\n            dispatch(EditAction.update(copyActionToEdit));\n            dispatch(EditAction.save(copyActionToEdit));\n        }\n    };\n\n    const validAction = (action: ActionTO): boolean => {\n        let valid: boolean;\n        switch (action.actionType) {\n            case ActionType.TRIGGER:\n                valid = action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            case ActionType.SEND_AND_DELETE:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1 && action.sendingActorFk !== -1;\n                break;\n            default:\n                valid = action.dataFk !== -1 && action.receivingActorFk !== -1;\n        }\n        return valid;\n    };\n\n    const setMode = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(actionToEdit)) {\n            if (!validAction(actionToEdit!)) {\n                deleteAction(actionToEdit!);\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else if (newMode && newMode === \"SEQUENCE\") {\n                dispatch(EditActions.setMode.editSequence(selectedSequence?.sequenceTO.id));\n            } else {\n                const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                    actionToEdit!.sequenceStepFk,\n                );\n                if (step) {\n                    dispatch(EditActions.setMode.editStep(step));\n                }\n            }\n        }\n    };\n\n    const createAnother = () => {\n        if (actionToEdit) {\n            const newAction: ActionTO = new ActionTO();\n            newAction.sequenceStepFk = actionToEdit.sequenceStepFk;\n            newAction.index = actionToEdit.index + 1;\n            dispatch(EditAction.create(newAction));\n            setKey(key + 1);\n        }\n    };\n\n    const getActorName = (actorId: number, actors: ActorCTO[]): string => {\n        return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"\";\n    };\n\n    const getDataName = (dataId: number, datas: DataCTO[]): string => {\n        const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n        return data ? data?.data.name : \"data is null\";\n    };\n\n    const getActionTypeLabel = (type: ActionType): string => {\n        let label: string = \"\";\n        switch (type) {\n            case ActionType.ADD:\n                label = \"Add or Update\";\n                break;\n            case ActionType.DELETE:\n                label = \"Delete\";\n                break;\n            case ActionType.SEND:\n                label = \"Send\";\n                break;\n            case ActionType.SEND_AND_DELETE:\n                label = \"Send and delete\";\n                break;\n            case ActionType.TRIGGER:\n                label = \"Trigger\";\n                break;\n        }\n        return label;\n    };\n\n    const getOptionText = (action: ActionTO): string => {\n        let text: string;\n        if (action.actionType !== ActionType.TRIGGER) {\n            text = `${getActorName(action.receivingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getDataName(action.dataFk, datas)}`;\n        } else {\n            text = `${getActorName(action.sendingActorFk, actors)} - ${getActionTypeLabel(\n                action.actionType,\n            )} - ${getActorName(action.receivingActorFk, actors)}`;\n        }\n        return text;\n    };\n\n    return {\n        label: \"EDIT * SEQUENCE * STEP * ACTION\",\n        action: actionToEdit,\n        setActor,\n        setAction,\n        setData,\n        sendingActorId: actionToEdit?.sendingActorFk,\n        receivingActorId: actionToEdit?.receivingActorFk,\n        dataId: actionToEdit?.dataFk === -1 ? undefined : actionToEdit?.dataFk,\n        actionType: actionToEdit?.actionType,\n        deleteAction,\n        deleteActionToEdit,\n        setMode,\n        createAnother,\n        key,\n        setDataAndInstance,\n        dataAndInstance: JSON.stringify({\n            dataFk: actionToEdit?.dataFk,\n            instanceId: actionToEdit?.instanceFk,\n        }),\n        setTriggerLabel,\n        triggerLabel: actionToEdit?.actionType === ActionType.TRIGGER ? actionToEdit.triggerText : \"\",\n        getOptionText\n    };\n};\n","import { faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ActionType } from \"../../../../../../../../dataAccess/access/types/ActionType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { ActionTypeDropDown } from \"../../../../../../../atomic/dropdowns/ActionTypeDropDown\";\nimport { ActorDropDown } from \"../../../../../../../atomic/dropdowns/ActorDropDown\";\nimport { DataDropDown } from \"../../../../../../../atomic/dropdowns/DataDropDown\";\nimport { InstanceDropDown } from \"../../../../../../../atomic/dropdowns/InstanceDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActionFormProps {\n\n}\n\nexport const ActionForm: FunctionComponent<ActionFormProps> = () => {\n\n    const {\n        setActor,\n        setAction,\n        setData,\n        deleteActionToEdit,\n        sendingActorId,\n        receivingActorId,\n        dataId,\n        actionType,\n        setMode,\n        createAnother,\n        setDataAndInstance,\n        dataAndInstance,\n        setTriggerLabel,\n        triggerLabel,\n    } = useActionViewModel();\n\n    return <Form>\n\n        <FormLine>\n            <h2>Action</h2>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>Select Action</FormLabel>\n            <ActionTypeDropDown onSelect={setAction}\n                                value={actionType}\n            />\n        </FormLine>\n\n        <FormDivider />\n\n        {actionType !== ActionType.TRIGGER && <FormLine>\n\n            {actionType === ActionType.ADD && (\n                <>\n                    <FormLabel>Select Data Instance</FormLabel>\n                    <InstanceDropDown onSelect={setDataAndInstance}\n                                      value={dataAndInstance}\n                    />\n                </>\n            )}\n            {actionType !== ActionType.ADD &&\n            <>\n                <FormLabel>Select Data</FormLabel>\n                <DataDropDown onSelect={setData}\n                              value={dataId}\n                />\n            </>}\n        </FormLine>}\n\n        {actionType === ActionType.TRIGGER &&\n        <FormLine>\n            <FormLabel>Enter Trigger text</FormLabel>\n            <DavitTextInput\n                placeholder=\"Trigger text ...\"\n                onChangeCallback={(name: string) => setTriggerLabel(name)}\n                value={triggerLabel}\n            />\n        </FormLine>}\n\n        <FormLine>\n            <FormLabel align={FormlabelAlign.center}>\n                {actionType === ActionType.ADD ? \"TO\" : \"FROM\"}\n            </FormLabel>\n        </FormLine>\n\n        <FormLine>\n            <FormLabel>\n                {\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? \"Select sending Actor\"\n                        : \"Actor\"\n                }\n            </FormLabel>\n            <ActorDropDown\n                onSelect={(actor) =>\n                    setActor(actor, actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER)\n                }\n                value={\n                    actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER\n                        ? sendingActorId\n                        : receivingActorId\n                }\n            />\n        </FormLine>\n\n        {\n            (actionType?.includes(\"SEND\") || actionType === ActionType.TRIGGER) &&\n            <>\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        TO\n                    </FormLabel>\n                </FormLine>\n                <FormLine>\n                    <FormLabel>Select receiving Actor</FormLabel>\n                    <ActorDropDown\n                        onSelect={(actor) => setActor(actor, false)}\n                        value={receivingActorId}\n                    />\n                </FormLine>\n            </>\n        }\n\n        <FormDivider />\n\n        <FormLine>\n            <DavitDeleteButton onClick={deleteActionToEdit} />\n            <DavitButton onClick={createAnother}>\n                {\"Create another\"}\n            </DavitButton>\n            <DavitIconButton onClick={setMode}\n                             iconName={faReply}\n            />\n        </FormLine>\n    </Form>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ActionForm } from \"../forms/ActionForm\";\n\ninterface EditActionModalProps {\n\n}\n\nexport const EditActionModal: FunctionComponent<EditActionModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ActionForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActorViewModel } from \"../viewmodels/ActorViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ActorFormProps {\n}\n\nexport const ActorForm: FunctionComponent<ActorFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        changeName,\n        updateActor,\n        deleteActor,\n        saveNote,\n        createAnother,\n        saveActor,\n        name,\n        note,\n    } = useActorViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Actor</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Actor Name\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        onBlur={updateActor}\n                        value={name}\n                        focus\n                    />\n                </FormLine>\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteActor} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveActor} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ActorCTO } from \"../../../../../../../../dataAccess/access/cto/ActorCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditActor } from \"../../../../../../../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useActorViewModel = () => {\n\n    const actorToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n// check if component to edit is really set or gos back to edit mode\n        if (DavitUtil.isNullOrUndefined(actorToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit component without component To edit specified\"));\n            EditActions.setMode.edit();\n        }\n    }, [actorToEdit, dispatch]);\n\n    const changeName = (name: string) => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        copyActorToEdit.actor.name = name;\n        dispatch(EditActions.setMode.editActor(copyActorToEdit));\n    };\n\n    const updateActor = () => {\n        const copyActorToEdit: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n        dispatch(EditActor.save(copyActorToEdit));\n    };\n\n    const saveActor = () => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            if (actorToEdit?.actor.name !== \"\") {\n                dispatch(EditActor.save(actorToEdit!));\n            } else {\n                deleteActor();\n            }\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveActor();\n        dispatch(EditActions.setMode.editActor());\n    };\n\n    const deleteActor = () => {\n        dispatch(EditActor.delete(actorToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(actorToEdit)) {\n            const copyActor: ActorCTO = DavitUtil.deepCopy(actorToEdit);\n            copyActor.actor.note = text;\n            dispatch(EditActions.setMode.editActor(copyActor));\n        }\n    };\n\n    return {\n        saveActor,\n        createAnother,\n        saveNote,\n        deleteActor,\n        updateActor,\n        changeName,\n        name: actorToEdit?.actor?.name || \"\",\n        note: actorToEdit?.actor?.note || \"\",\n    };\n\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ActorForm } from \"../forms/ActorForm\";\n\ninterface EditActorModalProps {\n\n}\n\nexport const EditActorModal: FunctionComponent<EditActorModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ActorForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface ChainStateDropDownProps {\n    onSelect: (chainState: ChainStateTO | undefined) => void;\n    chainFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const ChainStateDropDown: FunctionComponent<ChainStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, chainFk} = props;\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(chainFk));\n\n    const chainStateToDavitDropDownItem = (chainState: ChainStateTO): DavitDropDownItemProps => {\n        return {key: chainState.id, value: chainState.id.toString(), text: chainState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={chainStates.map(chainStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(chainStates.find(chainState => chainState.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { DavitButton } from \"../atomic\";\n\ninterface ToggleButtonProps {\n    toggleCallback: (isLeft: boolean) => void;\n    isLeft: boolean;\n    leftLabel: string;\n    rightLabel: string;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\n    const {toggleCallback, isLeft, leftLabel, rightLabel} = props;\n\n    return (\n        <div className=\"flex flex-center\">\n            <DavitButton\n                className={isLeft ? \" activeButton\" : \"\"}\n                onClick={() => toggleCallback(true)}\n            >{leftLabel}</DavitButton>\n            <DavitButton\n                className={isLeft ? \"\" : \" activeButton\"}\n                onClick={() => toggleCallback(false)}\n            >{rightLabel}</DavitButton>\n        </div>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    InstanceDropDown\n} from \"../../../../../../../atomic\";\nimport { ChainStateDropDown } from \"../../../../../../../atomic/dropdowns/ChainStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useChainDecisionViewModel } from \"../viewmodels/ChainDecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainDecisionFormProps {\n\n}\n\nexport const ChainDecisionForm: FunctionComponent<ChainDecisionFormProps> = () => {\n\n    const {\n        handleType,\n        chainId,\n        changeName,\n        createGoToDecision,\n        name,\n        deleteDecision,\n        elseGoTo,\n        ifGoTo,\n        createGoToStep,\n        decId,\n        setGoToTypeDecision,\n        setGoToTypeStep,\n        chainConditions,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        goBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    } = useChainDecisionViewModel();\n\n    const labelName: string = \"Chain decision - name\";\n    const labelConditions: string = \"Conditions\";\n    const labelIfGotoType: string = \"Type condition true\";\n    const labelElseGotoType: string = \"Type condition false\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectDecision: string = \"Select next decision\";\n\n    const buildChainConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectChainState = (chainState: ChainStateTO | undefined, index: number) => {\n        if (chainState) {\n            updateStateFkAndStateCondition({stateFk: chainState.id, stateCondition: chainState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndStateCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndStateCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <ChainStateDropDown onSelect={(stateFkAndStateCondition) => selectChainState(stateFkAndStateCondition, index)}\n                                            chainFk={chainId}\n                                            value={stateFkAndStateCondition.stateFk.toString()}\n                                            placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndStateCondition, index, is)}\n                                      isLeft={stateFkAndStateCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FLASE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndStateCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain decision</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <FormLabel>{labelName}</FormLabel>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chain decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelConditions}</FormLabel>\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td style={{textAlign: \"center\"}}>Actor</td>\n                            <td style={{textAlign: \"center\"}}>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"40vh\"}}>\n                        {chainConditions.map(buildChainConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelIfGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(true, gt);\n                        }}\n                        value={ifGoTo ? ifGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(true, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelElseGotoType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={(gt) => {\n                            handleType(false, gt);\n                        }}\n                        value={elseGoTo ? elseGoTo.type : GoToTypesChain.FIN}\n                    />\n                </FormLine>\n\n\n                {elseGoTo!.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={(link) => setGoToTypeStep(false, link)}\n                                value={ifGoTo?.type === GoToTypesChain.LINK ? ifGoTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={ifGoTo?.type === GoToTypesChain.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <FormLine>\n                    <DavitDeleteButton onClick={deleteDecision} />\n                    <DavitBackButton onClick={goBack} />\n                </FormLine>\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainDecision } from \"../../../../../../../../slices/thunks/ChainDecisionThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainDecisionViewModel = () => {\n    const decisionToEdit: ChainDecisionTO | null = useSelector(editSelectors.selectChainDecisionToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentIfGoTo, setCurrentIfGoTo] = useState<GoToChain>({type: GoToTypesChain.FIN});\n    const [currentElseGoTo, setCurrentElseGoTo] = useState<GoToChain>({type: GoToTypesChain.ERROR});\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (decisionToEdit) {\n            setCurrentIfGoTo(decisionToEdit.ifGoTo);\n            setCurrentElseGoTo(decisionToEdit.elseGoTo);\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const updateChainDecision = (chainDecision: ChainDecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainDecision)) {\n            dispatch(EditChainDecision.update(chainDecision));\n        }\n    };\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecisionToEdit.name = name;\n            updateChainDecision(copyDecisionToEdit);\n        }\n    };\n\n    const goBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            saveDecision();\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditChainDecision.save(decisionToEdit!));\n            } else {\n                dispatch(EditChainDecision.delete(decisionToEdit!));\n            }\n        }\n    };\n\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainDecision.delete(decisionToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoToChain) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            dispatch(EditChainDecision.save(copyDecisionToEdit));\n            dispatch(EditActions.setMode.editChainDecision(copyDecisionToEdit));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            ifGoTo ? setCurrentIfGoTo(gType) : setCurrentElseGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, link?: ChainLinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToLink = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            const goToLink: ChainLinkTO = new ChainLinkTO();\n            goToLink.chainFk = decisionToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(goToLink, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = decisionToEdit!.chainFk;\n            const copyDecisionToEdit: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyDecisionToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: copyDecision.conditions.length,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateChainDecision(copyDecision);\n            }\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: ChainDecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateChainDecision(copyDecision);\n        }\n    };\n\n    return {\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: currentIfGoTo,\n        elseGoTo: currentElseGoTo,\n        createGoToStep: createGoToLink,\n        createGoToDecision,\n        key,\n        decId: decisionToEdit?.id,\n        chainId: decisionToEdit?.chainFk || -1,\n        chainConditions: decisionToEdit?.conditions || [],\n        goBack,\n        saveCondition,\n        deleteCondition,\n        createCondition,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainDecisionForm } from \"../forms/ChainDecisionForm\";\n\ninterface EditChainDecisionModalProps {\n\n}\n\nexport const EditChainDecisionModal: FunctionComponent<EditChainDecisionModalProps> = () => {\n\n    return (\n        // eslint-disable-next-line react/jsx-no-undef\n        <DavitDraggableModal form={<ChainDecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport {\n    ChainDecisionDropDown,\n    ChainLinkDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    Form,\n    GoToChainOptionDropDown,\n    SequenceDropDown\n} from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainLinkViewModel } from \"../viewmodels/ChainLinkViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface ChainLinkFormProps {\n}\n\nexport const ChainLinkForm: FunctionComponent<ChainLinkFormProps> = () => {\n\n    const {\n        name,\n        createGoToDecision,\n        changeName,\n        chainId,\n        createNewChainLink,\n        currentSequence,\n        deleteChainLink,\n        goTo,\n        handleType,\n        isRoot,\n        linkId,\n        saveChainLink,\n        setNextDecision,\n        setNextLink,\n        setRoot,\n        setSequenceModel,\n    } = useChainLinkViewModel();\n\n    const labelDataSetup: string = \"Select data-setup\";\n    const labelSequence: string = \"Select sequence\";\n    const labelGoToType: string = \"Select type of the next\";\n    const labelSelectLink: string = \"Select next link\";\n    const labelCreateLink: string = \"Create next link\";\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Chain link</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Chainlink Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelDataSetup}</FormLabel>\n                {/*    TODO: add sequence configuration drop down*/}\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelSequence}</FormLabel>\n                    <SequenceDropDown\n                        onSelect={(seqModel) => setSequenceModel(seqModel)}\n                        value={currentSequence}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel>{labelGoToType}</FormLabel>\n                    <GoToChainOptionDropDown\n                        onSelect={handleType}\n                        value={goTo ? goTo.type : GoToTypesChain.ERROR}\n                    />\n                </FormLine>\n\n                {goTo.type === GoToTypesChain.LINK && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectLink}</FormLabel>\n                            <DavitAddButton onClick={createNewChainLink} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateLink}</FormLabel>\n                            <ChainLinkDropDown\n                                onSelect={setNextLink}\n                                value={goTo?.type === GoToTypesChain.LINK ? goTo.id : 1}\n                                chainId={chainId}\n                                exclude={linkId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n                {goTo.type === GoToTypesChain.DEC && (\n                    <>\n                        <FormDivider />\n\n                        <FormLine>\n                            <FormLabel>{labelSelectDecision}</FormLabel>\n                            <DavitAddButton onClick={createGoToDecision} />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <ChainDecisionDropDown\n                                onSelect={(cond) => setNextDecision(cond)}\n                                value={goTo?.type === GoToTypesChain.DEC ? goTo.id : 1}\n                                chainId={chainId}\n                            />\n                        </FormLine>\n                    </>\n                )}\n\n            </FormBody>\n\n            <FormDivider />\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteChainLink}\n                                   disabled={isRoot}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveChainLink} />\n            </FormFooter>\n\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainDecisionTO } from \"../../../../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainLinkTO } from \"../../../../../../../../dataAccess/access/to/ChainLinkTO\";\nimport { ChainTO } from \"../../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceConfigurationTO } from \"../../../../../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { GoToChain, GoToTypesChain } from \"../../../../../../../../dataAccess/access/types/GoToTypeChain\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditChainLink } from \"../../../../../../../../slices/thunks/ChainLinkThunks\";\nimport { EditChain } from \"../../../../../../../../slices/thunks/ChainThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useChainLinkViewModel = () => {\n    const chainLinkToEdit: ChainLinkTO | null = useSelector(editSelectors.selectChainLinkToEdit);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoToChain>({type: GoToTypesChain.LINK, id: -1});\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (chainLinkToEdit) {\n            setCurrentGoTo(chainLinkToEdit.goto);\n        }\n    }, [dispatch, chainLinkToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLink: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainLink.name = name;\n            dispatch(EditChainLink.save(copyChainLink));\n            dispatch(EditActions.setMode.editChainLink(copyChainLink));\n        }\n    };\n\n    const saveChainLink = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            if (chainLinkToEdit!.name !== \"\") {\n                dispatch(EditChainLink.save(chainLinkToEdit!));\n            } else {\n                dispatch(EditChainLink.delete(chainLinkToEdit!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editChain(selectedChain!));\n            }\n        }\n    };\n\n    const deleteChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n            dispatch(EditChainLink.delete(chainLinkToEdit!));\n            dispatch(EditActions.setMode.editChain(selectedChain!));\n        }\n    };\n\n    const saveGoToType = (goTo: GoToChain) => {\n        if (goTo !== undefined && !DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainlink: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            copyChainlink.goto = goTo;\n            dispatch(EditChainLink.save(copyChainlink!));\n            dispatch(EditActions.setMode.editChainLink(copyChainlink));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypesChain as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypesChain.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypesChain.FIN:\n                    saveGoToType(gType);\n                    break;\n            }\n        }\n    };\n\n    const setNextLink = (link?: ChainLinkTO) => {\n        if (link) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.LINK, id: link.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setNextDecision = (decision?: ChainDecisionTO) => {\n        if (decision) {\n            const newGoTo: GoToChain = {type: GoToTypesChain.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createNewChainLink = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const newChainLink: ChainLinkTO = new ChainLinkTO();\n            newChainLink.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainLink(newChainLink, copyChainLinkToEdit));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyLinkToEdit: ChainDecisionTO = DavitUtil.deepCopy(chainLinkToEdit);\n            const goToDecision: ChainDecisionTO = new ChainDecisionTO();\n            goToDecision.chainFk = chainLinkToEdit!.chainFk;\n            dispatch(EditActions.setMode.editChainDecision(goToDecision, copyLinkToEdit));\n        }\n    };\n\n    const setDataSetup = (sequenceConfigurationTO?: SequenceConfigurationTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequenceConfigurationTO) {\n                copyChainLinkToEdit.sequenceConfigurationFk = sequenceConfigurationTO.id;\n            } else {\n                copyChainLinkToEdit.sequenceConfigurationFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setSequenceModel = (sequence?: SequenceTO) => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            const copyChainLinkToEdit: ChainLinkTO = DavitUtil.deepCopy(chainLinkToEdit);\n            if (sequence) {\n                copyChainLinkToEdit.sequenceFk = sequence.id;\n            } else {\n                copyChainLinkToEdit.sequenceFk = -1;\n            }\n            dispatch(EditChainLink.save(copyChainLinkToEdit));\n            dispatch(EditActions.setMode.editChainLink(copyChainLinkToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(chainLinkToEdit)) {\n            dispatch(EditChain.setRoot(chainLinkToEdit!.chainFk, chainLinkToEdit!.id, false));\n            dispatch(EditActions.setMode.editChainLink(EditChainLink.find(chainLinkToEdit!.id)));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedChain?.name || \"\") + \" * \" + (chainLinkToEdit?.name || \"\"),\n        name: chainLinkToEdit ? chainLinkToEdit.name : \"\",\n        changeName,\n        saveChainLink,\n        deleteChainLink,\n        goTo: currentGoTo,\n        isRoot: chainLinkToEdit?.root ? chainLinkToEdit.root : false,\n        stepId: chainLinkToEdit?.id,\n        currentSequenceConfiguration: chainLinkToEdit?.sequenceConfigurationFk,\n        currentSequence: chainLinkToEdit?.sequenceFk,\n        setDataSetup,\n        setSequenceModel,\n        linkId: chainLinkToEdit?.id,\n        chainId: chainLinkToEdit?.chainFk || -1,\n        handleType,\n        setNextLink,\n        setNextDecision,\n        createNewChainLink,\n        createGoToDecision,\n        setRoot,\n        id: chainLinkToEdit?.id || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { ChainLinkForm } from \"../forms/ChainLinkForm\";\n\ninterface EditChainLinkModalProps {\n\n}\n\nexport const EditChainLinkModal: FunctionComponent<EditChainLinkModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<ChainLinkForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../../../../../../dataAccess/access/to/StateTO\";\nimport { DavitAddButton, DavitDeleteButton, DavitTextInput } from \"../../../../../../../../atomic\";\nimport { ToggleButton } from \"../../../../../../../../molecules/ToggleButton\";\nimport \"./StateList.css\";\n\ninterface StateListProps {\n    statesToEdit: StateTO[];\n    stateColumnName: string;\n    setActiveCallback: (state: StateTO, active: boolean) => void;\n    changeName?: (name: string, stateId: number) => void;\n    removeStateCallback?: (stateId: number) => void;\n    addStateCallback?: () => void;\n}\n\nexport const StateList: FunctionComponent<StateListProps> = (props) => {\n    const {statesToEdit, addStateCallback, changeName, removeStateCallback, setActiveCallback} = props;\n\n    const trueLabel: string = \"TRUE\";\n    const falseLabel: string = \"FALSE\";\n\n    const buildTableRow = (state: StateTO, index: number): JSX.Element[] => {\n\n        const getLabel = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"a\"}\n                >\n            {changeName\n                ? <DavitTextInput\n                    onChangeCallback={(name) => changeName ? changeName(name, state.id) : {}}\n                    placeholder=\"State Name\"\n                    value={state.label}\n                    focus\n                />\n                : <label>{state.label}</label>}\n                </span>);\n        };\n\n        const getToggleButton = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"b\"}\n                >\n                <ToggleButton\n                    toggleCallback={(is) => setActiveCallback(state, is)}\n                    isLeft={state.isState}\n                    leftLabel={trueLabel}\n                    rightLabel={falseLabel}\n                />\n                </span>\n            );\n        };\n\n        const getDeleteButton = (): JSX.Element => {\n            return (\n                <span className=\"gridItem\"\n                      key={index + \"c\"}\n                >\n\n            {removeStateCallback\n                ?\n                <DavitDeleteButton onClick={() => removeStateCallback(state.id)}\n                                   noConfirm\n                />\n                : undefined}\n                </span>\n            );\n        };\n\n        return [getLabel(), getToggleButton(), getDeleteButton()];\n    };\n\n    return (\n        <div id=\"stateList\"\n             className=\"gridContainer\"\n        >\n\n            <div className=\"header gridItem\"><label>Name</label></div>\n            <div className=\"header gridItem\"><label>State</label></div>\n            <div className=\"header gridItem\">{addStateCallback && <DavitAddButton onClick={addStateCallback} />}</div>\n            {statesToEdit.map(buildTableRow)}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../../../../../../../dataAccess/access/to/ChainStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useChainViewModel } from \"../viewmodels/ChainViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateList } from \"./fragments/StateList\";\n\ninterface ChainStateFormProps {\n}\n\nexport const ChainStateForm: FunctionComponent<ChainStateFormProps> = () => {\n\n    const {\n        saveStateFkAndStateCondition,\n        editChain,\n        createStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        id\n    } = useChainViewModel();\n\n    const chainStates: ChainStateTO[] = useSelector(masterDataSelectors.selectChainStateByChainId(id));\n\n    const closeStateForm = () => {\n        if (!chainStates.some(state => state.label === \"\")) {\n            chainStates.forEach(saveStateFkAndStateCondition);\n            editChain();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveStateFkAndStateCondition(copyStateToToggle as ChainStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: ChainStateTO | undefined = chainStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStateToChangeName: ChainStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStateToChangeName.label = name;\n            saveStateFkAndStateCondition(copyStateToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <StateList statesToEdit={chainStates}\n                           stateColumnName=\"Default\"\n                           addStateCallback={createStateFkAndStateCondition}\n                           removeStateCallback={deleteStateFkAndStateCondition}\n                           setActiveCallback={setIsState}\n                           changeName={changeName}\n                />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { ChainStateForm } from \"../forms/ChainStateForm\";\n\ninterface EditChainModalProps {\n}\n\nexport const EditChainStateModal: FunctionComponent<EditChainModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <ChainStateForm />\n        </DavitModal>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { DataInstanceTO } from \"../../../../../../../../dataAccess/access/to/DataInstanceTO\";\nimport { DavitAddButton } from \"../../../../../../../atomic/buttons/DavitAddButton\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic/textinput/DavitTextInput\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataViewModel } from \"../viewmodels/DataViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataFormProps {\n}\n\nexport const DataForm: FunctionComponent<DataFormProps> = () => {\n\n        const [key, setKey] = useState<number>(0);\n\n        const {\n            name,\n            changeName,\n            saveData,\n            deleteData,\n            updateData,\n            createAnother,\n            instances,\n            note,\n            saveNote,\n            changeInstanceName,\n            createInstance,\n            deleteInstance\n        } = useDataViewModel();\n\n        const createInstanceRow = (instance: DataInstanceTO, index: number): JSX.Element => {\n            return (<tr key={index}>\n                    <td>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\n                            <DavitTextInput\n                                onChangeCallback={(newName) => changeInstanceName(newName, index)}\n                                value={instance.name}\n                                onBlur={updateData}\n                            />\n                            {index !== 0 &&\n                            <div>\n                                <DavitDeleteButton onClick={() => deleteInstance(index)}\n                                                   noConfirm\n                                />\n                            </div>\n                            }\n                        </div>\n                    </td>\n                </tr>\n            );\n        };\n\n        return (\n            <Form key={key}>\n\n                <FormHeader>\n                    <h2>Data</h2>\n                </FormHeader>\n\n                <FormDivider />\n\n                <FormBody>\n\n\n                    <FormLine>\n                        <DavitTextInput\n                            label=\"Name:\"\n                            placeholder=\"Data Name\"\n                            onChangeCallback={changeName}\n                            value={name}\n                            focus\n                            onBlur={updateData}\n                        />\n                    </FormLine>\n\n\n                    <FormDivider />\n\n                    <FormLine>\n                        <table className={\"border\"}\n                               style={{width: \"40em\"}}\n                        >\n                            <thead>\n                            <tr>\n                                <td style={{textAlign: \"center\"}}>Instances</td>\n                                <td className={\"flex flex-end\"}><DavitAddButton onClick={createInstance} /></td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instances.map(createInstanceRow)}\n                            </tbody>\n                        </table>\n                    </FormLine>\n\n                </FormBody>\n\n                <FormDivider />\n\n                <FormFooter>\n                    <DavitDeleteButton onClick={deleteData} />\n                    <DavitCommentButton onSaveCallback={saveNote}\n                                        comment={note}\n                    />\n                    <DavitButton onClick={() => {\n                        createAnother();\n                        setKey(key + 1);\n                    }}\n                    >\n                        {\"Create another\"}\n                    </DavitButton>\n                    <DavitBackButton onClick={saveData} />\n                </FormFooter>\n\n\n            </Form>\n        );\n    }\n;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { EditData } from \"../../../../../../../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDataViewModel = () => {\n    const dataToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // check if component to edit is really set or gso back to edit mode\n        if (dataToEdit === null || dataToEdit === undefined) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit data without dataToedit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    });\n\n    const changeDataName = (name: string) => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        copyDataToEdit.data.name = name;\n        dispatch(EditActions.setMode.editData(copyDataToEdit));\n    };\n\n    const changeInstanceName = (name: string, instanceIndex: number) => {\n        if (dataToEdit !== null && instanceIndex !== null) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances[instanceIndex].name = name;\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const updateData = () => {\n        const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n        dispatch(EditData.save(copyDataToEdit));\n    };\n\n    const saveData = () => {\n        if (dataToEdit?.data.name !== \"\") {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances = copyData.data.instances.filter(instance => instance.name !== \"\");\n            dispatch(EditData.save(copyData!));\n        } else {\n            deleteData();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteData = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            dispatch(EditData.delete(dataToEdit!));\n            dispatch(EditActions.setMode.edit());\n        }\n    };\n\n    const createAnother = () => {\n        saveData();\n        dispatch(EditActions.setMode.editData());\n    };\n\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit) && text !== \"\") {\n            const copyDataToEdit: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyDataToEdit.data.note = text;\n            dispatch(EditActions.setMode.editData(copyDataToEdit));\n        }\n    };\n\n    const createInstance = () => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.push({id: -1, name: \"\"});\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    const deleteInstance = (indexToDelete: number) => {\n        if (!DavitUtil.isNullOrUndefined(dataToEdit)) {\n            const copyData: DataCTO = DavitUtil.deepCopy(dataToEdit);\n            copyData.data.instances.splice(indexToDelete, 1);\n            dispatch(EditActions.setMode.editData(copyData));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (dataToEdit?.data.name || \"\"),\n        name: dataToEdit?.data.name,\n        changeName: changeDataName,\n        saveData,\n        deleteData,\n        updateData,\n        createAnother,\n        instances: dataToEdit?.data.instances ? dataToEdit.data.instances : [],\n        id: dataToEdit?.data.id || -1,\n        note: dataToEdit ? dataToEdit.data.note : \"\",\n        saveNote,\n        changeInstanceName,\n        createInstance,\n        deleteInstance\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataForm } from \"../forms/DataForm\";\n\ninterface EditDataModalProps {\n\n}\n\nexport const EditDataModal: FunctionComponent<EditDataModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataForm />} />\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { Direction } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { DavitBackButton } from \"../../../../../../../atomic/buttons/DavitBackButton\";\nimport { DavitButton } from \"../../../../../../../atomic/buttons/DavitButton\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic/buttons/DavitDeleteButton\";\nimport { DavitDropDown } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\nimport { Form } from \"../../../../../../../atomic/forms/Form\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useDataRelationViewModel } from \"../viewmodels/DataRelationViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DataRelationFormProps {\n\n}\n\nexport const DataRelationForm: FunctionComponent<DataRelationFormProps> = () => {\n\n    const [key, setKey] = useState<number>(0);\n\n    const {\n        data1,\n        data2,\n        direction1,\n        direction2,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        dataOptions,\n        directionOptions,\n        createAnother,\n        updateRelation,\n        note,\n        saveNote,\n    } = useDataRelationViewModel();\n\n    return (\n        <Form key={key}>\n            <FormHeader>\n                <h2>Data Relation</h2>\n            </FormHeader>\n\n\n            <FormBody>\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>FROM</FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value));\n                            updateRelation();\n                        }}\n                        value={data1}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction1\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction]);\n                            updateRelation();\n                        }}\n                        value={direction1}\n                    />\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>TO</FormLabel>\n                </FormLine>\n                <FormLine>\n                    <DavitDropDown\n                        placeholder=\"Select Data...\"\n                        dropdownItems={dataOptions}\n                        onSelect={(data) => {\n                            setData(Number(data.value), true);\n                            updateRelation();\n                        }}\n                        value={data2}\n                    />\n                    <DavitDropDown\n                        placeholder=\"Select Direction2\"\n                        dropdownItems={directionOptions}\n                        onSelect={(data) => {\n                            setDirection(Direction[data.value as Direction], true);\n                            updateRelation();\n                        }}\n                        value={direction2}\n                    />\n                </FormLine>\n                <FormDivider />\n\n            </FormBody>\n\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteRelation} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={() => {\n                    createAnother();\n                    setKey(key + 1);\n                }}\n                >\n                    {\"Create another\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveRelation} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataCTO } from \"../../../../../../../../dataAccess/access/cto/DataCTO\";\nimport { DataRelationTO, Direction, RelationType } from \"../../../../../../../../dataAccess/access/to/DataRelationTO\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { EditRelation } from \"../../../../../../../../slices/thunks/RelationThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitDropDownItemProps } from \"../../../../../../../atomic/dropdowns/DavitDropDown\";\n\nexport const useDataRelationViewModel = () => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const relationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        // check if component to edit is really set or go back to edit mode\n        if (DavitUtil.isNullOrUndefined(relationToEdit)) {\n            dispatch(EditActions.setMode.edit());\n            dispatch(GlobalActions.handleError(\"Tried to go to edit relation without relationToedit specified\"));\n        }\n    }, [relationToEdit, dispatch]);\n\n    const dataToOption = (data: DataCTO): DavitDropDownItemProps => {\n        return {\n            key: data.data.id,\n            text: data.data.name,\n            value: data.data.id.toString(),\n        };\n    };\n\n    const setData = (dataId: number, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.data2Fk = dataId) : (relationCopy.data1Fk = dataId);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setLabel = (label: string, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.label2 = label) : (relationCopy.label1 = label);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setDirection = (direction: Direction, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.direction2 = direction) : (relationCopy.direction1 = direction);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const setType = (relationType: RelationType, isSnd?: boolean) => {\n        const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        isSnd ? (relationCopy.type2 = relationType) : (relationCopy.type1 = relationType);\n        dispatch(EditActions.setMode.editRelation(relationCopy));\n    };\n\n    const saveRelation = () => {\n        if (relationToEdit?.data1Fk !== -1 && relationToEdit?.data2Fk !== -1) {\n            dispatch(EditRelation.save(relationToEdit!));\n        } else {\n            deleteRelation();\n        }\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const deleteRelation = () => {\n        dispatch(EditRelation.delete(relationToEdit!));\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const updateRelation = () => {\n        const copyRelationToEdit: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n        dispatch(EditRelation.save(copyRelationToEdit));\n    };\n\n    const createAnother = () => {\n        setKey(key + 1);\n        dispatch(EditActions.setMode.editRelation());\n    };\n\n    const directionOptions = Object.entries(Direction).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const typeOptions = Object.entries(RelationType).map(([key, value], index) => ({\n        key: index,\n        text: key,\n        value: value.toString(),\n    }));\n\n    const validRelation = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(relationToEdit)) {\n            valid = relationToEdit!.data1Fk !== -1 && relationToEdit!.data2Fk !== -1;\n        }\n        return valid;\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(relationToEdit) && text !== \"\") {\n            const relationCopy: DataRelationTO = DavitUtil.deepCopy(relationToEdit);\n            relationCopy.note = text;\n            dispatch(EditActions.setMode.editRelation(relationCopy));\n        }\n    };\n\n    return {\n        label: \"EDIT * RELATION\",\n        label1: relationToEdit?.label1,\n        label2: relationToEdit?.label2,\n        data1: relationToEdit?.data1Fk === -1 ? undefined : relationToEdit?.data1Fk.toString(),\n        data2: relationToEdit?.data2Fk === -1 ? undefined : relationToEdit?.data2Fk.toString(),\n        direction1: relationToEdit?.direction1,\n        direction2: relationToEdit?.direction2,\n        type1: relationToEdit?.type1,\n        type2: relationToEdit?.type2,\n        setLabel,\n        setType,\n        setDirection,\n        setData,\n        saveRelation,\n        deleteRelation,\n        cancel: () => dispatch(EditActions.setMode.edit()),\n        dataOptions: datas.map(dataToOption),\n        directionOptions,\n        typeOptions,\n        validRelation,\n        key,\n        createAnother,\n        updateRelation,\n        note: relationToEdit ? relationToEdit.note : \"\",\n        saveNote,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DataRelationForm } from \"../forms/DataRelationForm\";\n\ninterface EditDataRelationModalProps {\n\n}\n\nexport const EditDataRelationModal: FunctionComponent<EditDataRelationModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DataRelationForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceStateDropDownProps {\n    onSelect: (sequenceState: SequenceStateTO | undefined) => void;\n    sequenceFk: number;\n    placeholder?: string;\n    value?: string;\n}\n\nexport const SequenceStateDropDown: FunctionComponent<SequenceStateDropDownProps> = (props) => {\n    const {onSelect, placeholder, value, sequenceFk} = props;\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(sequenceFk));\n\n    const sequenceStateToDavitDropDownItem = (sequenceState: SequenceStateTO): DavitDropDownItemProps => {\n        return {key: sequenceState.id, value: sequenceState.id.toString(), text: sequenceState.label};\n    };\n\n    return (\n        <DavitDropDown\n            dropdownItems={sequenceStates.map(sequenceStateToDavitDropDownItem)}\n            onSelect={(item) => onSelect(sequenceStates.find(state => state.id === Number(item.value)))}\n            placeholder={placeholder}\n            value={value}\n        />\n    );\n\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    DavitAddButton,\n    DavitBackButton,\n    DavitButton,\n    DavitDeleteButton,\n    DavitTextInput,\n    DecisionDropDown,\n    Form,\n    GoToOptionDropDown,\n    InstanceDropDown,\n    StepDropDown\n} from \"../../../../../../../atomic\";\nimport { SequenceStateDropDown } from \"../../../../../../../atomic/dropdowns/SequenceStateDropDown\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { ToggleButton } from \"../../../../../../../molecules/ToggleButton\";\nimport { useDecisionViewModel } from \"../viewmodels/DecisionViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel, FormlabelAlign } from \"./fragments/FormLabel\";\nimport { FormLine } from \"./fragments/FormLine\";\n\ninterface DecisionFormProps {\n\n}\n\nexport const DecisionForm: FunctionComponent<DecisionFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        handleType,\n        ifGoTo,\n        elseGoTo,\n        setGoToTypeStep,\n        createGoToStep,\n        setRoot,\n        isRoot,\n        deleteDecision,\n        createGoToDecision,\n        setGoToTypeDecision,\n        createCondition,\n        decId,\n        conditions,\n        note,\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        deleteStateFkAndStateCondition,\n        sequenceFk,\n    } = useDecisionViewModel();\n\n\n    const labelDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create new / next decision\";\n    const labelStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create new /next step\";\n    const labelTypeIf: string = \"Type condition true\";\n    const labelTypeElse: string = \"Type condition false\";\n    const labelIfLabel: string = \"If condition's are true\";\n    const labelElseLabel: string = \"If condition's are false\";\n\n\n    const buildConditionTableRow = (condition: ConditionTO): JSX.Element => {\n        let copyCondition: ConditionTO = DavitUtil.deepCopy(condition);\n\n        return (\n            <tr key={copyCondition.id}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyCondition.actorFk = actor ? actor.actor.id : -1;\n                                saveCondition(copyCondition);\n                            }}\n                            placeholder={\"Select actor...\"}\n                            value={copyCondition.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyCondition.dataFk = dataAndInstance!.dataFk;\n                                    copyCondition.instanceFk = dataAndInstance!.instanceId;\n                                    saveCondition(copyCondition);\n                                }\n                            }}\n                            placeholder={\"Select data instance ...\"}\n                            value={JSON.stringify({\n                                dataFk: copyCondition!.dataFk,\n                                instanceId: copyCondition!.instanceFk,\n                            })\n                            }\n                        />\n                        {copyCondition.id !== -1 && <DavitDeleteButton onClick={() => {\n                            deleteCondition(copyCondition.id);\n                        }}\n                                                                       noConfirm\n                        />}\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    const selectSequenceState = (sequenceState: SequenceStateTO | undefined, index: number) => {\n        if (sequenceState) {\n            updateStateFkAndStateCondition({stateFk: sequenceState.id, stateCondition: sequenceState.isState}, index);\n        }\n    };\n\n    const setStateCondition = (stateFkAndStateConditions: StateFkAndStateCondition, index: number, condition: boolean) => {\n        const copyStateFkAndStateCondition: StateFkAndStateCondition = DavitUtil.deepCopy(stateFkAndStateConditions);\n        copyStateFkAndStateCondition.stateCondition = condition;\n        updateStateFkAndStateCondition(copyStateFkAndStateCondition, index);\n    };\n\n    const buildStateTableRow = (stateFkAndCondition: StateFkAndStateCondition, index: number): JSX.Element => {\n\n        return (\n            <tr key={stateFkAndCondition.stateFk}>\n                <td>\n                    <div className=\"flex content-space-between\">\n\n                        <SequenceStateDropDown onSelect={(selectedState) => selectSequenceState(selectedState, index)}\n                                               sequenceFk={sequenceFk}\n                                               value={stateFkAndCondition.stateFk.toString()}\n                                               placeholder=\"Select sequence state\"\n                        />\n\n                        <ToggleButton toggleCallback={(is) => setStateCondition(stateFkAndCondition, index, is)}\n                                      isLeft={stateFkAndCondition.stateCondition}\n                                      leftLabel=\"TRUE\"\n                                      rightLabel=\"FALSE\"\n                        />\n\n                        <DavitDeleteButton onClick={() => {\n                            deleteStateFkAndStateCondition(stateFkAndCondition.stateFk);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader><h2>Decision</h2></FormHeader>\n\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Decision name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                    />\n                </FormLine>\n\n                {/*------------------------- Condition -------------------------*/}\n\n                <FormLine>\n                    <table className={\"border\"}\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>Actor</td>\n                            <td>Data Instance</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createCondition} /></td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {conditions.map(buildConditionTableRow)}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- State -------------------------*/}\n                <FormLine>\n                    <table className=\"border\"\n                           style={{width: \"40em\"}}\n                    >\n                        <thead>\n                        <tr>\n                            <td>State</td>\n                            <td>Is</td>\n                            <td className={\"flex flex-end\"}><DavitAddButton onClick={createStateFkAndStateCondition} />\n                            </td>\n                        </tr>\n                        </thead>\n                        <tbody style={{maxHeight: \"20vh\"}}>\n                        {stateFkAndStateConditions.map((state, index) => buildStateTableRow(state, index))}\n                        </tbody>\n                    </table>\n                </FormLine>\n\n                {/*------------------------- If option -------------------------*/}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelIfLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeIf}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(true, gt)}\n                        value={ifGoTo ? ifGoTo.type : GoToTypes.FIN}\n                    />\n                </FormLine>\n\n                {ifGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(true, step)}\n                                value={ifGoTo?.type === GoToTypes.STEP ? ifGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {ifGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(true, cond)}\n                                value={ifGoTo?.type === GoToTypes.DEC ? ifGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(true)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {/*------------------------- Else option -------------------------*/}\n                <FormDivider />\n\n                <FormLine>\n                    <FormLabel align={FormlabelAlign.center}>\n                        <h3>{labelElseLabel}</h3>\n                    </FormLabel>\n                </FormLine>\n\n                <FormLine>\n                    <FormLabel>{labelTypeElse}</FormLabel>\n                    <GoToOptionDropDown\n                        onSelect={(gt) => handleType(false, gt)}\n                        value={elseGoTo ? elseGoTo.type : GoToTypes.ERROR}\n                    />\n                </FormLine>\n\n                {elseGoTo!.type === GoToTypes.STEP && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelStep}</FormLabel>\n                            <StepDropDown\n                                onSelect={(step) => setGoToTypeStep(false, step)}\n                                value={elseGoTo?.type === GoToTypes.STEP ? elseGoTo.id : 1}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateStep}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToStep(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                {elseGoTo!.type === GoToTypes.DEC && (\n                    <>\n                        <FormLine>\n                            <FormLabel>{labelDecision}</FormLabel>\n                            <DecisionDropDown\n                                onSelect={(cond) => setGoToTypeDecision(false, cond)}\n                                value={elseGoTo?.type === GoToTypes.DEC ? elseGoTo.id : 1}\n                                exclude={decId}\n                            />\n                        </FormLine>\n                        <FormLine>\n                            <FormLabel>{labelCreateDecision}</FormLabel>\n                            <DavitAddButton onClick={() => createGoToDecision(false)} />\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteDecision} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveAndGoBack} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ConditionTO } from \"../../../../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO, StateFkAndStateCondition } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditDecision } from \"../../../../../../../../slices/thunks/DecisionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useDecisionViewModel = () => {\n    const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit condition step without conditionToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n    }, [dispatch, decisionToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.name = name;\n            // TODO: das geht einfacher!\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyConditionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyConditionToEdit.note = text;\n            dispatch(EditActions.setMode.editDecision(copyConditionToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyConditionToEdit.sequenceFk));\n        }\n    };\n\n    const saveDecision = (decision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decision)) {\n            if (decisionToEdit!.name !== \"\") {\n                dispatch(EditDecision.save(decision!));\n            }\n        }\n    };\n\n    const deleteDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditDecision.delete(decisionToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(decisionToEdit!.sequenceFk));\n        }\n    };\n\n    const updateDecision = (newDecision: DecisionTO) => {\n        if (!DavitUtil.isNullOrUndefined(newDecision)) {\n\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(newDecision);\n            // TODO: maybe to delete...\n            dispatch(EditDecision.save(copyDecision));\n            dispatch(EditDecision.update(copyDecision));\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            if (decisionToEdit!.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (ifGoTo: boolean, goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copyDecisionToEdit: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            ifGoTo ? (copyDecisionToEdit.ifGoTo = goTo) : (copyDecisionToEdit.elseGoTo = goTo);\n            updateDecision(copyDecisionToEdit);\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyDecisionToEdit.sequenceFk));\n        }\n    };\n\n    const handleType = (ifGoTo: boolean, newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.STEP:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n                case GoToTypes.DEC:\n                    saveGoToType(ifGoTo, gType);\n                    break;\n            }\n        }\n    };\n\n    const setGoToTypeStep = (ifGoTo: boolean, step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (ifGoTo: boolean, decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(ifGoTo, newGoTo);\n        }\n    };\n\n    const createGoToStep = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editStep(goToStep, copyDecision, ifGoTo));\n        }\n    };\n\n    const createGoToDecision = (ifGoTo: boolean) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = decisionToEdit!.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(decisionToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit, ifGoTo));\n            setKey(key + 1);\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            dispatch(EditSequence.setRoot(decisionToEdit!.sequenceFk, decisionToEdit!.id, true));\n            dispatch(EditActions.setMode.editDecision(EditDecision.find(decisionToEdit!.id)));\n        }\n    };\n\n\n    const checkGoTos = (goto: GoTo): GoTo => {\n        const copyGoto: GoTo = DavitUtil.deepCopy(goto);\n\n        if ((goto.type === GoToTypes.STEP || goto.type === GoToTypes.DEC) && (goto.id === -1 || goto.id === undefined)) {\n            copyGoto.type = GoToTypes.ERROR;\n        }\n\n        return copyGoto;\n    };\n\n    const saveAndGoBack = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            if (copyDecision!.name !== \"\") {\n                copyDecision.ifGoTo = checkGoTos(copyDecision.ifGoTo);\n                copyDecision.elseGoTo = checkGoTos(copyDecision.elseGoTo);\n\n                dispatch(EditDecision.save(copyDecision!));\n                dispatch(EditActions.setMode.editSequence(selectedSequence!.sequenceTO.id));\n            } else {\n                deleteDecision();\n            }\n        }\n    };\n\n    // ------------------------------------- Condition ------------------------------------\n\n    const createCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions.push({\n                decisionFk: copyDecision.id,\n                id: -1,\n                actorFk: -1,\n                instanceFk: -1,\n                dataFk: -1,\n            });\n            updateDecision(copyDecision);\n\n        }\n    };\n\n    const deleteCondition = (conditionId: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.conditions = copyDecision.conditions.filter(condition => condition.id !== conditionId);\n            updateDecision(copyDecision);\n        }\n    };\n\n    const saveCondition = (conditionToSave: ConditionTO) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            // TODO: ConditonThunk soll das machen.\n            let conditionToUpdate: ConditionTO | undefined = copyDecision.conditions.find(condition => condition.id === conditionToSave.id);\n            if (conditionToUpdate) {\n                let filteredConditions: ConditionTO[] = copyDecision.conditions.filter(condition => condition.id !== conditionToSave.id);\n                filteredConditions.push(conditionToSave);\n                copyDecision.conditions = filteredConditions;\n            } else {\n                copyDecision.conditions.push(conditionToSave);\n            }\n            updateDecision(copyDecision);\n        }\n    };\n\n    // ------------------------------------- State ------------------------------------\n\n    const updateStateFkAndStateCondition = (newState: StateFkAndStateCondition | undefined, index: number) => {\n        if (newState) {\n            if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n                const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n                copyDecision.stateFkAndStateConditions[index] = newState;\n                updateDecision(copyDecision);\n            }\n        }\n    };\n\n    const createStateFkAndStateCondition = () => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions.push({stateFk: -1, stateCondition: true});\n\n            updateDecision(copyDecision);\n        }\n    };\n\n    const deleteStateFkAndStateCondition = (stateFkToRemove: number) => {\n        if (!DavitUtil.isNullOrUndefined(decisionToEdit)) {\n            const copyDecision: DecisionTO = DavitUtil.deepCopy(decisionToEdit);\n            copyDecision.stateFkAndStateConditions = copyDecision.stateFkAndStateConditions.filter(stateFkStateCondition => stateFkStateCondition.stateFk !== stateFkToRemove);\n            updateDecision(copyDecision);\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (decisionToEdit?.name || \"\"),\n        name: decisionToEdit?.name,\n        changeName,\n        saveDecision,\n        validStep,\n        updateDecision,\n        deleteDecision,\n        handleType,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        ifGoTo: decisionToEdit?.ifGoTo,\n        elseGoTo: decisionToEdit?.elseGoTo,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: decisionToEdit?.root ? decisionToEdit.root : false,\n        key,\n        createCondition,\n        decId: decisionToEdit?.id,\n        conditions: decisionToEdit?.conditions || [],\n        note: decisionToEdit ? decisionToEdit.note : \"\",\n        saveNote,\n        deleteCondition,\n        saveCondition,\n        saveAndGoBack,\n        stateFkAndStateConditions: decisionToEdit?.stateFkAndStateConditions || [],\n        deleteStateFkAndStateCondition,\n        createStateFkAndStateCondition,\n        updateStateFkAndStateCondition,\n        sequenceFk: decisionToEdit?.sequenceFk || -1,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { DecisionForm } from \"../forms/DecisionForm\";\n\ninterface EditDecicionModalProps {\n\n}\n\nexport const EditDecisionModal: FunctionComponent<EditDecicionModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<DecisionForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceStateTO } from \"../../../../../../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../../../../../../dataAccess/access/to/StateTO\";\nimport { masterDataSelectors } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\nimport { DavitBackButton, Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { useSequenceViewModel } from \"../viewmodels/SequenceViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { StateList } from \"./fragments/StateList\";\n\ninterface StateFormProps {\n}\n\nexport const SequenceStateForm: FunctionComponent<StateFormProps> = () => {\n\n    const {\n        saveSequenceState,\n        editSequence,\n        createSequenceState,\n        deleteSequenceState,\n        id,\n    } = useSequenceViewModel();\n\n    const sequenceStates: SequenceStateTO[] = useSelector(masterDataSelectors.selectSequenceStateBySequenceId(id));\n\n    const closeStateForm = () => {\n        if (!sequenceStates.some(state => state.label === \"\")) {\n            sequenceStates.forEach(saveSequenceState);\n            editSequence();\n        }\n    };\n\n    const setIsState = (stateToToggle: StateTO, is: boolean) => {\n        const copyStateToToggle: StateTO = DavitUtil.deepCopy(stateToToggle);\n        copyStateToToggle.isState = is;\n        saveSequenceState(copyStateToToggle as SequenceStateTO);\n    };\n\n    const changeName = (name: string, stateId: number) => {\n        const stateToChangeName: SequenceStateTO | undefined = sequenceStates.find(state => state.id === stateId);\n        if (stateToChangeName) {\n            const copyStatToChangeName: SequenceStateTO = DavitUtil.deepCopy(stateToChangeName);\n            copyStatToChangeName.label = name;\n            saveSequenceState(copyStatToChangeName);\n        }\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>State</h2>\n            </FormHeader>\n\n            <FormDivider />\n\n            <FormBody>\n\n                <div className=\"border border-small width-fluid\">\n                    <StateList statesToEdit={sequenceStates}\n                               stateColumnName=\"Default\"\n                               addStateCallback={createSequenceState}\n                               removeStateCallback={deleteSequenceState}\n                               setActiveCallback={setIsState}\n                               changeName={changeName}\n                    />\n                </div>\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitBackButton onClick={closeStateForm} />\n            </FormFooter>\n\n        </Form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitModal } from \"../../../../../../../atomic\";\nimport { SequenceStateForm } from \"../forms/SequenceStateForm\";\n\ninterface EditStateModalProps {\n}\n\nexport const EditSequenceStateModal: FunctionComponent<EditStateModalProps> = () => {\n\n    return (\n        <DavitModal>\n            <SequenceStateForm />\n        </DavitModal>\n    );\n};\n","import { faAngleDown } from \"@fortawesome/free-solid-svg-icons/faAngleDown\";\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons/faAngleUp\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { DavitIconButton } from \"../../../../../../../atomic\";\nimport { DavitAddButton } from \"../../../../../../../atomic\";\nimport { DavitBackButton } from \"../../../../../../../atomic\";\nimport { DavitButton } from \"../../../../../../../atomic\";\nimport { DavitDeleteButton } from \"../../../../../../../atomic\";\nimport { DavitEditButton } from \"../../../../../../../atomic\";\nimport { DavitShowMoreButton } from \"../../../../../../../atomic\";\nimport { DecisionDropDown } from \"../../../../../../../atomic\";\nimport { GoToOptionDropDown } from \"../../../../../../../atomic\";\nimport { StepDropDown } from \"../../../../../../../atomic\";\nimport { Form } from \"../../../../../../../atomic\";\nimport { FormBody } from \"../../../../../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../../../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../../../../../atomic/forms/fragments/FormHeader\";\nimport { DavitTextInput } from \"../../../../../../../atomic\";\nimport { DavitCommentButton } from \"../../../../../../../molecules\";\nimport { useActionViewModel } from \"../viewmodels/ActionViewModel\";\nimport { useStepViewModel } from \"../viewmodels/StepViewModel\";\nimport { FormDivider } from \"./fragments/FormDivider\";\nimport { FormLabel } from \"./fragments/FormLabel\";\nimport { FormLine, FormLinePosition } from \"./fragments/FormLine\";\n\ninterface StepFormProps {\n}\n\nexport const StepForm: FunctionComponent<StepFormProps> = () => {\n\n    const {\n        name,\n        changeName,\n        deleteSequenceStep,\n        saveSequenceStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        setGoToTypeStep,\n        goTo,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot,\n        stepId,\n        note,\n        saveNote,\n        actions,\n        switchIndexesAndSave,\n    } = useStepViewModel();\n\n    const {deleteAction, getOptionText} = useActionViewModel();\n\n    const labelSelectDecision: string = \"Select next decision\";\n    const labelCreateDecision: string = \"Create next decision\";\n    const labelSelectStep: string = \"Select next step\";\n    const labelCreateStep: string = \"Create next step\";\n\n    const [showActions, setShowActions] = useState(true);\n\n    const createActionRow = (action: ActionTO, index: number): JSX.Element => {\n        return (<tr key={index}>\n                <td>\n                    <label>{getOptionText(action)}</label>\n                </td>\n                <td className=\"flex flex-end\">\n                    <DavitDeleteButton onClick={() => {\n                        deleteAction(action);\n                        updateStep();\n                    }}\n                    />\n                    <DavitEditButton onClick={() => editOrAddAction(action)} />\n                    <DavitIconButton iconName={faAngleDown}\n                                     onClick={() => switchIndexesAndSave(index, true)}\n                    />\n                    <DavitIconButton iconName={faAngleUp}\n                                     onClick={() => switchIndexesAndSave(index, false)}\n                    />\n                </td>\n            </tr>\n        );\n    };\n\n    const buildActionTable = (actions: ActionTO[]): JSX.Element => {\n        return (\n            <table className=\"border\"\n                   style={{width: \"40em\", overflow: \"hidden\"}}\n            >\n                <thead>\n                <tr className=\"flex content-space-between align-center\">\n                    <td>Action</td>\n                    <td>\n                        <DavitAddButton onClick={() => {\n                            editOrAddAction();\n                            updateStep();\n                        }}\n                        />\n                    </td>\n                </tr>\n                </thead>\n                <tbody style={{maxHeight: \"30vh\"}}>\n                {actions.map((action, index) => createActionRow(action, index))}\n                </tbody>\n            </table>\n        );\n    };\n\n    return (\n        <Form>\n            <FormHeader>\n                <h2>Step</h2>\n            </FormHeader>\n\n            <FormBody>\n\n                <FormDivider />\n\n                <FormLine>\n                    <DavitTextInput\n                        label=\"Name:\"\n                        placeholder=\"Step Name ...\"\n                        onChangeCallback={(name: string) => changeName(name)}\n                        value={name}\n                        focus={true}\n                        onBlur={updateStep}\n                    />\n                </FormLine>\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.center}>\n                        <FormLabel><h3>Actions</h3></FormLabel>\n                    </FormLine>\n                    <FormLine position={FormLinePosition.center}>\n\n                        <DavitShowMoreButton show={showActions}\n                                             onClick={() => setShowActions(!showActions)}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {showActions && <FormDivider /> && <FormLine>{buildActionTable(actions)}</FormLine>}\n\n                <FormDivider />\n\n                <FormLine>\n                    <FormLine position={FormLinePosition.start}>\n                        <FormLabel>Select type of the next element</FormLabel>\n                    </FormLine>\n\n                    <FormLine position={FormLinePosition.start}>\n                        <GoToOptionDropDown onSelect={handleType}\n                                            value={goTo ? goTo.type : GoToTypes.ERROR}\n                        />\n                    </FormLine>\n                </FormLine>\n\n                {goTo!.type === GoToTypes.STEP && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <StepDropDown\n                                    onSelect={setGoToTypeStep}\n                                    value={goTo?.type === GoToTypes.STEP ? goTo.id : 1}\n                                    exclude={stepId}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateStep}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToStep} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                {goTo!.type === GoToTypes.DEC && (\n                    <>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelSelectDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DecisionDropDown\n                                    onSelect={setGoToTypeDecision}\n                                    value={goTo?.type === GoToTypes.DEC ? goTo.id : 1}\n                                />\n                            </FormLine>\n                        </FormLine>\n\n                        <FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <FormLabel>{labelCreateDecision}</FormLabel>\n                            </FormLine>\n                            <FormLine position={FormLinePosition.start}>\n                                <DavitAddButton onClick={createGoToDecision} />\n                            </FormLine>\n                        </FormLine>\n                    </>\n                )}\n\n                <FormDivider />\n\n            </FormBody>\n\n            <FormFooter>\n                <DavitDeleteButton onClick={deleteSequenceStep} />\n                <DavitCommentButton onSaveCallback={saveNote}\n                                    comment={note}\n                />\n                <DavitButton onClick={setRoot}\n                             disabled={isRoot}\n                >\n                    {isRoot ? \"Start\" : \"Set as Start\"}\n                </DavitButton>\n                <DavitBackButton onClick={saveSequenceStep} />\n            </FormFooter>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../../../../dataAccess/access/to/ActionTO\";\nimport { DecisionTO } from \"../../../../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes } from \"../../../../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions, editSelectors } from \"../../../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../../../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../../../../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../../slices/SequenceModelSlice\";\nimport { EditAction } from \"../../../../../../../../slices/thunks/ActionThunks\";\nimport { EditSequence } from \"../../../../../../../../slices/thunks/SequenceThunks\";\nimport { EditStep } from \"../../../../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../../../../utils/DavitUtil\";\n\nexport const useStepViewModel = () => {\n    const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const dispatch = useDispatch();\n    const [currentGoTo, setCurrentGoTo] = useState<GoTo>({\n        type: GoToTypes.STEP,\n        id: -1,\n    });\n    const [key, setKey] = useState<number>(0);\n\n    useEffect(() => {\n        if (stepToEdit === undefined || null) {\n            dispatch(GlobalActions.handleError(\"Tried to go to edit sequence step without sequenceStepToEdit specified\"));\n            dispatch(EditActions.setMode.edit());\n        }\n        if (stepToEdit) {\n            setCurrentGoTo(stepToEdit.sequenceStepTO.goto);\n        }\n\n    }, [dispatch, stepToEdit]);\n\n    const changeName = (name: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.name = name;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const saveSequenceStep = (newMode?: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                dispatch(EditStep.save(stepToEdit!));\n            } else {\n                dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            }\n            if (newMode && newMode === \"EDIT\") {\n                dispatch(EditActions.setMode.edit());\n            } else {\n                dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n            }\n        }\n    };\n\n    const deleteSequenceStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditStep.delete(stepToEdit!, selectedSequence!));\n            dispatch(EditActions.setMode.editSequence(stepToEdit!.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const updateStep = () => {\n        if (stepToEdit !== null && undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditStep.save(copySequenceStep));\n        }\n    };\n\n    const editOrAddAction = (action?: ActionTO) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            let copyAction: ActionTO | undefined = DavitUtil.deepCopy(action);\n            if (copyAction === undefined) {\n                copyAction = new ActionTO();\n                copyAction.sequenceStepFk = stepToEdit!.sequenceStepTO.id;\n                copyAction.index = stepToEdit!.actions.length;\n                dispatch(EditAction.create(copyAction));\n            } else {\n                dispatch(EditActions.setMode.editAction(copyAction));\n            }\n        }\n    };\n\n    const validStep = (): boolean => {\n        let valid: boolean = false;\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            if (stepToEdit!.sequenceStepTO.name !== \"\") {\n                valid = true;\n            }\n        }\n        return valid;\n    };\n\n    const saveGoToType = (goTo: GoTo) => {\n        if (goTo !== undefined) {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.goto = goTo;\n            dispatch(EditStep.update(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const handleType = (newGoToType?: string) => {\n        if (newGoToType !== undefined) {\n            const gType = {type: (GoToTypes as any)[newGoToType]};\n            setCurrentGoTo(gType);\n            switch (newGoToType) {\n                case GoToTypes.ERROR:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.FIN:\n                    saveGoToType(gType);\n                    break;\n                case GoToTypes.IDLE:\n                    saveGoToType(gType);\n            }\n        }\n    };\n\n    const setGoToTypeStep = (step?: SequenceStepCTO) => {\n        if (step) {\n            const newGoTo: GoTo = {type: GoToTypes.STEP, id: step.sequenceStepTO.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const setGoToTypeDecision = (decision?: DecisionTO) => {\n        if (decision) {\n            const newGoTo: GoTo = {type: GoToTypes.DEC, id: decision.id};\n            saveGoToType(newGoTo);\n        }\n    };\n\n    const createGoToStep = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToStep: SequenceStepCTO = new SequenceStepCTO();\n            goToStep.sequenceStepTO.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            setKey(key + 1);\n            dispatch(EditActions.setMode.editStep(goToStep, copyStepToEdit));\n            dispatch(SequenceModelActions.setCurrentSequenceById(goToStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const createGoToDecision = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit)) {\n            const goToDecision: DecisionTO = new DecisionTO();\n            goToDecision.sequenceFk = stepToEdit!.sequenceStepTO.sequenceFk;\n            const copyStepToEdit: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            dispatch(EditActions.setMode.editDecision(goToDecision, copyStepToEdit));\n        }\n    };\n\n    const setRoot = () => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequence.setRoot(stepToEdit!.sequenceStepTO.sequenceFk, stepToEdit!.sequenceStepTO.id, false));\n            const step: SequenceStepCTO | undefined = MasterDataActions.find.findSequenceStepCTO(\n                stepToEdit!.sequenceStepTO.id,\n            );\n            if (step) {\n                dispatch(EditActions.setMode.editStep(step));\n            } else {\n                dispatch(EditActions.setMode.edit());\n            }\n        }\n    };\n\n    const saveNote = (text: string) => {\n        if (!DavitUtil.isNullOrUndefined(stepToEdit) && text !== \"\") {\n            const copySequenceStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n            copySequenceStep.sequenceStepTO.note = text;\n            dispatch(EditActions.setMode.editStep(copySequenceStep));\n            dispatch(EditStep.save(copySequenceStep));\n            dispatch(SequenceModelActions.setCurrentSequenceById(copySequenceStep.sequenceStepTO.sequenceFk));\n        }\n    };\n\n    const switchIndexesAndSave = (indexToUpdate: number, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(stepToEdit);\n\n        if (newIndex >= 0 && newIndex <= copyStep.actions.length - 1) {\n            const action1: ActionTO = copyStep.actions[indexToUpdate];\n            action1.index = newIndex;\n            const action2: ActionTO = copyStep.actions[newIndex];\n            action2.index = indexToUpdate;\n            copyStep.actions[indexToUpdate] = action2;\n            copyStep.actions[newIndex] = action1;\n\n            // save step\n            dispatch(EditStep.save(copyStep));\n\n            // load sequence from backend\n            dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n            // update current step if object to edit\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    return {\n        label: \"EDIT * \" + (selectedSequence?.sequenceTO.name || \"\") + \" * \" + (stepToEdit?.sequenceStepTO.name || \"\"),\n        name: stepToEdit ? stepToEdit!.sequenceStepTO.name : \"\",\n        changeName,\n        saveSequenceStep,\n        deleteSequenceStep,\n        validStep,\n        editOrAddAction,\n        updateStep,\n        handleType,\n        goTo: currentGoTo,\n        setGoToTypeStep,\n        setGoToTypeDecision,\n        createGoToStep,\n        createGoToDecision,\n        setRoot,\n        isRoot: stepToEdit?.sequenceStepTO.root ? stepToEdit?.sequenceStepTO.root : false,\n        key,\n        stepId: stepToEdit?.sequenceStepTO.id,\n        note: stepToEdit ? stepToEdit.sequenceStepTO.note : \"\",\n        saveNote,\n        actions: stepToEdit?.actions || [],\n        switchIndexesAndSave,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { DavitDraggableModal } from \"../../../../../../../atomic\";\nimport { StepForm } from \"../forms/StepForm\";\n\ninterface EditStepModalProps {\n\n}\n\nexport const EditStepModal: FunctionComponent<EditStepModalProps> = () => {\n\n    return (\n        <DavitDraggableModal form={<StepForm />} />\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelEditChain } from \"./fragments/ControlPanelEditChain\";\nimport { ControlPanelEditMenu } from \"./fragments/ControlPanelEditMenu\";\nimport { ControlPanelEditSequence } from \"./fragments/ControlPanelEditSequence\";\nimport { EditActionModal } from \"./fragments/modals/EditActionModal\";\nimport { EditActorModal } from \"./fragments/modals/EditActorModal\";\nimport { EditChainDecisionModal } from \"./fragments/modals/EditChainDecisionModal\";\nimport { EditChainLinkModal } from \"./fragments/modals/EditChainLinkModal\";\nimport { EditChainStateModal } from \"./fragments/modals/EditChainStateModal\";\nimport { EditDataModal } from \"./fragments/modals/EditDataModal\";\nimport { EditDataRelationModal } from \"./fragments/modals/EditDataRelationModal\";\nimport { EditDecisionModal } from \"./fragments/modals/EditDecisionModal\";\nimport { EditSequenceStateModal } from \"./fragments/modals/EditSequenceStateModal\";\nimport { EditStepModal } from \"./fragments/modals/EditStepModal\";\n\nexport interface ControlPanelEditControllerProps {\n}\n\nexport const ControlPanelEditController: FunctionComponent<ControlPanelEditControllerProps> = () => {\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getViewByMode = (currentMode: Mode) => {\n        switch (currentMode) {\n            case Mode.EDIT_ACTOR:\n                return <EditActorModal />;\n            case Mode.EDIT_DATA:\n                return <EditDataModal />;\n            case Mode.EDIT_RELATION:\n                return <EditDataRelationModal />;\n            case Mode.EDIT_SEQUENCE:\n                return <ControlPanelEditSequence />;\n            case Mode.EDIT_SEQUENCE_STEP:\n                return <EditStepModal />;\n            case Mode.EDIT_SEQUENCE_STATES:\n                return <EditSequenceStateModal />;\n            case Mode.EDIT_SEQUENCE_DECISION:\n                return <EditDecisionModal />;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                return <EditActionModal />;\n            case Mode.EDIT_CHAIN:\n                return <ControlPanelEditChain />;\n            case Mode.EDIT_CHAIN_STATES:\n                return <EditChainStateModal />;\n            case Mode.EDIT_CHAIN_LINK:\n                return <EditChainLinkModal />;\n            case Mode.EDIT_CHAIN_DECISION:\n                return <EditChainDecisionModal />;\n            default:\n                return <ControlPanelEditMenu />;\n        }\n    };\n\n    return getViewByMode(mode);\n};\n","import { faDownload } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons/faCloudUploadAlt\";\nimport React, { createRef, FunctionComponent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { EditActions } from \"../../../../../../slices/EditSlice\";\nimport { GlobalActions } from \"../../../../../../slices/GlobalSlice\";\nimport { DavitDeleteButton, DavitDownloadModal, DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelFileControllerProps {\n}\n\nexport const ControlPanelFileController: FunctionComponent<ControlPanelFileControllerProps> = () => {\n    const [showForm, setShowForm] = useState<boolean>(false);\n    const inputFileRef = createRef<HTMLInputElement>();\n\n    const openFileBrowser = () => {\n        if (inputFileRef !== null && inputFileRef.current !== null) {\n            inputFileRef.current.click();\n        }\n    };\n\n    const readFileToString = (file: File | null) => {\n        const fileReader = new FileReader();\n        if (file !== null) {\n            fileReader.readAsText(file);\n            fileReader.onload = (event) => {\n                dispatch(GlobalActions.storefileData(event.target!.result as string));\n            };\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const deleteLocalStorage = () => {\n        dispatch(EditActions.setMode.view());\n        dispatch(GlobalActions.createNewProject());\n    };\n\n    return (\n        <ControlPanel>\n            <OptionField label=\"Upload\">\n                <div>\n                    <DavitIconButton iconName={faCloudUploadAlt}\n                                     onClick={openFileBrowser}\n                    />\n                    <input\n                        hidden={true}\n                        ref={inputFileRef}\n                        type=\"file\"\n                        onChange={(event) => {\n                            if (event.target.files !== null) {\n                                readFileToString(event.target.files[0]);\n                            }\n                        }}\n                    />\n                </div>\n            </OptionField>\n            <OptionField label=\"Download\">\n                <DavitIconButton onClick={() => setShowForm(true)}\n                                 iconName={faDownload}\n                />\n                {showForm && <DavitDownloadModal closeCallback={() => setShowForm(false)} />}\n            </OptionField>\n            <OptionField label=\"Clear\">\n                <DavitDeleteButton onClick={deleteLocalStorage} />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n","import { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { FunctionComponent } from \"react\";\nimport { ModuleRoutes } from \"../../../../../../pages/Davit\";\nimport { DavitIconButton } from \"../../../../../atomic\";\nimport { ControlPanel } from \"../edit/common/ControlPanel\";\nimport { OptionField } from \"../edit/common/OptionField\";\n\nexport interface ControlPanelTabControllerProps {\n    hidden: boolean;\n}\n\nexport const ControlPanelTabController: FunctionComponent<ControlPanelTabControllerProps> = () => {\n\n    const {showActorPage, showDataPage, showFlowChartPage, showTablePage} = useFileOptionModelView();\n\n    return (\n        <ControlPanel>\n            <OptionField>\n                <DavitIconButton iconName={faShare}\n                                 onClick={showActorPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showDataPage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showTablePage}\n                />\n                <DavitIconButton iconName={faShare}\n                                 onClick={showFlowChartPage}\n                />\n            </OptionField>\n        </ControlPanel>\n    );\n};\n\nconst useFileOptionModelView = () => {\n    const showActorPage = () => {\n        window.open(ModuleRoutes.actor, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showDataPage = () => {\n        window.open(ModuleRoutes.data, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showTablePage = () => {\n        window.open(ModuleRoutes.table, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n    const showFlowChartPage = () => {\n        window.open(ModuleRoutes.flowChart, \"_blank\", \"toolbar=no,top=0,left=0\");\n    };\n\n    return {showActorPage, showDataPage, showTablePage, showFlowChartPage};\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./FlowChartlabel.css\";\n\ninterface FlowChartlabelProps {\n    label: string;\n    text: string;\n}\n\nexport const FlowChartlabel: FunctionComponent<FlowChartlabelProps> = (props) => {\n    const {text, label} = props;\n\n    return (\n        <div className=\"flowChartLabel\">\n            <span className=\"flowChartLabelLeft\">\n                <label>{label}</label>\n            </span>\n            <span className=\"flowChartLabelRight\">\n                <label>{text}</label>\n            </span>\n        </div>\n    );\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitIcons } from \"./IconSet\";\n\ninterface NoteIconProps {\n    size?:\n        | \"1x\"\n        | \"2x\"\n        | \"3x\"\n        | \"4x\"\n        | \"5x\"\n        | \"6x\"\n        | \"7x\"\n        | \"8x\"\n        | \"9x\"\n        | \"10x\";\n\n    className?: string;\n}\n\nexport const NoteIcon: FunctionComponent<NoteIconProps> = (props) => {\n    const {size, className} = props;\n\n    return (\n        <FontAwesomeIcon icon={DavitIcons.noteEmpty}\n                         size={size ? size : \"1x\"}\n                         className={className}\n        />\n    );\n};\n\n","import { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faArrowRight } from \"@fortawesome/free-solid-svg-icons/faArrowRight\";\nimport { faFastBackward } from \"@fortawesome/free-solid-svg-icons/faFastBackward\";\nimport { faFastForward } from \"@fortawesome/free-solid-svg-icons/faFastForward\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FunctionComponent } from \"react\";\nimport { DavitButton, DavitIconButton } from \"../../../../../../atomic\";\n\ninterface ViewNavigatorProps {\n    fastBackward: () => void,\n    fastForward: () => void,\n    backward: () => void,\n    forward: () => void,\n    index: string,\n}\n\nexport const ViewNavigator: FunctionComponent<ViewNavigatorProps> = (props) => {\n    const {fastBackward, fastForward, backward, forward, index} = props;\n\n    return (\n        <div className=\"flex\">\n            <DavitIconButton\n                iconName={faFastBackward}\n                onClick={fastBackward}\n            />\n            <DavitButton onClick={backward}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n                {\"BACK\"}\n            </DavitButton>\n            <div className={\"border border-medium border-radius flex flex-center padding-small\"}>\n                <label>{index}</label>\n            </div>\n            <DavitIconButton onClick={forward}>\n                {\"NEXT\"}\n                <FontAwesomeIcon icon={faArrowRight} />\n            </DavitIconButton>\n            <DavitIconButton\n                iconName={faFastForward}\n                onClick={fastForward}\n            />\n        </div>\n    );\n};\n","import React, { FunctionComponent, useState } from \"react\";\nimport { FlowChartlabel } from \"../../../../../../../domains/overview/flowChartModel/fragments/FlowChartlabel\";\nimport { useStepAndLinkNavigation } from \"../../../../../../../utils/WindowUtil\";\nimport { DavitButton } from \"../../../../../../atomic\";\nimport { NoteIcon } from \"../../../../../../atomic/icons/NoteIcon\";\nimport { ControlPanel } from \"../../edit/common/ControlPanel\";\nimport { OptionField } from \"../../edit/common/OptionField\";\nimport { useViewViewModel } from \"../viewmodels/ViewViewModel\";\nimport \"./ControlPanelCalculationView.css\";\nimport { ViewNavigator } from \"./ViewNavigator\";\n\nexport interface ControlPanelViewProps {\n\n}\n\nexport const ControlPanelCalculationView: FunctionComponent<ControlPanelViewProps> = () => {\n\n    const {\n        stepIndex,\n        linkIndex,\n        selectedChainName,\n        selectedSequenceName,\n        getSequenceNote,\n        getChainNote,\n    } = useViewViewModel();\n\n    const {stepBack, stepNext, linkBack, linkNext} = useStepAndLinkNavigation();\n\n    const [showChain, setShowChain] = useState<boolean>(false);\n\n\n    const getIndex = (): string => {\n        const link: string = (linkIndex + 1).toString() || \"0\";\n        const step: string = stepIndex.toString() || \"0\";\n        return link + \" / \" + step;\n    };\n\n    return (\n        <>\n            <ControlPanel>\n                <OptionField>\n                    <div>\n                        {selectedChainName !== \"\" && <FlowChartlabel label=\"CHAIN:\"\n                                                                     text={selectedChainName}\n                        />}\n                        <FlowChartlabel label=\"SEQU.:\"\n                                        text={selectedSequenceName}\n                        />\n                    </div>\n                    {selectedChainName !== \"\" && (\n                        <div className=\"flex-column\">\n                            <DavitButton onClick={() => setShowChain(true)}\n                                         active={showChain}\n                            >Show</DavitButton>\n                            <DavitButton onClick={() => setShowChain(false)}\n                                         active={!showChain}\n                            >Show</DavitButton>\n                        </div>\n                    )}\n                </OptionField>\n\n                <OptionField>\n                    {/*------ note -----*/}\n                    <NoteIcon size=\"2x\"\n                              className=\"margin-medium padding-small border border-medium\"\n                    />\n                    <textarea className=\"noteTextarea border border-medium padding-medium width-fluid\"\n                              value={showChain ? getChainNote() : getSequenceNote()}\n                              readOnly\n                    />\n\n                </OptionField>\n\n                <OptionField>\n\n                </OptionField>\n\n            </ControlPanel>\n            <div className=\"viewNavigatorWrapper\">\n                <div className=\"animator\">\n                    <ViewNavigator fastBackward={linkBack}\n                                   fastForward={linkNext}\n                                   backward={stepBack}\n                                   forward={stepNext}\n                                   index={getIndex()}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { SequenceCTO } from \"../../../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainTO } from \"../../../../../../../dataAccess/access/to/ChainTO\";\nimport { SequenceTO } from \"../../../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../../../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../../../../utils/DavitUtil\";\n\nexport const useViewViewModel = () => {\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const linkIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n    const dispatch = useDispatch();\n\n    const selectSequence = (sequence: SequenceTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(sequence)) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(sequence!.id));\n        }\n        if (sequence === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentSequence);\n        }\n    };\n\n    const selectChain = (chain: ChainTO | undefined) => {\n        if (!DavitUtil.isNullOrUndefined(chain)) {\n            dispatch(SequenceModelActions.setCurrentChain(chain!));\n        }\n        if (chain === undefined) {\n            dispatch(SequenceModelActions.resetCurrentStepIndex);\n            dispatch(SequenceModelActions.resetCurrentChain);\n        }\n    };\n\n    const getSequenceNote = (): string => {\n        let note: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedSequence)) {\n            note = selectedSequence!.sequenceTO.note;\n        }\n        return note;\n    };\n\n    const getChainNote = (): string => {\n        let note: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            note = selectedChain!.note;\n        }\n        return note;\n    };\n\n    return {\n        sequence: selectedSequence,\n        stepIndex,\n        linkIndex,\n        selectSequence,\n        currentSequence: selectedSequence?.sequenceTO.id || -1,\n        currentChain: selectedChain?.id || -1,\n        selectChain,\n        selectedSequenceName: selectedSequence?.sequenceTO.name || \"\",\n        selectedChainName: selectedChain?.name || \"\",\n        editConfiguration: () => dispatch(EditActions.setMode.editConfiguration()),\n        getSequenceNote,\n        getChainNote,\n    };\n};","import { AbstractTO } from \"./AbstractTO\";\n\nexport class InitDataTO extends AbstractTO {\n    constructor(public actorFk = -1, public dataFk = -1, public instanceFk = -1, public dataSetupFk = -1) {\n        super();\n    }\n}\n","import { AbstractTO } from \"./AbstractTO\";\nimport { InitDataTO } from \"./InitDataTO\";\n\nexport interface ChainStateValue{\n    chainStateFk: number;\n    value: boolean\n}\n\nexport class ChainConfigurationTO extends AbstractTO{\n    public constructor(\n        public name: string = \"\",\n        public note: string = \"\",\n        public chainFk: number = -1,\n        public initDatas: InitDataTO[] = [],\n        public stateValues: ChainStateValue[] = [],\n    ) {\n        super();\n        }\n\n}","import { ChainConfigurationTO } from \"../../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions } from \"../EditSlice\";\n\nconst createChainConfigurationThunk = (chainId: number): AppThunk => (dispatch) => {\n\n    const chainConfiguration: ChainConfigurationTO = new ChainConfigurationTO();\n    chainConfiguration.chainFk = chainId;\n\n    const chainStates: DataAccessResponse<ChainStateTO[]> = DataAccess.findAllChainStatesByChainFk(chainId);\n\n    if (chainStates.code === 200) {\n        chainConfiguration.stateValues = chainStates.object.map(state => {\n            return {chainStateFk: state.id, value: state.isState};\n        });\n    }\n\n    dispatch(editActions.setChainConfiguration(chainConfiguration));\n};\n\nconst setChainConfigurationThunk = (chainConfiguration: ChainConfigurationTO): AppThunk => (dispatch) => {\n    dispatch(editActions.setChainConfiguration(chainConfiguration));\n};\n\nexport const EditChainConfiguration = {\n    update: setChainConfigurationThunk,\n    create: createChainConfigurationThunk,\n};\n","import { SequenceConfigurationTO } from \"../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { DataAccess } from \"../../dataAccess/DataAccess\";\nimport { DataAccessResponse } from \"../../dataAccess/DataAccessResponse\";\nimport { AppThunk } from \"../../store\";\nimport { editActions, Mode } from \"../EditSlice\";\nimport { GlobalActions } from \"../GlobalSlice\";\nimport { MasterDataActions } from \"../MasterDataSlice\";\n\nconst createSequenceConfigurationThunk = (sequenceId: number): AppThunk => (dispatch) => {\n    const sequenceConfigurationTO: SequenceConfigurationTO = new SequenceConfigurationTO();\n\n    sequenceConfigurationTO.sequenceFk = sequenceId;\n    // sequenceConfigurationTO.name = \"New configuration\";\n\n    // load and set sequence default states\n    const sequenceStates: DataAccessResponse<SequenceStateTO[]> = DataAccess.findAllSequenceStatesBySequenceFk(sequenceId);\n\n    if (sequenceStates.code === 200) {\n        sequenceConfigurationTO.stateValues = sequenceStates.object.map(state => {\n            return {sequenceStateFk: state.id, value: state.isState};\n        });\n    }\n\n    dispatch(setSequenceConfigurationThunk(sequenceConfigurationTO));\n};\n\nconst saveSequenceConfigurationThunk = (sequenceConfigurationTO: SequenceConfigurationTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.saveSequenceConfigurationTO(sequenceConfigurationTO);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceConfigurationsFromBackend());\n    dispatch(EditSequenceConfiguration.update(response.object));\n};\n\nconst deleteSequenceConfigurationThunk = (sequenceConfigurationTO: SequenceConfigurationTO): AppThunk => (dispatch) => {\n    const response: DataAccessResponse<SequenceConfigurationTO> = DataAccess.deleteSequenceConfiguration(sequenceConfigurationTO);\n    if (response.code !== 200) {\n        dispatch(GlobalActions.handleError(response.message));\n    }\n    dispatch(MasterDataActions.loadSequenceConfigurationsFromBackend());\n};\n\nconst setSequenceConfigurationThunk = (sequenceConfiguration: SequenceConfigurationTO): AppThunk => (dispatch, getState) => {\n    const mode: Mode = getState().edit.mode;\n\n    if (mode === Mode.VIEW_CONFIGURATION) {\n        dispatch(editActions.setSequenceConfigurationToEdit(sequenceConfiguration));\n    } else {\n        dispatch(GlobalActions.handleError(\"Try to set Sequence Configuration to edit in mode: \" + mode));\n    }\n};\n\nexport const EditSequenceConfiguration = {\n    save: saveSequenceConfigurationThunk,\n    delete: deleteSequenceConfigurationThunk,\n    update: setSequenceConfigurationThunk,\n    create: createSequenceConfigurationThunk,\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./DavitToggleButton.css\";\n\ninterface DavitToggleButtonProps {\n    toggle: () => void;\n    value: boolean;\n}\n\nexport const DavitToggleButton: FunctionComponent<DavitToggleButtonProps> = (props) => {\n    const {toggle, value} = props;\n\n    return (\n        <label className=\"switch\">\n            <input type=\"checkbox\"\n                   onChange={toggle}\n                   checked={value}\n            />\n            <span className=\"slider round\"/>\n        </label>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SequenceConfigurationTO } from \"../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { masterDataSelectors } from \"../../../slices/MasterDataSlice\";\nimport { DavitDropDown, DavitDropDownItemProps } from \"./DavitDropDown\";\n\ninterface SequenceConfigurationDropDownProps {\n    sequenceId?: number;\n    selectedSequenceConfiguration?: number;\n    onSelectCallback: (sequenceConfiguration: SequenceConfigurationTO | undefined) => void;\n}\n\nexport const SequenceConfigurationDropDown: FunctionComponent<SequenceConfigurationDropDownProps> = (props) => {\n    const {sequenceId, onSelectCallback, selectedSequenceConfiguration} = props;\n\n    const sequenceConfigurations: SequenceConfigurationTO[] = useSelector(masterDataSelectors.selectSequenceConfigurationsBySequenceId(sequenceId));\n\n    const onSelectSequenceConfiguration = (dropDownItem: DavitDropDownItemProps | undefined) => {\n        let selectedSequenceConfiguration: SequenceConfigurationTO | undefined;\n\n        if (dropDownItem !== undefined) {\n            selectedSequenceConfiguration = sequenceConfigurations.find(config => config.id === Number(dropDownItem.value));\n        }\n\n        onSelectCallback(selectedSequenceConfiguration);\n    };\n\n    const buildDropDownItemFromSequenceConfiguration = (sequenceConfiguration: SequenceConfigurationTO): DavitDropDownItemProps => {\n        return {\n            value: sequenceConfiguration.id.toString(),\n            key: sequenceConfiguration.id,\n            text: sequenceConfiguration.name\n        };\n    };\n\n    return (\n        <DavitDropDown onSelect={onSelectSequenceConfiguration}\n                       dropdownItems={sequenceConfigurations.map(buildDropDownItemFromSequenceConfiguration)}\n                       clearable\n                       placeholder={sequenceConfigurations.length === 0 ? \"No configuration available\" : \"Select configuration\"}\n                       value={selectedSequenceConfiguration ? selectedSequenceConfiguration.toString() : undefined}\n        />\n    );\n};\n\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { DavitButton, DavitModal, DavitTextInput, Form } from \"../../../atomic\";\nimport { FormBody } from \"../../../atomic/forms/fragments/FormBody\";\nimport { FormFooter } from \"../../../atomic/forms/fragments/FormFooter\";\nimport { FormHeader } from \"../../../atomic/forms/fragments/FormHeader\";\n\ninterface SaveConfigurationModalProps {\n    onSaveCallback: (name: string) => void;\n    onCloseCallback: () => void;\n    name: string;\n}\n\nexport const SaveConfigurationModal: FunctionComponent<SaveConfigurationModalProps> = (props) => {\n    const {name, onSaveCallback, onCloseCallback} = props;\n\n    const [editName, setEditName] = useState<string>(\"\");\n\n    useEffect(() => {\n        setEditName(name);\n    }, [name]);\n\n    return (\n        <DavitModal>\n            <Form>\n                <FormHeader>\n                    <h2>Save Configuration</h2>\n                </FormHeader>\n\n                <FormBody>\n                    <DavitTextInput onChangeCallback={setEditName}\n                                    focus\n                                    value={editName}\n                    />\n                </FormBody>\n\n                <FormFooter>\n                    <DavitButton onClick={onCloseCallback}>Cancel</DavitButton>\n                    <DavitButton onClick={() => {\n                        onSaveCallback(editName);\n                        onCloseCallback();\n                    }}\n                    >Save</DavitButton>\n                </FormFooter>\n            </Form>\n        </DavitModal>\n    );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { StateTO } from \"../../../../dataAccess/access/to/StateTO\";\nimport { StateList } from \"../../controllPanel/presentation/fragments/edit/fragments/forms/fragments/StateList\";\n\ninterface StateConfigurationViewProps {\n    states: StateTO[];\n    setStateCallback: (state: StateTO, active: boolean) => void;\n}\n\nexport const StateConfigurationView: FunctionComponent<StateConfigurationViewProps> = (props) => {\n\n    const {states, setStateCallback} = props;\n\n    const HEADER: string = \"State\";\n\n    return (\n        <StateList\n            statesToEdit={states}\n            stateColumnName={HEADER}\n            setActiveCallback={setStateCallback}\n        />\n    );\n};\n\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { ChainConfigurationTO } from \"../../../dataAccess/access/to/ChainConfigurationTO\";\nimport { ChainStateTO } from \"../../../dataAccess/access/to/ChainStateTO\";\nimport { ChainTO } from \"../../../dataAccess/access/to/ChainTO\";\nimport { InitDataTO } from \"../../../dataAccess/access/to/InitDataTO\";\nimport { SequenceConfigurationTO } from \"../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceStateTO } from \"../../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../../dataAccess/access/to/StateTO\";\nimport { editActions, EditActions, editSelectors } from \"../../../slices/EditSlice\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { EditChainConfiguration } from \"../../../slices/thunks/ChainConfigurationThunks\";\nimport { EditSequenceConfiguration } from \"../../../slices/thunks/SequenceConfigurationThunks\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport {\n    ActorDropDown,\n    ChainDropDown,\n    DavitAddButton,\n    DavitDeleteButton,\n    DavitIconButton,\n    DavitShowMoreButton,\n    InstanceDropDown,\n    SequenceDropDown,\n} from \"../../atomic\";\nimport { DavitToggleButton } from \"../../atomic/buttons/DavitToggleButton\";\nimport { SequenceConfigurationDropDown } from \"../../atomic/dropdowns/SequenceConfigurationDropDown\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport { NoteIcon } from \"../../atomic/icons/NoteIcon\";\nimport \"./Configuration.css\";\nimport { SaveConfigurationModal } from \"./fragments/SaveConfigurationModal\";\nimport { StateConfigurationView } from \"./fragments/StateConfigurationView\";\n\nexport interface ConfigurationPanelProps {\n\n}\n\nexport const ConfigurationPanel: FunctionComponent<ConfigurationPanelProps> = () => {\n\n    const dispatch = useDispatch();\n\n    const [sequenceOptions, setSequenceOptions] = useState<boolean>(false);\n    const [showMore, setShowMore] = useState<boolean>(true);\n    const [showSaveConfiguration, setShowSaveConfiguration] = useState<boolean>(false);\n\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const sequenceConfigurationToEdit: SequenceConfigurationTO | null = useSelector(editSelectors.selectSequenceConfigurationToEdit);\n\n    const selectedChain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n    const chainConfigurationToEdit: ChainConfigurationTO | null = useSelector(editSelectors.selectChainConfiguration);\n\n    const runCalc = () => {\n        if (selectedSequence !== null && sequenceConfigurationToEdit !== null) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(selectedSequence.sequenceTO.id));\n            dispatch(SequenceModelActions.setCurrentSequenceConfiguration(sequenceConfigurationToEdit));\n            dispatch(EditActions.setMode.view());\n        }\n\n        if (selectedChain !== null && chainConfigurationToEdit !== null) {\n            const copyChainTO: ChainTO = DavitUtil.deepCopy(selectedChain.chain);\n            dispatch(SequenceModelActions.setCurrentChainConfiguration(chainConfigurationToEdit));\n            dispatch(EditActions.setMode.view());\n            dispatch(SequenceModelActions.setCurrentChain(copyChainTO));\n        }\n    };\n\n    // ------------------------------- sequence ------------------------------\n\n    const newSequenceConfiguration = (sequenceId: number) => {\n        dispatch(EditSequenceConfiguration.create(sequenceId));\n    };\n\n    const setSequenceConfiguration = (sequenceConfiguration: SequenceConfigurationTO | undefined) => {\n        if (sequenceConfiguration === undefined) {\n            if (sequenceConfigurationToEdit !== null && sequenceConfigurationToEdit.name === \"\") {\n                deleteSequenceConfiguration();\n            } else {\n                newSequenceConfiguration(selectedSequence!.sequenceTO.id);\n            }\n        } else {\n            dispatch(EditSequenceConfiguration.update(sequenceConfiguration));\n        }\n    };\n\n    const saveSequenceConfiguration = (name?: string) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            if (sequenceConfigurationToEdit!.name !== \"\" || (name !== \"\" && name !== undefined)) {\n                const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n                // set new name if given\n                if (name !== \"\" && name !== undefined) {\n                    copySequenceConfiguration.name = name;\n                }\n                // remove empty init data's\n                copySequenceConfiguration.initDatas = copySequenceConfiguration.initDatas.filter(initD => initD.actorFk !== -1 && initD.dataFk !== -1 && initD.instanceFk !== -1);\n                // save sequence configuration\n                dispatch(EditSequenceConfiguration.save(copySequenceConfiguration));\n            } else {\n                deleteSequenceConfiguration();\n            }\n        }\n    };\n\n    const deleteSequenceConfiguration = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n            dispatch(EditSequenceConfiguration.delete(sequenceConfigurationToEdit!));\n            newSequenceConfiguration(selectedSequence!.sequenceTO.id);\n        }\n    };\n\n    const setIsStateInSequenceConfiguration = (stateToToggle: StateTO, is: boolean) => {\n        if (sequenceConfigurationToEdit) {\n            const updatedSequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            updatedSequenceConfiguration.stateValues.forEach(sv => {\n                if (sv.sequenceStateFk === stateToToggle.id) {\n                    sv.value = is;\n                }\n                return sv;\n            });\n            dispatch(EditSequenceConfiguration.update(updatedSequenceConfiguration));\n        }\n    };\n\n    const setSequence = (sequenceId: number | undefined) => {\n        if (sequenceId !== undefined) {\n            dispatch(SequenceModelActions.setCurrentSequenceById(sequenceId));\n            newSequenceConfiguration(sequenceId);\n        } else {\n            dispatch(SequenceModelActions.resetCurrentSequence);\n            dispatch(SequenceModelActions.resetCurrentSequenceConfiguration);\n            dispatch(editActions.clearObjectToEdit());\n        }\n    };\n\n    const getUpdateStatesByConfiguration = (states: SequenceStateTO[]): SequenceStateTO[] => {\n        const statesToUpdate: SequenceStateTO[] = DavitUtil.deepCopy(states);\n        if (selectedSequence && sequenceConfigurationToEdit) {\n            statesToUpdate.map(state => {\n                sequenceConfigurationToEdit.stateValues.forEach(sv => {\n                    if (sv.sequenceStateFk === state.id) {\n                        state.isState = sv.value;\n                    }\n                });\n                return state;\n            });\n        }\n        return statesToUpdate;\n    };\n\n\n    const createSequenceInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas.push(new InitDataTO());\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const deleteSequenceInitData = (index: number) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas = copySequenceConfiguration.initDatas.filter((iData, iex) => iex !== index);\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const saveSequenceInitData = (initData: InitDataTO, index: number) => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n            const copySequenceConfiguration: SequenceConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            copySequenceConfiguration.initDatas[index] = initData;\n            dispatch(EditSequenceConfiguration.update(copySequenceConfiguration));\n        }\n    };\n\n    const buildSequenceActorDataTableRow = (initData: InitDataTO, index: number): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={index}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveSequenceInitData(copyInitData, index);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveSequenceInitData(copyInitData, index);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        <DavitDeleteButton onClick={() => {\n                            deleteSequenceInitData(index);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n    // ------------------------------- chain ------------------------------\n\n    const setChain = (chain: ChainTO | undefined) => {\n        if (chain !== undefined) {\n            const copyChain: ChainTO = DavitUtil.deepCopy(chain);\n            dispatch(SequenceModelActions.setCurrentChain(copyChain));\n            dispatch(EditChainConfiguration.create(copyChain.id));\n        } else {\n            dispatch(SequenceModelActions.resetCurrentChain);\n            dispatch(editActions.clearObjectToEdit());\n        }\n    };\n\n    const getUpdateChainStatesByConfiguration = (states: ChainStateTO[]): ChainStateTO[] => {\n        const statesToUpdate: ChainStateTO[] = DavitUtil.deepCopy(states);\n        if (selectedChain && chainConfigurationToEdit) {\n            statesToUpdate.map(state => {\n                chainConfigurationToEdit.stateValues.forEach(sv => {\n                    if (sv.chainStateFk === state.id) {\n                        state.isState = sv.value;\n                    }\n                });\n                return state;\n            });\n        }\n        return statesToUpdate;\n    };\n\n    const setIsStateInChainConfiguration = (stateToToggle: StateTO, is: boolean) => {\n        if (sequenceConfigurationToEdit) {\n            const updatedChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(sequenceConfigurationToEdit);\n            updatedChainConfiguration.stateValues.forEach(sv => {\n                if (sv.chainStateFk === stateToToggle.id) {\n                    sv.value = is;\n                }\n                return sv;\n            });\n            dispatch(EditChainConfiguration.update(updatedChainConfiguration));\n        }\n    };\n\n    const createChainInitData = () => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas.push(new InitDataTO());\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const deleteChainInitData = (index: number) => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas = copyChainConfiguration.initDatas.filter((iData, iex) => iex !== index);\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const saveChainInitData = (initData: InitDataTO, index: number) => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n            const copyChainConfiguration: ChainConfigurationTO = DavitUtil.deepCopy(chainConfigurationToEdit);\n            copyChainConfiguration.initDatas[index] = initData;\n            dispatch(EditChainConfiguration.update(copyChainConfiguration));\n        }\n    };\n\n    const buildChainActorDataTableRow = (initData: InitDataTO, index: number): JSX.Element => {\n        let copyInitData: InitDataTO = DavitUtil.deepCopy(initData);\n\n        return (\n            <tr key={index}>\n                <td>\n                    <div className=\"flex content-space-between\">\n                        <ActorDropDown\n                            onSelect={(actor) => {\n                                copyInitData.actorFk = actor ? actor.actor.id : -1;\n                                saveChainInitData(copyInitData, index);\n                            }}\n                            placeholder={\"Select Actor...\"}\n                            value={copyInitData.actorFk}\n                        />\n                        <InstanceDropDown\n                            onSelect={(dataAndInstance) => {\n                                if (!DavitUtil.isNullOrUndefined(dataAndInstance)) {\n                                    copyInitData.dataFk = dataAndInstance!.dataFk;\n                                    copyInitData.instanceFk = dataAndInstance!.instanceId;\n                                    saveChainInitData(copyInitData, index);\n                                }\n                            }}\n                            placeholder={\"Select Data Instance...\"}\n                            value={JSON.stringify({\n                                dataFk: copyInitData!.dataFk,\n                                instanceId: copyInitData!.instanceFk,\n                            })\n                            }\n                        />\n                        <DavitDeleteButton onClick={() => {\n                            deleteChainInitData(index);\n                        }}\n                                           noConfirm\n                        />\n                    </div>\n                </td>\n            </tr>\n        );\n    };\n\n\n    // ---------------------------- ui parts ----------------------------\n\n    const toggleSequenceChain = (toggleValue?: boolean) => {\n        setSequenceOptions((toggleValue !== undefined) ? toggleValue : (!sequenceOptions));\n        dispatch(SequenceModelActions.resetAll);\n    };\n\n    const getSequenceStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedSequence) && !DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit)) {\n\n            if (selectedSequence!.sequenceStates.length > 0) {\n                return (\n                    <StateConfigurationView states={getUpdateStatesByConfiguration(selectedSequence!.sequenceStates || [])}\n                                            setStateCallback={setIsStateInSequenceConfiguration}\n                    />\n                );\n            }\n\n            if (selectedSequence!.sequenceStates.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no states declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getChainStates = () => {\n        if (!DavitUtil.isNullOrUndefined(selectedChain) && !DavitUtil.isNullOrUndefined(chainConfigurationToEdit)) {\n\n            if (chainConfigurationToEdit!.stateValues.length > 0) {\n                return (\n                    <StateConfigurationView states={getUpdateChainStatesByConfiguration(selectedChain!.chainStates || [])}\n                                            setStateCallback={setIsStateInChainConfiguration}\n                    />\n                );\n            }\n\n            if (chainConfigurationToEdit!.stateValues.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no states declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getSequenceInitDatas = () => {\n        if (!DavitUtil.isNullOrUndefined(sequenceConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedSequence)) {\n\n            if (sequenceConfigurationToEdit!.initDatas.length > 0) {\n                return sequenceConfigurationToEdit!.initDatas.map(buildSequenceActorDataTableRow);\n            }\n\n            if (sequenceConfigurationToEdit!.initDatas.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no init datas declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getChainInitDatas = () => {\n        if (!DavitUtil.isNullOrUndefined(chainConfigurationToEdit) && !DavitUtil.isNullOrUndefined(selectedChain)) {\n\n            if (chainConfigurationToEdit!.initDatas.length > 0) {\n                return chainConfigurationToEdit!.initDatas.map(buildChainActorDataTableRow);\n            }\n\n            if (chainConfigurationToEdit!.initDatas.length === 0) {\n                return (\n                    <div className=\"flex flex-center align-center\">\n                        <h2 className=\"padding-medium\">-- no init datas declared --</h2>\n                    </div>\n                );\n            }\n        }\n    };\n\n    const getNote = (): string => {\n        let noteToReturn: string = \"\";\n        if (!DavitUtil.isNullOrUndefined(selectedSequence)) {\n            noteToReturn = selectedSequence!.sequenceTO!.note;\n        }\n        if (!DavitUtil.isNullOrUndefined(selectedChain)) {\n            noteToReturn = selectedChain!.chain.note;\n        }\n        return noteToReturn;\n    };\n\n// ===============================================================================================================\n\n    return (\n        <div className=\"configurationPanel border border-medium\">\n\n            {/*----- Header -----*/}\n            <div className=\"configurationPanelHeader content-space-around align-center padding-medium\">\n\n                <div className=\"flex align-center\">\n                    <h3 className={sequenceOptions ? \"clickAble\" : \"selectedColor\"}\n                        onClick={() => toggleSequenceChain(false)}\n                    >Chain</h3>\n                    <div className=\"padding-horizontal-m\">\n\n                        <DavitToggleButton\n                            toggle={() => toggleSequenceChain()}\n                            value={sequenceOptions}\n                        />\n                    </div>\n                    <h3 className={sequenceOptions ? \"selectedColor\" : \"clickAble\"}\n                        onClick={() => toggleSequenceChain(true)}\n                    >Sequence</h3>\n                </div>\n\n                {sequenceOptions && <SequenceDropDown onSelect={(sequence) => {\n                    setSequence(sequence?.id);\n                }}\n                                                      value={selectedSequence?.sequenceTO.id}\n\n                />}\n                {!sequenceOptions && <ChainDropDown onSelect={setChain}\n                                                    value={selectedChain?.chain.id}\n                />}\n\n                {(selectedSequence !== null || selectedChain !== null)\n                && < DavitShowMoreButton onClick={setShowMore}\n                                         show={showMore}\n                                         size={ElementSize.medium}\n                />}\n\n            </div>\n\n            {/* --------------- Body ---------------*/}\n            {(selectedSequence || selectedChain) && showMore &&\n            <div className=\"configurationBody flex border-top border-medium\">\n\n                <div className=\"configurationStateColumn flex flex-column width-fluid\">\n\n                    {/*------ configuration ------*/}\n                    <div className=\"flex content-space-around align-center padding-small border-bottom border-medium\">\n\n                        <h2>Configuration</h2>\n\n                        {selectedSequence && <SequenceConfigurationDropDown\n                            onSelectCallback={setSequenceConfiguration}\n                            sequenceId={selectedSequence?.sequenceTO?.id}\n                            selectedSequenceConfiguration={sequenceConfigurationToEdit?.id}\n                        />}\n\n                        {sequenceConfigurationToEdit?.id !== -1 &&\n                        <DavitDeleteButton onClick={deleteSequenceConfiguration} />}\n\n                    </div>\n\n                    {/*------ note -----*/}\n                    <div className=\"flex flex-center padding-small\">\n                        <NoteIcon size=\"2x\"\n                                  className=\"margin-medium padding-small border border-medium\"\n                        />\n                        <textarea className=\"noteTextarea border border-medium padding-medium\"\n                                  value={getNote()}\n                                  readOnly\n                        />\n                    </div>\n\n                    <div>\n                        {/*/!*----- States -----*!/*/}\n                        <div className=\"configurationHeader flex flex-center align-center\">\n                            <h1 className=\"padding-medium\">{selectedSequence ? \"Sequence States\" : \"Chain States\"}</h1>\n                        </div>\n\n                        {/*    State*/}\n                        <div className=\"configList padding-bottom-l\">\n                            {getSequenceStates()}\n                            {getChainStates()}\n                        </div>\n\n                    </div>\n\n                    <div className=\"flex-inline flex-wrap flex-column\">\n                        {/*    Data setup*/}\n                        <div className=\"configurationHeader flex flex-center align-center\">\n                            <h1 className=\"padding-medium\">Data-Setup</h1>\n                        </div>\n\n                        <div className=\"configurationPanelHeader content-space-around align-center border-bottom border-medium\">\n                            <label>Actor</label>\n                            <label>Data Instance</label>\n                            <DavitAddButton onClick={selectedSequence ? createSequenceInitData : createChainInitData} />\n                        </div>\n\n                        <div className=\"configList padding-bottom-l\">\n                            {getSequenceInitDatas()}\n                            {getChainInitDatas()}\n                        </div>\n\n                    </div>\n                    <div className=\"flex content-space-around padding-small border-top border-medium\">\n\n                        <DavitIconButton onClick={() => setShowSaveConfiguration(true)}\n                                         iconLeft={false}\n                                         iconName={DavitIcons.save}\n                                         className=\"greenBorder\"\n                        >Save Config</DavitIconButton>\n\n                        <DavitIconButton onClick={runCalc}\n                                         iconLeft={false}\n                                         iconName={DavitIcons.play}\n                                         className=\"calcButton\"\n                        >Calculate</DavitIconButton>\n                    </div>\n                </div>\n            </div>}\n\n            {showSaveConfiguration && <SaveConfigurationModal onSaveCallback={saveSequenceConfiguration}\n                                                              onCloseCallback={() => setShowSaveConfiguration(false)}\n                                                              name={sequenceConfigurationToEdit?.name || \"\"}\n            />}\n        </div>);\n};\n","import React, { FunctionComponent } from \"react\";\nimport { ConfigurationPanel } from \"../../../../../configurationPanel/Configuration\";\nimport { ControlPanel } from \"../../edit/common/ControlPanel\";\n\nexport interface ControlPanelConfigurationProps {\n\n}\n\nexport const ControlPanelConfiguration: FunctionComponent<ControlPanelConfigurationProps> = () => {\n\n    return (\n        <ControlPanel>\n            <ConfigurationPanel />\n        </ControlPanel>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Mode } from \"../../../../../../slices/EditSlice\";\nimport { ControlPanelCalculationView } from \"./fragments/ControlPanelCalculationView\";\nimport { ControlPanelConfiguration } from \"./fragments/ControlPanelConfiguration\";\n\nexport interface ControlPanelViewControllerProps {\n    mode: Mode;\n}\n\nexport const ControlPanelViewController: FunctionComponent<ControlPanelViewControllerProps> = (props) => {\n\n    const {mode} = props;\n\n    const getViewByMode = (mode: Mode) => {\n        switch (mode) {\n            case Mode.VIEW_CONFIGURATION:\n                return <ControlPanelConfiguration />;\n            case Mode.VIEW:\n                return <ControlPanelCalculationView />;\n            default:\n                return <ControlPanelConfiguration />;\n        }\n    };\n\n    return (getViewByMode(mode));\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditActions, editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { ControlPanelEditController } from \"./fragments/edit/ControlPanelEditController\";\nimport { ControlPanelFileController } from \"./fragments/file/ControlPanelFileController\";\nimport { ControlPanelTabController } from \"./fragments/tabs/ControlPanelTabController\";\nimport { ControlPanelViewController } from \"./fragments/view/ControllPanelViewController\";\n\nexport interface ControlPanelProps {\n}\n\nexport const ControlPanelController: FunctionComponent<ControlPanelProps> = () => {\n    const {mode} = useControlPanelViewModel();\n\n    const useGetViewByMode = (mode: Mode) => {\n        if (!DavitUtil.isNullOrUndefined(mode)) {\n            if (mode.includes(\"EDIT\")) {\n                return <ControlPanelEditController />;\n            }\n            if (mode.includes(\"VIEW\")) {\n                return <ControlPanelViewController mode={mode} />;\n            }\n            if (mode.includes(\"FILE\")) {\n                return <ControlPanelFileController />;\n            }\n            if (mode.includes(\"TAB\")) {\n                return <ControlPanelTabController hidden={!mode.includes(\"TAB\")} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"controllerHeader\">\n            {useGetViewByMode(mode)}\n        </div>\n    );\n};\n\nconst useControlPanelViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    const onClickNavItem = (mode: string) => {\n        switch (mode) {\n            case \"EDIT\":\n                dispatch(EditActions.setMode.edit());\n                break;\n            case \"DATA\":\n                dispatch(EditActions.setMode.editData());\n                break;\n            case \"DATASETUP\":\n                dispatch(EditActions.setMode.editSequenceConfiguration());\n                break;\n            case \"SEQUENCE\":\n                dispatch(EditActions.setMode.editSequence());\n                break;\n            // TODO: check how to activate these since they need an object\n            // case \"STEP\":\n            //   dispatch(EditActions.setMode.editStep());\n            //   break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editDecision());\n            //   break;\n            case \"CHAIN\":\n                dispatch(EditActions.setMode.editChain());\n                break;\n            // case \"DECISION\":\n            //   dispatch(EditActions.setMode.editChainDecision());\n            //   break;\n            default:\n                break;\n        }\n    };\n\n    return {mode, onClickNavItem};\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logo from \"../../../assets/exxcellent_logo_200.png\";\nimport { DAVIT_VERISON } from \"../../../DavitConstants\";\nimport { EditActions, editSelectors, Mode } from \"../../../slices/EditSlice\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./SidePanel.css\";\n\nexport interface SidePanelProps {\n}\n\nexport const SidePanelController: FunctionComponent<SidePanelProps> = () => {\n    const {setModeToEdit, setModeToFile, setModeToConfiguration, mode} = useSidePanelViewModel();\n\n    return (\n        <div className=\"leftPanel\">\n            <DavitIconButton iconName={DavitIcons.pencil}\n                             size={ElementSize.large}\n                             className={\"sidePanelButton\" + ((mode.includes(Mode.EDIT.toString()) && mode !== Mode.VIEW_CONFIGURATION) ? \" active\" : \"\")}\n                             onClick={setModeToEdit}\n            />\n            <DavitIconButton iconName={DavitIcons.eye}\n                             className={\"sidePanelButton\" + (mode === Mode.VIEW || mode === Mode.VIEW_CONFIGURATION ? \" active\" : \"\")}\n                             onClick={setModeToConfiguration}\n            />\n            <DavitIconButton iconName={DavitIcons.file}\n                             className={\"sidePanelButton\" + (mode === Mode.FILE ? \" active\" : \"\")}\n                             onClick={setModeToFile}\n            />\n            {/*TODO: enable wenn tabs are fixed!*/}\n            {/*<DavitSidePanelButton icon=\"external alternate\" onClick={setModeToTab} active={mode === Mode.TAB} />*/}\n\n            <div style={{position: \"absolute\", bottom: \"1em\"}}>\n                <img src={logo}\n                     alt=\"fireSpot\"\n                />\n                <div className=\"verticalLabel\">DAVIT by</div>\n                <label style={{color: \"white\", position: \"absolute\", bottom: \"0\"}}>\n                    v {DAVIT_VERISON}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst useSidePanelViewModel = () => {\n    const dispatch = useDispatch();\n    const mode = useSelector(editSelectors.selectMode);\n\n    const setModeToEdit = () => {\n        dispatch(EditActions.setMode.edit());\n    };\n\n    const setModeToConfiguration = () => {\n        dispatch(EditActions.setMode.editConfiguration());\n    };\n\n    const setModeToFile = () => {\n        dispatch(EditActions.setMode.file());\n    };\n\n    const setModeToTab = () => {\n        dispatch(EditActions.setMode.tab());\n    };\n\n    return {\n        setModeToEdit,\n        setModeToConfiguration,\n        setModeToFile,\n        setModeToTab,\n        mode,\n    };\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Arrow, ArrowType, DavitPathHead, DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditActor } from \"../../slices/thunks/ActorThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface ActorModelControllerProps {\n}\n\nexport const ActorModelController: FunctionComponent<ActorModelControllerProps> = () => {\n\n        const {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements,\n            zoomIn,\n            zoomOut,\n            actorZoom,\n            onGeometricalDataUpdate,\n        } = useViewModel();\n\n        return (\n            <>\n                {toDnDElements.length === 0 &&\n                <div className=\"actorModel\">\n                    <h2 className={\"fluid flex flex-center\"}>{\"Create a new actor\"}</h2>\n                </div>}\n                {toDnDElements.length > 0 && <DnDBox\n                    onPositionUpdate={onPositionUpdate}\n                    toDnDElements={toDnDElements}\n                    svgElements={getArrows()}\n                    zoomIn={zoomIn}\n                    zoomOut={zoomOut}\n                    zoom={actorZoom}\n                    type={DnDBoxType.actor}\n                    onGeoUpdate={onGeometricalDataUpdate}\n                />}\n            </>\n        );\n    }\n;\n\nconst useViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        // ----- EDIT -----\n        const actorCTOToEdit: ActorCTO | null = useSelector(editSelectors.selectActorToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        const editArrow: Arrow | null = useSelector(editSelectors.selectEditActionArrow);\n        const editStepArrows: Arrow[] = useSelector(editSelectors.selectEditStepArrows);\n        // ----- VIEW -----\n        const arrows: Arrow[] = useSelector(sequenceModelSelectors.selectCurrentArrows);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const actorZoom: number = useSelector(globalSelectors.selectActorZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadActorsFromBackend());\n            dispatch(MasterDataActions.loadGroupsFromBackend());\n        }, [dispatch]);\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromActorData) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromActorData)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: (ViewFragmentProps | undefined)[] =\n                stepToEdit?.actions.map((action) => (action ? mapActionToActorDatas(action) : [])).flat(1) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps[] = actionToEdit ? mapActionToActorDatas(actionToEdit) : [];\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n\n            actorDatasFromStepToEdit.forEach((actorData) => {\n                actorData && actorDatas.push(actorData);\n            });\n\n            actorDatas.push(...actorDataFromDecisionToEdit);\n            actorDatas.push(...actorDataFromActionToEdit);\n\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            return propOne.parentId === propTwo.parentId && propOne.name === propTwo.name;\n        };\n\n        const mapActionToActorDatas = (actionItem: ActionTO): ViewFragmentProps[] => {\n            const viewFragmentProps: ViewFragmentProps[] = [];\n\n            if (actionItem.actionType !== ActionType.TRIGGER) {\n                const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n                const parentId = state === ActorDataState.SENT ? actionItem.sendingActorFk : actionItem.receivingActorFk;\n\n                viewFragmentProps.push({\n                    name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                    state: state,\n                    parentId: parentId,\n                });\n\n                if (actionItem.actionType === ActionType.SEND_AND_DELETE) {\n                    viewFragmentProps.push({\n                        name: getDataNameById(actionItem.dataFk, actionItem.instanceFk),\n                        state: ActorDataState.DELETED,\n                        parentId: actionItem.sendingActorFk,\n                    });\n                }\n            }\n            return viewFragmentProps;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getDataNameById(actorData.dataFk, actorData.instanceFk),\n                parentId: actorData.actorFk,\n                state: actorData.state,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: condition.actorFk,\n                name: getDataNameById(condition.dataFk, condition.instanceFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        // const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n        //     return {\n        //         parentId: initData.actorFk,\n        //         name: getDataNameById(initData.dataFk, initData.instanceFk),\n        //         state: ActorDataState.NEW,\n        //     };\n        // };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.SENT;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const actorCTO = actors.find((actorCTO) => actorCTO.geometricalData.position.id === positionId);\n            if (actorCTO) {\n                const copyActorCTO: ActorCTO = DavitUtil.deepCopy(actorCTO);\n                copyActorCTO.geometricalData.position.x = x;\n                copyActorCTO.geometricalData.position.y = y;\n                dispatch(EditActor.save(copyActorCTO));\n            }\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyActor: ActorCTO | undefined = DavitUtil.deepCopy(\n                actors.find((actor) => actor.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyActor) {\n                copyActor.geometricalData.geometricalData.width = width;\n                copyActor.geometricalData.geometricalData.height = height;\n                dispatch(EditActor.save(copyActor));\n            }\n        };\n\n        const actorsToDnDElements = (actors: ActorCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = actors\n                .filter((actor) => !(actorCTOToEdit && actorCTOToEdit.actor.id === actor.actor.id))\n                .map((actorr) => {\n                    return {\n                        element: <DavitCard {...actorToCard(actorr)} />,\n                        position: actorr.geometricalData.position,\n                        geometricalData: actorr.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add actor to edit\n            if (actorCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...actorToCard(actorCTOToEdit)} />,\n                    position: actorCTOToEdit.geometricalData.position,\n                    geometricalData: actorCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const actorToCard = (actor: ActorCTO): DavitCardProps => {\n            return {\n                id: actor.actor.id,\n                initName: actor.actor.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === actor.actor.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === actor.actor.id,\n                ),\n                zoomFactor: actorZoom,\n                type: \"ACTOR\",\n            };\n        };\n\n        const getArrows = (): DavitPathProps[] => {\n            const arrowProps: DavitPathProps[] = [];\n            let arrowsToDraw: Arrow[];\n\n            arrowsToDraw = arrows;\n\n            if (editArrow) {\n                arrowsToDraw.push(editArrow);\n            }\n            arrowsToDraw.push(...editStepArrows);\n\n            arrowsToDraw.forEach((arrowToDraw, index) => {\n                arrowProps.push({\n                    head: DavitPathHead.ARROW,\n                    id: index,\n                    labels: arrowToDraw.dataLabels,\n                    lineType: DavitPathTypes.SMOOTH,\n                    xSource: arrowToDraw.sourceGeometricalData.position.x,\n                    ySource: arrowToDraw.sourceGeometricalData.position.y,\n                    xTarget: arrowToDraw.targetGeometricalData.position.x,\n                    yTarget: arrowToDraw.targetGeometricalData.position.y,\n                    sourceHeight: arrowToDraw.sourceGeometricalData.geometricalData.height,\n                    sourceWidth: arrowToDraw.sourceGeometricalData.geometricalData.width,\n                    targetHeight: arrowToDraw.targetGeometricalData.geometricalData.height,\n                    targetWidth: arrowToDraw.targetGeometricalData.geometricalData.width,\n                    stroked: arrowToDraw.type === ArrowType.TRIGGER,\n                    // TODO: this is a bad place to set css color variable!\n                    lineColor: arrowToDraw.type === ArrowType.SEND ? \"var(--color-blue)\" : \"var(--color-black)\",\n                });\n            });\n            return arrowProps;\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.actorZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.actorZoomIn());\n        };\n\n        return {\n            onPositionUpdate,\n            getArrows,\n            toDnDElements: actorsToDnDElements(actors),\n            zoomIn,\n            zoomOut,\n            onGeometricalDataUpdate,\n            actorZoom,\n        };\n    }\n;\n","import React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitPathProps, DavitPathTypes } from \"../../components/atomic/svg/DavitPath\";\nimport { DavitCard, DavitCardProps } from \"../../components/molecules\";\nimport { DnDBox, DnDBoxElement, DnDBoxType } from \"../../components/organisms/dndBox/DnDBox\";\nimport { ActorCTO } from \"../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../dataAccess/access/cto/DataCTO\";\nimport { GeometricalDataCTO } from \"../../dataAccess/access/cto/GeometraicalDataCTO\";\nimport { SequenceStepCTO } from \"../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../dataAccess/access/to/ActionTO\";\nimport { ConditionTO } from \"../../dataAccess/access/to/ConditionTO\";\nimport { DataRelationTO } from \"../../dataAccess/access/to/DataRelationTO\";\nimport { DecisionTO } from \"../../dataAccess/access/to/DecisionTO\";\nimport { ActionType } from \"../../dataAccess/access/types/ActionType\";\nimport { editSelectors } from \"../../slices/EditSlice\";\nimport { GlobalActions, globalSelectors } from \"../../slices/GlobalSlice\";\nimport { MasterDataActions, masterDataSelectors } from \"../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { EditData } from \"../../slices/thunks/DataThunks\";\nimport { DavitUtil } from \"../../utils/DavitUtil\";\nimport { ActorData } from \"../../viewDataTypes/ActorData\";\nimport { ActorDataState } from \"../../viewDataTypes/ActorDataState\";\nimport { ViewFragmentProps } from \"../../viewDataTypes/ViewFragment\";\n\ninterface DataModelControllerProps {\n}\n\nexport const DataModelController: FunctionComponent<DataModelControllerProps> = () => {\n\n    const {\n        onPositionUpdate,\n        toDnDElements,\n        zoomIn,\n        zoomOut,\n        getRelations,\n        onGeometricalDataUpdate,\n        dataZoomFactor,\n    } = useMetaDataModelViewModel();\n\n    const createMetaDataDnDBox = () => {\n            return (\n                <>\n                    {toDnDElements.length === 0 &&\n                    <div className=\"dataModel\">\n                        <h2 className={\"fluid flex flex-center\"}>{\"Create a new data object\"}</h2>\n                    </div>}\n                    {toDnDElements.length > 0 && <DnDBox\n                        onPositionUpdate={onPositionUpdate}\n                        toDnDElements={toDnDElements}\n                        svgElements={getRelations()}\n                        zoomIn={zoomIn}\n                        zoomOut={zoomOut}\n                        zoom={dataZoomFactor}\n                        type={DnDBoxType.data}\n                        onGeoUpdate={onGeometricalDataUpdate}\n                    />}\n                </>\n            );\n        }\n    ;\n\n    return createMetaDataDnDBox();\n};\n\nconst useMetaDataModelViewModel = () => {\n        const dispatch = useDispatch();\n        // ====== SELECTORS =====\n        const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n        const dataCTOToEdit: DataCTO | null = useSelector(editSelectors.selectDataToEdit);\n        const dataRelations: DataRelationTO[] = useSelector(masterDataSelectors.selectRelations);\n        const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n        // ----- EDIT -----\n        const dataRelationToEdit: DataRelationTO | null = useSelector(editSelectors.selectRelationToEdit);\n        const stepToEdit: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n        const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n        const decisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n        const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n        // ----- VIEW -----\n        const actions: ActionTO[] = useSelector(sequenceModelSelectors.selectActions);\n\n        const currentActorDatas: ActorData[] = useSelector(sequenceModelSelectors.selectActorData);\n        const errors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n        const dataZoomFactor: number = useSelector(globalSelectors.selectDataZoomFactor);\n\n        React.useEffect(() => {\n            dispatch(MasterDataActions.loadDatasFromBackend());\n            dispatch(MasterDataActions.loadRelationsFromBackend());\n        }, [dispatch]);\n\n        const getActorNameById = (actorId: number): string => {\n            return actors.find((actor) => actor.actor.id === actorId)?.actor.name || \"Could not find Actor\";\n        };\n\n        const getActorDatas = () => {\n            const actorDatas: ViewFragmentProps[] = [];\n            actorDatas.push(...getActorDatasFromView());\n            actorDatas.push(...getActorDatasFromEdit());\n            return actorDatas;\n        };\n\n        const getActorDatasFromView = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            //Map and add errors to actor data's\n            const actorDatasFromErros: ViewFragmentProps[] = errors.map(mapErrorToActorDatas);\n            actorDatas.push(...actorDatasFromErros);\n            //Map and add actions to actor data's if there not already exist in actorDatas\n            const actorDatasFromActions: ViewFragmentProps[] = actions.map(mapActionToActorDatas);\n            actorDatas.push(\n                ...actorDatasFromActions.filter(\n                    (actorDataFromAction) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromAction)),\n                ),\n            );\n            //Map and add current Actor-Data's to actor data's if there not already exist in actorDatas\n            const actorDatasFromCurrentActorDatas: ViewFragmentProps[] = currentActorDatas\n                // We don't want to display \"old\" state of data.\n                .filter((actDat) => actDat.state !== ActorDataState.UPDATED_FROM)\n                .map(mapActorDataToViewFragment)\n                .sort((a, b) => a.name.localeCompare(b.name));\n            actorDatas.push(\n                ...actorDatasFromCurrentActorDatas.filter(\n                    (actorDataFromCurrentActorDatas) => !actorDatas.some((cp) => actorDataExists(cp, actorDataFromCurrentActorDatas)),\n                ),\n            );\n\n            return actorDatas;\n        };\n\n        const getActorDatasFromEdit = (): ViewFragmentProps[] => {\n            const actorDatas: ViewFragmentProps[] = [];\n            const actorDatasFromStepToEdit: ViewFragmentProps[] = stepToEdit?.actions.map(mapActionToActorDatas) || [];\n            const actorDataFromActionToEdit: ViewFragmentProps | undefined = actionToEdit\n                ? mapActionToActorDatas(actionToEdit)\n                : undefined;\n\n            const actorDataFromDecisionToEdit: ViewFragmentProps[] = mapDecisionToActorData(decisionToEdit);\n\n            actorDatas.push(...actorDatasFromStepToEdit);\n            actorDatas.push(...actorDataFromDecisionToEdit);\n\n            if (actorDataFromActionToEdit) {\n                actorDatas.push(actorDataFromActionToEdit);\n            }\n\n            if (conditionToEdit) {\n                actorDatas.push(mapConditionToActorData(conditionToEdit));\n            }\n            return actorDatas;\n        };\n\n        const mapErrorToActorDatas = (errorItem: ActionTO): ViewFragmentProps => {\n            const state: ActorDataState = mapErrorTypeToViewFragmentState(errorItem.actionType);\n\n            const parentId = state === ActorDataState.ERROR_SEND ? errorItem.sendingActorFk : errorItem.receivingActorFk;\n\n            return {\n                name: getDataNameById(errorItem.dataFk, errorItem.instanceFk),\n                state: state,\n                parentId: parentId,\n            };\n        };\n\n        function mapActionToActorDatas(actionItem: ActionTO): ViewFragmentProps {\n            const state: ActorDataState = mapActionTypeToViewFragmentState(actionItem.actionType);\n            return {\n                name: getActorNameById(actionItem.receivingActorFk),\n                state: state,\n                parentId: actionItem.dataFk,\n            };\n        }\n\n        const mapActorDataToViewFragment = (actorData: ActorData): ViewFragmentProps => {\n            return {\n                name: getActorNameById(actorData.actorFk),\n                parentId: {dataId: actorData.dataFk, instanceId: actorData.instanceFk},\n                state: ActorDataState.PERSISTENT,\n            };\n        };\n\n        const mapDecisionToActorData = (decision: DecisionTO | null): ViewFragmentProps[] => {\n            let props: ViewFragmentProps[] = [];\n            if (decision) {\n                if (decision.conditions !== undefined && decision.conditions.length > 0) {\n                    props = decision.conditions.map((condition) => {\n                        return mapConditionToActorData(condition);\n                    });\n                }\n            }\n            return props;\n        };\n\n        const mapConditionToActorData = (condition: ConditionTO): ViewFragmentProps => {\n            return {\n                parentId: {dataId: condition.dataFk, instanceId: condition.instanceFk},\n                name: getActorNameById(condition.actorFk),\n                state: ActorDataState.CHECKED,\n            };\n        };\n\n        // const mapInitDataToActorData = (initData: InitDataTO): ViewFragmentProps => {\n        //     return {\n        //         parentId:\n        //             initData.instanceFk > -1\n        //                 ? {dataId: initData.dataFk, instanceId: initData.instanceFk}\n        //                 : initData.dataFk,\n        //         name: getActorNameById(initData.actorFk),\n        //         state: ActorDataState.NEW,\n        //     };\n        // };\n\n        const actorDataExists = (propOne: ViewFragmentProps, propTwo: ViewFragmentProps) => {\n            const dataId1 = (propOne.parentId as { dataId: number; instanceId: number }).dataId || propOne.parentId;\n            const instanceId1 = (propOne.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            const dataId2 = (propTwo.parentId as { dataId: number; instanceId: number }).dataId || propTwo.parentId;\n            const instanceId2 = (propTwo.parentId as {\n                dataId: number;\n                instanceId: number;\n            }).instanceId;\n            return (\n                (dataId1 === dataId2 || propOne.parentId === propTwo.parentId) &&\n                propOne.name === propTwo.name &&\n                (!(instanceId1 || instanceId2) || instanceId1 === instanceId2)\n            );\n        };\n\n        const mapActionTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.DELETED;\n                    break;\n                case ActionType.SEND:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.NEW;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const mapErrorTypeToViewFragmentState = (actionType: ActionType): ActorDataState => {\n            let cdState: ActorDataState;\n            switch (actionType) {\n                case ActionType.ADD:\n                    cdState = ActorDataState.ERROR_ADD;\n                    break;\n                case ActionType.DELETE:\n                    cdState = ActorDataState.ERROR_DELETE;\n                    break;\n                case ActionType.SEND:\n                case ActionType.SEND_AND_DELETE:\n                    cdState = ActorDataState.ERROR_SEND;\n                    break;\n                case ActionType.TRIGGER:\n                    cdState = ActorDataState.PERSISTENT;\n                    break;\n            }\n            return cdState;\n        };\n\n        const getDataNameById = (dataId: number, instanceId?: number): string => {\n            let dataName: string = \"Could not find Data\";\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === dataId);\n            if (data) {\n                dataName = data.data.name;\n                if (instanceId !== undefined && instanceId !== -1) {\n                    dataName =\n                        dataName +\n                        \" - \" +\n                        (data.data.instances.find((inst) => inst.id === instanceId)?.name ||\n                            \"Could not find instance Name\");\n                }\n            }\n            return dataName;\n        };\n\n        const onPositionUpdate = (x: number, y: number, positionId: number) => {\n            const dataCTO = datas.find((data) => data.geometricalData.position.id === positionId);\n            if (dataCTO) {\n                const copyDataCTO: DataCTO = DavitUtil.deepCopy(dataCTO);\n                copyDataCTO.geometricalData.position.x = x;\n                copyDataCTO.geometricalData.position.y = y;\n                dispatch(EditData.save(copyDataCTO));\n            }\n        };\n\n        const dataToDnDElements = (datas: DataCTO[]): DnDBoxElement[] => {\n            let dndBoxElements: DnDBoxElement[];\n            dndBoxElements = datas\n                .filter((data) => !(dataCTOToEdit && dataCTOToEdit.data.id === data.data.id))\n                .map((dataa) => {\n                    return {\n                        element: <DavitCard {...dataToCard(dataa)} />,\n                        position: dataa.geometricalData.position,\n                        geometricalData: dataa.geometricalData.geometricalData,\n                    };\n                })\n                .filter((item) => item !== undefined);\n            // add data to edit\n            if (dataCTOToEdit) {\n                dndBoxElements.push({\n                    element: <DavitCard {...dataToCard(dataCTOToEdit)} />,\n                    position: dataCTOToEdit.geometricalData.position,\n                    geometricalData: dataCTOToEdit.geometricalData.geometricalData,\n                });\n            }\n            return dndBoxElements;\n        };\n\n        const dataToCard = (data: DataCTO): DavitCardProps => {\n            return {\n                id: data.data.id,\n                initName: data.data.name,\n                initWidth: 100,\n                initHeight: 30,\n                dataFragments: getActorDatas().filter(\n                    (act) =>\n                        act.parentId === data.data.id ||\n                        (act.parentId as { dataId: number; instanceId: number }).dataId === data.data.id,\n                ),\n                instances: data.data.instances,\n                zoomFactor: dataZoomFactor,\n                type: \"DATA\",\n            };\n        };\n\n        const zoomOut = (): void => {\n            dispatch(GlobalActions.dataZoomOut());\n        };\n\n        const zoomIn = (): void => {\n            dispatch(GlobalActions.dataZoomIn());\n        };\n\n        const getGeometricalData = (dataId: number): GeometricalDataCTO | undefined => {\n            return datas.find((data) => data.data.id === dataId)?.geometricalData || undefined;\n        };\n\n        const relationToDavitPath = (relation: DataRelationTO, id: number, isEdit?: boolean): DavitPathProps => {\n            const sourceGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data1Fk);\n            const targetGeometricalData: GeometricalDataCTO | undefined = getGeometricalData(relation.data2Fk);\n\n            return {\n                id: id,\n                labels: [],\n                lineType: DavitPathTypes.GRID,\n                xSource: sourceGeometricalData?.position.x || 0,\n                ySource: sourceGeometricalData?.position.y || 0,\n                xTarget: targetGeometricalData?.position.x || 0,\n                yTarget: targetGeometricalData?.position.y || 0,\n                sourceHeight: sourceGeometricalData?.geometricalData.height || 0,\n                sourceWidth: sourceGeometricalData?.geometricalData.width || 0,\n                targetHeight: targetGeometricalData?.geometricalData.height || 0,\n                targetWidth: targetGeometricalData?.geometricalData.width || 0,\n                stroked: isEdit,\n                sourceDirection: relation.direction1,\n                targetDirection: relation.direction2,\n            };\n        };\n\n        const getRelations = (): DavitPathProps[] => {\n            let dataRelationsProps: DavitPathProps[] = [];\n\n            let copyDataRelations: DataRelationTO[] = DavitUtil.deepCopy(dataRelations);\n\n            if (dataRelationToEdit) {\n                copyDataRelations = copyDataRelations.filter((relation) => relation.id !== dataRelationToEdit.id);\n                if (isRelationReadyToDraw(dataRelationToEdit)) {\n                    dataRelationsProps.push(relationToDavitPath(dataRelationToEdit, dataRelationToEdit.id, true));\n                }\n            }\n\n            copyDataRelations.forEach((rel) => dataRelationsProps.push(relationToDavitPath(rel, rel.id)));\n            return dataRelationsProps;\n        };\n\n        const isRelationReadyToDraw = (dataRelation: DataRelationTO): boolean => {\n            return (dataRelation.data1Fk !== -1 && dataRelation.data2Fk !== -1);\n        };\n\n        const onGeometricalDataUpdate = (width: number, height: number, geoId: number) => {\n            const copyData: DataCTO | undefined = DavitUtil.deepCopy(\n                datas.find((data) => data.geometricalData.geometricalData.id === geoId),\n            );\n            if (copyData) {\n                copyData.geometricalData.geometricalData.width = width;\n                copyData.geometricalData.geometricalData.height = height;\n                dispatch(EditData.save(copyData));\n            }\n        };\n\n        return {\n            onPositionUpdate,\n            toDnDElements: dataToDnDElements(datas),\n            zoomIn,\n            zoomOut,\n            getRelations,\n            onGeometricalDataUpdate,\n            dataZoomFactor,\n        };\n    }\n;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ChainStateTO } from \"../../dataAccess/access/to/ChainStateTO\";\nimport { SequenceStateTO } from \"../../dataAccess/access/to/SequenceStateTO\";\nimport { StateTO } from \"../../dataAccess/access/to/StateTO\";\nimport { sequenceModelSelectors } from \"../../slices/SequenceModelSlice\";\nimport { DavitShowMoreButton } from \"../atomic\";\nimport \"./StateView.css\";\n\ninterface StateViewProps {\n    showChain: boolean;\n}\n\nexport const StateView: FunctionComponent<StateViewProps> = (props) => {\n    const {showChain} = props;\n\n    const sequenceStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectSequence)?.sequenceStates || [];\n    const chainStates: ChainStateTO[] = useSelector(sequenceModelSelectors.selectChainCTO)?.chainStates || [];\n\n    const falseStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectFalseStates);\n    const trueStates: SequenceStateTO[] = useSelector(sequenceModelSelectors.selectTrueStates);\n\n    const HEADER: string = \"State\";\n    const [showStates, setShowStates] = useState<boolean>(false);\n\n    const buildStateRow = (state: StateTO, index: number): JSX.Element => {\n\n            const stateIsTrue: boolean = trueStates.some(trueState => trueState.id === state.id);\n            const stateIsFalse: boolean = falseStates.some(falseState => falseState.id === state.id);\n\n            return (\n                <div key={index}\n                     className={\"stateViewState flex content-space-between \" + (index !== 0 ? \"stateViewBorder\" : \"\")}\n                >\n                    <div className=\"flex flex-start align-center padding-small\">\n                        <label>{state.label}</label>\n                    </div>\n\n                    <div className=\"flex flex-end align-center padding-small\">\n                        <svg className=\"stateViewSvgField\">\n                            <line className={state.isState ? \"stateViewIsTrue\" : \"stateViewIsFalse\"}\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"1rem\"\n                                  y2=\"0\"\n                            />\n                        </svg>\n                        {stateIsTrue && <div className=\"gg-check-o\" />}\n                        {stateIsFalse && <div className=\"gg-close-o\" />}\n                        {!stateIsFalse && !stateIsTrue && <div className=\"stateViewSpacer\" />}\n                    </div>\n                </div>\n            );\n        }\n    ;\n\n    return (\n        <div className=\"stateView flex flex-column border border-small\">\n            <div className=\"stateViewHeader flex content-space-between padding-small\">\n                <label>{HEADER}</label>\n                <DavitShowMoreButton show={showStates}\n                                     onClick={setShowStates}\n                />\n            </div>\n            {showStates && <div className=\"flex flex-column\">\n                {!showChain && sequenceStates.map((state, index) => buildStateRow(state, index))}\n                {showChain && chainStates.map((state, index) => buildStateRow(state, index))}\n            </div>}\n\n        </div>\n    );\n};\n\n","import React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { ArcherContainer, ArcherElement, Relation } from \"react-archer\";\nimport { useSelector } from \"react-redux\";\nimport { StateView } from \"../../../components/molecules/StateView\";\nimport { ChainCTO } from \"../../../dataAccess/access/cto/ChainCTO\";\nimport { ChainLinkCTO } from \"../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ChainDecisionTO } from \"../../../dataAccess/access/to/ChainDecisionTO\";\nimport { DecisionTO } from \"../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Terminal } from \"../../../dataAccess/access/types/GoToType\";\nimport { GoToChain, GoToTypesChain, TerminalChain } from \"../../../dataAccess/access/types/GoToTypeChain\";\nimport { CalcChain } from \"../../../services/SequenceChainService\";\nimport { sequenceModelSelectors } from \"../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../utils/DavitUtil\";\nimport \"./FlowChart.css\";\n\ninterface FlowChartControllerProps {\n}\n\nexport const FlowChartController: FunctionComponent<FlowChartControllerProps> = () => {\n        const {\n            nodeModelTree,\n            calcSteps,\n            calcLinkIds,\n            lineColor,\n            currentStepId,\n            nodeModelChainTree,\n            currentLinkId,\n            chain,\n            sequence,\n            chainLineColor,\n        } = useFlowChartViewModel();\n\n        const [showChain, setShowChain] = useState<boolean>(false);\n        useEffect(() => {\n            setShowChain(!DavitUtil.isNullOrUndefined(chain));\n        }, [chain]);\n        const parentRef = useRef<HTMLDivElement>(null);\n        const [tableHeight, setTableHeight] = useState<number>(0);\n\n        // TODO: move this in to custom hook in WindowUtils\n        useEffect(() => {\n            const resizeListener = () => {\n                if (parentRef && parentRef.current) {\n                    setTableHeight(parentRef.current.offsetHeight);\n                }\n            };\n\n            resizeListener();\n            window.addEventListener(\"resize\", resizeListener);\n\n            return () => {\n                window.removeEventListener(\"resize\", resizeListener);\n            };\n        }, [parentRef]);\n\n        const buildSequenceChart = (node: NodeModel): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? lineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcSteps.find((step) => step === node.parentId) && calcSteps.find((step) => step === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div\n                            className={node.id === \"root\" ? \"ROOT\" : node.leafType}\n                            id={currentStepId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.id === \"root\" || node.leafType === GoToTypes.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypes.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildSequenceChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildChainChart = (node: NodeModelChain): JSX.Element => {\n            const rel: Relation[] = [];\n\n            if (node.parentId) {\n                rel.push({\n                    targetId: node.parentId,\n                    targetAnchor: \"bottom\",\n                    sourceAnchor: \"top\",\n                    style: {\n                        strokeColor:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? chainLineColor()\n                                : \"var(--background-color-header)\",\n                        strokeWidth:\n                            calcLinkIds?.find((link) => link === node.parentId) &&\n                            calcLinkIds.find((link) => link === node.id)\n                                ? 5\n                                : 3,\n                    },\n                });\n            }\n\n            return (\n                <div className=\"flowChartFlex\"\n                     style={{margin: node.id === \"root\" ? \"\" : \"50px 0\"}}\n                     key={node.id}\n                >\n                    <ArcherElement id={node.id}\n                                   relations={rel}\n                    >\n                        <div className={node.leafType}\n                             id={currentLinkId === node.id ? \"flowChartCurrentStep\" : \"\"}\n                        >\n                            {node.leafType === GoToTypesChain.DEC ? \"\" : node.label}\n                        </div>\n                    </ArcherElement>\n                    {node.leafType === GoToTypesChain.DEC && <div className=\"condLabel\">{node.label}</div>}\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\",\n                            alignItems: \"start\",\n                            width: \"100%\",\n                        }}\n                    >\n                        {node.childs.map(buildChainChart)}\n                    </div>\n                </div>\n            );\n        };\n\n        const buildFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildSequenceChart(nodeModelTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const buildChainFlowChart = (): JSX.Element => {\n            return (\n                <ArcherContainer noCurves={true}\n                                 arrowLength={0}\n                >\n                    {buildChainChart(nodeModelChainTree)}\n                </ArcherContainer>\n            );\n        };\n\n        const renderFlowChart = (): boolean => {\n            return !(!sequence && !chain);\n        };\n\n        return (\n            <div className=\"flowChartModel\"\n                 ref={parentRef}\n            >\n                {!renderFlowChart() &&\n                <h2 className={\"fluid flex flex-center\"}>{\"Select a sequence or chain to see the flow chart\"}</h2>\n                }\n\n                {renderFlowChart() &&\n                <div className=\"flowChart padding-small\"\n                     style={{height: tableHeight}}\n                >\n                    <div className=\"flowChartHeader\">\n                        <StateView showChain={showChain} />\n                    </div>\n                    {!showChain && sequence && buildFlowChart()}\n                    {showChain && chain && buildChainFlowChart()}\n                </div>}\n            </div>\n        );\n    }\n;\n\n// ------------------------------------------- Interfaces ------------------------------------------------------------\n\ninterface NodeModel {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypes;\n    childs: NodeModel[];\n}\n\ninterface NodeModelChain {\n    parentId?: string;\n    id: string;\n    label: string;\n    leafType: GoToTypesChain;\n    childs: NodeModelChain[];\n}\n\ninterface Node {\n    value: SequenceStepCTO | DecisionTO | Terminal;\n    isLoop: boolean;\n    type: GoToTypes;\n}\n\ninterface NodeChain {\n    value: ChainLinkCTO | ChainDecisionTO | TerminalChain;\n    isLoop: boolean;\n    type: GoToTypesChain;\n}\n\n// ------------------------------------------- View model ------------------------------------------------------------\n\nconst useFlowChartViewModel = () => {\n        const sequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n        const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n        const stepIds: string[] = useSelector(sequenceModelSelectors.selectCalcStepIds);\n        const chain: ChainCTO | null = useSelector(sequenceModelSelectors.selectChainCTO);\n        const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n        const currentStepId: string = useSelector(sequenceModelSelectors.selectCurrentStepId);\n        const currentLinkId: string = useSelector(sequenceModelSelectors.selectCurrentLinkId);\n\n        const getRoot = (sequence: SequenceCTO | null): Node => {\n            const root: Node = {\n                type: GoToTypes.ERROR,\n                value: {type: GoToTypes.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                const rootStep: SequenceStepCTO | undefined = sequence!.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.root,\n                );\n                const rootCond: DecisionTO | undefined = sequence!.decisions.find((cond) => cond.root);\n\n                if (rootStep && !rootCond) {\n                    root.type = GoToTypes.STEP;\n                    root.value = rootStep;\n                }\n                if (rootCond && !rootStep) {\n                    root.type = GoToTypes.DEC;\n                    root.value = rootCond;\n                }\n            }\n            return root;\n        };\n\n        const getChainRoot = (chain: ChainCTO | null): NodeChain => {\n            const root: NodeChain = {\n                type: GoToTypesChain.ERROR,\n                value: {type: GoToTypesChain.ERROR},\n                isLoop: false,\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                const rootStep: ChainLinkCTO | undefined = chain!.links.find((link) => link.chainLink.root);\n                if (rootStep) {\n                    root.type = GoToTypesChain.LINK;\n                    root.value = rootStep;\n                }\n            }\n            return root;\n        };\n\n        const setGoToAsNode = (goto: GoTo, parentId: string, parentIds: string[]): NodeModel => {\n            const nodeModel: NodeModel = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(sequence)) {\n                switch (goto.type) {\n                    case GoToTypes.STEP:\n                        // eslint-disable-next-line no-case-declarations\n                        const step: SequenceStepCTO | null =\n                            sequence!.sequenceStepCTOs.find((step) => step.sequenceStepTO.id === goto.id) || null;\n                        if (step) {\n                            const prefix: string = \"_STEP_\" + step.sequenceStepTO.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = step.sequenceStepTO.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(step.sequenceStepTO.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypes.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const cond: DecisionTO | null = sequence!.decisions.find((cond) => cond.id === goto.id) || null;\n                        if (cond) {\n                            const prefix: string = \"_DEC_\" + cond.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = cond.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNode(cond.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNode(cond.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypes.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypes.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                    case GoToTypes.IDLE:\n                        nodeModel.id = parentId + \"_IDLE\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const setGoToAsNodeChain = (goto: GoToChain, parentId: string, parentIds: string[]): NodeModelChain => {\n            const nodeModel: NodeModelChain = {\n                id: \"\",\n                label: \"\",\n                leafType: goto.type,\n                parentId: parentId,\n                childs: [],\n            };\n            if (!DavitUtil.isNullOrUndefined(chain)) {\n                switch (goto.type) {\n                    case GoToTypesChain.LINK:\n                        // eslint-disable-next-line no-case-declarations\n                        const link: ChainLinkCTO | null =\n                            chain!.links.find((link) => link.chainLink.id === goto.id) || null;\n                        if (link) {\n                            const prefix: string = \"_LINK_\" + link.chainLink.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = link.chainLink.name;\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(link.chainLink.goto, nodeModel.id, parentIds));\n                            }\n                        }\n                        break;\n                    case GoToTypesChain.DEC:\n                        // eslint-disable-next-line no-case-declarations\n                        const decision: ChainDecisionTO | null = chain!.decisions.find((dec) => dec.id === goto.id) || null;\n                        if (decision) {\n                            const prefix: string = \"_DEC_\" + decision.id;\n                            nodeModel.id = parentId + prefix;\n                            nodeModel.label = decision.name;\n\n                            if (!parentId.includes(prefix)) {\n                                parentIds.push(nodeModel.id);\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.ifGoTo, nodeModel.id, parentIds));\n                                nodeModel.childs.push(setGoToAsNodeChain(decision.elseGoTo, nodeModel.id, parentIds));\n                            }\n                            break;\n                        }\n                        break;\n                    case GoToTypesChain.ERROR:\n                        nodeModel.id = parentId + \"_ERROR\";\n                        break;\n                    case GoToTypesChain.FIN:\n                        nodeModel.id = parentId + \"_FIN\";\n                        break;\n                }\n            }\n            return nodeModel;\n        };\n\n        const getDataSetup = (): Node => {\n            const initData: Node = {isLoop: false, type: GoToTypes.STEP, value: new SequenceStepCTO()};\n            if (sequence) {\n                const root: Node = getRoot(sequence);\n                if ((root.value as SequenceStepCTO).actions) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.STEP,\n                        id: (root.value as SequenceStepCTO).sequenceStepTO.id,\n                    };\n                }\n                if ((root.value as DecisionTO).elseGoTo) {\n                    (initData.value as SequenceStepCTO).sequenceStepTO.goto = {\n                        type: GoToTypes.DEC,\n                        id: (root.value as DecisionTO).id,\n                    };\n                }\n                initData.isLoop = false;\n            }\n            return initData;\n        };\n\n        const buildNodeModelTree = (node: Node): NodeModel => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModel = {id: \"root\", label: \"\", leafType: node.type, childs: []};\n            switch (node.type) {\n                case GoToTypes.STEP:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as SequenceStepCTO).sequenceStepTO.name;\n                    nodeModel.childs.push(\n                        setGoToAsNode((node.value as SequenceStepCTO).sequenceStepTO.goto, nodeModel.id, parentIds),\n                    );\n                    break;\n                case GoToTypes.DEC:\n                    parentIds.push(nodeModel.id);\n                    nodeModel.label = (node.value as DecisionTO).name;\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).ifGoTo, nodeModel.id, parentIds));\n                    nodeModel.childs.push(setGoToAsNode((node.value as DecisionTO).elseGoTo, nodeModel.id, parentIds));\n                    break;\n            }\n            return nodeModel;\n        };\n\n        const buildNodeModelChainTree = (node: NodeChain): NodeModelChain => {\n            const parentIds: string[] = [];\n            const nodeModel: NodeModelChain = {id: \"\", label: \"\", leafType: node.type, childs: []};\n            parentIds.push(nodeModel.id);\n            if ((node.value as ChainLinkCTO).chainLink) {\n                nodeModel.id = (node.value as ChainLinkCTO).chainLink.id.toString();\n                nodeModel.label = (node.value as ChainLinkCTO).chainLink.name;\n                nodeModel.childs.push(\n                    setGoToAsNodeChain((node.value as ChainLinkCTO).chainLink.goto, nodeModel.id, parentIds),\n                );\n            }\n            return nodeModel;\n        };\n\n        const getSteps = (): string[] => {\n            return DavitUtil.deepCopy(stepIds);\n        };\n\n        //TODO: do not use css variables here\n        const getLineColor = (): string => {\n            if (terminalStep) {\n                switch (terminalStep.type) {\n                    case GoToTypes.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypes.FIN:\n                        return \"var(--color-green)\";\n                    case GoToTypes.IDLE:\n                        return \"var(--color-blue)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        //TODO: do not use css variables here\n        const getChainLineColor = (): string => {\n            if (calcChain) {\n                switch (calcChain.terminal.type) {\n                    case GoToTypesChain.ERROR:\n                        return \"var(--color-error)\";\n                    case GoToTypesChain.FIN:\n                        return \"var(--color-green)\";\n                }\n            } else {\n                return \"#FF00FF\";\n            }\n        };\n\n        return {\n            nodeModelTree: buildNodeModelTree(getDataSetup()),\n            nodeModelChainTree: buildNodeModelChainTree(getChainRoot(chain)),\n            currentStepId,\n            calcSteps: getSteps(),\n            calcLinkIds: calcChain?.linkIds,\n            lineColor: getLineColor,\n            chainLineColor: getChainLineColor,\n            currentLinkId,\n            sequence,\n            chain,\n            chainName: chain?.chain.name || \"\",\n            sequenceName: sequence?.sequenceTO.name || \"\",\n        };\n    }\n;\n","import { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport React, { FunctionComponent } from \"react\";\nimport { ElementSize } from \"../../../style/Theme\";\nimport { DavitIconButton } from \"../../atomic\";\nimport { DavitIcons } from \"../../atomic/icons/IconSet\";\nimport \"./DavitTable.css\";\n\nexport interface DavitTableProps {\n    header: string[];\n    bodyData: DavitTableRowData[];\n    addFunction?: () => void;\n    tableHeight: number;\n}\n\nexport interface DavitTableAction {\n    callback: () => void;\n    icon: IconDefinition;\n    disable?: boolean;\n}\n\nexport interface DavitTableRowData {\n    data: (string | JSX.Element)[];\n    trClass: string;\n    actions: DavitTableAction[];\n    onClick?: () => void;\n}\n\nexport const DavitTable: FunctionComponent<DavitTableProps> = (props) => {\n    const {header, bodyData, addFunction, tableHeight} = props;\n\n    const mapValue = (value: string | JSX.Element, index: number) => {\n        return (\n            <td id={index.toString()}\n                key={index}\n            >\n                {value}\n            </td>\n        );\n    };\n\n    const createButton = (action: DavitTableAction, key: number) => {\n        return <DavitIconButton iconName={action.icon}\n                                size={ElementSize.small}\n                                className={\"margin-right-xs\"}\n                                onClick={action.callback}\n                                key={key}\n                                disabled={action.disable}\n        />;\n    };\n\n    const createRow = (data: DavitTableRowData, index: number) => {\n        return (\n            <tr key={index}\n                className={data.trClass}\n                onClick={data.onClick}\n            >\n                {data.data.map(mapValue)}\n                {data.actions.length > 0 &&\n                <td className={\"flex flex-end\"}>{data.actions.map((action, index) => createButton(action, index))}</td>}\n            </tr>\n        );\n    };\n\n    const fillWithEmptyRows = () => {\n        let filledRows = bodyData.length;\n        addFunction && filledRows++;\n        const numberOfColumns = bodyData[0]?.data.length || 1;\n        const emptyRows = [];\n        for (let i = filledRows; i <= 10; i++) {\n            emptyRows.push(createEmptyRow(i.toString(), numberOfColumns, \"carv2Tr\"));\n        }\n        return emptyRows;\n    };\n\n    const createEmptyRow = (key: string, numberOfElements: number, className?: string): JSX.Element => {\n        return (\n            <tr key={key}\n                className={className}\n            >\n                {new Array(numberOfElements).map((_, index) => {\n                    return <td key={index} />;\n                })}\n            </tr>\n        );\n    };\n\n    return (\n        <table>\n            <thead>\n            <tr>{header.map(mapValue)}</tr>\n            </thead>\n            <tbody style={{height: tableHeight}}>\n            {bodyData.map(createRow)}\n            {addFunction && (\n                <tr>\n                    <td>{createButton({icon: DavitIcons.plus, callback: addFunction}, 0)}</td>\n                </tr>\n            )}\n            {fillWithEmptyRows()}\n            </tbody>\n        </table>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./TabFragment.css\";\n\ninterface TabFragmentProps {\n    label: string;\n    isActive: boolean;\n    onClick: () => void;\n}\n\nexport const TabFragment: FunctionComponent<TabFragmentProps> = (props) => {\n    const {label, isActive, onClick} = props;\n    return (\n        <div className={\"no-user-select \" + (isActive ? \"tab activeTabFragment\" : \"tab\")}\n             onClick={onClick}\n        >\n            {label}\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport \"./TabGroupFragment.css\";\n\ninterface TabGroupFragmentProps {\n    label: string;\n    style?: Object;\n}\n\nexport const TabGroupFragment: FunctionComponent<TabGroupFragmentProps> = (props) => {\n    const {label, children, style} = props;\n    return (\n        <div className=\"tab-group\"\n             style={style}\n        >\n            <div className=\"tab-aggregator\">{label}</div>\n            <div className=\"flex\">{children}</div>\n        </div>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { ActiveTab } from \"../presentation/TableModelController\";\nimport { TabFragment } from \"./TabFragment\";\nimport { TabGroupFragment } from \"./TabGroupFragment\";\n\ninterface TabPanelProps {\n    activeTab: ActiveTab;\n    setActiveTab: (newActiveTab: ActiveTab) => void;\n    showChainModelTab: boolean;\n    showSequenceModelTabs: boolean;\n    showCalcChainTab: boolean;\n    showCalcSequenceTab: boolean;\n    showErrorTab: boolean;\n}\n\ninterface TabGroupDefinition {\n    label: string;\n    tabs: TabDefinition[];\n    condition?: boolean;\n}\n\ninterface TabDefinition {\n    label: string;\n    identifier: ActiveTab;\n    condition?: boolean;\n}\n\nexport const TabPanel: FunctionComponent<TabPanelProps> = (props) => {\n    const {\n        activeTab,\n        setActiveTab,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showChainModelTab,\n        showSequenceModelTabs,\n        showErrorTab,\n    } = props;\n\n    const mode: Mode = useSelector(editSelectors.selectMode);\n\n    const getSequenceModelTabGroupDefinition = (): TabGroupDefinition => {\n        const tabs: TabDefinition[] = [\n            {\n                label: \"Decision\",\n                identifier: ActiveTab.decision,\n            },\n            {\n                label: \"Steps\",\n                identifier: ActiveTab.step,\n            },\n        ];\n\n        if (mode === Mode.EDIT_SEQUENCE_STEP || mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            tabs.push({label: \"Actions\", identifier: ActiveTab.action});\n        }\n\n        if (mode === Mode.EDIT_SEQUENCE_DECISION || mode === Mode.EDIT_SEQUENCE_DECISION_CONDITION) {\n            tabs.push({label: \"Condition\", identifier: ActiveTab.condition});\n        }\n\n        return {\n            label: \"Sequence Model\",\n            condition: showSequenceModelTabs,\n            tabs: tabs,\n        };\n    };\n\n    const tabDefinitions: TabGroupDefinition[] = [\n        {\n            label: \"Calculated\",\n            condition: showCalcChainTab || showCalcSequenceTab,\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chain,\n                    condition: showCalcChainTab,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequence,\n                    condition: showCalcSequenceTab,\n                },\n                {\n                    label: \"Error Actions\",\n                    identifier: ActiveTab.errorAction,\n                    condition: showErrorTab,\n                },\n            ],\n        },\n        {\n            label: \"Chain Model\",\n            condition: showChainModelTab,\n            tabs: [\n                {\n                    label: \"Decision\",\n                    identifier: ActiveTab.chainDecisions,\n                },\n                {\n                    label: \"Links\",\n                    identifier: ActiveTab.chainLinks,\n                },\n            ],\n        },\n        getSequenceModelTabGroupDefinition(),\n        {\n            label: \"Models\",\n            tabs: [\n                {\n                    label: \"Chain\",\n                    identifier: ActiveTab.chainModel,\n                },\n                {\n                    label: \"Sequence\",\n                    identifier: ActiveTab.sequenceModels,\n                },\n                {\n                    label: \"Data Setup\",\n                    identifier: ActiveTab.dataSetup,\n                },\n            ],\n        },\n    ];\n\n    const mapTabGroups = (tabGroup: TabGroupDefinition, index: number) => {\n        return (\n            (tabGroup.condition === undefined || tabGroup.condition) && (\n                <TabGroupFragment label={tabGroup.label}\n                                  key={index}\n                >\n                    {tabGroup.tabs.map(\n                        (tab: any, index) =>\n                            (tab.condition === undefined || tab.condition) && (\n                                <TabFragment\n                                    label={tab.label}\n                                    isActive={activeTab === tab.identifier}\n                                    onClick={() => setActiveTab(tab.identifier)}\n                                    key={index}\n                                />\n                            ),\n                    )}\n                </TabGroupFragment>\n            )\n        );\n    };\n\n    const getTabsKey = () => {\n        let key = showCalcChainTab ? \"chain\" : \"\";\n        key += showSequenceModelTabs ? \"seqModel\" : \"\";\n        key += showChainModelTab ? \"chainModel\" : \"\";\n        key += showCalcSequenceTab ? \"seq\" : \"\";\n        return key;\n    };\n\n    return (\n        <div className=\"tabs\"\n             key={getTabsKey()}\n        >\n            {tabDefinitions.map(mapTabGroups)}\n        </div>\n    );\n};\n","import { useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\n\nexport const useGetCalcErrorActionsTableData = (errorActions: ActionTO[]) => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n\n    const bodyData: DavitTableRowData[] = errorActions.map((action) => {\n        const dataName: string = getDataName(action, datas);\n        const toActorName: string =\n            actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n        const fromActorName: string =\n            actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n        return createCalcErrorActionColumn(action.actionType, dataName, toActorName, fromActorName);\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\"];\n\nconst createCalcErrorActionColumn = (\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n): DavitTableRowData => {\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [],\n    };\n};\n\n// ------------------------------------------------ Private ---------------------------------------------------\n\nconst getDataName = (action: ActionTO, datas: DataCTO[]): string => {\n    let data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n    let dataName: string = data ? data.data.name : \"Could not find Data!\";\n\n    if (data !== undefined && action.actionType === ActionType.ADD) {\n        dataName =\n            dataName + \": \" + data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n            \"Could not find instance!\";\n    }\n\n    return dataName;\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { CalcChain, CalcChainLink } from \"../../../../../services/SequenceChainService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcLinkTableData = (calcChain: CalcChain | null) => {\n    const dispatch = useDispatch();\n    const chainIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentLinkIndex);\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = calcChain.calcLinks.map((link, index) => {\n            const onClickRow = () => dispatch(SequenceModelActions.setCurrentLinkIndex(index));\n            return createCalcLinkColumn(link, index, onClickRow, chainIndex);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"SEQUENCE\", \"DATASETUP\", \"TERMINAL\"];\n\nconst createCalcLinkColumn = (\n    link: CalcChainLink,\n    index: number,\n    onClick: () => void,\n    chainIndex: number,\n): DavitTableRowData => {\n    const name: string = link.name || \"Link name not found!\";\n    const sequenceName: string = link.sequence.sequenceModel?.sequenceTO.name || \"Sequence name not found!\";\n    const dataSetupName: string = link.sequenceConfiguration.name || \"Sequence Configuration name not found!\";\n    let trClass = \"carv2Tr\";\n    if (index === chainIndex) {\n        trClass = \"carv2TrMarked\";\n    }\n    return {\n        trClass: \"clickable \" + trClass,\n        data: [(index + 1).toString(), name, sequenceName, dataSetupName, link.sequence.terminal.type.toString()],\n        actions: [],\n        onClick,\n    };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { Terminal } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { CalculatedStep } from \"../../../../../services/SequenceService\";\nimport { SequenceModelActions, sequenceModelSelectors } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetCalcSequenceTableData = (calcSteps: CalculatedStep[], selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    const terminalStep: Terminal | null = useSelector(sequenceModelSelectors.selectTerminalStep);\n    const loopStepStartIndex: number | null = useSelector(sequenceModelSelectors.selectLoopStepStartIndex);\n\n    const stepIndex: number | null = useSelector(sequenceModelSelectors.selectCurrentStepIndex);\n\n    const bodyData: DavitTableRowData[] = calcSteps.map((step, index) => {\n        const onClick = () => dispatch(SequenceModelActions.setCurrentStepIndex(index));\n\n        return createCalcSequenceStepColumn(\n            selectedSequence,\n            step,\n            index,\n            stepIndex,\n            loopStepStartIndex,\n            onClick,\n            terminalStep,\n        );\n    });\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"INDEX\", \"NAME\", \"TYPE\", \"ERROR\"];\n\nconst createCalcSequenceStepColumn = (\n    selectedSequence: SequenceCTO | null,\n    step: CalculatedStep,\n    index: number,\n    stepIndex: number,\n    loopStepStartIndex: number | null,\n    clickEvent: () => void,\n    terminal: Terminal | null,\n): DavitTableRowData => {\n    let trClass: string = loopStepStartIndex && loopStepStartIndex <= index ? \"carv2TrTerminalError\" : \"carv2Tr\";\n\n    if (step.type === \"TERMINAL\" && terminal) {\n        trClass = \"carv2TrTerminal\" + terminal.type;\n    }\n\n    if (index === stepIndex) {\n        if (step.type === \"TERMINAL\") {\n            trClass = trClass + \" davitTrTerminalMarked\";\n        } else {\n            trClass = \"carv2TrMarked\";\n        }\n    }\n\n    const hasError = step.errors.length > 0;\n\n    return {\n        actions: [],\n        data: [\n            index.toString(),\n            getModelElementName(step, selectedSequence, terminal),\n            step.type,\n            hasError ? <FontAwesomeIcon icon={DavitIcons.warning} /> : \"\",\n        ],\n        trClass: \"clickable \" + trClass,\n        onClick: clickEvent,\n    };\n};\n\nfunction getModelElementName(step: CalculatedStep, selectSequence: SequenceCTO | null, terminal: Terminal | null) {\n    switch (step.type) {\n        case \"STEP\":\n            return (\n                selectSequence?.sequenceStepCTOs.find((item) => item.sequenceStepTO.id === step.modelElementFk)\n                    ?.sequenceStepTO.name || \"Step not found!\"\n            );\n        case \"DECISION\":\n            return (\n                selectSequence?.decisions.find((item) => item.id === step.modelElementFk)?.name || \"Decision not found!\"\n            );\n        case \"INIT\":\n            return \"Initial step\";\n        case \"TERMINAL\":\n            return terminal?.type || `Terminal name not found!`;\n        default:\n            return `ModelElement type has type ${step.type} which is not known`;\n    }\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainTO } from \"../../../../../dataAccess/access/to/ChainTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetChainModelsTableData = (chainModels: ChainTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[] = [];\n    if (chainModels) {\n        bodyData = chainModels.map((chain) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChain(chain));\n            const onClickSelect = () => {\n                dispatch(SequenceModelActions.setCurrentChain(chain));\n                dispatch(EditActions.setMode.view());\n            };\n            return createChainModelColumn(chain, onClickEdit, onClickSelect);\n        });\n    }\n    return {\n        bodyData,\n        header,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createChainModelColumn = (\n    chain: ChainTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = chain.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { ChainLinkCTO } from \"../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { GoToChain, GoToTypesChain, IntermediateChain } from \"../../../../dataAccess/access/types/GoToTypeChain\";\n\nexport function getChainGotoName(\n    goto: GoToChain,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypesChain.ERROR:\n        case GoToTypesChain.FIN:\n            gotoName = goto.type;\n            break;\n        case GoToTypesChain.LINK:\n            gotoName =\n                selectedChainlinks.find((link) => link.chainLink.id === (goto as IntermediateChain).id)?.chainLink\n                    .name || gotoName;\n            break;\n        case GoToTypesChain.DEC:\n            gotoName =\n                selectedChainDecisions.find((dec) => dec.id === (goto as IntermediateChain).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { CalcChain } from \"../../../../../services/SequenceChainService\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainDecisionTableData = (\n    calcChain: CalcChain | null,\n    selectedChainLinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (calcChain !== null) {\n        bodyData = selectedChainDecisions.map((decision) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editChainDecision(decision));\n            return createChainDecisionColumn(decision, selectedChainLinks, selectedChainDecisions, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\"];\n\nconst createChainDecisionColumn = (\n    decision: ChainDecisionTO,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = decision.name;\n    const ifgoto: string = getChainGotoName(decision.ifGoTo, selectedChainlinks, selectedChainDecisions);\n    const elsegoto: string = getChainGotoName(decision.elseGoTo, selectedChainlinks, selectedChainDecisions);\n    const trClass = \"carv2Tr\";\n\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgoto, elsegoto],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { ChainDecisionTO } from \"../../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { getChainGotoName } from \"../../util/TableUtil\";\n\nexport const useGetModelChainLinkTableData = (\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[];\n    bodyData = selectedChainlinks.map((link) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editChainLink(link.chainLink));\n        return createLinkColumn(link, selectedChainlinks, selectedChainDecisions, onClickEdit);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"SEQUENCE\", \"DATASETUP\", \"GOTO\", \"ACTIONS\", \"START\"];\n\nconst createLinkColumn = (\n    link: ChainLinkCTO,\n    selectedChainlinks: ChainLinkCTO[],\n    selectedChainDecisions: ChainDecisionTO[],\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name: string = link.chainLink.name;\n    const sequenceName: string = link.sequence.sequenceTO.name;\n    const dataSetupName: string = link.sequenceConfiguration.name;\n    const gotoName: string = getChainGotoName(link.chainLink.goto, selectedChainlinks, selectedChainDecisions);\n    const root: string = link.chainLink.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, sequenceName, dataSetupName, gotoName, root],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceConfigurationTO } from \"../../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetDataSetupTableData = (dataSetups: SequenceConfigurationTO[]) => {\n    const dispatch = useDispatch();\n    let bodyData: DavitTableRowData[];\n    bodyData = dataSetups.map((dataSetup) => {\n        const onClickEdit = () => dispatch(EditActions.setMode.editSequenceConfiguration(dataSetup.id));\n        const onClickSelect = () => {\n            dispatch(SequenceModelActions.setCurrentSequenceConfigurationById(dataSetup.id));\n            dispatch(EditActions.setMode.view());\n        };\n        return createModelDataSetupColumn(dataSetup, onClickEdit, onClickSelect);\n    });\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createModelDataSetupColumn = (\n    dataSetup: SequenceConfigurationTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name: string = dataSetup.name;\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        trClass,\n        data: [name],\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableAction, DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceTO } from \"../../../../../dataAccess/access/to/SequenceTO\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\n\nexport const useGetSequenceModelsTableBody = (sequences: SequenceTO[]) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (sequences) {\n        bodyData = sequences.map((sequence) => {\n            const selectAction = () => {\n                dispatch(SequenceModelActions.setCurrentSequenceById(sequence.id));\n                dispatch(EditActions.setMode.view());\n            };\n            const editAction = () => dispatch(EditActions.setMode.editSequence(sequence.id));\n\n            return createSequenceModelColumn(sequence, editAction, selectAction);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"ACTIONS\"];\n\nconst createSequenceModelColumn = (\n    sequence: SequenceTO,\n    editCallback: () => void,\n    selectCallback: () => void,\n): DavitTableRowData => {\n    const name = sequence.name;\n    const trClass = \"carv2Tr\";\n    const editAction: DavitTableAction = {icon: DavitIcons.wrench, callback: editCallback};\n    const selectAction: DavitTableAction = {icon: DavitIcons.handPointer, callback: selectCallback};\n\n    return {\n        data: [name],\n        trClass: trClass,\n        actions: [editAction, selectAction],\n    };\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { ConditionTO } from \"../../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { EditActions, editSelectors } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { EditDecision } from \"../../../../../slices/thunks/DecisionThunks\";\n\nexport const useGetModelSequenceConditionTableData = (\n    decision: DecisionTO | null,\n    condition: ConditionTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n\n    const conditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n\n    let decisionToShow: DecisionTO | null = decision;\n\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n\n    let bodyData: DavitTableRowData[] = [];\n\n    if (condition !== null) {\n        decisionToShow = EditDecision.find(condition.decisionFk);\n    }\n\n    if (decisionToShow !== null) {\n        bodyData = decisionToShow.conditions.map((condition) => {\n            const actorName: string =\n                actors.find((actor) => actor.actor.id === condition.actorFk)?.actor.name || \"Could not find actor\";\n\n            const dataCTO: DataCTO | undefined = datas.find((data) => data.data.id === condition.dataFk);\n\n            let dataName: string = \"Could not find data\";\n            let instanceName: string = \"Could not find data\";\n\n            if (dataCTO) {\n                dataName = dataCTO?.data.name || \"Could not find data\";\n                instanceName =\n                    dataCTO?.data.instances.find((instance) => instance.id === condition.instanceFk)?.name ||\n                    \"Could not find instance\";\n            }\n\n            const onClickEdit = () => dispatch(EditActions.setMode.editCondition(decisionToShow!, condition));\n\n            return createConditionColumn(\n                actorName,\n                dataName,\n                instanceName,\n                onClickEdit,\n                condition.id === conditionToEdit?.id,\n            );\n        });\n    }\n\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"ACTOR\", \"DATA\", \"INSTANCE\", \"ACTIONS\"];\n\nconst createConditionColumn = (\n    actorName: string,\n    dataName: string,\n    instanceName: string,\n    editCallback: () => void,\n    marked?: boolean,\n): DavitTableRowData => {\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [actorName, dataName, instanceName],\n        actions: [editAction],\n    };\n};\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetModelSequenceDecisionTableData = (selectedSequence: SequenceCTO | null) => {\n    const dispatch = useDispatch();\n\n    let bodyData: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        bodyData = selectedSequence.decisions.map((dec) => {\n            const onClickEdit = () => dispatch(EditActions.setMode.editDecision(dec));\n            return createDecisionColumn(dec, selectedSequence, onClickEdit);\n        });\n    }\n    return {\n        header,\n        bodyData,\n    };\n};\n\nconst header = [\"NAME\", \"IF GOTO\", \"ELSE GOTO\", \"ACTIONS\", \"START\"];\n\nconst createDecisionColumn = (\n    decision: DecisionTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = decision.name;\n    const ifgotoName: string = getGotoName(\n        decision.ifGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const elsegotoName: string = getGotoName(\n        decision.elseGoTo,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const root: string = decision.root ? \"start\" : \"\";\n    const trClass = \"carv2Tr\";\n    const editAction = {icon: DavitIcons.wrench, callback: editCallback};\n\n    return {\n        trClass,\n        data: [name, ifgotoName, elsegotoName, root],\n        actions: [editAction],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { SequenceCTO } from \"../../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { DecisionTO } from \"../../../../../dataAccess/access/to/DecisionTO\";\nimport { GoTo, GoToTypes, Intermediate } from \"../../../../../dataAccess/access/types/GoToType\";\nimport { EditActions } from \"../../../../../slices/EditSlice\";\n\nexport const useGetStepTableData = (\n    selectedSequence: SequenceCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const dispatch = useDispatch();\n    let list: DavitTableRowData[] = [];\n    if (selectedSequence !== null) {\n        list = selectedSequence.sequenceStepCTOs.map((step) => {\n            const editCallback = () => dispatch(EditActions.setMode.editStep(step));\n            return createModelStepColumn(step, selectedSequence, editCallback);\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"NAME\", \"GOTO\", \"START\", \"ACTIONS\"];\n\nconst createModelStepColumn = (\n    step: SequenceStepCTO,\n    selectedSequence: SequenceCTO,\n    editCallback: () => void,\n): DavitTableRowData => {\n    const name = step.sequenceStepTO.name;\n    const gotoName: string = getGotoName(\n        step.sequenceStepTO.goto,\n        selectedSequence?.sequenceStepCTOs || [],\n        selectedSequence?.decisions || [],\n    );\n    const start: string = step.sequenceStepTO.root ? \"start\" : \"\";\n\n    const trClass = \"carv2Tr\";\n\n    return {\n        data: [name, gotoName, start],\n        trClass,\n        actions: [{icon: DavitIcons.wrench, callback: editCallback}],\n    };\n};\n\nfunction getGotoName(goto: GoTo, steps: SequenceStepCTO[], decisions: DecisionTO[]) {\n    let gotoName: string = \"could not find goto\";\n    switch (goto.type) {\n        case GoToTypes.ERROR:\n        case GoToTypes.FIN:\n        case GoToTypes.IDLE:\n            gotoName = goto.type;\n            break;\n        case GoToTypes.STEP:\n            gotoName =\n                steps.find((step) => step.sequenceStepTO.id === (goto as Intermediate).id)?.sequenceStepTO.name ||\n                gotoName;\n            break;\n        case GoToTypes.DEC:\n            gotoName = decisions.find((dec) => dec.id === (goto as Intermediate).id)?.name || gotoName;\n            break;\n    }\n    return gotoName;\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { DavitIcons } from \"../../../../../components/atomic/icons/IconSet\";\nimport { DavitTableRowData } from \"../../../../../components/organisms/table/DavitTable\";\nimport { ActorCTO } from \"../../../../../dataAccess/access/cto/ActorCTO\";\nimport { DataCTO } from \"../../../../../dataAccess/access/cto/DataCTO\";\nimport { SequenceStepCTO } from \"../../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../../dataAccess/access/to/ActionTO\";\nimport { ActionType } from \"../../../../../dataAccess/access/types/ActionType\";\nimport { EditActions, editSelectors, Mode } from \"../../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../../slices/MasterDataSlice\";\nimport { SequenceModelActions } from \"../../../../../slices/SequenceModelSlice\";\nimport { EditStep } from \"../../../../../slices/thunks/StepThunks\";\nimport { DavitUtil } from \"../../../../../utils/DavitUtil\";\n\nexport const useGetStepActionTableData = (\n    selectedStep: SequenceStepCTO | null,\n): { header: string[]; bodyData: DavitTableRowData[] } => {\n    const datas: DataCTO[] = useSelector(masterDataSelectors.selectDatas);\n    const actors: ActorCTO[] = useSelector(masterDataSelectors.selectActors);\n    const actionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const dispatch = useDispatch();\n\n    let list: DavitTableRowData[] = [];\n\n    const switchIndexesAndSave = (indexToUpdate: number, step: SequenceStepCTO, increment: boolean) => {\n        const newIndex: number = increment ? indexToUpdate + 1 : indexToUpdate - 1;\n        const copyStep: SequenceStepCTO = DavitUtil.deepCopy(step);\n\n        const action1: ActionTO = copyStep.actions[indexToUpdate];\n        action1.index = newIndex;\n        const action2: ActionTO = copyStep.actions[newIndex];\n        action2.index = indexToUpdate;\n        copyStep.actions[indexToUpdate] = action2;\n        copyStep.actions[newIndex] = action1;\n\n        // save step\n        dispatch(EditStep.save(copyStep));\n\n        // load sequence from backend\n        dispatch(SequenceModelActions.setCurrentSequenceById(copyStep.sequenceStepTO.sequenceFk));\n\n        // update current step if object to edit\n        if (mode === Mode.EDIT_SEQUENCE_STEP) {\n            dispatch(EditStep.update(copyStep));\n        }\n    };\n\n    if (selectedStep !== null) {\n        list = selectedStep.actions.map((action, index) => {\n            const editCallback = () => {\n                dispatch(EditActions.setMode.editAction(action));\n            };\n\n            const indexIncrementCallback = () => {\n                if (index < selectedStep.actions.length - 1) {\n                    switchIndexesAndSave(index, selectedStep, true);\n                }\n            };\n\n            const indexDecrementCallback = () => {\n                if (index > 0) {\n                    switchIndexesAndSave(index, selectedStep, false);\n                }\n            };\n\n            const data: DataCTO | undefined = datas.find((data) => data.data.id === action.dataFk);\n\n            let dataName: string = \"Could not find data name\";\n\n            if (data) {\n                dataName = data.data.name;\n                if (action.actionType === ActionType.ADD) {\n                    dataName =\n                        dataName +\n                        \": \" +\n                        data.data.instances.find((instance) => instance.id === action.instanceFk)?.name ||\n                        \"Could not find instance name\";\n                }\n            }\n\n            const toActorName: string =\n                actors.find((actor) => actor.actor.id === action.receivingActorFk)?.actor.name || \"\";\n\n            const fromActorName: string =\n                actors.find((actor) => actor.actor.id === action.sendingActorFk)?.actor.name || \"\";\n\n            return createModelActionColumn(\n                index,\n                action.actionType,\n                dataName,\n                toActorName,\n                fromActorName,\n                editCallback,\n                indexIncrementCallback,\n                indexDecrementCallback,\n                selectedStep.actions.length,\n                action.id === actionToEdit?.id,\n            );\n        });\n    }\n    return {\n        header,\n        bodyData: list,\n    };\n};\n\nconst header = [\"INDEX\", \"TYPE\", \"DATA\", \"TARGET\", \"SOURCE\", \"ACTIONS\"];\n\nconst createModelActionColumn = (\n    arrayIndex: number,\n    actionType: ActionType,\n    dataName: string,\n    toActorName: string,\n    fromActorName: string,\n    editCallback: () => void,\n    indexIncrementCallback: () => void,\n    indexDecrementCallback: () => void,\n    arrayLength: number,\n    marked?: boolean,\n): DavitTableRowData => {\n    const actionIndex: string = arrayIndex.toString();\n    const trClass = marked ? \"carv2TrMarked\" : \"carv2Tr\";\n\n    return {\n        data: [actionIndex, actionType, dataName, toActorName, fromActorName],\n        trClass,\n        actions: [\n            {icon: DavitIcons.angleUp, callback: indexDecrementCallback, disable: arrayIndex === 0},\n            {icon: DavitIcons.angleDown, callback: indexIncrementCallback, disable: arrayIndex >= arrayLength - 1},\n            {icon: DavitIcons.wrench, callback: editCallback},\n        ],\n    };\n};\n","/* eslint-disable react/display-name */\nimport React, { FunctionComponent, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DavitTable } from \"../../../../components/organisms/table/DavitTable\";\nimport { ChainLinkCTO } from \"../../../../dataAccess/access/cto/ChainLinkCTO\";\nimport { SequenceCTO } from \"../../../../dataAccess/access/cto/SequenceCTO\";\nimport { SequenceStepCTO } from \"../../../../dataAccess/access/cto/SequenceStepCTO\";\nimport { ActionTO } from \"../../../../dataAccess/access/to/ActionTO\";\nimport { ChainDecisionTO } from \"../../../../dataAccess/access/to/ChainDecisionTO\";\nimport { ChainTO } from \"../../../../dataAccess/access/to/ChainTO\";\nimport { ConditionTO } from \"../../../../dataAccess/access/to/ConditionTO\";\nimport { DecisionTO } from \"../../../../dataAccess/access/to/DecisionTO\";\nimport { SequenceConfigurationTO } from \"../../../../dataAccess/access/to/SequenceConfigurationTO\";\nimport { SequenceTO } from \"../../../../dataAccess/access/to/SequenceTO\";\nimport { CalcChain } from \"../../../../services/SequenceChainService\";\nimport { CalculatedStep } from \"../../../../services/SequenceService\";\nimport { editSelectors, Mode } from \"../../../../slices/EditSlice\";\nimport { masterDataSelectors } from \"../../../../slices/MasterDataSlice\";\nimport { sequenceModelSelectors } from \"../../../../slices/SequenceModelSlice\";\nimport { DavitUtil } from \"../../../../utils/DavitUtil\";\nimport { TabPanel } from \"../fragments/TabPanel\";\nimport { useGetCalcErrorActionsTableData } from \"../tables/calculated/CalcErrorActions\";\nimport { useGetCalcLinkTableData } from \"../tables/calculated/CalcLink\";\nimport { useGetCalcSequenceTableData } from \"../tables/calculated/CalcSequence\";\nimport { useGetChainModelsTableData } from \"../tables/model/ModelChain\";\nimport { useGetModelChainDecisionTableData } from \"../tables/model/ModelChainDecision\";\nimport { useGetModelChainLinkTableData } from \"../tables/model/ModelChainLink\";\nimport { useGetDataSetupTableData } from \"../tables/model/ModelDataSetup\";\nimport { useGetSequenceModelsTableBody } from \"../tables/model/ModelSequence\";\nimport { useGetModelSequenceConditionTableData } from \"../tables/model/ModelSequenceCondition\";\nimport { useGetModelSequenceDecisionTableData } from \"../tables/model/ModelSequenceDecision\";\nimport { useGetStepTableData } from \"../tables/model/ModelSequenceStep\";\nimport { useGetStepActionTableData } from \"../tables/model/ModelSequenceStepAction\";\n\ninterface TableModelControllerProps {\n}\n\nexport enum ActiveTab {\n    condition = \"condition\",\n    action = \"action\",\n    errorAction = \"errorAction\",\n    step = \"step\",\n    decision = \"decision\",\n    sequence = \"sequence\",\n    chain = \"chain\",\n    chainLinks = \"chainLinks\",\n    chainDecisions = \"chainDecisions\",\n    sequenceModels = \"sequenceModels\",\n    chainModel = \"chainModels\",\n    dataSetup = \"dataSetup\",\n}\n\nexport const TableModelController: FunctionComponent<TableModelControllerProps> = () => {\n    const {\n        showChainModelTab,\n        showSequenceModelTabs,\n        showCalcChainTab,\n        showCalcSequenceTab,\n        showErrorTab,\n        activeTab,\n        setActiveTab,\n        activeTableData,\n        tableHeight,\n        parentRef,\n    } = useSequenceTableViewModel();\n\n    return (\n        <div className={\"sequenceTable padding-tiny\"}\n             ref={parentRef}\n        >\n            <div className=\"tableBorder\">\n                <TabPanel\n                    showChainModelTab={showChainModelTab}\n                    showSequenceModelTabs={showSequenceModelTabs}\n                    showCalcChainTab={showCalcChainTab}\n                    showCalcSequenceTab={showCalcSequenceTab}\n                    activeTab={activeTab}\n                    setActiveTab={setActiveTab}\n                    showErrorTab={showErrorTab}\n                />\n                <DavitTable {...activeTableData} tableHeight={tableHeight} />\n            </div>\n        </div>\n    );\n};\n\nconst useSequenceTableViewModel = () => {\n    const mode: Mode = useSelector(editSelectors.selectMode);\n    const selectedSequence: SequenceCTO | null = useSelector(sequenceModelSelectors.selectSequence);\n    const selectedStep: SequenceStepCTO | null = useSelector(editSelectors.selectStepToEdit);\n    const calcSteps: CalculatedStep[] = useSelector(sequenceModelSelectors.selectCalcSteps);\n    const calcChain: CalcChain | null = useSelector(sequenceModelSelectors.selectCalcChain);\n    const sequences: SequenceTO[] = useSelector(masterDataSelectors.selectSequences);\n    const dataSetups: SequenceConfigurationTO[] = useSelector(masterDataSelectors.selectSequenceConfigurations);\n    const selectedChain: ChainTO | null = useSelector(sequenceModelSelectors.selectChain);\n    const chainModels: ChainTO[] = useSelector(masterDataSelectors.selectChains);\n    const selectedChainlinks: ChainLinkCTO[] = useSelector(sequenceModelSelectors.selectCurrentChainLinks);\n    const selectedChainDecisions: ChainDecisionTO[] = useSelector(sequenceModelSelectors.selectCurrentChainDecisions);\n    const selectedActionToEdit: ActionTO | null = useSelector(editSelectors.selectActionToEdit);\n    const selectedDecisionToEdit: DecisionTO | null = useSelector(editSelectors.selectDecisionToEdit);\n    const selectedConditionToEdit: ConditionTO | null = useSelector(editSelectors.selectConditionToEdit);\n    const selectedErrors: ActionTO[] = useSelector(sequenceModelSelectors.selectErrors);\n\n    const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.sequence);\n\n    useEffect(() => {\n        let newActiveTab: ActiveTab | undefined = undefined;\n        switch (mode) {\n            case Mode.VIEW:\n                if (selectedChain) {\n                    newActiveTab = ActiveTab.chain;\n                } else {\n                    newActiveTab = ActiveTab.sequence;\n                }\n                break;\n            case Mode.EDIT_CHAIN:\n                newActiveTab = ActiveTab.chainModel;\n                break;\n            case Mode.EDIT_CHAIN_DECISION:\n            case Mode.EDIT_CHAIN_DECISION_CONDITION:\n                newActiveTab = ActiveTab.chainDecisions;\n                break;\n            case Mode.EDIT_SEQUENCE:\n                newActiveTab = ActiveTab.step;\n                break;\n            case Mode.EDIT_SEQUENCE_DECISION:\n            case Mode.EDIT_SEQUENCE_DECISION_CONDITION:\n                newActiveTab = ActiveTab.condition;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP:\n                newActiveTab = ActiveTab.action;\n                break;\n            case Mode.EDIT_SEQUENCE_STEP_ACTION:\n                newActiveTab = ActiveTab.action;\n                break;\n        }\n        if (newActiveTab) {\n            setActiveTab(newActiveTab);\n        }\n    }, [mode, selectedChain]);\n\n    const dataSetupData = useGetDataSetupTableData(dataSetups);\n    const modelSequenceData = useGetSequenceModelsTableBody(sequences);\n    const modelSequenceDecisionData = useGetModelSequenceDecisionTableData(selectedSequence);\n    const modelSequenceConditionData = useGetModelSequenceConditionTableData(\n        selectedDecisionToEdit,\n        selectedConditionToEdit,\n    );\n    const modelSequenceStepData = useGetStepTableData(selectedSequence);\n\n    const getStep = (): SequenceStepCTO | null => {\n        let stepToShow: SequenceStepCTO | null = null;\n        /**\n         * In case to edit a action we want to show all other actions containing in the current step to edit.\n         */\n        if (mode === Mode.EDIT_SEQUENCE_STEP_ACTION) {\n            if (selectedActionToEdit) {\n                const step: SequenceStepCTO | undefined = selectedSequence?.sequenceStepCTOs.find(\n                    (step) => step.sequenceStepTO.id === selectedActionToEdit?.sequenceStepFk,\n                );\n                if (step) {\n                    stepToShow = step;\n                }\n            }\n        } else {\n            stepToShow = selectedStep;\n        }\n        return stepToShow;\n    };\n\n    const modelStepActionData = useGetStepActionTableData(getStep());\n\n    const modelChainData = useGetChainModelsTableData(chainModels);\n    const modelChainDecisionData = useGetModelChainDecisionTableData(\n        calcChain,\n        selectedChainlinks,\n        selectedChainDecisions,\n    );\n    const modelChainLinkData = useGetModelChainLinkTableData(selectedChainlinks, selectedChainDecisions);\n    const calcSequenceData = useGetCalcSequenceTableData(calcSteps, selectedSequence);\n    const calcLinkData = useGetCalcLinkTableData(calcChain);\n\n    const calcErrorAction = useGetCalcErrorActionsTableData(selectedErrors);\n\n    const getActiveTableData = () => {\n        switch (activeTab) {\n            case ActiveTab.chain:\n                return calcLinkData;\n            case ActiveTab.chainDecisions:\n                return modelChainDecisionData;\n            case ActiveTab.chainLinks:\n                return modelChainLinkData;\n            case ActiveTab.action:\n                return modelStepActionData;\n            case ActiveTab.step:\n                return modelSequenceStepData;\n            case ActiveTab.decision:\n                return modelSequenceDecisionData;\n            case ActiveTab.condition:\n                return modelSequenceConditionData;\n            case ActiveTab.sequence:\n                return calcSequenceData;\n            case ActiveTab.sequenceModels:\n                return modelSequenceData;\n            case ActiveTab.chainModel:\n                return modelChainData;\n            case ActiveTab.dataSetup:\n                return dataSetupData;\n            case ActiveTab.errorAction:\n                return calcErrorAction;\n            default:\n                return {header: [], bodyData: []};\n        }\n    };\n\n    const parentRef = useRef<HTMLDivElement>(null);\n\n    const [tableHeight, setTabelHeihgt] = useState<number>(0);\n\n    useEffect(() => {\n        const resizeListener = () => {\n            if (parentRef && parentRef.current) {\n                setTabelHeihgt(parentRef.current.offsetHeight - 120);\n            }\n        };\n\n        resizeListener();\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        };\n    }, [parentRef]);\n\n    return {\n        showChainModelTab: !DavitUtil.isNullOrUndefined(selectedChain),\n        showSequenceModelTabs: !DavitUtil.isNullOrUndefined(selectedSequence),\n        showCalcChainTab: !DavitUtil.isNullOrUndefined(calcChain),\n        showCalcSequenceTab: calcSteps.length > 0,\n        showErrorTab: selectedErrors.length > 0,\n        activeTab,\n        setActiveTab,\n        activeTableData: getActiveTableData(),\n        tableHeight,\n        parentRef,\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { HashRouter as BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ErrorNotification } from \"../components/molecules/notifications/ErrorNotification\";\nimport { ControlPanelController } from \"../components/organisms/controllPanel/presentation/ControlPanelController\";\nimport { SidePanelController } from \"../components/organisms/sidePanel/SidePanelController\";\nimport { ActorModelController } from \"../domains/actor/ActorModelController\";\nimport { DataModelController } from \"../domains/datamodel/DataModelController\";\nimport { FlowChartController } from \"../domains/overview/flowChartModel/FlowChartController\";\nimport { TableModelController } from \"../domains/overview/tableModel/presentation/TableModelController\";\nimport { GlobalActions } from \"../slices/GlobalSlice\";\nimport { MasterDataActions } from \"../slices/MasterDataSlice\";\nimport \"./Davit.css\";\n\nexport const ModuleRoutes = {\n    home: \"/\",\n    actor: \"/component\",\n    data: \"/data\",\n    table: \"/table\",\n    flowChart: \"/flowChart\",\n};\n\n// inital data load from backend.\nexport function Davit() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(MasterDataActions.loadAll());\n        dispatch(GlobalActions.loadActorZoomFromBackend());\n        dispatch(GlobalActions.loadDataZoomFromBackend());\n    }, [dispatch]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact\n                       path={ModuleRoutes.home}\n                >\n                    <div className=\"davitGridContainer\">\n                        <ControlPanelController />\n                        <ActorModelController />\n                        <DataModelController />\n                        <SidePanelController />\n                        <FlowChartController />\n                        <TableModelController />\n                        <ErrorNotification />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.actor}\n                >\n                    <div className=\"componentPage\">\n                        <ActorModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.data}\n                >\n                    <div className=\"componentPage\">\n                        <DataModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.table}\n                >\n                    <div className=\"componentPage\">\n                        <TableModelController />\n                    </div>\n                </Route>\n                <Route exact\n                       path={ModuleRoutes.flowChart}\n                >\n                    <div className=\"componentPage\">\n                        <FlowChartController />\n                    </div>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { configureStore, getDefaultMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport { storageMiddleware } from \"./middlewares/StateSync\";\nimport { EditReducer } from \"./slices/EditSlice\";\nimport { globalReducer } from \"./slices/GlobalSlice\";\nimport { MasterDataReducer } from \"./slices/MasterDataSlice\";\nimport { SequenceModelReducer } from \"./slices/SequenceModelSlice\";\nimport { createStorageListener } from \"./utils/StorageListener\";\n\nconst middleware = getDefaultMiddleware().concat(storageMiddleware);\n\nexport const store = configureStore({\n    reducer: {\n        global: globalReducer,\n        masterData: MasterDataReducer,\n        edit: EditReducer,\n        sequenceModel: SequenceModelReducer,\n    },\n    middleware,\n});\n\nwindow.addEventListener(\"storage\", createStorageListener(store));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, any>;\n","import { splitSymbol, storageKey } from \"../middlewares/StateSync\";\n\nexport function createStorageListener(store: any) {\n    return () => {\n        const stringFromStorage: string | null = localStorage.getItem(storageKey);\n        if (stringFromStorage) {\n            const actionString: string = stringFromStorage.split(splitSymbol)[0];\n            const wrappedAction = JSON.parse(actionString);\n            delete wrappedAction.source;\n            store.dispatch(wrappedAction);\n        }\n    };\n}\n","export const storageKey: string = \"redux-local-tab-sync\";\nexport const splitSymbol: string = \"__\";\n\nexport function storageMiddleware() {\n    return (next: any) => (action: any) => {\n        if (!action.source) {\n            const wrappedAction = Object.assign({source: \"another tab\"}, action);\n            localStorage.setItem(storageKey, JSON.stringify(wrappedAction) + splitSymbol + new Date());\n        }\n\n        next(action);\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Davit } from \"./pages/Davit\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\nimport \"./style/index.css\";\nimport { Theme } from \"./style/Theme\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <Davit />\n        </Theme>\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}