# Create a new release with tag vX.Y.Z to start the workflow
#
# Release name examples:
# v1 -> <GitHub PAGES>/v1/**
# v1.2 -> <GitHub PAGES>/v1/**
# v1.23.4 -> <GitHub PAGES>/v1/**
# v1.23.4-HOTFIX -> <GitHub PAGES>/v1/**
# v2 -> <GitHub PAGES>/v2/**
#
name: Deploy to PROD

on:
  release:
    types:
      - created

jobs:
  info:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      validRelease: ${{ steps.version.conclusion }}
    steps:
      - name: Get Version Information
        id: version
        continue-on-error: true
        run: |
          export IS_PRE_RELEASE=$(cat $GITHUB_EVENT_PATH | jq '.release.prerelease' | sed -e 's/^"//' -e 's/"$//')
          echo "Set IS_PRE_RELEASE=$IS_PRE_RELEASE"

          if [ "$IS_PRE_RELEASE" == "false" ]; then exit 0; else exit 1; fi

  build:
    name: Build and Deploy
    needs: [ info ]
    if: needs.info.outputs.validRelease == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.1
        with:
          persist-credentials: false

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Yarn Install
        run: yarn install

      - name: Get Major Version
        run: |
          # Get original release_tag based on the release event payload
          export RELEASE_TAG=$(cat $GITHUB_EVENT_PATH | jq '.release.tag_name' | sed -e 's/^"//' -e 's/"$//')
          echo "Set RELEASE_TAG=$RELEASE_TAG"
          # Split release_tag by ".", e.g. v2.8.1 -> v2
          export MAJOR_VERSION=$(echo $RELEASE_TAG | sed s/\\./\\n/g | head -1)
          echo "Set major_version=$MAJOR_VERSION"
          echo "major_version=$(echo $MAJOR_VERSION)" >> $GITHUB_ENV
      # If the App is not deploy in the Servers root directory React needs to know where it is located.
      #https://create-react-app.dev/docs/deployment/#building-for-relative-paths
      - name: Set package.json homepage
        uses: jossef/action-set-json-field@v1
        with:
          file: package.json
          field: homepage
          value: https://exxcellent.github.io/davit/${{ env.major_version }}

      - name: Yarn Build
        run: yarn build

      - name: Show files
        run: ls -la

      - name: Deploy on PROD
        uses: JamesIves/github-pages-deploy-action@3.7.1
        if: success() # && ( github.ref == 'refs/heads/prod' )
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: build # The folder the action should deploy.
          TARGET_FOLDER: ${{ env.major_version }}
          CLEAN: true # Automatically remove deleted files from the deploy branch
          #COMMIT_MESSAGE: 'Deploy commit $GITHUB_SHA'
          SILENT: false

      - name: Create Release Branch
        uses: peterjgrainger/action-create-branch@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: ${{ env.major_version }}
